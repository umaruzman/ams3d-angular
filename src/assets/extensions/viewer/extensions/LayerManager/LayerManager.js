/*!
 * LMV v7.43.0
 * 
 * Copyright 2021 Autodesk, Inc.
 * All rights reserved.
 * 
 * This computer source code and related instructions and comments are the
 * unpublished confidential and proprietary information of Autodesk, Inc.
 * and are protected under Federal copyright and state trade secret law.
 * They may not be disclosed to, copied or used by any third party without
 * the prior written consent of Autodesk, Inc.
 * 
 * Autodesk Forge Viewer Usage Limitations:
 * 
 * The Autodesk Forge viewer can only be used to view files generated by
 * Autodesk Forge services. The Autodesk Forge Viewer JavaScript must be
 * delivered from an Autodesk hosted URL.
 */
Autodesk.Extensions.LayerManager =
/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./extensions/LayerManager/LayerManager.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./extensions/LayerManager/LayerManager.js":
/*!*************************************************!*\
  !*** ./extensions/LayerManager/LayerManager.js ***!
  \*************************************************/
/*! exports provided: LayerManagerExtension */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayerManagerExtension", function() { return LayerManagerExtension; });
/* harmony import */ var _ui_ViewerLayersPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ui/ViewerLayersPanel */ "./extensions/LayerManager/ui/ViewerLayersPanel.js");


var av = Autodesk.Viewing;
var avu = Autodesk.Viewing.UI;
var avp = Autodesk.Viewing.Private;

/**
                                     * Use its `activate()` method to open the LayersPanel UI.
                                     * Layers are usually present in 2D models, but some 3D models may support
                                     * layers as well, for example: AutoCAD.
                                     *
                                     * The extension id is: `Autodesk.LayerManager`
                                     *
                                     * @param {Viewer3D} viewer - Viewer instance
                                     * @param {object} options - Configurations for the extension
                                     * @example 
                                     * viewer.loadExtension('Autodesk.LayerManager')
                                     * @memberof Autodesk.Viewing.Extensions
                                     * @alias Autodesk.Viewing.Extensions.LayerManagerExtension
                                     * @see {@link Autodesk.Viewing.Extension} for common inherited methods.
                                     * @class
                                     */
function LayerManagerExtension(viewer, options) {
  av.Extension.call(this, viewer, options);
  this.viewer = viewer;
  this.options = options;
  this.name = "layermanager";

  // event callbacks
  this.onModelLayersInit = this.onModelLayersInit.bind(this);
  this.onModelAdded = this.onModelAdded.bind(this);

  // ui
  this.layersPanel = null;
}
LayerManagerExtension.prototype = Object.create(av.Extension.prototype);
LayerManagerExtension.prototype.constructor = LayerManagerExtension;

var proto = LayerManagerExtension.prototype;

/**
                                              * Invoked by the Viewer when when loading the extension.
                                              *
                                              * @returns {boolean} true if the extension is loaded successfully.
                                              */
proto.load = function () {
  this.viewer.addEventListener(av.MODEL_ADDED_EVENT, this.onModelAdded);
  if (this.viewer.model) {
    this.onModelAdded({ model: this.viewer.model });
  }

  return true;
};

/**
    * Invoked by the Viewer when when unloading the extension.
    */
proto.unload = function () {
  this.destroyUI();

  this.viewer.removeEventListener(av.MODEL_LAYERS_LOADED_EVENT, this.onModelLayersInit);
  this.viewer.removeEventListener(av.MODEL_ADDED_EVENT, this.onModelAdded);

  return true;
};

proto.addToolbarButton = function () {var _this = this;
  if (this.viewer.settingsTools.layerButton) {
    if (this.layersPanel) {
      var isVisible = this.viewer.settingsTools.layerButton.getState() === avu.Button.State.ACTIVE;
      this.layersPanel.setVisible(isVisible);
    }
    return;
  }

  var layerButton = new avu.Button('toolbar-layers-tool');
  layerButton.setToolTip('Layer Manager');
  layerButton.setIcon("adsk-icon-layers");
  layerButton.onClick = function () {
    // Toggle
    _this.layersPanel.setVisible(!_this.layersPanel.isVisible());
    avp.analytics.track('viewer.layers', {
      from: 'Panel',
      action: 'View List' });

  };

  var index = this.viewer.settingsTools.indexOf('toolbar-modelStructureTool');
  index = index !== -1 ? index : 0;

  this.viewer.settingsTools.addControl(layerButton, { index: index + 1 });
  this.viewer.settingsTools.layerButton = layerButton;

};

proto.createUI = function () {
  this.setLayersPanel(new _ui_ViewerLayersPanel__WEBPACK_IMPORTED_MODULE_0__["ViewerLayersPanel"](this.viewer));
  this.addToolbarButton();
};

proto.removeLayersPanel = function () {
  if (this.layersPanel) {
    this.viewer.removePanel(this.layersPanel);

    this.layersPanel.uninitialize();
    this.layersPanel = null;
  }
};

proto.removeToolbarButton = function () {
  if (this.viewer.settingsTools && this.viewer.settingsTools.layerButton) {
    this.viewer.settingsTools.removeControl(this.viewer.settingsTools.layerButton.getId());
    this.viewer.settingsTools.layerButton = null;
  }
};

proto.destroyUI = function () {
  this.removeLayersPanel();
  this.removeToolbarButton();
};

/**
    * Callback function MODEL_ADDED_EVENT
    *
    * @param evt
    * @private
    */
proto.onModelAdded = function (evt) {
  // 2D models are already added through addModel in Viewer3DImpl. Only 3D is deferred to this extension
  // See addModel in ModelLayers.js
  if (evt.model.is3d()) {
    var layers = this.viewer.impl.layers;
    layers && layers.addModel(evt.model);
  }
};

/**
    * @private
    */
proto.onToolbarCreated = function () {
  if (!this.viewer.hasEventListener(av.MODEL_LAYERS_LOADED_EVENT, this.onModelLayersInit)) {
    this.viewer.addEventListener(av.MODEL_LAYERS_LOADED_EVENT, this.onModelLayersInit);
  }
  if (this.viewer.impl.layers && this.viewer.impl.layers.initialized) {
    this.onModelLayersInit();
  }
};

/**
    * Set the layerspanel and initialize it
    *
    * @param {object} layersPanel Instance of ViewerLayersPanel
    * @private
    */
proto.setLayersPanel = function (layersPanel) {var _this2 = this;
  this.layersPanel = layersPanel;
  this.viewer.addPanel(layersPanel);
  layersPanel.addVisibilityListener(function (visible) {
    if (visible) {
      _this2.viewer.onPanelVisible(layersPanel, _this2.viewer);
    }
    _this2.viewer.settingsTools.layerButton.setState(
    visible ? avu.Button.State.ACTIVE : avu.Button.State.INACTIVE);

  });
};

/**
    * Initialize model layers panel
    *
    * @private
    */
proto.onModelLayersInit = function () {
  var layersRoot = this.viewer.impl.layers.getRoot();
  if (layersRoot && layersRoot.childCount > 0) {
    this.removeLayersPanel();
    this.createUI();
  } else {
    this.destroyUI();
  }
};

/**
    * Opens the Layers Panel UI.
    * 
    * @memberof Autodesk.Viewing.Extensions.LayerManagerExtension
    * @alias Autodesk.Viewing.Extensions.LayerManagerExtension#activate
    */
proto.activate = function () {
  if (this.layersPanel) {
    this.layersPanel.setVisible(true);
    return true;
  }

  return false;
};

/**
    * Closes the Layers Panel UI.
    * 
    * @memberof Autodesk.Viewing.Extensions.LayerManagerExtension
    * @alias Autodesk.Viewing.Extensions.LayerManagerExtension#deactivate
    */
proto.deactivate = function () {
  if (this.layersPanel) {
    this.layersPanel.setVisible(false);
  }
  return true;
};

/**
    * Checks whether the Layers Panel UI is opened.
    * 
    * @returns {boolean} true if the Layers Panel UI is currently opened.
    * 
    * @memberof Autodesk.Viewing.Extensions.LayerManagerExtension
    * @alias Autodesk.Viewing.Extensions.LayerManagerExtension#isActive
    */
proto.isActive = function () {
  return !!this.layersPanel && this.layersPanel.isVisible();
};

av.theExtensionManager.registerExtension('Autodesk.LayerManager', LayerManagerExtension);

/***/ }),

/***/ "./extensions/LayerManager/ui/LayersPanel.css":
/*!****************************************************!*\
  !*** ./extensions/LayerManager/ui/LayersPanel.css ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(/*! !../../../node_modules/css-loader!../../../node_modules/sass-loader/dist/cjs.js!./LayersPanel.css */ "./node_modules/css-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/LayerManager/ui/LayersPanel.css");

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(/*! ../../../node_modules/style-loader/lib/addStyles.js */ "./node_modules/style-loader/lib/addStyles.js")(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),

/***/ "./extensions/LayerManager/ui/LayersPanel.js":
/*!***************************************************!*\
  !*** ./extensions/LayerManager/ui/LayersPanel.js ***!
  \***************************************************/
/*! exports provided: LayersPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "LayersPanel", function() { return LayersPanel; });
/* harmony import */ var _LayersPanel_css__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LayersPanel.css */ "./extensions/LayerManager/ui/LayersPanel.css");
/* harmony import */ var _LayersPanel_css__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_LayersPanel_css__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _thirdparty_lodash_lodash_custom__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../thirdparty/lodash/lodash.custom */ "./thirdparty/lodash/lodash.custom.js");
/* harmony import */ var _thirdparty_lodash_lodash_custom__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_thirdparty_lodash_lodash_custom__WEBPACK_IMPORTED_MODULE_1__);



var av = Autodesk.Viewing;
var avu = Autodesk.Viewing.UI;
var avp = Autodesk.Viewing.Private;

var i18n = av.i18n;
var DockingPanel = avu.DockingPanel;
var TreeDelegate = avu.TreeDelegate;
var Filterbox = avu.Filterbox;
var Tree = avu.Tree;
/**
                      * The Layer Panel allows users to explore and set the visibility state of the different layers in the loaded model.
                      * A layer is identified by a string label and represents a collection of geometry grouped by some criteria.
                      * 
                      * @alias Autodesk.Viewing.UI.LayersPanel
                      * @augments Autodesk.Viewing.UI.DockingPanel
                      * @param {Viewer} viewer - The parent viewer.
                      * @param {HTMLElement} parentContainer - The container for this panel.
                      * @param {string} id - The id for this panel.
                      * @param {object} [options] - An optional dictionary of options.
                      * @constructor
                      */
function LayersPanel(viewer, parentContainer, id, options) {

  this.viewer = viewer;
  this.setGlobalManager(viewer.globalManager);
  this.tree = null;
  this.layersRoot = null;
  this.visibilityImages = {};
  this.isMac = navigator.userAgent.search("Mac OS") !== -1;

  var title = "Layers"; // Gets translated by DockingPanel's constructor
  var viewableName = viewer.config.viewableName;

  // TODO: Keep it this code for now, maybe useful for multimodel support.
  //if (viewableName && viewableName !== 'W2D') { // See SPK-1304
  //    title = i18n.translate(title) + ": " + viewableName;
  //    localizeTitle = false;
  //}

  DockingPanel.call(this, viewer.container, id, title, options);
  this.container.classList.add('layers-panel');
  this.container.style.top = "10px";
  this.container.style.left = "10px";

  var that = this;
  if (viewer.model) {
    that.build();
  } else {
    that.addEventListener(viewer, av.GEOMETRY_LOADED_EVENT, function () {
      that.build();
    });
  }

  var shown = false;
  this.addVisibilityListener(function () {
    if (!shown) {
      shown = true;
      that.resizeToContent();
    }
  });
};

LayersPanel.prototype = Object.create(DockingPanel.prototype);
LayersPanel.prototype.constructor = LayersPanel;

/**
                                                  * Clean up when the layers panel is about to be removed.
                                                  * @override
                                                  */
LayersPanel.prototype.uninitialize = function () {
  DockingPanel.prototype.uninitialize.call(this);

  this.viewer = null;
  this.tree = null;
  this.layersRoot = null;
  this.scrollContainer = null;
};

/**
    * Builds the layers panel.
    */
LayersPanel.prototype.build = function () {
  var that = this;
  var sendAnalyticsDebounced = Object(_thirdparty_lodash_lodash_custom__WEBPACK_IMPORTED_MODULE_1__["debounce"])(function (from, action) {
    avp.analytics.track('viewer.layers', {
      from: from,
      action: action });

  }, 2000);

  function createDelegate() {
    var delegate = new TreeDelegate();
    delegate.setGlobalManager(that.globalManager);

    delegate.getTreeNodeId = function (node) {
      return node.id;
    };

    delegate.getTreeNodeLabel = function (node) {
      return that.getNodeLabel(node);
    };

    delegate.getTreeNodeClass = function (node) {
      return that.getNodeClass(node);
    };

    delegate.isTreeNodeGroup = function (node) {
      return that.isGroupNode(node);
    };

    delegate.shouldCreateTreeNode = function (node) {
      return that.shouldInclude(node);
    };

    delegate.onTreeNodeClick = function (tree, node, event) {
      that.onClick(node, event);
      avp.analytics.track('viewer.layers', {
        from: 'Panel.TreeNode',
        action: 'Toggle Visibility' });

    };

    delegate.onTreeNodeRightClick = function (tree, node, event) {
      that.onRightClick(node, event);
    };

    delegate.onTreeNodeDoubleClick = function (tree, node, event) {
      that.onDoubleClick(node, event);
    };

    delegate.onTreeNodeIconClick = function (tree, node, event)
    {
      that.onIconClick(node, event);
    };

    delegate.createTreeNode = function (node, parent) {
      that.createNode(node, parent);
    };

    return delegate;
  }

  // All visibility button.
  var _document = this.getDocument();
  var button = _document.createElement('div');

  button.classList.add('visibility');
  button.title = i18n.translate('Show/hide all layers');

  button.addEventListener('click', function (event) {
    event.preventDefault();
    event.stopPropagation();
    this.viewer.setLayerVisible(null, this.viewer.allLayersHidden());
    avp.analytics.track('viewer.layers', {
      from: 'Panel',
      action: this.viewer.allLayersHidden() ? 'Show All' : 'Hide All' });

  }.bind(this));

  this.container.appendChild(button);
  this.toogleAllVisibleButton = button;

  // Add filterbox.
  var searchTimer = null;
  var searchText = "";
  var viewer = that.viewer;

  function doFiltering() {

    function getMatches(node) {
      var matches = [];
      if (node.name.toLowerCase().indexOf(searchText) !== -1) {
        matches.push(node);
      } else if (!node.isLayer) {
        var children = node.children;
        for (var i = 0; i < children.length; ++i) {
          matches = matches.concat(getMatches(children[i]));
        }
      }
      return matches;
    }

    if (searchText) {
      if (layersRoot && 0 < layersRoot.childCount) {
        that.lockoutClearFilter = true;
        viewer.setLayerVisible(getMatches(layersRoot), true, true);
        that.lockoutClearFilter = false;
      }
    } else {
      // Make all the layers visible.
      viewer.setLayerVisible(null, true);
    }

    sendAnalyticsDebounced('Panel', 'Search');

    searchTimer = null;
  }

  function doIncrementalFiltering(text) {

    if (searchTimer) {
      clearTimeout(searchTimer);
    }
    searchText = text ? text.toLowerCase() : text;
    searchTimer = setTimeout(doFiltering, 500);
  }

  this.filterbox = new Filterbox(this.viewer.container.id + 'LayersPanel' + '-Filterbox', { filterFunction: doIncrementalFiltering });
  this.filterbox.setGlobalManager(this.globalManager);
  this.container.appendChild(this.filterbox.container);

  // Layer tree.
  this.createScrollContainer({ heightAdjustment: 104, marginTop: 0 });

  var scrollContainerBackground = _document.createElement('div');
  scrollContainerBackground.classList.add('docking-panel-container-gradient');
  scrollContainerBackground.style.width = '100%';
  scrollContainerBackground.style.height = '100%';
  this.scrollContainer.appendChild(scrollContainerBackground);
  /*
                                                                   filterBox.addEventListener('keyup', function (e) {
                                                                       doIncrementalSearch();
                                                                   });
                                                               
                                                                   // This is to detect when the user clicks on the 'x' to clear.
                                                                   filterBox.addEventListener('click', function (e) {
                                                                       if (filterBox.value === '') {
                                                                           viewer.setLayerVisible(null, true);
                                                                           return;
                                                                       }
                                                               
                                                                       // When this event is fired after clicking on the clear button
                                                                       // the value is not cleared yet. We have to wait for it.
                                                                       setTimeout(function () {
                                                                           if (filterBox.value === '') {
                                                                               viewer.setLayerVisible(null, true);
                                                                               e.preventDefault();
                                                                           }
                                                                       }, 1);
                                                                   });
                                                               */
  var delegate = createDelegate(),
  layersRoot = that.layersRoot = that.viewer.impl.getLayersRoot();

  if (layersRoot) {
    that.tree = new Tree(delegate, layersRoot, scrollContainerBackground, { excludeRoot: true });
    that.tree.setGlobalManager(that.globalManager);

    that.update();

    that.addEventListener(that.viewer, av.LAYER_VISIBILITY_CHANGED_EVENT, function () {
      that.update();
    });
  }
};

/**
    * Updates the visibility states for the layers in the panel.
    */
LayersPanel.prototype.update = function () {
  var that = this;

  function updateLook(node, state) {
    if (state === 0) {
      that.tree.addClass(node.id, 'dim');
    } else {// state === 1 || state === -1
      that.tree.removeClass(node.id, "dim");
    }
  }

  function getItemState(items) {
    var state;

    if (0 < items.length) {
      for (var i = 0; i < items.length; ++i) {
        var item = items[i];

        if (state === undefined) {
          state = item;
        } else if (item === 0 && state === 1) {
          state = -1;
        } else if (item === 1 && state === 0) {
          state = -1;
        }

        if (state === -1) {
          break;
        }
      }
    } else {
      state = 0;
    }
    return state;
  }

  function traverse(layerNode) {
    if (layerNode.isLayer) {
      var visible = that.viewer.isLayerVisible(layerNode) ? 1 : 0;
      updateLook(layerNode, visible);
      return visible;
    } else {
      var children = layerNode.children;
      var dadVisible = 0;
      for (var i = 0; i < children.length; ++i) {
        var childVisible = traverse(children[i]);
        dadVisible = dadVisible || childVisible;
      }
      updateLook(layerNode, dadVisible);
    }
  }

  // Updatea visibility buttons.
  if (this.layersRoot && 0 < this.layersRoot.childCount) {
    traverse(that.layersRoot);
  }

  if (this.viewer.allLayersHidden()) {
    this.toogleAllVisibleButton.classList.add('dim');
  } else {
    this.toogleAllVisibleButton.classList.remove('dim');
  }
};

/**
    * Toggle or isolate the visibility state for a layer node.
    * @param {?Object} node
    * @param {boolean=} [isolate=false] true to isolate, false to toggle
    */
LayersPanel.prototype.setLayerVisible = function (node, isolate) {
  var visible = isolate;

  if (node !== null && !isolate) {
    visible = !this.viewer.impl.layers.isLayerVisible(node);
  }

  this.viewer.setLayerVisible(node, visible, isolate);
  //   this.filterBox.value = '';

  // Clear selection for better UX
  // Apply at the end so that it can be worked around if needed.
  this.viewer.clearSelection();
};

/**
    * Override this method to specify the label for a node.
    * @param {Object} node
    * @returns {string} Label of the tree node
    */
LayersPanel.prototype.getNodeLabel = function (node) {
  return node.isLayer || 0 === node.childCount ? node.name : node.name + " (" + node.childCount + ")";
};

/**
    * Override this to specify the CSS classes of a node. This way, in CSS, the designer
    * can specify custom styling per type.
    * By default, an empty string is returned.
    * @param {Object} node
    * @returns {string} CSS classes for the node
    */
LayersPanel.prototype.getNodeClass = function (node) {
  return '';
};

/**
    * Override this method to specify whether or not a node is a group node.
    * @param {Object} node
    * @returns {boolean} true if this node is a group node, false otherwise
    */
LayersPanel.prototype.isGroupNode = function (node) {
  return !node.isLayer;
};

/**
    * Override this method to specify if a tree node should be created for this node.
    * By default, every node will be displayed.
    * @param {Object} node
    * @returns {boolean} true if a node should be created, false otherwise
    */
LayersPanel.prototype.shouldInclude = function (node) {
  return true;
};

/**
    * Override this to do something when the user clicks on a tree node's icon.
    * By default, groups will be expanded/collapsed.
    * @param {Object} node
    * @param {Event} event
    */
LayersPanel.prototype.onIconClick = function (node, event) {
  this.setGroupCollapsed(node, !this.isGroupCollapsed(node));
};

/**
    * Collapse/expand a group node.
    * @param {Object} node - A node to collapse/expand in the tree.
    * @param {boolean} collapse - true to collapse the group, false to expand it.
    */
LayersPanel.prototype.setGroupCollapsed = function (node, collapse) {
  var delegate = this.tree.delegate();
  if (delegate.isTreeNodeGroup(node)) {
    var id = delegate.getTreeNodeId(node);
    this.tree.setCollapsed(id, collapse);
  }
};

/**
    * Returns true if the group is collapsed.
    * @param {Object} node - The node in the tree.
    * @returns {boolean} - true if the group is collapsed, false otherwise.
    */
LayersPanel.prototype.isGroupCollapsed = function (node) {
  var delegate = this.tree.delegate();
  if (delegate.isTreeNodeGroup(node)) {
    var id = delegate.getTreeNodeId(node);
    return this.tree.isCollapsed(id);
  }
  return false;
};
/**
    * Override this method to do something when the user clicks on a tree node
    * @param {Object} node
    * @param {Event} event
    */
LayersPanel.prototype.onClick = function (node, event) {
};

/**
    * Override this to do something when the user double-clicks on a tree node
    * @param {Object} node
    * @param {Event} event
    */
LayersPanel.prototype.onDoubleClick = function (node, event) {
};

/**
    * Override this to do something when the user right-clicks on a tree node
    * @param {Object} node
    * @param {Event} event
    */
LayersPanel.prototype.onRightClick = function (node, event) {
};

/**
    * Override this to do something when the user clicks on an image
    * @param {Object} node
    * @param {Event} event
    */
LayersPanel.prototype.onImageClick = function (node, event) {
};

/**
    * Returns the width and height to be used when resizing the panel to the content.
    *
    * @returns {{height: number, width: number}}
    */
LayersPanel.prototype.getContentSize = function () {

  var size = { width: 0, height: this.options.heightAdjustment || 0 };

  // Add filter size.
  var filter = this.filterbox.container;

  size.width += filter.clientWidth;
  size.height += filter.clientHeight;

  // Add treeview size.
  var layers = this.container.querySelectorAll('leaf');
  if (layers.length > 0) {
    size.height += layers[0].clientHeight * layers.length;
  }

  return size;
};

/**
    * Override this to create the HTMLContent for this node for appending to the
    * parent.  By default, a label and a visibility image are created.
    * @param {Object} node
    * @param {HTMLElement} parent
    */
LayersPanel.prototype.createNode = function (node, parent) {

  // Add visibility button.
  var _document = this.getDocument();
  var button = _document.createElement('div');

  button.dbId = node;
  button.classList.add('visibility');
  button.title = i18n.translate("Show/hide this layer");

  button.addEventListener('mousedown', function (event) {
    event.preventDefault();
    event.stopPropagation();
  }.bind(this));

  button.addEventListener('click', function (event) {
    event.preventDefault();
    event.stopPropagation();
    this.onImageClick(node, event);
    avp.analytics.track('viewer.layers', {
      from: 'Panel.TreeIcon',
      action: 'Toggle Visibility' });

  }.bind(this));

  parent.appendChild(button);

  // Add label.
  var label = _document.createElement('label');
  label.textContent = this.getNodeLabel(node);
  parent.appendChild(label);
};

/***/ }),

/***/ "./extensions/LayerManager/ui/ViewerLayersPanel.js":
/*!*********************************************************!*\
  !*** ./extensions/LayerManager/ui/ViewerLayersPanel.js ***!
  \*********************************************************/
/*! exports provided: ViewerLayersPanel */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ViewerLayersPanel", function() { return ViewerLayersPanel; });
/* harmony import */ var _LayersPanel__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./LayersPanel */ "./extensions/LayerManager/ui/LayersPanel.js");


var av = Autodesk.Viewing;
var ave = av.Extensions;

var ViewerPanelMixin = ave.ViewerPanelMixin;

/**
                                              * ViewerLayersPanel
                                              * This is a panel for displaying the layers in a file.
                                              * @class
                                              * @augments Autodesk.Viewing.UI.LayersPanel
                                              *
                                              * @param {Viewer} viewer - The parent viewer.
                                              * @constructor
                                              */
function ViewerLayersPanel(viewer) {
  var parentContainer = viewer.container;
  _LayersPanel__WEBPACK_IMPORTED_MODULE_0__["LayersPanel"].call(this, viewer, parentContainer, parentContainer.id + "ViewerLayersPanel", { heightAdjustment: 55 });

  this.onRestoreStateBinded = this.onRestoreState.bind(this);
  this.viewer.addEventListener(av.VIEWER_STATE_RESTORED_EVENT, this.onRestoreStateBinded);
};

ViewerLayersPanel.prototype = Object.create(_LayersPanel__WEBPACK_IMPORTED_MODULE_0__["LayersPanel"].prototype);
ViewerLayersPanel.prototype.constructor = ViewerLayersPanel;
ViewerPanelMixin.call(ViewerLayersPanel.prototype);


ViewerLayersPanel.prototype.uninitialize = function () {
  if (this.onRestoreStateBinded) {
    this.viewer.removeEventListener(av.VIEWER_STATE_RESTORED_EVENT, this.onRestoreStateBinded);
    this.onRestoreStateBinded = null;
  }
  _LayersPanel__WEBPACK_IMPORTED_MODULE_0__["LayersPanel"].prototype.uninitialize.call(this);
};

ViewerLayersPanel.prototype.onRestoreState = function () {
  this.update();
};

/**
    * Override this method to do something when the user clicks on a tree node
    * @override
    * @param {Object} node
    * @param {Event} event
    */
ViewerLayersPanel.prototype.onClick = function (node, event) {
  if (this.isMac && event.ctrlKey) {
    return;
  }
  var isolate = !(event.shiftKey || event.metaKey || event.ctrlKey);
  this.setLayerVisible(node, isolate);
};

/**
    * Override this to do something when the user right-clicks on a tree node
    * @param {Object} node
    * @param {Event} event
    */
ViewerLayersPanel.prototype.onRightClick = function (node, event) {
  var isolate = !(event.shiftKey || event.metaKey || event.ctrlKey);
  this.setLayerVisible(node, isolate);
};

/**
    * Override this to do something when the user clicks on an image
    * @override
    * @param {Object} node
    * @param {Event} event
    */
ViewerLayersPanel.prototype.onImageClick = function (node, event) {
  if (this.isMac && event.ctrlKey) {
    return;
  }
  this.setLayerVisible(node);
};

/**
    * Override this method to be notified when the user clicks on the title.
    * @override
    * @param {Event} event
    */
ViewerLayersPanel.prototype.onTitleClick = function (event) {
  this.viewer.setLayerVisible(null, true);
};

/**
    * Override this method to be notified when the user double-clicks on the title.
    * @override
    * @param {Event} event
    */
ViewerLayersPanel.prototype.onTitleDoubleClick = function (event) {
  this.viewer.fitToView();
};

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/dist/cjs.js!./extensions/LayerManager/ui/LayersPanel.css":
/*!*********************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/dist/cjs.js!./extensions/LayerManager/ui/LayersPanel.css ***!
  \*********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(/*! ../../../node_modules/css-loader/lib/css-base.js */ "./node_modules/css-loader/lib/css-base.js")(false);
// imports


// module
exports.push([module.i, ".adsk-viewing-viewer .layers-panel {\n  left: 0px;\n  top: 0px;\n  min-width: 320px;\n  min-height: 100px;\n  height: calc(100% - 55px);\n  /* compensate for the toolbar */\n  width: 350px; }\n\n.adsk-viewing-viewer .layers-panel .visibility {\n  right: 40px;\n  top: 0px;\n  width: 25px;\n  height: 50px;\n  border: none;\n  outline: none;\n  margin: 0;\n  padding: 0;\n  background-position: 2px 19px;\n  background-repeat: no-repeat;\n  position: absolute;\n  cursor: pointer;\n  z-index: 1; }\n\n.adsk-viewing-viewer .layers-panel .visibility.dim {\n  background-position: 2px 16px; }\n\n.adsk-viewing-viewer .layers-panel .treeview {\n  height: 100%; }\n\n.adsk-viewing-viewer .layers-panel .exclude > lmvheader {\n  display: none; }\n\n.adsk-viewing-viewer .layers-panel .exclude {\n  padding-left: 0;\n  left: 0; }\n\n.adsk-viewing-viewer .layers-panel .treeview label {\n  padding-left: 17px; }\n", ""]);

// exports


/***/ }),

/***/ "./node_modules/css-loader/lib/css-base.js":
/*!*************************************************!*\
  !*** ./node_modules/css-loader/lib/css-base.js ***!
  \*************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader
module.exports = function(useSourceMap) {
	var list = [];

	// return the list of modules as css string
	list.toString = function toString() {
		return this.map(function (item) {
			var content = cssWithMappingToString(item, useSourceMap);
			if(item[2]) {
				return "@media " + item[2] + "{" + content + "}";
			} else {
				return content;
			}
		}).join("");
	};

	// import a list of modules into the list
	list.i = function(modules, mediaQuery) {
		if(typeof modules === "string")
			modules = [[null, modules, ""]];
		var alreadyImportedModules = {};
		for(var i = 0; i < this.length; i++) {
			var id = this[i][0];
			if(typeof id === "number")
				alreadyImportedModules[id] = true;
		}
		for(i = 0; i < modules.length; i++) {
			var item = modules[i];
			// skip already imported module
			// this implementation is not 100% perfect for weird media query combinations
			//  when a module is imported multiple times with different media queries.
			//  I hope this will never occur (Hey this way we have smaller bundles)
			if(typeof item[0] !== "number" || !alreadyImportedModules[item[0]]) {
				if(mediaQuery && !item[2]) {
					item[2] = mediaQuery;
				} else if(mediaQuery) {
					item[2] = "(" + item[2] + ") and (" + mediaQuery + ")";
				}
				list.push(item);
			}
		}
	};
	return list;
};

function cssWithMappingToString(item, useSourceMap) {
	var content = item[1] || '';
	var cssMapping = item[3];
	if (!cssMapping) {
		return content;
	}

	if (useSourceMap && typeof btoa === 'function') {
		var sourceMapping = toComment(cssMapping);
		var sourceURLs = cssMapping.sources.map(function (source) {
			return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */'
		});

		return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
	}

	return [content].join('\n');
}

// Adapted from convert-source-map (MIT)
function toComment(sourceMap) {
	// eslint-disable-next-line no-undef
	var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
	var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;

	return '/*# ' + data + ' */';
}


/***/ }),

/***/ "./node_modules/style-loader/lib/addStyles.js":
/*!****************************************************!*\
  !*** ./node_modules/style-loader/lib/addStyles.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(/*! ./urls */ "./node_modules/style-loader/lib/urls.js");

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = typeof options.transform === 'function'
		 ? options.transform(obj.css) 
		 : options.transform.default(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),

/***/ "./node_modules/style-loader/lib/urls.js":
/*!***********************************************!*\
  !*** ./node_modules/style-loader/lib/urls.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports) {


/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */

module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  }

	// blank or null?
	if (!css || typeof css !== "string") {
	  return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/");

	// convert each url(...)
	/*
	This regular expression is just a way to recursively match brackets within
	a string.

	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
	   (  = Start a capturing group
	     (?:  = Start a non-capturing group
	         [^)(]  = Match anything that isn't a parentheses
	         |  = OR
	         \(  = Match a start parentheses
	             (?:  = Start another non-capturing groups
	                 [^)(]+  = Match anything that isn't a parentheses
	                 |  = OR
	                 \(  = Match a start parentheses
	                     [^)(]*  = Match anything that isn't a parentheses
	                 \)  = Match a end parentheses
	             )  = End Group
              *\) = Match anything and then a close parens
          )  = Close non-capturing group
          *  = Match anything
       )  = Close capturing group
	 \)  = Match a close parens

	 /gi  = Get all matches, not the first.  Be case insensitive.
	 */
	var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function(fullMatch, origUrl) {
		// strip quotes (if they exist)
		var unquotedOrigUrl = origUrl
			.trim()
			.replace(/^"(.*)"$/, function(o, $1){ return $1; })
			.replace(/^'(.*)'$/, function(o, $1){ return $1; });

		// already a full url? no change
		if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
		  return fullMatch;
		}

		// convert the url to a full url
		var newUrl;

		if (unquotedOrigUrl.indexOf("//") === 0) {
		  	//TODO: should we add protocol?
			newUrl = unquotedOrigUrl;
		} else if (unquotedOrigUrl.indexOf("/") === 0) {
			// path should be relative to the base url
			newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
		} else {
			// path should be relative to current directory
			newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
		}

		// send back the fixed url(...)
		return "url(" + JSON.stringify(newUrl) + ")";
	});

	// send back the fixed css
	return fixedCss;
};


/***/ }),

/***/ "./node_modules/webpack/buildin/amd-options.js":
/*!****************************************!*\
  !*** (webpack)/buildin/amd-options.js ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

/* WEBPACK VAR INJECTION */(function(__webpack_amd_options__) {/* globals __webpack_amd_options__ */
module.exports = __webpack_amd_options__;

/* WEBPACK VAR INJECTION */}.call(this, {}))

/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./thirdparty/lodash/lodash.custom.js":
/*!********************************************!*\
  !*** ./thirdparty/lodash/lodash.custom.js ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_RESULT__;function _typeof(obj) {"@babel/helpers - typeof";if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;};}return _typeof(obj);} /**
                                                                                                                                                                                                                                                                                                                                                                                * @license
                                                                                                                                                                                                                                                                                                                                                                                * Lodash (Custom Build) <https://lodash.com/>
                                                                                                                                                                                                                                                                                                                                                                                * Build: `lodash include="debounce,throttle" exports="amd"`
                                                                                                                                                                                                                                                                                                                                                                                * Copyright JS Foundation and other contributors <https://js.foundation/>
                                                                                                                                                                                                                                                                                                                                                                                * Released under MIT license <https://lodash.com/license>
                                                                                                                                                                                                                                                                                                                                                                                * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
                                                                                                                                                                                                                                                                                                                                                                                * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
                                                                                                                                                                                                                                                                                                                                                                                */
;(function () {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.5';

  /** Error message constants. */
  var FUNC_ERROR_TEXT = 'Expected a function';

  /** Used as references for various `Number` constants. */
  var NAN = 0 / 0;

  /** `Object#toString` result references. */
  var nullTag = '[object Null]',
  symbolTag = '[object Symbol]',
  undefinedTag = '[object Undefined]';

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Built-in method references without a dependency on `root`. */
  var freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = (typeof global === "undefined" ? "undefined" : _typeof(global)) == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = (typeof self === "undefined" ? "undefined" : _typeof(self)) == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /*--------------------------------------------------------------------------*/

  /** Used for built-in method references. */
  var objectProto = Object.prototype;

  /** Used to check objects for own properties. */
  var hasOwnProperty = objectProto.hasOwnProperty;

  /**
                                                    * Used to resolve the
                                                    * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
                                                    * of values.
                                                    */
  var nativeObjectToString = objectProto.toString;

  /** Built-in value references. */
  var _Symbol = root.Symbol,
  symToStringTag = _Symbol ? _Symbol.toStringTag : undefined;

  /* Built-in method references for those with the same name as other `lodash` methods. */
  var nativeMax = Math.max,
  nativeMin = Math.min;

  /** Used to lookup unminified function names. */
  var realNames = {};

  /*------------------------------------------------------------------------*/

  /**
                                                                                * Creates a `lodash` object which wraps `value` to enable implicit method
                                                                                * chain sequences. Methods that operate on and return arrays, collections,
                                                                                * and functions can be chained together. Methods that retrieve a single value
                                                                                * or may return a primitive value will automatically end the chain sequence
                                                                                * and return the unwrapped value. Otherwise, the value must be unwrapped
                                                                                * with `_#value`.
                                                                                *
                                                                                * Explicit chain sequences, which must be unwrapped with `_#value`, may be
                                                                                * enabled using `_.chain`.
                                                                                *
                                                                                * The execution of chained methods is lazy, that is, it's deferred until
                                                                                * `_#value` is implicitly or explicitly called.
                                                                                *
                                                                                * Lazy evaluation allows several methods to support shortcut fusion.
                                                                                * Shortcut fusion is an optimization to merge iteratee calls; this avoids
                                                                                * the creation of intermediate arrays and can greatly reduce the number of
                                                                                * iteratee executions. Sections of a chain sequence qualify for shortcut
                                                                                * fusion if the section is applied to an array and iteratees accept only
                                                                                * one argument. The heuristic for whether a section qualifies for shortcut
                                                                                * fusion is subject to change.
                                                                                *
                                                                                * Chaining is supported in custom builds as long as the `_#value` method is
                                                                                * directly or indirectly included in the build.
                                                                                *
                                                                                * In addition to lodash methods, wrappers have `Array` and `String` methods.
                                                                                *
                                                                                * The wrapper `Array` methods are:
                                                                                * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
                                                                                *
                                                                                * The wrapper `String` methods are:
                                                                                * `replace` and `split`
                                                                                *
                                                                                * The wrapper methods that support shortcut fusion are:
                                                                                * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
                                                                                * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
                                                                                * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
                                                                                *
                                                                                * The chainable wrapper methods are:
                                                                                * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
                                                                                * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
                                                                                * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
                                                                                * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
                                                                                * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
                                                                                * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
                                                                                * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
                                                                                * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
                                                                                * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
                                                                                * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
                                                                                * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
                                                                                * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
                                                                                * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
                                                                                * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
                                                                                * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
                                                                                * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
                                                                                * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
                                                                                * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
                                                                                * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
                                                                                * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
                                                                                * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
                                                                                * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
                                                                                * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
                                                                                * `zipObject`, `zipObjectDeep`, and `zipWith`
                                                                                *
                                                                                * The wrapper methods that are **not** chainable by default are:
                                                                                * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
                                                                                * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
                                                                                * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
                                                                                * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
                                                                                * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
                                                                                * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
                                                                                * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
                                                                                * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
                                                                                * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
                                                                                * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
                                                                                * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
                                                                                * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
                                                                                * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
                                                                                * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
                                                                                * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
                                                                                * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
                                                                                * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
                                                                                * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
                                                                                * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
                                                                                * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
                                                                                * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
                                                                                * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
                                                                                * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
                                                                                * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
                                                                                * `upperFirst`, `value`, and `words`
                                                                                *
                                                                                * @name _
                                                                                * @constructor
                                                                                * @category Seq
                                                                                * @param {*} value The value to wrap in a `lodash` instance.
                                                                                * @returns {Object} Returns the new `lodash` wrapper instance.
                                                                                * @example
                                                                                *
                                                                                * function square(n) {
                                                                                *   return n * n;
                                                                                * }
                                                                                *
                                                                                * var wrapped = _([1, 2, 3]);
                                                                                *
                                                                                * // Returns an unwrapped value.
                                                                                * wrapped.reduce(_.add);
                                                                                * // => 6
                                                                                *
                                                                                * // Returns a wrapped value.
                                                                                * var squares = wrapped.map(square);
                                                                                *
                                                                                * _.isArray(squares);
                                                                                * // => false
                                                                                *
                                                                                * _.isArray(squares.value());
                                                                                * // => true
                                                                                */
  function lodash() {
    // No operation performed.
  }

  /*------------------------------------------------------------------------*/

  /**
                                                                                * The base implementation of `getTag` without fallbacks for buggy environments.
                                                                                *
                                                                                * @private
                                                                                * @param {*} value The value to query.
                                                                                * @returns {string} Returns the `toStringTag`.
                                                                                */
  function baseGetTag(value) {
    if (value == null) {
      return value === undefined ? undefinedTag : nullTag;
    }
    return symToStringTag && symToStringTag in Object(value) ?
    getRawTag(value) :
    objectToString(value);
  }

  /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
  function getRawTag(value) {
    var isOwn = hasOwnProperty.call(value, symToStringTag),
    tag = value[symToStringTag];

    try {
      value[symToStringTag] = undefined;
      var unmasked = true;
    } catch (e) {}

    var result = nativeObjectToString.call(value);
    if (unmasked) {
      if (isOwn) {
        value[symToStringTag] = tag;
      } else {
        delete value[symToStringTag];
      }
    }
    return result;
  }

  /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
  function objectToString(value) {
    return nativeObjectToString.call(value);
  }

  /*------------------------------------------------------------------------*/

  /**
                                                                                * Gets the timestamp of the number of milliseconds that have elapsed since
                                                                                * the Unix epoch (1 January 1970 00:00:00 UTC).
                                                                                *
                                                                                * @static
                                                                                * @memberOf _
                                                                                * @since 2.4.0
                                                                                * @category Date
                                                                                * @returns {number} Returns the timestamp.
                                                                                * @example
                                                                                *
                                                                                * _.defer(function(stamp) {
                                                                                *   console.log(_.now() - stamp);
                                                                                * }, _.now());
                                                                                * // => Logs the number of milliseconds it took for the deferred invocation.
                                                                                */
  var now = function now() {
    return root.Date.now();
  };

  /*------------------------------------------------------------------------*/

  /**
                                                                                * Creates a debounced function that delays invoking `func` until after `wait`
                                                                                * milliseconds have elapsed since the last time the debounced function was
                                                                                * invoked. The debounced function comes with a `cancel` method to cancel
                                                                                * delayed `func` invocations and a `flush` method to immediately invoke them.
                                                                                * Provide `options` to indicate whether `func` should be invoked on the
                                                                                * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
                                                                                * with the last arguments provided to the debounced function. Subsequent
                                                                                * calls to the debounced function return the result of the last `func`
                                                                                * invocation.
                                                                                *
                                                                                * **Note:** If `leading` and `trailing` options are `true`, `func` is
                                                                                * invoked on the trailing edge of the timeout only if the debounced function
                                                                                * is invoked more than once during the `wait` timeout.
                                                                                *
                                                                                * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
                                                                                * until to the next tick, similar to `setTimeout` with a timeout of `0`.
                                                                                *
                                                                                * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
                                                                                * for details over the differences between `_.debounce` and `_.throttle`.
                                                                                *
                                                                                * @static
                                                                                * @memberOf _
                                                                                * @since 0.1.0
                                                                                * @category Function
                                                                                * @param {Function} func The function to debounce.
                                                                                * @param {number} [wait=0] The number of milliseconds to delay.
                                                                                * @param {Object} [options={}] The options object.
                                                                                * @param {boolean} [options.leading=false]
                                                                                *  Specify invoking on the leading edge of the timeout.
                                                                                * @param {number} [options.maxWait]
                                                                                *  The maximum time `func` is allowed to be delayed before it's invoked.
                                                                                * @param {boolean} [options.trailing=true]
                                                                                *  Specify invoking on the trailing edge of the timeout.
                                                                                * @returns {Function} Returns the new debounced function.
                                                                                * @example
                                                                                *
                                                                                * // Avoid costly calculations while the window size is in flux.
                                                                                * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
                                                                                *
                                                                                * // Invoke `sendMail` when clicked, debouncing subsequent calls.
                                                                                * jQuery(element).on('click', _.debounce(sendMail, 300, {
                                                                                *   'leading': true,
                                                                                *   'trailing': false
                                                                                * }));
                                                                                *
                                                                                * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
                                                                                * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
                                                                                * var source = new EventSource('/stream');
                                                                                * jQuery(source).on('message', debounced);
                                                                                *
                                                                                * // Cancel the trailing debounced invocation.
                                                                                * jQuery(window).on('popstate', debounced.cancel);
                                                                                */
  function debounce(func, wait, options) {
    var lastArgs,
    lastThis,
    maxWait,
    result,
    timerId,
    lastCallTime,
    lastInvokeTime = 0,
    leading = false,
    maxing = false,
    trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    wait = toNumber(wait) || 0;
    if (isObject(options)) {
      leading = !!options.leading;
      maxing = 'maxWait' in options;
      maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }

    function invokeFunc(time) {
      var args = lastArgs,
      thisArg = lastThis;

      lastArgs = lastThis = undefined;
      lastInvokeTime = time;
      result = func.apply(thisArg, args);
      return result;
    }

    function leadingEdge(time) {
      // Reset any `maxWait` timer.
      lastInvokeTime = time;
      // Start the timer for the trailing edge.
      timerId = setTimeout(timerExpired, wait);
      // Invoke the leading edge.
      return leading ? invokeFunc(time) : result;
    }

    function remainingWait(time) {
      var timeSinceLastCall = time - lastCallTime,
      timeSinceLastInvoke = time - lastInvokeTime,
      timeWaiting = wait - timeSinceLastCall;

      return maxing ?
      nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) :
      timeWaiting;
    }

    function shouldInvoke(time) {
      var timeSinceLastCall = time - lastCallTime,
      timeSinceLastInvoke = time - lastInvokeTime;

      // Either this is the first call, activity has stopped and we're at the
      // trailing edge, the system time has gone backwards and we're treating
      // it as the trailing edge, or we've hit the `maxWait` limit.
      return lastCallTime === undefined || timeSinceLastCall >= wait ||
      timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;
    }

    function timerExpired() {
      var time = now();
      if (shouldInvoke(time)) {
        return trailingEdge(time);
      }
      // Restart the timer.
      timerId = setTimeout(timerExpired, remainingWait(time));
    }

    function trailingEdge(time) {
      timerId = undefined;

      // Only invoke if we have `lastArgs` which means `func` has been
      // debounced at least once.
      if (trailing && lastArgs) {
        return invokeFunc(time);
      }
      lastArgs = lastThis = undefined;
      return result;
    }

    function cancel() {
      if (timerId !== undefined) {
        clearTimeout(timerId);
      }
      lastInvokeTime = 0;
      lastArgs = lastCallTime = lastThis = timerId = undefined;
    }

    function flush() {
      return timerId === undefined ? result : trailingEdge(now());
    }

    function debounced() {
      var time = now(),
      isInvoking = shouldInvoke(time);

      lastArgs = arguments;
      lastThis = this;
      lastCallTime = time;

      if (isInvoking) {
        if (timerId === undefined) {
          return leadingEdge(lastCallTime);
        }
        if (maxing) {
          // Handle invocations in a tight loop.
          timerId = setTimeout(timerExpired, wait);
          return invokeFunc(lastCallTime);
        }
      }
      if (timerId === undefined) {
        timerId = setTimeout(timerExpired, wait);
      }
      return result;
    }
    debounced.cancel = cancel;
    debounced.flush = flush;
    return debounced;
  }

  /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
  function throttle(func, wait, options) {
    var leading = true,
    trailing = true;

    if (typeof func != 'function') {
      throw new TypeError(FUNC_ERROR_TEXT);
    }
    if (isObject(options)) {
      leading = 'leading' in options ? !!options.leading : leading;
      trailing = 'trailing' in options ? !!options.trailing : trailing;
    }
    return debounce(func, wait, {
      'leading': leading,
      'maxWait': wait,
      'trailing': trailing });

  }

  /*------------------------------------------------------------------------*/

  /**
                                                                                * Checks if `value` is the
                                                                                * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
                                                                                * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
                                                                                *
                                                                                * @static
                                                                                * @memberOf _
                                                                                * @since 0.1.0
                                                                                * @category Lang
                                                                                * @param {*} value The value to check.
                                                                                * @returns {boolean} Returns `true` if `value` is an object, else `false`.
                                                                                * @example
                                                                                *
                                                                                * _.isObject({});
                                                                                * // => true
                                                                                *
                                                                                * _.isObject([1, 2, 3]);
                                                                                * // => true
                                                                                *
                                                                                * _.isObject(_.noop);
                                                                                * // => true
                                                                                *
                                                                                * _.isObject(null);
                                                                                * // => false
                                                                                */
  function isObject(value) {
    var type = _typeof(value);
    return value != null && (type == 'object' || type == 'function');
  }

  /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
  function isObjectLike(value) {
    return value != null && _typeof(value) == 'object';
  }

  /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
  function isSymbol(value) {
    return _typeof(value) == 'symbol' ||
    isObjectLike(value) && baseGetTag(value) == symbolTag;
  }

  /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
  function toNumber(value) {
    if (typeof value == 'number') {
      return value;
    }
    if (isSymbol(value)) {
      return NAN;
    }
    if (isObject(value)) {
      var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
      value = isObject(other) ? other + '' : other;
    }
    if (typeof value != 'string') {
      return value === 0 ? value : +value;
    }
    value = value.replace(reTrim, '');
    var isBinary = reIsBinary.test(value);
    return isBinary || reIsOctal.test(value) ?
    freeParseInt(value.slice(2), isBinary ? 2 : 8) :
    reIsBadHex.test(value) ? NAN : +value;
  }

  /*------------------------------------------------------------------------*/

  // Add methods that return wrapped values in chain sequences.
  lodash.debounce = debounce;
  lodash.throttle = throttle;

  /*------------------------------------------------------------------------*/

  // Add methods that return unwrapped values in chain sequences.
  lodash.isObject = isObject;
  lodash.isObjectLike = isObjectLike;
  lodash.isSymbol = isSymbol;
  lodash.now = now;
  lodash.toNumber = toNumber;

  /*------------------------------------------------------------------------*/

  /**
                                                                                * The semantic version number.
                                                                                *
                                                                                * @static
                                                                                * @memberOf _
                                                                                * @type {string}
                                                                                */
  lodash.VERSION = VERSION;

  /*--------------------------------------------------------------------------*/

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if ( true && _typeof(__webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js")) == 'object' && __webpack_require__(/*! !webpack amd options */ "./node_modules/webpack/buildin/amd-options.js")) {
    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return lodash;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
}).call(this);
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ })

/******/ });
//# sourceMappingURL=LayerManager.js.map