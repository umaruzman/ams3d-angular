{"version":3,"file":"CompGeom/CompGeom.js","sources":["webpack://Autodesk.Extensions.[name]/webpack/bootstrap","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/LmvCanvasContext.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/bezier.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/complex-polygon.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/contour-set.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/dcel.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/edge-set.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/ellipse.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/fuzzy-math.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/index.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/interval-tree.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/libs/clipper.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/libs/earcut.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/path2d.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/point-list.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/poly2tri.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/quad-tree.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/x-box-box.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/x-box-plane.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/x-line-box.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/x-line-line.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/x-mesh-plane.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/x-plane-segment.js","webpack://Autodesk.Extensions.[name]/./extensions/CompGeom/x-triangle-plane.js","webpack://Autodesk.Extensions.[name]/(webpack)/buildin/global.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./extensions/CompGeom/index.js\");\n","function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === \"Object\" && o.constructor) n = o.constructor.name;if (n === \"Map\" || n === \"Set\") return Array.from(o);if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _iterableToArrayLimit(arr, i) {if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\nimport { Path2D } from \"./path2d\";\n\nvar av = Autodesk.Viewing,\navp = av.Private;\n\nvar VertexBufferBuilder = avp.VertexBufferBuilder;\n\nvar _document = av.getGlobal().document;\n//Custom implementation of HTML Canvas API used for rendering PDF geometry using the WebGL accelerated F2D renderer\n\n\n//A custom context object that overloads standard HMTL Canvas 2D context to intercept draw\n//calls and pipe them into LMV vertex buffers\nexport function hijackContextAPI(inContext, lmvContext) {\n\n  var fnList = [\n  \"fillRect\",\n  \"strokeRect\",\n  \"clearRect\",\n  \"beginPath\",\n  \"closePath\",\n  \"moveTo\",\n  \"lineTo\",\n  \"arc\",\n  \"arcTo\",\n  \"quadraticCurveTo\",\n  \"bezierCurveTo\",\n  \"rect\",\n  \"fill\",\n  \"stroke\",\n  \"clip\",\n  \"strokeText\",\n  \"fillText\",\n  \"drawImage\",\n  \"save\",\n  \"restore\",\n  \"setLineDash\",\n  \"createPattern\",\n\n  // OCG related\n  \"beginMarkedContent\",\n  \"beginMarkedContentProps\",\n  \"endMarkedContent\",\n  \"setCurrentOperatorIndex\",\n\n  //Inject this function into canvas context so we can batch process inlineImageGroup related calls\n  \"needDelegateInlineImageGroup\",\n  \"isLMVCanvasContext\",\n  \"createChildGroupContext\",\n  \"endChildGroupContext\"];\n\n\n  fnList.forEach(function (fn) {\n    inContext[\"_original\" + fn] = inContext[fn];\n    inContext[fn] = lmvContext[fn].bind(lmvContext);\n  });\n\n}\n\nvar QUAD_TEXTURE = 1;\nvar IMAGE_TEXTURE = 2;\n\nvar _tmpXform = new Array(6);\nvar _tmpVec = new THREE.Vector2();\nvar _tmpBox = new THREE.Box2();\n\n\n//Used for matrix decomposition in drawImage\nvar _offset = new THREE.Vector3();\nvar _quat = new THREE.Quaternion();\nvar _scale = new THREE.Vector3();\nvar _axis = new THREE.Vector3();\nvar _mtx4 = new THREE.Matrix4();\n\nexport var LmvCanvasContext = /*#__PURE__*/function () {_createClass(LmvCanvasContext, null, [{ key: \"isRef\",\n\n    /**\n                                                                                                               * Check is a PDF Ref object\n                                                                                                               * @param {PDF.Ref} obj \n                                                                                                               */value: function isRef(\n    obj) {\n      return obj != null && typeof obj.num === \"number\" && typeof obj.gen === \"number\";\n    }\n\n    /**\n       * generate a simple string works as a key for the ref.\n       * @param {PDF.Ref} ref \n       */ }, { key: \"refKey\", value: function refKey(\n    ref) {\n      return \"\".concat(ref.num, \"-\").concat(ref.gen);\n    } }]);\n\n  function LmvCanvasContext(viewport, toPageUnits, meshCallback, fontEngine, usingTextLayer, fontAtlas, pdfRefMap) {_classCallCheck(this, LmvCanvasContext);\n\n    //\n    // Prepare canvas using PDF page dimensions\n    //\n    //TODO: Do we need that or can we just overload the entire CanvasContext API and skip the HTML element creation completely?\n    var canvas = _document.createElement('canvas');\n    var context = canvas.getContext('2d');\n    canvas.height = viewport.height;\n    canvas.width = viewport.width;\n\n    this.canvasContext = context; //REQUIRED for PDF.js interface\n    this.viewport = viewport; //REQUIRED for PDF.js interface\n    this.toPageUnits = toPageUnits;\n\n    // LMV-5812: This constant is required to calculate the line width\n    // Usually the viewport is scaled by a value greater than 1, but for some PDFs (ultra wide) the scale value will be less than 1.\n    // The line width should be downscaled with the same factor as the viewport, otherwise lines would look too large\n    // The default line width is 1 for canvas context 2d.\n    this.lineWidthScale = this.viewport.scale < 1 ? this.viewport.scale / this.viewport.scaleByDPI : 1;\n\n    this.meshCallback = meshCallback;\n    // Only set bounds for PDF, because Edit2d is using LmvCanvasContext for drawing, and doesn't require clipping\n    if (viewport.clipToViewport == true) {\n      var offsetX = viewport.offsetX || 0;\n      var offsetY = viewport.offsetY || 0;\n      this.bounds = new THREE.Vector4(offsetX * toPageUnits, offsetY * toPageUnits,\n      (viewport.width + offsetX) * toPageUnits, (viewport.height + offsetY) * toPageUnits);\n    }\n\n    this.currentMeshIndex = 0;\n    this.imageNumber = 0;\n    this.currentVbb = new VertexBufferBuilder(false);\n    this._curPath = null;\n    this._curClip = null;\n    this.first = true;\n    this.states = [];\n    this.glyphCache = {};\n    this.usingTextLayer = usingTextLayer;\n\n    //Fixed precision tolerance assuming the input is in typographic \"point\" units.\n    this.precisionTolerance = 0.1;\n\n    this.dbId = -1;\n    this.maxDbId = 0;\n\n    // If true, dbId is automatically increased on each beginPath call.\n    this.consecutiveIds = false;\n\n    if (av.isMobileDevice()) {\n      Autodesk.Extensions.CompGeom.SetTesselationParams(undefined, 0.1);\n    }\n\n    this.fontEngine = fontEngine;\n\n    // Use solid lines by default. See LineStyleDef.js for other line types (dashed etc.)\n    this.lineStyle = 0;\n\n    // If true, lines widths are applied in screen-space\n    this.isScreenSpace = false;\n\n    hijackContextAPI(context, this);\n\n    this.layers = {};\n    this.defaultLayerId = 0;\n    this.currentLayerId = this.defaultLayerId;\n    this.sequencedDbId = -1;\n    this.taggedId = null;\n    this.defaultVPId = 0;\n    this.currentVpId = this.defaultVPId;\n    this.viewports = [this.createViewPortData(new THREE.Matrix4().elements)];\n    this.viewportMap = {};\n\n    this.ocgStack = [];\n\n    this.msdfRender = true;\n    this.fontAtlas = fontAtlas;\n    this.pdfRefMap = pdfRefMap || {};\n  }_createClass(LmvCanvasContext, [{ key: \"destroy\", value: function destroy()\n\n    {\n      this.canvasContext = null;\n      this.meshCallback = null;\n    } }, { key: \"updateDBId\", value: function updateDBId()\n\n    {\n      if (this.taggedId != null) {\n        this.dbId = this.taggedId;\n      } else {\n        if (this.consecutiveIds) {\n          this.sequencedDbId++;\n          this.dbId = this.sequencedDbId;\n        }\n      }\n\n      this.maxDbId = Math.max(this.maxDbId, this.dbId);\n    } }, { key: \"save\", value: function save()\n\n    {\n      //console.log(\"save\");\n      this.states.push({\n        clip: this._curClip,\n        consecutiveIds: this.consecutiveIds,\n        lineDashedDef: this.lineDashedDef,\n        lineStyle: this.lineStyle });\n\n\n      this.canvasContext._originalsave();\n    } }, { key: \"restore\", value: function restore()\n\n    {\n\n      var state = this.states.pop();\n\n      if (state) {\n        this._curClip = state.clip;\n        this.consecutiveIds = state.consecutiveIds;\n        this.lineDashedDef = state.lineDashedDef;\n        this.lineStyle = state.lineStyle;\n      }\n\n      //console.log(\"restore\");\n      this.canvasContext._originalrestore();\n    } }, { key: \"flushBuffer\", value: function flushBuffer(\n\n    addCount, finalFlush, textureOption) {\n      if (!this.currentVbb.vcount && !finalFlush) {\n        return;\n      }\n\n      // LMV-5542 - support blend modes for fill colors\n      // Limit the number of times that meshes are split up.\n      // When adding support for a new compositeOperation, add it to the if condition.\n      var compositeOperation = 'source-over';\n      var globalCompOp = this.canvasContext.globalCompositeOperation;\n      if (globalCompOp === 'multiply' || globalCompOp === 'min' || globalCompOp === 'darken' || globalCompOp === 'lighten') {\n        compositeOperation = globalCompOp;\n      }\n\n      // When the blending mode has changed, we have to flush the shapes that were added with the blending mode that\n      // was current until now, that's why we use this.currentCompositeOperation below when setting material.compositeOperation.\n      var blendModeChanged = this.currentCompositeOperation !== compositeOperation;\n      var flush = finalFlush || this.currentVbb.isFull(addCount) || blendModeChanged;\n\n      if (flush) {\n        if (this.currentVbb.vcount) {\n          var mesh = this.currentVbb.toMesh();\n          mesh.material = {\n            skipEllipticals: !this.currentVbb.numEllipticals,\n            skipCircles: !this.currentVbb.numCirculars,\n            skipTriangleGeoms: !this.currentVbb.numTriangleGeoms,\n            useInstancing: this.currentVbb.useInstancing,\n            isScreenSpace: !this.currentImage,\n            hasLineStyles: this.currentVbb.hasLineStyles,\n            msdfFontTexture: !!this.hasMSDFContent,\n            viewportBounds: this.bounds,\n            imageUVTexture: textureOption === IMAGE_TEXTURE };\n\n\n          if (this.currentImage) {\n            mesh.material.image = this.currentImage;\n            mesh.material.image.name = this.currentImage.cacheKey || this.imageNumber++;\n            // Assume the background of PDF page is white, when use it to do multiply, white is better then black color\n            // And it should be correct for most cases\n            mesh.material.compositeCanvasColor = \"#ffffff\";\n            mesh.material.opacity = this.canvasContext.globalAlpha;\n            this.currentImage = null;\n          }\n\n          mesh.material.compositeOperation = this.currentCompositeOperation;\n\n          this.meshCallback(mesh, this.currentMeshIndex++);\n          this.currentVbb.reset(0);\n          this.hasMSDFContent = false;\n        }\n      }\n\n      this.currentCompositeOperation = compositeOperation;\n    }\n\n    //Polytriangle requires some post-processing depending on wheter instancing is used or not\n    //TODO: This is copy-pasted from the same function in F2D.js. It's purely used to\n    //add half width outline to polytriangles so that they look antialiased.\n  }, { key: \"addPolyTriangle\", value: function addPolyTriangle(points, inds, color, dbId, layer, antialiasEdges) {\n      var me = this;\n      var edgeMap = null;\n\n      var currentVpId = this.currentVpId;\n\n      var aaLineWeight = -0.5; //negative = in pixel units\n\n      function processEdge(iFrom, iTo) {\n        if (iFrom > iTo) {\n          var tmp = iFrom;\n          iFrom = iTo;\n          iTo = tmp;\n        }\n\n        if (!edgeMap[iFrom])\n        edgeMap[iFrom] = [iTo];else\n        {\n          var adjacentVerts = edgeMap[iFrom];\n          var idx = adjacentVerts.lastIndexOf(iTo);\n          if (idx == -1)\n          adjacentVerts.push(iTo); //first time we see this edge, so remember it as exterior edge\n          else\n            adjacentVerts[idx] = -1; //the second time we see an edge mark it as interior edge\n        }\n      }\n\n\n      function addAllAntialiasEdges() {\n\n        for (var i = 0, iEnd = edgeMap.length; i < iEnd; i++) {\n\n          var adjacentVerts = edgeMap[i];\n          if (!adjacentVerts)\n          continue;\n\n          for (var j = 0; j < adjacentVerts.length; j++) {\n            var iTo = adjacentVerts[j];\n            if (iTo == -1)\n            continue; //an interior edge was here -- skip\n            else {\n                //exterior edge -- add an antialiasing line for it\n                me.flushBuffer(4);\n                me.currentVbb.addSegment(points[2 * i], points[2 * i + 1],\n                points[2 * iTo], points[2 * iTo + 1],\n                me.currentLayerId,\n                aaLineWeight,\n                color,\n                dbId, layer, currentVpId, me.lineStyle);\n              }\n          }\n        }\n      }\n\n      function antialiasOneEdge(iFrom, iTo) {\n        if (iFrom > iTo) {\n          var tmp = iFrom;\n          iFrom = iTo;\n          iTo = tmp;\n        }\n\n        var adjacentVerts = edgeMap[iFrom];\n        if (!adjacentVerts)\n        return;\n\n        var idx = adjacentVerts.indexOf(iTo);\n        if (idx != -1) {\n          //exterior edge -- add an antialiasing line for it\n          me.flushBuffer(4);\n          me.currentVbb.addSegment(points[2 * iFrom], points[2 * iFrom + 1],\n          points[2 * iTo], points[2 * iTo + 1],\n          me.currentLayerId,\n          aaLineWeight,\n          color,\n          dbId, layer, currentVpId, me.lineStyle);\n        }\n      }\n\n      if (antialiasEdges) {\n        edgeMap = new Array(points.length / 2);\n\n        for (var i = 0, iEnd = inds.length; i < iEnd; i += 3) {\n          var i0 = inds[i];\n          var i1 = inds[i + 1];\n          var i2 = inds[i + 2];\n\n          processEdge(i0, i1);\n          processEdge(i1, i2);\n          processEdge(i2, i0);\n        }\n      }\n\n      if (isNaN(color) && (color.isPattern === true || color.imageTransform)) {\n        this.flushBuffer(0, true);\n        var image = color.image;\n        var count = points.length / 2; // number of vertices\n\n        this.flushBuffer(count);\n        var vbb = this.currentVbb;\n        var vbase = vbb.vcount;\n\n        // need to apply the transformation to the UV\n        var xform = this.getCurrentTransform();\n        var x1, y1, w1, h1;\n        if (color.isGradient) {\n          x1 = this._curPath.bbox.min.x;\n          y1 = this._curPath.bbox.min.y;\n          w1 = this._curPath.bbox.max.x - x1;\n          h1 = this._curPath.bbox.max.y - y1;\n        } else {\n          x1 = this.tx(0, 0, xform);\n          y1 = this.ty(0, 0, xform);\n          w1 = Math.abs(this.tx(image.width, image.height, xform) - x1);\n          h1 = Math.abs(this.ty(image.width, image.height, xform) - y1);\n        }\n\n        //LMV-5353\n        if (color.repetition === \"no-repeat\" && !color.isGradient) {\n          var x2 = this.tx(image.width, image.height, xform);\n          var y2 = this.ty(image.width, image.height, xform);\n          vbb.addVertexImagePolytriangle(x1, y1, 0, 0, 0xFFFFFFFF, dbId, layer, currentVpId);\n          vbb.addVertexImagePolytriangle(x1, y2, 0, -1, 0xFFFFFFFF, dbId, layer, currentVpId);\n          vbb.addVertexImagePolytriangle(x2, y2, 1, -1, 0xFFFFFFFF, dbId, layer, currentVpId);\n          vbb.addVertexImagePolytriangle(x2, y1, 1, 0, 0xFFFFFFFF, dbId, layer, currentVpId);\n\n          inds = [0, 1, 2, 0, 2, 3];\n        } else if (color.imageTransform) {\n          for (var i = 0; i < count; ++i) {\n            var x = points[2 * i];\n            var y = points[2 * i + 1];\n\n            var u = (image.width * (x - x1) / w1 + color.imageTransform.x) / color.imageTransform.width;\n            var v = (image.height * (y - y1) / h1 + color.imageTransform.y) / color.imageTransform.height;\n\n            vbb.addVertexImagePolytriangle(x, y, u, v, 0xFFFFFFFF, dbId, layer, currentVpId);\n          }\n        } else {\n          for (var i = 0; i < count; ++i) {\n            var x = points[2 * i];\n            var y = points[2 * i + 1];\n\n            var u = (x - x1) / w1;\n            var v = (y - y1) / h1;\n\n            if (color.isGradient) {\n              v = 1 - v;\n            }\n            vbb.addVertexImagePolytriangle(x, y, u, v, 0xFFFFFFFF, dbId, layer, currentVpId);\n          }\n        }\n\n        this.currentImage = image;\n        vbb.addIndices(inds, vbase);\n        this.flushBuffer(0, true, IMAGE_TEXTURE);\n      } else {\n        if (this.currentVbb.useInstancing) {\n          var count = inds.length;\n          for (var i = 0; i < count; i += 3) {\n            var i0 = inds[i];\n            var i1 = inds[i + 1];\n            var i2 = inds[i + 2];\n\n            this.flushBuffer(4);\n\n            this.currentVbb.addTriangleGeom(points[2 * i0], points[2 * i0 + 1],\n            points[2 * i1], points[2 * i1 + 1],\n            points[2 * i2], points[2 * i2 + 1],\n            color, dbId, layer, currentVpId);\n\n            if (antialiasEdges) {\n              antialiasOneEdge(i0, i1);\n              antialiasOneEdge(i1, i2);\n              antialiasOneEdge(i2, i0);\n            }\n          }\n        } else\n        {\n          var count = points.length / 2; // number of vertices\n\n          this.flushBuffer(count);\n          var vbb = this.currentVbb;\n          var vbase = vbb.vcount;\n\n          for (var i = 0; i < count; ++i) {\n            var x = points[2 * i];\n            var y = points[2 * i + 1];\n            vbb.addVertexPolytriangle(x, y, color, dbId, layer, currentVpId);\n          }\n\n          vbb.addIndices(inds, vbase);\n\n          if (antialiasEdges) {\n            addAllAntialiasEdges();\n          }\n\n        }\n      }\n    }\n\n    /**\n       * Returns a new GradientData instance.\n       * @param {Object} data - contains the raw data to create the GradientData.\n       * @returns {GradientData}\n       */ }, { key: \"createGradientData\", value: function createGradientData(\n    data) {\n      return new GradientData(data);\n    }\n\n    //Extract colors from HTML Canvas state\n  }, { key: \"getFillColor\", value: function getFillColor() {var _this = this;\n      // Create a pattern from a CanvasGradient\n      var getGradientFill = function getGradientFill(gradientData) {\n\n        var startPoint = gradientData.startPoint.slice();\n        var endPoint = gradientData.endPoint.slice();\n\n        var scale = _this.viewport.scale || 1;\n        // Take into account the path's bounding box\n        var width = (_this._curPath.bbox.max.x - _this._curPath.bbox.min.x) / _this.toPageUnits / scale;\n        var height = (_this._curPath.bbox.max.y - _this._curPath.bbox.min.y) / _this.toPageUnits / scale;\n\n        // Get the offset from the bounding box\n        var offsetX = _this._curPath.bbox.min.x / _this.toPageUnits / scale;\n        var offsetY = _this._curPath.bbox.min.y / _this.toPageUnits / scale;\n\n        startPoint[0] -= offsetX;\n        startPoint[1] -= offsetY;\n        endPoint[0] -= offsetX;\n        endPoint[1] -= offsetY;\n\n        var tempCanvas = document.createElement('canvas');\n        tempCanvas.width = width;\n        tempCanvas.height = height;\n\n        var tempCtx = tempCanvas.getContext('2d');\n        // Create the gradient with the paths bounding box offset applied\n        // var gradient = createGradient(tempCtx, gradientData);\n        var gradient = gradientData.generateCanvasGradient(tempCtx, startPoint, endPoint);\n        tempCtx.fillStyle = gradient;\n        tempCtx.fillRect(0, 0, tempCanvas.width, tempCanvas.height);\n\n        var pattern = _this.createPattern(tempCanvas, 'no-repeat');\n        pattern.isGradient = true;\n        return pattern;\n      };\n\n\n      var fillStyle = this.canvasContext.fillStyle;\n      if (fillStyle && fillStyle.isPattern === true) {\n        return fillStyle;\n      } else if (fillStyle instanceof CanvasGradient) {\n        var gradientData = new GradientData(fillStyle);\n        return getGradientFill(gradientData);\n      } else if (typeof fillStyle !== \"string\") {\n        console.warn(\"Unsupported fill style.\");\n        return 0x00000000;\n      }\n\n      var rgb = parseInt(fillStyle.slice(1), 16);\n      var a = 255 * this.canvasContext.globalAlpha << 24;\n      var c = a | (rgb & 0xff) << 16 | rgb & 0xff00 | rgb >> 16 & 0xff;\n      return c;\n    } }, { key: \"getStrokeColor\", value: function getStrokeColor()\n\n    {\n\n      var ctx = this.canvasContext;\n\n      if (this.lastStrokeStyle === ctx.strokeStyle && ctx.globalAlpha === this.lastAlpha) {\n        return this.lastRgb;\n      } else {\n        var rgb = parseInt(ctx.strokeStyle.slice(1), 16);\n        var a = 255 * ctx.globalAlpha << 24;\n        var c = a | (rgb & 0xff) << 16 | rgb & 0xff00 | rgb >> 16 & 0xff;\n\n        this.lastRgb = c;\n        this.lastStrokeStyle = ctx.strokeStyle;\n        this.lastAlpha = ctx.globalAlpha;\n\n        return c;\n      }\n\n    } }, { key: \"getCurrentTransform\", value: function getCurrentTransform()\n\n    {\n      var xform = this.canvasContext.mozCurrentTransform;\n\n      //Pay attention here: In case we are processing the path of a character and we want to\n      //cache it for later use, we have to neutralize the part of the canvas transform that positions\n      //the character in the page, but we need to keep the rest of the transform (that positions parts\n      //of the character in its own em-box). This is what the inverse transform multiplication here does.\n      //TODO: we can optimize this to only compute the multiplication in case mozCurrentTransform changes.\n      if (this.isFontChar) {\n        var m = this.invXform;\n        var a = xform[0],b = xform[1],c = xform[2],d = xform[3],e = xform[4],f = xform[5];\n        _tmpXform[0] = m[0] * a + m[2] * b;\n        _tmpXform[1] = m[1] * a + m[3] * b;\n        _tmpXform[2] = m[0] * c + m[2] * d;\n        _tmpXform[3] = m[1] * c + m[3] * d;\n        _tmpXform[4] = m[0] * e + m[2] * f + m[4];\n        _tmpXform[5] = m[1] * e + m[3] * f + m[5];\n        return _tmpXform;\n      }\n      return xform;\n    } }, { key: \"tx\", value: function tx(\n\n    x, y, xform) {\n      xform = xform || this.getCurrentTransform();\n      return (x * xform[0] + y * xform[2] + xform[4]) * (this.isFontChar ? 1 : this.toPageUnits);\n    } }, { key: \"ty\", value: function ty(\n\n    x, y, xform) {\n      xform = xform || this.getCurrentTransform();\n      return (x * xform[1] + y * xform[3] + xform[5]) * (this.isFontChar ? 1 : this.toPageUnits);\n    } }, { key: \"scaleValue\", value: function scaleValue(\n\n    v, xform) {\n      xform = xform || this.getCurrentTransform();\n      return this.toPageUnits * Math.sqrt(Math.abs(xform[0] * xform[3] - xform[1] * xform[2])) * v; //assumes uniform;\n    } }, { key: \"transformBox\", value: function transformBox(\n\n    bbox, xform, dst) {\n      xform = xform || this.getCurrentTransform();\n\n      _tmpBox.makeEmpty();\n\n      _tmpVec.set(this.tx(bbox.min.x, bbox.min.y, xform), this.ty(bbox.min.x, bbox.min.y, xform));\n      _tmpBox.expandByPoint(_tmpVec);\n\n      _tmpVec.set(this.tx(bbox.max.x, bbox.min.y, xform), this.ty(bbox.max.x, bbox.min.y, xform));\n      _tmpBox.expandByPoint(_tmpVec);\n\n      _tmpVec.set(this.tx(bbox.max.x, bbox.max.y, xform), this.ty(bbox.max.x, bbox.max.y, xform));\n      _tmpBox.expandByPoint(_tmpVec);\n\n      _tmpVec.set(this.tx(bbox.min.x, bbox.max.y, xform), this.ty(bbox.min.x, bbox.max.y, xform));\n      _tmpBox.expandByPoint(_tmpVec);\n\n      if (dst) {\n        dst.copy(_tmpBox);\n        return dst;\n      } else {\n        return _tmpBox.clone();\n      }\n    } }, { key: \"fillRect\", value: function fillRect(\n\n\n    x, y, w, h) {\n      this.updateDBId();\n\n      // Hack: Assumption here is that the first fillRect call is for the white background quad.\n      //       For this, we don't want a dbI and use -1 instead. Unfortunately, this fillRect call happens\n      //       inside PDF.js (see beginDrawing in display/canvas.js), so we cannot easily set this id from outside.\n      this.rect(x, y, w, h);\n\n      this.dbId = this.first ? -1 : this.dbId;\n      this.first = false;\n      this.fill();\n      this.beginPath();\n    } }, { key: \"strokeRect\", value: function strokeRect(\n\n    x, y, w, h) {\n      //TODO:\n      console.log(\"strokeRect\");\n    } }, { key: \"clearRect\", value: function clearRect(\n\n    x, y, w, h) {\n      console.log(\"clearRect\");\n      //TODO:\n    } }, { key: \"_beginTextChar\", value: function _beginTextChar(\n\n    character, x, y, font, fontSize) {\n      this.isFontChar = true;\n      this.invXform = this.canvasContext.mozCurrentTransformInverse;\n      this.hashKey = character.charCodeAt(0) + \"/\" + font.loadedName + \"/\" + fontSize;\n      this.cachedGlyph = this.glyphCache[this.hashKey];\n\n      if (this.cachedGlyph) {\n        this.skipPath = true;\n      } else {\n        this.skipPath = false;\n      }\n      //console.log(character, x, y, font, fontSize);\n    } }, { key: \"drawMSDFText\", value: function drawMSDFText(\n\n    character, scaleX, scaleY, font, fontSize) {\n      scaleX = 0;\n      var fontName = font.name;\n\n      function distance(x0, y0, x1, y1, x2, y2) {\n        return Math.abs((y2 - y1) * x0 - (x2 - x1) * y0 + x2 * y1 - y2 * x1) / Math.sqrt((y2 - y1) * (y2 - y1) + (x2 - x1) * (x2 - x1));\n      }\n\n      if (this.fontAtlas && this.fontAtlas.charsMap && this.fontAtlas.charsMap[fontName]) {\n        var charIndex = this.fontAtlas.charsMap[fontName][character.charCodeAt(0)];\n        if (charIndex == undefined) {\n          return false;\n        } else {\n          if (this.currentVbb.isFull(4)) {\n            this.flushBuffer(0, true);\n          }\n\n          this.hasMSDFContent = true;\n          var char = this.fontAtlas.chars[charIndex];\n          if (char.page > 0) {\n            // Now only support 1 page of font texture, need to add extra logic for multiple font texture in the shader pipeline\n            return false;\n          }\n          var common = this.fontAtlas.common[char.common];\n          var info = this.fontAtlas.info[char.info];\n\n          // need to consider the font size\n          var scale = fontSize / info.size;\n          var w = char.width * (scale + scaleX);\n          var flag = char.inverseYAxis ? -1 : 1;\n          var h = char.height * (scale + scaleY) * flag;\n          var x = char.txoffset * (scale + scaleX),\n          y = char.tyoffset * (scale + scaleY) * -flag;\n\n          var points = [\n          x, y,\n          x, y + h,\n          x + w, y + h,\n          x + w, y];\n\n\n          var ps = [];\n          for (var _i = 0; _i < points.length; _i += 2) {\n            ps.push(this.tx(points[_i], points[_i + 1]));\n            ps.push(this.ty(points[_i], points[_i + 1]));\n          }\n\n          if (char.inverseYAxis) {\n            var uv = [\n            char.x / common.scaleW, 1 - char.y / common.scaleH,\n            char.x / common.scaleW, 1 - (char.y + char.height) / common.scaleH,\n            // char.x/common.scaleW, 1- char.y/common.scaleH,\n            // (char.x + char.width)/common.scaleW, 1- char.y/common.scaleH,\n            (char.x + char.width) / common.scaleW, 1 - (char.y + char.height) / common.scaleH,\n            (char.x + char.width) / common.scaleW, 1 - char.y / common.scaleH];\n\n          } else {\n            var uv = [\n            char.x / common.scaleW, 1 - (char.y + char.height) / common.scaleH,\n            char.x / common.scaleW, 1 - char.y / common.scaleH,\n            (char.x + char.width) / common.scaleW, 1 - char.y / common.scaleH,\n            (char.x + char.width) / common.scaleW, 1 - (char.y + char.height) / common.scaleH];\n\n          }\n\n          // do a fast clipping for MSDF text, if the text is clipped out any part, will not show the text to make it simple\n          // otherwise it requires to do a whole UV mapping for each part left, which is overhead at this moment.\n          if (this._curClip) {\n            var path = new Path2D(this.precisionTolerance);\n            var index = 0;\n            path.moveTo(ps[index++], ps[index++]);\n            path.lineTo(ps[index++], ps[index++]);\n            path.lineTo(ps[index++], ps[index++]);\n            path.lineTo(ps[index++], ps[index++]);\n            path.closePath();\n\n            var subjFlatted = path.flattened || path.flatten(true);\n            var clipFlatted = this._curClip.flattened || this._curClip.flatten(true);\n            var precheckResult = path.preCheckForClipping(this, clipFlatted, subjFlatted, false, false);\n            if (precheckResult.needClipping) {\n              var polygons = path.msdfClipping(clipFlatted);\n              var x1 = ps[0],y1 = ps[1];\n              var x2 = ps[6],y2 = ps[7];\n              var x3 = ps[2],y3 = ps[3];\n\n              var w1 = Math.sqrt((x2 - x1) * (x2 - x1) + (y2 - y1) * (y2 - y1));\n              var h1 = Math.sqrt((x3 - x1) * (x3 - x1) + (y3 - y1) * (y3 - y1));\n              // need to get the corresponding UV value\n              for (var j = 0; j < polygons.length; j++) {\n                var polygon = polygons[j];\n                if (this.currentVbb.isFull(polygon.vertices.length)) {\n                  this.flushBuffer(0, true);\n                }\n                var _vbase = this.currentVbb.vcount;\n                for (var i = 0; i < polygon.vertices.length; i += 2) {\n                  var x0 = polygon.vertices[i];\n                  var y0 = polygon.vertices[i + 1];\n                  var dy = distance(x0, y0, x1, y1, x2, y2);\n                  var dx = distance(x0, y0, x1, y1, x3, y3);\n\n                  var u = uv[0] + (uv[4] - uv[0]) * (dx / w1);\n                  var v = uv[1] + (uv[5] - uv[1]) * (dy / h1);\n                  this.currentVbb.addVertexMSDFPolytriangle(x0, y0, u, v, this.getFillColor(), this.dbId, this.currentLayerId, 0);\n                }\n                this.currentVbb.addIndices(polygon.indices, _vbase);\n              }\n\n              this.currentImage = this.fontAtlas.pages[char.page];\n              return true;\n            } else if (precheckResult.needCancel) {\n              return true;\n            }\n          }\n\n          if (this.currentVbb.isFull(4)) {\n            this.flushBuffer(0, true);\n          }\n          var vbase = this.currentVbb.vcount;\n          var count = points.length / 2;\n          for (var _i2 = 0; _i2 < count; _i2++) {\n            this.currentVbb.addVertexMSDFPolytriangle(ps[_i2 * 2], ps[_i2 * 2 + 1], uv[_i2 * 2], uv[_i2 * 2 + 1], this.getFillColor(), this.dbId, this.currentLayerId, 0);\n          }\n\n          this.currentVbb.addIndices([0, 2, 1, 0, 2, 3], vbase);\n          this.currentImage = this.fontAtlas.pages[char.page];\n\n          return true;\n        }\n\n      } else {\n        return false;\n      }\n    } }, { key: \"beginPath\", value: function beginPath(\n\n    character, x, y, font, fontSize) {\n      this.updateDBId();\n\n      if (typeof character === \"string\" && font && fontSize) {\n        if (this.fontAtlas && this.drawMSDFText(character, x, y, font, fontSize)) {\n          this.skipPath = true;\n        } else {\n          if (this.usingTextLayer === true) {\n            this.skipPath = true;\n          } else {\n            this._beginTextChar(character, x, y, font, fontSize);\n          }\n        }\n      } else {\n        this.skipPath = false;\n        this.isFontChar = false;\n        this.cachedGlyph = null;\n      }\n\n      if (this.skipPath)\n      this._curPath = null;else\n      {\n        this._curPath = new Path2D(this.isFontChar ? 0.0001 : this.precisionTolerance);\n\n        // Apply custom tess params (if specified)\n        this._curPath.setTessParams(this.tessParams);\n      }\n    } }, { key: \"closePath\", value: function closePath()\n\n    {\n\n      if (this.skipPath)\n      return;\n\n      this._curPath.closePath();\n      this.cachedGlyph = null;\n    } }, { key: \"moveTo\", value: function moveTo(\n\n    x, y) {\n\n      if (this.skipPath)\n      return;\n\n      if (!this._curPath)\n      this.beginPath();\n\n      var xform = this.getCurrentTransform();\n\n      this._curPath.moveTo(this.tx(x, y, xform), this.ty(x, y, xform));\n    } }, { key: \"lineTo\", value: function lineTo(\n\n    x, y) {\n\n      if (this.skipPath)\n      return;\n\n      var xform = this.getCurrentTransform();\n\n      this._curPath.lineTo(this.tx(x, y, xform), this.ty(x, y, xform));\n    } }, { key: \"arc\", value: function arc(\n\n    x, y, radius, startAngle, endAngle, anticlockwise) {\n\n      if (this.skipPath)\n      return;\n\n      //TODO: transform\n\n      this._curPath.arc(x, y, radius, startAngle, endAngle, anticlockwise);\n    } }, { key: \"arcTo\", value: function arcTo(\n\n    x1, y1, x2, y2, radius) {\n\n      if (this.skipPath)\n      return;\n\n      var xform = this.getCurrentTransform();\n\n      this._curPath.arcTo(this.tx(x1, y1, xform), this.ty(x1, y1, xform),\n      this.tx(x2, y2, xform), this.ty(x2, y2, xform),\n      this.scaleValue(radius, xform));\n    } }, { key: \"quadraticCurveTo\", value: function quadraticCurveTo(\n\n    cp1x, cp1y, x, y) {\n\n      if (this.skipPath)\n      return;\n\n      var xform = this.getCurrentTransform();\n\n      this._curPath.quadraticCurveTo(this.tx(cp1x, cp1y, xform), this.ty(cp1x, cp1y, xform),\n      this.tx(x, y, xform), this.ty(x, y, xform));\n    } }, { key: \"bezierCurveTo\", value: function bezierCurveTo(\n\n    cp1x, cp1y, cp2x, cp2y, x, y) {\n\n      if (this.skipPath)\n      return;\n\n      var xform = this.getCurrentTransform();\n\n      this._curPath.bezierCurveTo(this.tx(cp1x, cp1y, xform), this.ty(cp1x, cp1y, xform),\n      this.tx(cp2x, cp2y, xform), this.ty(cp2x, cp2y, xform),\n      this.tx(x, y, xform), this.ty(x, y, xform));\n    } }, { key: \"ellipse\", value: function ellipse(\n\n    cx, cy, rx, ry, rotation, startAngle, endAngle, ccw) {\n\n      if (this.skipPath) {\n        return;\n      }\n\n      // TODO: We currently don't use ellipse() with a transform.\n      //       The current code only works for translation and uniform scale.\n      //       For rotation, startAngle/endAngle would change.\n      //       For flipping, ccw may change.\n      //       For skew, it gets really fun: \n      //        see https://math.stackexchange.com/questions/2068583/when-you-skew-an-ellipse-how-do-you-calculate-the-angle-of-rotation-and-the-new\n      var xform = this.getCurrentTransform();\n\n      this._curPath.ellipse(\n      this.tx(cx, cy, xform), this.ty(cx, cy, xform),\n      this.scaleValue(rx, xform),\n      this.scaleValue(ry, xform),\n      rotation,\n      startAngle,\n      endAngle,\n      ccw);\n\n    } }, { key: \"rect\", value: function rect(\n\n    x, y, w, h) {\n\n      if (this.skipPath)\n      return;\n\n      var xform = this.getCurrentTransform();\n\n      if (!this._curPath)\n      this.beginPath();\n\n      this._curPath.moveTo(this.tx(x, y, xform), this.ty(x, y, xform));\n      this._curPath.lineTo(this.tx(x + w, y, xform), this.ty(x + w, y, xform));\n      this._curPath.lineTo(this.tx(x + w, y + h, xform), this.ty(x + w, y + h, xform));\n      this._curPath.lineTo(this.tx(x, y + h, xform), this.ty(x, y + h, xform));\n      this._curPath.closePath();\n    } }, { key: \"fill\", value: function fill()\n\n    {\n\n      //Special flag passed to us by customization in the pdf.js library,\n      //telling us to skip the antialiasing for polygons that are both filled and stroked\n      var isFillStrokeCombo = false;\n      if (arguments.length) {var _ref;\n        var lastArg = (_ref = arguments.length - 1, _ref < 0 || arguments.length <= _ref ? undefined : arguments[_ref]);\n        if (typeof lastArg === \"boolean\") {\n          isFillStrokeCombo = lastArg;\n        }\n      }\n\n      if (this.isFontChar && !this.cachedGlyph) {\n        this.glyphCache[this.hashKey] = this._curPath;\n        this.cachedGlyph = this._curPath;\n        this.cachedGlyph.isFontChar = true;\n      }\n\n      this.isFontChar = false;\n\n      if (this.cachedGlyph) {\n        this.cachedGlyph.fill(this, this.getFillColor(), this.dbId, this.currentLayerId, this._curClip, true);\n      } else {\n        this._curPath && this._curPath.fill(this, this.getFillColor(), this.dbId, this.currentLayerId, this._curClip, false, isFillStrokeCombo);\n      }\n\n      this.skipPath = false;\n\n      //this._curClip = null;\n      //lmvContext._curPath = null;\n    } }, { key: \"stroke\", value: function stroke()\n\n    {\n      if (this.isFontChar && !this.cachedGlyph) {\n        this.glyphCache[this.hashKey] = this._curPath;\n        this.cachedGlyph = this._curPath;\n        this.cachedGlyph.isFontChar = true;\n      }\n\n      this.updateLineDashStyle();\n      this.isFontChar = false;\n\n      // LineShader uses negative lineWidths to indicate screen-space line widths. Note that this.canvasContext.lineWidth does not allow negative values.\n      // Therefore, we apply the sign separately.\n      var sign = this.isScreenSpace ? -1.0 : 1.0;\n\n      if (this.cachedGlyph) {\n        this.cachedGlyph.stroke(this, sign * this.scaleValue(this.canvasContext.lineWidth * this.lineWidthScale), this.getStrokeColor(), this.dbId, this.currentLayerId, this._curClip, true, this.lineStyle);\n      } else {\n        this._curPath && this._curPath.stroke(this, sign * this.scaleValue(this.canvasContext.lineWidth * this.lineWidthScale), this.getStrokeColor(), this.dbId, this.currentLayerId, this._curClip, false, this.lineStyle);\n      }\n\n      this.skipPath = false;\n\n      //lmvContext._curPath = null;\n    } }, { key: \"clip\", value: function clip(\n\n    param1, param2) {\n\n      if (param2 !== undefined && param1 !== undefined) {\n        this._curClip = param1;\n        console.log(\"Probably unsupported use case\");\n      } else {\n\n        //The clip region is also affected by any existing clip region,\n        //i.e. we have to clip the clip.\n        if (this._curClip) {\n          this._curClip = this._curClip.clip(this._curPath, param1);\n        } else {\n          this._curClip = this._curPath;\n        }\n\n        this._curPath = null;\n      }\n\n      //console.log(\"CLIP\", param1, param2);\n    } }, { key: \"strokeText\", value: function strokeText(\n\n    text, x, y, maxWidth, font, fontSize) {\n\n      var ctx = this.canvasContext;\n      ctx.save();\n      ctx.translate(x, y);\n\n      this.fontEngine.drawText(this, text, 0, 0, font, fontSize);\n      this.stroke();\n\n      ctx.restore();\n    } }, { key: \"fillText\", value: function fillText(\n\n    text, x, y, maxWidth, font, fontSize) {\n\n      var ctx = this.canvasContext;\n      ctx.save();\n      ctx.translate(x, y);\n\n      this.fontEngine.drawText(this, text, 0, 0, font, fontSize);\n      this.fill();\n      //this.stroke();\n\n      ctx.restore();\n    } }, { key: \"getRotationAndScale\", value: function getRotationAndScale(\n\n    xform) {\n      _mtx4.elements[0] = xform[0];\n      _mtx4.elements[1] = xform[1];\n      _mtx4.elements[4] = xform[2];\n      _mtx4.elements[5] = xform[3];\n      _mtx4.elements[12] = xform[4];\n      _mtx4.elements[13] = xform[5];\n      _mtx4.decompose(_offset, _quat, _scale);\n\n      //Derive the rotation angle by converting the quaternion to axis-angle.\n      var s = Math.sqrt(1.0 - _quat.w * _quat.w);\n      _axis.set(_quat.x / s, _quat.y / s, _quat.z / s);\n      var angle = 2.0 * Math.acos(Math.max(Math.min(1, _quat.w), -1));\n      //Take care to negate the angle if the rotation axis is into the page.\n      if (_quat.z < 0) {\n        angle = -angle;\n      }\n\n      //Angle needs to be in the range 0-2pi for use by addTextureQuad below,\n      //while input has domain [-pi, pi].\n      if (angle < 0) {\n        angle += 2 * Math.PI;\n      }\n\n      return {\n        angle: angle,\n        scale: _scale };\n\n    } }, { key: \"redrawImage\", value: function redrawImage(\n\n    image, flipX, flipY, angle) {\n      var xform = [\n      flipX * Math.cos(angle),\n      flipY * Math.sin(angle),\n      -flipX * Math.sin(angle),\n      flipY * Math.cos(angle),\n      0,\n      0];var\n\n\n      a = xform[0],b = xform[1],c = xform[2],d = xform[3],e = xform[4],f = xform[5];var _map =\n      [\n      [0, 0],\n      [image.width, 0],\n      [image.width, image.height],\n      [0, image.height]].\n      map(function (_ref2) {var _ref3 = _slicedToArray(_ref2, 2),x = _ref3[0],y = _ref3[1];return [a * x + b * y + e, c * x + d * y + f];}),_map2 = _slicedToArray(_map, 4),p1 = _map2[0],p2 = _map2[1],p3 = _map2[2],p4 = _map2[3];\n\n      // new bounds\n      var _ref4 = [\n      Math.min(p1[0], p2[0], p3[0], p4[0]),\n      Math.min(p1[1], p2[1], p3[1], p4[1]),\n      Math.max(p1[0], p2[0], p3[0], p4[0]),\n      Math.max(p1[1], p2[1], p3[1], p4[1])],x1 = _ref4[0],y1 = _ref4[1],x2 = _ref4[2],y2 = _ref4[3];\n\n\n      var canvas = document.createElement('canvas');\n      canvas.width = x2 - x1;\n      canvas.height = y2 - y1;\n      var ctx = canvas.getContext('2d');\n      ctx.transform.apply(ctx, xform);\n\n      ctx.drawImage(image, x1, y1);\n\n      // release memory\n      image.width = 0;\n      image.height = 0;\n\n      return canvas;\n    } }, { key: \"drawImage\", value: function drawImage(\n\n    image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight) {\n\n      var group;\n      var clip = this._curClip;\n\n      if (this.inlineImageGroups && this.inlineImageGroups.map[this.currentOpIndex] != undefined) {\n        // means this is an inline image call, we have already have solution for it\n        var index = this.inlineImageGroups.map[this.currentOpIndex];\n        group = this.inlineImageGroups.groups[index];\n        // if the group has already been rendered, ignore that\n        if (group.rendered === true) {\n          return;\n        } else {\n          // mark it as rendered\n          group.rendered = true;\n          image = group.canvas;\n          clip = undefined; // improvement: consider clipping when merging images\n        }\n      }\n\n      if (image.width === 0 || image.height === 0) {\n        console.warn(\"Zero size image, skipping\");\n        return;\n      }\n\n      var xform = this.getCurrentTransform();var _this$getRotationAndS =\n      this.getRotationAndScale(xform),angle = _this$getRotationAndS.angle,scale = _this$getRotationAndS.scale;\n\n      if (group) {var _ref5 =\n\n        [Math.sign(scale.x), Math.sign(scale.y)],flipX = _ref5[0],flipY = _ref5[1];\n\n        // redraw image if the current transform flips the image\n        if (flipX < 0 || flipY < 0) {\n          image = this.redrawImage(image, flipX, flipY, -angle);\n        }\n\n        // If the current transform rotates the image by 90 or 180-deg, \n        // it already adjusts for Y offset\n        var offsetY = group.flipY ? image.height : 0;\n        var MIN = 1e-10;\n        if (Math.abs(Math.cos(angle) - 1) > MIN) {\n          offsetY = 0;\n        }\n\n        // need to revert the scale\n        offsetY *= group.minScale;\n\n        dx = group.bounds.min.x;\n        dy = group.bounds.min.y + offsetY;\n        dWidth = image.width * group.minScale;\n        dHeight = image.height * group.minScale;\n      }\n\n      if (dx === undefined) {\n        dx = sx;\n        dy = sy;\n        dWidth = sWidth;\n        dHeight = sHeight;\n      }\n\n      if (dWidth === undefined) {\n        dWidth = image.width;\n        dHeight = image.height;\n      }\n\n      if (!dWidth) {\n        console.warn(\"Zero size image, skipping\");\n        return;\n      }\n\n      //console.log(\"Draw image\", dWidth, dHeight);\n\n      //Get the transformed page space image center\n      var cx = this.tx(dx + dWidth / 2, dy + dHeight / 2);\n      var cy = this.ty(dx + dWidth / 2, dy + dHeight / 2);\n\n      //Get scaled width/height. Note these scalings can result in negative numbers\n      var w = dWidth * scale.x * this.toPageUnits;\n      var h = -dHeight * scale.y * this.toPageUnits; //Image input is y-down, so we build in a y-inversion\n\n      if (clip) {\n        // if a clipping path is specified we will render the image with the clipping polygon and\n        // not with a quad\n        var color = {\n          image: image,\n          imageTransform: {\n            width: dWidth,\n            height: Math.sign(xform[3]) * -dHeight, // LMV-5840 flip the Y\n            x: dx,\n            y: dy } };\n\n\n\n        // the clipping path might be larger than the image so we need to clip it with the image quad\n        // to avoid repetition\n        var imageClip = new Path2D(this.precisionTolerance);\n        imageClip.moveTo(this.tx(dx, dy), this.ty(dx, dy));\n        imageClip.lineTo(this.tx(dx + dWidth, dy), this.ty(dx + dWidth, dy));\n        imageClip.lineTo(this.tx(dx + dWidth, dy + dHeight), this.ty(dx + dWidth, dy + dHeight));\n        imageClip.lineTo(this.tx(dx, dy + dHeight), this.ty(dx, dy + dHeight));\n        imageClip.closePath();\n\n        clip.fill(this, color, this.dbId, this.currentLayerId, imageClip, false, false);\n      } else {\n        this.flushBuffer(0, true);\n        this.currentVbb.addTexturedQuad(cx, cy, w, h, angle, 0xffff00ff, 0, this.currentLayerId, 0);\n        this.currentImage = image;\n        this.flushBuffer(0, true, QUAD_TEXTURE);\n      }\n    }\n\n    /**\n       * Mapping back the reference object to its value, and loop 1 level in\n       * @param {Object} properties \n       */ }, { key: \"_processProperties\", value: function _processProperties(\n    properties) {\n      if (LmvCanvasContext.isRef(properties)) {\n        properties = this.pdfRefMap[LmvCanvasContext.refKey(properties)];\n      }\n\n      for (var key in properties) {\n        if (LmvCanvasContext.isRef(properties[key])) {\n          properties[key] = this.pdfRefMap[LmvCanvasContext.refKey(properties[key])];\n        }\n      }\n      return properties;\n    } }, { key: \"_getPrecision\", value: function _getPrecision(\n\n    propPrecision) {\n      return propPrecision !== undefined ? propPrecision : 5;\n    } }, { key: \"beginMarkedContent\", value: function beginMarkedContent(\n\n    properties) {\n      if (properties) {\n        properties = this._processProperties(properties);\n      }\n\n      // Revit will provided tag as number\n      var tag = properties.name || properties.DBID;\n      if (!isNaN(tag)) {\n        this.taggedId = parseInt(tag);\n      } else {\n        this.taggedId = null;\n      }\n\n      if (this.taggedId !== null && this.dbId !== this.taggedId) {\n        this.updateDBId();\n      }\n\n      if (properties.VP) {\n        this.currentVpId = this.viewports.length;\n        var vp = this._getModelToViewportMatrix(properties.VP, !!properties.UNITS);\n\n        var precision = this._getPrecision(properties.PRECISION);\n        this.viewports.push(this.createViewPortData(vp, properties.UNITS, precision));\n      }\n\n      this.ocgStack.push({\n        taggedId: this.taggedId,\n        viewPortId: this.currentVpId });\n\n    } }, { key: \"beginMarkedContentProps\", value: function beginMarkedContentProps(\n\n    tag, properties) {\n      if (properties) {\n        properties = this._processProperties(properties);\n      }\n\n      if (tag === \"OC\") {\n        var ocgId = properties.ocgId;\n        var layerId = this.layers[ocgId];\n        if (layerId === undefined) {\n          layerId = this.defaultLayerId;\n        }\n        this.currentLayerId = layerId;\n\n        this.ocgStack.push({\n          layerId: this.currentLayerId });\n\n      } else {\n        if (!isNaN(tag)) {\n          this.taggedId = parseInt(tag);\n          if (this.dbId !== this.taggedId) {\n            this.updateDBId();\n          }\n        }\n        if (properties) {\n          if (properties.VP) {\n            this.currentVpId = this.viewports.length;\n            var vp = this._getModelToViewportMatrix(properties.VP, !!properties.UNITS);\n            var precision = this._getPrecision(properties.PRECISION);\n            this.viewports.push(this.createViewPortData(vp, properties.UNITS, precision));\n          }\n\n          this.ocgStack.push({\n            viewPortId: this.currentVpId,\n            taggedId: this.taggedId });\n\n        } else {\n          this.ocgStack.push({});\n\n        }\n      }\n    } }, { key: \"endMarkedContent\", value: function endMarkedContent()\n\n    {\n      var previousState = this.ocgStack.pop();\n      var previousTagId = this.taggedId;\n      if (previousState) {\n        // reset the state\n        if (previousState.taggedId != null) {\n          this.taggedId = null;\n        }\n        if (previousState.layerId) {\n          this.currentLayerId = this.defaultLayerId;\n        }\n        if (previousState.viewPortId) {\n          this.currentVpId = this.defaultVPId;\n        }\n      }\n\n      if (this.ocgStack.length > 0) {\n        var state = this.ocgStack[this.ocgStack.length - 1];\n        if (state.taggedId != null) {\n          this.taggedId = state.taggedId;\n        }\n        if (state.currentLayerId != null) {\n          this.currentLayerId = state.currentLayerId;\n        }\n        if (state.viewPortId != null) {\n          this.currentVpId = state.viewPortId;\n        }\n      } else {\n        this.currentLayerId = this.defaultLayerId;\n        this.taggedId = null;\n        this.currentVpId = this.defaultVPId;\n      }\n\n      if (previousTagId !== this.taggedId) {\n        this.updateDBId();\n      }\n    } }, { key: \"setLineStyleParam\", value: function setLineStyleParam(\n\n    param) {\n      if (!this.lineStyleInitialized) {\n        // Add those default definition in, to keep the app constent.\n        var exH = avp.LineStyleDefs.length;\n        var exW = 1;\n        for (var i = 0; i < avp.LineStyleDefs.length; i++) {\n          exW = Math.max(avp.LineStyleDefs[i].def.length, exW);\n        }var _avp$createLinePatter =\n\n        avp.createLinePatternTextureData(Math.max(param.width, exW), param.height + exH + 1),tex = _avp$createLinePatter.tex,pw = _avp$createLinePatter.pw,lineStyleTex = _avp$createLinePatter.lineStyleTex;\n        this.lineStyleIndex = 0;\n        this.lineStylePw = pw;\n        this.lineStyleTexData = tex;\n        this.lineStyleTexture = lineStyleTex;\n        this.lineStyleIndexMap = {};\n\n        for (var i = 0; i < avp.LineStyleDefs.length; i++) {\n          this.addNewDashedLineStyle(avp.LineStyleDefs[i], 96);\n        }\n\n        // set the default value\n        this.lineStyle = 0;\n        this.lineStyleInitialized = true;\n      }\n    } }, { key: \"addNewDashedLineStyle\", value: function addNewDashedLineStyle(\n\n    ls, dpi) {\n      var key = ls.def.join(\"/\");\n      if (this.lineStyleIndexMap[key] != undefined) {\n        return this.lineStyleIndexMap[key];\n      } else {\n        avp.createLinePatternForDef(ls, this.lineStyleTexData, this.lineStyleIndex, this.lineStylePw, dpi);\n        var index = this.lineStyleIndex;\n        this.lineStyleIndexMap[key] = index;\n        this.lineStyleIndex++;\n\n        return index;\n      }\n    } }, { key: \"setLineDash\", value: function setLineDash(\n\n    def) {\n      if (!this.lineStyleInitialized) {\n        this.setLineStyleParam({ width: 5, height: 4 });\n      }\n\n      this.lineDashedDef = def;\n    } }, { key: \"createPattern\", value: function createPattern(\n\n    image, repetition) {\n      var pattern = this.canvasContext._originalcreatePattern(image, repetition);\n      pattern.image = image;\n      pattern.repetition = repetition;\n      pattern.isPattern = true;\n      return pattern;\n    } }, { key: \"updateLineDashStyle\", value: function updateLineDashStyle()\n\n    {\n      // need apply the transformation matrix to the dashed value\n      var def = this.lineDashedDef;\n\n      if (def) {\n        if (def.length > 0) {\n          var xform = this.getCurrentTransform();\n          var def1 = [];\n          for (var i = 0; i < def.length; i++) {\n            var x = (def[i] * xform[0] + def[i] * xform[2]) * this.toPageUnits;\n            x = parseFloat(x.toFixed(6));\n            def1.push(x);\n          }\n          // 96 DPI was defined for lineStyleDef.js, and shader were expecting that value\n          // when we parse the pdf, the effective dpi need to be ==> 96 / 72 / this.toPageUnits\n          this.lineStyle = this.addNewDashedLineStyle({ def: def1 }, 96 / 72 / this.toPageUnits);\n        } else {\n          this.lineStyle = 0;\n        }\n      }\n      // In case of user directly controlled the line style\n      // Do not set lineStyle to 0 here.\n    } }, { key: \"setCircleInfo\", value: function setCircleInfo(\n\n    circleInfo) {\n      this.circleInfo = circleInfo;\n    } }, { key: \"setCurrentOperatorIndex\", value: function setCurrentOperatorIndex(\n\n    index) {\n      this.currentOpIndex = index;\n      if (this.circleInfo && this.circleInfo[index]) {\n        var xform = this.getCurrentTransform();\n        var x = this.tx(this.circleInfo[index][0], this.circleInfo[index][1], xform);\n        var y = this.ty(this.circleInfo[index][0], this.circleInfo[index][1], xform);\n\n        // Inject the center of the circle\n        var hiddenColor = 0x01ffffff; // Note that lineShader discards fully transparent fragments. Therefore, we use a white here with very small, but nonzero alpha.\n        var c = this.currentVbb.addVertexLine(x, y, 0, 0.0001, 0, 0, hiddenColor, this.dbId, this.currentLayerId, this.currentVpId);\n        this.currentVbb.finalizeQuad(c);\n      }\n    }\n\n    /**\n       * We have fuge performance issue when the PDF contains inline image group\n       * And each line will call a drawImage, with the whole texture enabled\n       * It causes OOM and slow down the whole rendering\n       * In order to boost the performance, we need to do a preprocess to combine those scane line images\n       * Once, we have that information, we ignore the draw call for those images,\n       * this function is the entry point to pass those preprocessed image in to the drawing context\n       * LMV-5175\n       * \n       * @param {Object} imageGroups \n       */ }, { key: \"setInlineImageGroups\", value: function setInlineImageGroups(\n    imageGroups) {\n      if (imageGroups && imageGroups.groups.length > 0) {\n        this.inlineImageGroups = imageGroups;\n      }\n    } }, { key: \"needDelegateInlineImageGroup\", value: function needDelegateInlineImageGroup()\n\n    {\n      var hasGroup = this.inlineImageGroups && this.inlineImageGroups.map[this.currentOpIndex] != undefined;\n      return hasGroup;\n    }\n\n    // Set custom tesselation params for bezier arcs (see Bezier.h)\n    // If undefined, we use the default settings.\n  }, { key: \"setTessParams\", value: function setTessParams(tessParams) {\n      this.tessParams = tessParams;\n    } }, { key: \"finish\", value: function finish()\n\n    {\n      this.flushBuffer(0, true);\n      this.fontAtlas = null;\n    } }, { key: \"createViewPortData\", value: function createViewPortData(\n\n    matrix, units, precision) {\n\n      precision = precision !== undefined ? precision : 5; // LMV-5701: Default precision will be set to 5.\n\n      return {\n        \"units\": units || \"feet and inches\",\n        \"transform\": matrix,\n        \"geom_metrics\": this.initGeomMetrics(),\n        \"precision\": precision };\n\n    } }, { key: \"isLMVCanvasContext\", value: function isLMVCanvasContext()\n\n    {\n      return true;\n    }\n\n    //Initializes a structure of counters used for statistical purposes and sheet content hash\n  }, { key: \"initGeomMetrics\", value: function initGeomMetrics() {\n      return {\n        \"arcs\": 0,\n        \"circles\": 0,\n        \"circ_arcs\": 0,\n        \"viewports\": 0,\n        \"clips\": 0,\n        \"colors\": 0,\n        \"db_ids\": 0,\n        \"dots\": 0,\n        \"fills\": 0,\n        \"layers\": 0,\n        \"line_caps\": 0,\n        \"line_joins\": 0,\n        \"line_patterns\": 0,\n        \"line_pat_refs\": 0,\n        \"plines\": 0,\n        \"pline_points\": 0,\n        \"line_weights\": 0,\n        \"links\": 0,\n        \"miters\": 0,\n        \"ptris\": 0,\n        \"ptri_indices\": 0,\n        \"ptri_points\": 0,\n        \"rasters\": 0,\n        \"texts\": 0,\n        \"strings\": [] };\n\n    }\n\n    // Needs to be called when using \n    //Copied from pdf.js, because our 2D renderer relies on mozCurrentTransform being available\n  }, { key: \"addContextCurrentTransform\", value: function addContextCurrentTransform() {\n\n      var ctx = this.canvasContext;\n\n      if (!ctx.mozCurrentTransform) {\n        ctx._originalSave = ctx.save;\n        ctx._originalRestore = ctx.restore;\n        ctx._originalRotate = ctx.rotate;\n        ctx._originalScale = ctx.scale;\n        ctx._originalTranslate = ctx.translate;\n        ctx._originalTransform = ctx.transform;\n        ctx._originalSetTransform = ctx.setTransform;\n        ctx._transformMatrix = ctx._transformMatrix || [1, 0, 0, 1, 0, 0];\n        ctx._transformStack = [];\n        Object.defineProperty(ctx, 'mozCurrentTransform', {\n          get: function getCurrentTransform() {\n            return this._transformMatrix;\n          } });\n\n        Object.defineProperty(ctx, 'mozCurrentTransformInverse', {\n          get: function getCurrentTransformInverse() {\n            var m = this._transformMatrix;\n            var a = m[0],\n            b = m[1],\n            c = m[2],\n            d = m[3],\n            e = m[4],\n            f = m[5];\n            var ad_bc = a * d - b * c;\n            var bc_ad = b * c - a * d;\n            return [d / ad_bc, b / bc_ad, c / bc_ad, a / ad_bc, (d * e - c * f) / bc_ad, (b * e - a * f) / ad_bc];\n          } });\n\n        ctx.save = function ctxSave() {\n          var old = this._transformMatrix;\n          this._transformStack.push(old);\n          this._transformMatrix = old.slice(0, 6);\n          this._originalSave();\n        };\n        ctx.restore = function ctxRestore() {\n          var prev = this._transformStack.pop();\n          if (prev) {\n            this._transformMatrix = prev;\n            this._originalRestore();\n          }\n        };\n        ctx.translate = function ctxTranslate(x, y) {\n          var m = this._transformMatrix;\n          m[4] = m[0] * x + m[2] * y + m[4];\n          m[5] = m[1] * x + m[3] * y + m[5];\n          this._originalTranslate(x, y);\n        };\n        ctx.scale = function ctxScale(x, y) {\n          var m = this._transformMatrix;\n          m[0] = m[0] * x;\n          m[1] = m[1] * x;\n          m[2] = m[2] * y;\n          m[3] = m[3] * y;\n          this._originalScale(x, y);\n        };\n        ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n          var m = this._transformMatrix;\n          this._transformMatrix = [m[0] * a + m[2] * b, m[1] * a + m[3] * b, m[0] * c + m[2] * d, m[1] * c + m[3] * d, m[0] * e + m[2] * f + m[4], m[1] * e + m[3] * f + m[5]];\n          ctx._originalTransform(a, b, c, d, e, f);\n        };\n        ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n          this._transformMatrix = [a, b, c, d, e, f];\n          ctx._originalSetTransform(a, b, c, d, e, f);\n        };\n        ctx.rotate = function ctxRotate(angle) {\n          var cosValue = Math.cos(angle);\n          var sinValue = Math.sin(angle);\n          var m = this._transformMatrix;\n          this._transformMatrix = [m[0] * cosValue + m[2] * sinValue, m[1] * cosValue + m[3] * sinValue, m[0] * -sinValue + m[2] * cosValue, m[1] * -sinValue + m[3] * cosValue, m[4], m[5]];\n          this._originalRotate(angle);\n        };\n      }\n    } }, { key: \"createChildGroupContext\", value: function createChildGroupContext()\n\n    {var _this$canvasContext;\n      this.flushBuffer(0, true);\n      var self;\n\n      var alpha = (_this$canvasContext = this.canvasContext) === null || _this$canvasContext === void 0 ? void 0 : _this$canvasContext.globalAlpha;\n      function meshCallback(mesh) {\n        // LMV-5840: Apply the global alpha to the meshes in the group.\n        if (typeof alpha === 'number' && mesh.material.opacity !== alpha) {\n          mesh.material.hasOpacity = !!alpha;\n          mesh.material.opacity = alpha;\n        }\n        self.groupChildMeshes.push(mesh);\n      }\n\n      var ctx = new LmvCanvasContext(this.viewport, this.toPageUnits, meshCallback, this.fontEngine, this.usingTextLayer, this.fontAtlas, this.pdfRefMap);\n      // Assign different dbids to geometry in the child group context. LMV-5515\n      ctx.consecutiveIds = true;\n\n      ctx.groupChildMeshes = [];\n\n      ctx.sequencedDbId = this.sequencedDbId;\n      ctx.dbId = this.dbId;\n      ctx.imageNumber = this.imageNumber;\n      self = ctx;\n\n      ctx.addContextCurrentTransform();\n      ctx.parent = this;\n      ctx.canvasContext.isLMVGroupContext = true;\n      return ctx.canvasContext;\n    } }, { key: \"endChildGroupContext\", value: function endChildGroupContext()\n\n    {var _this2 = this;\n      this.flushBuffer(0, true);\n\n      if (this.groupChildMeshes && this.groupChildMeshes.length > 0) {\n        var self = this;\n        // mesh's matrix has already been converted to pageUnit, for this group matrix\n        // we need to conver the translation matrix back to pageUnit\n        var groupMatrix = self.parent.getCurrentTransform();\n        var translateX = groupMatrix[4] * self.toPageUnits;\n        var translateY = groupMatrix[5] * self.toPageUnits;\n\n        var matrix = new THREE.Matrix4();\n        matrix.makeTranslation(translateX, translateY, 0);\n\n        var meshIndex = 0;\n        this.groupChildMeshes.map(function (mesh) {\n          switch (self.parent.canvasContext.globalCompositeOperation) {\n            case 'darken':\n              mesh.material.compositeOperation = 'min';\n              break;\n            case 'lighten':\n              mesh.material.compositeOperation = 'max';\n              break;\n            case 'multiply':\n              mesh.material.compositeOperation = 'multiply';\n              break;}\n\n          // If we have nested stack of group\n          // we need multiply the matrix, Kevin: I do not have any test pdf for this assumption\n          // in future if we see something wrong, we need try to revisit this part\n          if (mesh.groupMatrix) {\n            mesh.groupMatrix.multiply(matrix);\n          } else {\n            // make a clone to avoid the matrix was modified multiple times when it was nested\n            mesh.groupMatrix = matrix.clone();\n          }\n\n          self.parent.meshCallback(mesh, meshIndex + _this2.parent.currentMeshIndex);\n          meshIndex++;\n        });\n\n        this.parent.sequencedDbId = this.sequencedDbId;\n        this.parent.currentMeshIndex += meshIndex;\n        this.parent.dbId = this.dbId;\n        this.parent.imageNumber = this.imageNumber;\n        this.groupChildMeshes.length = 0;\n      }\n    } }, { key: \"_getModelToViewportMatrix\", value: function _getModelToViewportMatrix(\n\n    vpData, isUnitsDefined) {\n      // This is the model to vp matrix without 300 / 72 viewport scaling\n      var vp = typeof vpData === 'string' ? JSON.parse(vpData) : vpData;\n      // Apply the viewport scale\n      if (isUnitsDefined) {\n        vp[0] *= this.viewport.scale;\n        vp[5] *= this.viewport.scale;\n      }\n      return vp;\n    } }]);return LmvCanvasContext;}();\n\n\n\n/**\n                                        * Class used to normalize gradient data.\n                                        */var\nGradientData = /*#__PURE__*/function () {\n  function GradientData(color) {_classCallCheck(this, GradientData);\n    // RawData comes from PDFjs.\n    if (color.hasOwnProperty('rawData')) {\n      var data = color.rawData;\n      this.type = data[1];\n      this.colorStops = data[3];\n      this.startPoint = data[4];\n      this.endPoint = data[5];\n      this.startRadius = data[6];\n      this.endRadius = data[7];\n    } else {\n      Object.assign(this, color);\n    }\n  }\n\n  /**\n     * Check if the GradientData is valid.\n     * @return {boolean} - true if valid.\n     */_createClass(GradientData, [{ key: \"isValid\", value: function isValid()\n    {\n      if (!this.type || !this.startPoint || !this.endPoint || !this.colorStops) {\n        return false;\n      }\n\n      if (this.type === 'radial' && (this.startRadius === undefined || this.endRadius === undefined)) {\n        return false;\n      }\n\n      return true;\n    }\n\n    /**\n       * Creates a temporary canvasGradient with all of the GradientData properties assigned to it.\n       * This is required when assigning a context's fillstyle.\n       * @param {CanvasRenderingContext2D} ctx - 2d render context.\n       * @returns {CanvasGradient} - containing the GradientData's properties\n       */ }, { key: \"getFillStyle\", value: function getFillStyle(\n    ctx) {\n      if (!this.isValid()) {\n        return;\n      }\n      // This is a temporary gradient. It is only used to pass the gradient data's properties to the fillStyle.\n      var tempGradient = ctx.createLinearGradient(0, 0, 1, 1);\n      Object.assign(tempGradient, this);\n      return tempGradient;\n    }\n\n    /**\n       * Generate a CanvasGradient.\n       * @param {CanvasRenderingContext2D} ctx - 2d render context.\n       * @param {number[]} [startPoint] - modified start position\n       * @param {number[]} [endPoint] - modified end position\n       * @returns {CanvasGradient} - Canvas Gradient\n       */ }, { key: \"generateCanvasGradient\", value: function generateCanvasGradient(\n    ctx, startPoint, endPoint) {\n      if (!this.isValid()) {\n        return;\n      }\n      var type = this.type;\n      var colorStops = this.colorStops;\n      var p0 = startPoint || this.startPoint;\n      var p1 = endPoint || this.endPoint;\n      var r0 = this.startRadius;\n      var r1 = this.endRadius;\n      var grad = null;\n\n      if (type === 'axial' || type === 'linear') {\n        grad = ctx.createLinearGradient(p0[0], p0[1], p1[0], p1[1]);\n      } else if (type === 'radial') {\n        grad = ctx.createRadialGradient(p0[0], p0[1], r0, p1[0], p1[1], r1);\n      }\n      for (var i = 0, ii = colorStops.length; i < ii; ++i) {\n        var c = colorStops[i];\n        grad.addColorStop(c[0], c[1]);\n      }\n\n      return grad;\n    } }]);return GradientData;}();","\n\nexport var DefaultTessParams = {\n  //How many forward iterations to use when approximating Bezier curves\n  //More iterations are needed in case the min_seg_len setting below is smaller\n  //relative to mesh size. However, the two numbers need to be tuned together\n  //so that NUM_ITERATIONS is enough to result in segment lengths desired.\n\n  //Note that those values are tuned for PDF rendering, where text characters\n  //are drawn one by one. If a long piece of text is drawn all at once, then\n  //its bounding box will be quite large, so the relative min_seg_len will also\n  //be too large and the characters will look coarse. In such cases, we will need\n  //to better estimate this by using e.g. the font height only.\n  numIterations: 100,\n\n  //What fraction of the bounding sbox should be the minimum length of\n  //a segment\n  minSegLenFraction: 0.05 };\n\n\nexport function SetTesselationParams(num_iterations, min_seg_len_fraction) {\n  if (num_iterations)\n  DefaultTessParams.numIterations = num_iterations;\n\n  if (min_seg_len_fraction)\n  DefaultTessParams.minSegLenFraction = min_seg_len_fraction;\n}\n\nfunction distance(x1, y1, x2, y2) {\n  return Math.sqrt((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2));\n}\n\nfunction adjustMaxdim(maxdim, segLength) {\n  if (maxdim > 4 * segLength && segLength > 0) {\n    var time = Math.sqrt(maxdim / segLength);\n    time = Math.min(4, time);\n    maxdim = segLength * time;\n  }\n  return maxdim;\n}\n\nexport function TesselateCubic(ctx, px1, py1, px2, py2, px3, py3, px4, py4, maxdim, tessParams, isFont)\n{\n  tessParams = tessParams || DefaultTessParams;\n\n  var aproximateLength = distance(px1, py1, px2, py2) + distance(px2, py2, px3, py3) + distance(px3, py3, px4, py4);\n\n  // maxdim is the size of the bounds of the path\n  // but for individual path, we need to use aproximateLength\n  // we need to balance both performance and visual effect\n  // so we leverage both value and try to balance it.\n  if (!isFont) {\n    maxdim = adjustMaxdim(maxdim, aproximateLength);\n  }\n\n  //we will base the max number of segments to use for approximation\n  //on the bounds of the full line buffer contents\n  //TODO: as an improvement we could take the bounds of this particular curve\n  //with respect to the full bounds of the line buffer data.\n  maxdim = maxdim || 1 / tessParams.minSegLenFraction;\n\n  //minimum length of tesselation segment\n  //set to 1/100 of the bounds\n  var minSegLen = maxdim * tessParams.minSegLenFraction;\n\n  //but for now we will iterate 100 times\n  var dt = 1.0 / tessParams.numIterations;\n\n  //double dt2 = dt*dt;\n  var dt3 = dt * dt * dt;\n\n  var pre1 = 3.0 * dt;\n  var pre2 = pre1 * dt;\n  var pre3 = pre2 + pre2;\n  var pre4 = 6.0 * dt3;\n\n  var temp1x = px1 - 2.0 * px2 + px3;\n  var temp1y = py1 - 2.0 * py2 + py3;\n  var temp2x = 3.0 * (px2 - px3) - px1 + px4;\n  var temp2y = 3.0 * (py2 - py3) - py1 + py4;\n\n  var fx = px1;\n  var fy = py1;\n  var dfx = (px2 - px1) * pre1 + temp1x * pre2 + temp2x * dt3;\n  var dfy = (py2 - py1) * pre1 + temp1y * pre2 + temp2y * dt3;\n  var ddfx = temp1x * pre3 + temp2x * pre4;\n  var ddfy = temp1y * pre3 + temp2y * pre4;\n  var dddfx = temp2x * pre4;\n  var dddfy = temp2y * pre4;\n\n  var error = 0.0;\n\n  // forward differencing loop\n  var tMax = 0 | 1.0 / dt - 0.5;\n  for (var t = 0; t < tMax; t++)\n  {\n    fx += dfx;\n    fy += dfy;\n    dfx += ddfx;\n    dfy += ddfy;\n    ddfy += dddfy;\n    ddfx += dddfx;\n\n    error += Math.sqrt(dfx * dfx + dfy * dfy);\n\n    if (error >= minSegLen) //add segment only if we have reached treshold length\n      {\n        // line to current\n        ctx.lineTo(fx, fy);\n        error = 0.0;\n      }\n  }\n\n  ctx.lineTo(px4, py4);\n}\n\nexport function TesselateQuad(ctx, px1, py1, px2, py2, px3, py3, maxdim, tessParams, isFont)\n{\n  tessParams = tessParams || DefaultTessParams;\n\n  var aproximateLength = distance(px1, py1, px2, py2) + distance(px2, py2, px3, py3);\n\n  // maxdim is the size of the bounds of the path\n  // but for individual path, we need to use aproximateLength\n  // we need to balance both performance and visual effect\n  // so we leverage both value and try to balance it.\n  if (!isFont) {\n    maxdim = adjustMaxdim(maxdim, aproximateLength);\n  }\n\n  //we will base the max number of segments to use for approximation\n  //on the bounds of the full line buffer contents\n  //TODO: as an improvement we could take the bounds of this particular curve\n  //with respect to the full bounds of the line buffer data.\n  maxdim = maxdim || 1 / tessParams.minSegLenFraction;\n\n  //minimum length of tesselation segment\n  //set to a fraction of the bbox of the entire path (value chosen to work well for text at reasonable font size)\n  var minSegLen = maxdim * tessParams.minSegLenFraction;\n\n  //but for now we will iterate 100 times\n  var dt = 1.0 / tessParams.numIterations;\n\n  var dt2 = dt * dt;\n\n  var ax = px1 - 2.0 * px2 + px3; //replace 2* by addition?\n  var ay = py1 - 2.0 * py2 + py3; //replace 2* by addition?\n\n  var bx = 2.0 * (px2 - px1);\n  var by = 2.0 * (py2 - py1);\n\n  var fx = px1;\n  var fy = py1;\n  var dfx = bx * dt + ax * dt2;\n  var dfy = by * dt + ay * dt2;\n  var ddfx = 2.0 * ax * dt2;\n  var ddfy = 2.0 * ay * dt2;\n\n  var error = 0.0;\n\n  //forward differencing loop\n  var tMax = 0 | 1.0 / dt - 0.5;\n  for (var t = 0; t < tMax; t++)\n  {\n    fx += dfx;\n    fy += dfy;\n    dfx += ddfx;\n    dfy += ddfy;\n\n    error += Math.sqrt(dfx * dfx + dfy * dfy);\n\n    if (error >= minSegLen) // how many pixels should each line be?)\n      {\n        ctx.lineTo(fx, fy);\n        error = 0.0;\n      }\n  }\n\n  ctx.lineTo(px3, py3);\n}\n\n// Cubic Bezier for single points. Note that TesselateCubic is faster by using deltas.\n// Result is returned as a new {x,y} or written to optionalTarget.\nexport function getCubeBezierPoint(t, px1, py1, px2, py2, px3, py3, px4, py4, optionalTarget) {\n\n  var result = optionalTarget || { x: x, y: y };\n\n  var k = 1 - t;\n\n  // Bernstein coefficients\n  var bp1 = k * k * k;\n  var bp2 = 3 * k * k * t;\n  var bp3 = 3 * k * t * t;\n  var bp4 = t * t * t;\n\n  result.x = bp1 * px1 + bp2 * px2 + bp3 * px3 + bp4 * px4;\n  result.y = bp1 * py1 + bp2 * py2 + bp3 * py3 + bp4 * py4;\n\n  return result;\n}","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}import * as lmv_poly2tri from \"./poly2tri\";\nimport { IntervalTree } from \"./interval-tree\";\nimport { segmentsIntersect, ONE_INTERSECTION, OVERLAP } from \"./x-line-line\";\n\nvar avp = Autodesk.Viewing.Private;\nvar logger = avp.logger;\n\nfunction jitterPoints(pts) {\n\n  for (var i = 0, iEnd = pts.length; i < iEnd; i++) {\n    pts[i].x += (Math.random() - 0.5) * 1e-9;\n    pts[i].y += (Math.random() - 0.5) * 1e-9;\n  }\n\n}\n\nfunction copyPoints(pts, bbox) {\n\n  //Moving poiints to be centered on the origin\n  //seems to improve triangulation success rate, or\n  //at least avoids some bugs in poly2yti\n\n  var sz = bbox.size();\n  var offsetx = bbox.min.x + sz.x * 0.5;\n  var offsety = bbox.min.y + sz.y * 0.5;\n  var scale = 2.0 / sz.length();\n\n  var pts2 = [];\n\n  for (var i = 0, iEnd = pts.length; i < iEnd; i++) {\n    pts2.push({\n      x: (pts[i].x - offsetx) * scale, // + (Math.random()-0.5) * 1e-9,\n      y: (pts[i].y - offsety) * scale, // + (Math.random()-0.5) * 1e-9,\n      _triidx: i + 1 });\n\n  }\n\n  return pts2;\n\n}\n\n\n//Represents a polygon with holes, and provides triangulation and mesh conversion utilities\nexport var ComplexPolygon = /*#__PURE__*/function () {\n\n  function ComplexPolygon(uniquePoints, customInsidechecker, bbox) {_classCallCheck(this, ComplexPolygon);\n    this.pts = uniquePoints;\n    this.contours = [];\n    this.customInsideChecker = customInsidechecker;\n    this.bbox = bbox;\n  }_createClass(ComplexPolygon, [{ key: \"addContour\", value: function addContour(\n\n    indices) {\n      this.contours.push(indices);\n    } }, { key: \"pointInContour\", value: function pointInContour(\n\n    x, y, cntr) {\n      var yflag0, yflag1;\n      var vtx0X, vtx0Y, vtx1X, vtx1Y;\n\n      var inside_flag = false;\n\n      var pts = this.pts;\n\n      // get the last point in the polygon\n      vtx0X = pts[cntr[cntr.length - 1]].x;\n      vtx0Y = pts[cntr[cntr.length - 1]].y;\n\n      // get test bit for above/below X axis\n      yflag0 = vtx0Y >= y;\n\n      for (var j = 0, jEnd = cntr.length; j < jEnd; ++j)\n      {\n        vtx1X = pts[cntr[j]].x;\n        vtx1Y = pts[cntr[j]].y;\n\n        yflag1 = vtx1Y >= y;\n\n        // Check if endpoints straddle (are on opposite sides) of X axis\n        // (i.e. the Y's differ); if so, +X ray could intersect this edge.\n        // The old test also checked whether the endpoints are both to the\n        // right or to the left of the test point.  However, given the faster\n        // intersection point computation used below, this test was found to\n        // be a break-even proposition for most polygons and a loser for\n        // triangles (where 50% or more of the edges which survive this test\n        // will cross quadrants and so have to have the X intersection computed\n        // anyway).  I credit Joseph Samosky with inspiring me to try dropping\n        // the \"both left or both right\" part of my code.\n        if (yflag0 != yflag1)\n        {\n          // Check intersection of pgon segment with +X ray.\n          // Note if >= point's X; if so, the ray hits it.\n          // The division operation is avoided for the \">=\" test by checking\n          // the sign of the first vertex wrto the test point; idea inspired\n          // by Joseph Samosky's and Mark Haigh-Hutchinson's different\n          // polygon inclusion tests.\n          if ((vtx1Y - y) * (vtx0X - vtx1X) >=\n          (vtx1X - x) * (vtx0Y - vtx1Y) == yflag1)\n          {\n            inside_flag = !inside_flag;\n          }\n        }\n\n        // move to the next pair of vertices, retaining info as possible\n        yflag0 = yflag1;\n        vtx0X = vtx1X;\n        vtx0Y = vtx1Y;\n      }\n\n      return inside_flag;\n    } }, { key: \"pointInPolygon\", value: function pointInPolygon(\n\n\n    x, y) {\n      var inside = false;\n\n      for (var i = 0; i < this.contours.length; i++) {\n\n        if (this.pointInContour(x, y, this.contours[i]))\n        inside = !inside;\n      }\n\n      return inside;\n    } }, { key: \"triangulate\", value: function triangulate()\n\n    {\n      try {\n        this.triangulateInternal();\n      } catch (e) {\n\n        if (e.message.indexOf(\"Collinear not supported!\") !== -1) {\n          try {\n            this.triangulateInternal(true);\n            //logger.log(\"Triangulation retry success.\");\n          } catch (e) {\n            //logger.warn(\"Triangulation retry failed\", e);\n            this.triangulationFailed = true;\n          }\n        } else {\n          //logger.warn(\"Triangulation failed\", e);\n          this.triangulationFailed = true;\n        }\n      }\n    } }, { key: \"createPointInPolygonChecker\", value: function createPointInPolygonChecker()\n\n    {\n\n      var edges = [];\n\n      for (var i = 0; i < this.contours.length; i++) {\n        var cntr = this.contours[i];\n\n        var len = cntr.length;\n        for (var k = 0; k < len - 1; k++) {\n          var e = {\n            p1: cntr[k],\n            p2: cntr[k + 1] };\n\n          edges.push(e);\n        }\n      }\n\n      var it = new IntervalTree(this.pts, edges, this.bbox);\n      it.build();\n      this.customInsideChecker = it;\n    } }, { key: \"triangulateInternal\", value: function triangulateInternal(\n\n    wantJitter) {\n\n      if (!this.contours.length) {\n        this.triangulationFailed = true;\n        this.indices = null;\n        return;\n      }\n\n      this.indices = [];\n\n      var _pts = copyPoints(this.pts, this.bbox);\n\n      if (wantJitter) {\n        jitterPoints(_pts);\n      }\n\n      var sweepCtx = new lmv_poly2tri.SweepContext([]);\n\n      sweepCtx.points_ = _pts;\n\n      for (var i = 0; i < this.contours.length; i++) {\n        var cntr = this.contours[i];\n\n        //Contour is not closed\n        var isOpen = cntr[0] !== cntr[cntr.length - 1];\n\n        //if (isOpen)\n        //    continue;\n\n        var len = isOpen ? cntr.length : cntr.length - 1;\n        var edge = new Array(len);\n        for (var k = 0; k < len; k++) {\n          edge[k] = _pts[cntr[k]];\n        }\n\n        sweepCtx.initEdges(edge, isOpen);\n      }\n\n      sweepCtx.triangulate();\n\n      this.processResult(sweepCtx);\n\n      this.triangulationFailed = !this.indices || !this.indices.length;\n\n    } }, { key: \"processResult\", value: function processResult(\n\n    sweepCtx) {\n\n      //If the polygon has a lot of vertices, create\n      //an acceleration structure for point-in-polygon checks\n      //so we can filter the triangles faster.\n      if (this.pts.length > 10 && !this.customInsideChecker)\n      this.createPointInPolygonChecker();\n\n      var tris = sweepCtx.map_;\n      for (var i = 0; i < tris.length; i++) {\n        var tpts = tris[i].points_;\n        var p0 = tpts[0];\n        var p1 = tpts[1];\n        var p2 = tpts[2];\n\n        var i0 = p0._triidx;\n        var i1 = p1._triidx;\n        var i2 = p2._triidx;\n\n        if (i0 && i1 && i2)\n        this.filterFace(i0 - 1, i1 - 1, i2 - 1);\n\n      }\n    } }, { key: \"filterFace\", value: function filterFace(\n\n\n    i0, i1, i2) {\n\n      var p0 = this.pts[i0];\n      var p1 = this.pts[i1];\n      var p2 = this.pts[i2];\n\n      var cx = (p0.x + p1.x + p2.x) / 3;\n      var cy = (p0.y + p1.y + p2.y) / 3;\n\n      var inside = this.customInsideChecker ? this.customInsideChecker.pointInPolygon(cx, cy) : this.pointInPolygon(cx, cy);\n\n      if (inside) {\n\n        var e1x = p1.x - p0.x;\n        var e1y = p1.y - p0.y;\n        var e2x = p2.x - p0.x;\n        var e2y = p2.y - p0.y;\n\n        var cross = e1x * e2y - e2x * e1y;\n\n        if (cross > 0) {\n          this.indices.push(i0, i1, i2);\n        } else {\n          this.indices.push(i0, i2, i1);\n        }\n\n      }\n    }\n\n    //Returns intersection points between the given line\n    //segment and the polygon's contours\n  }, { key: \"findSegmentIntersections\", value: function findSegmentIntersections(ex1, ey1, ex2, ey2) {\n\n      if (!this.cachedEdges) {\n\n        this.cachedEdges = [];\n\n        for (var j = 0; j < this.contours.length; j++) {\n          var cntr = this.contours[j];\n\n          for (var i = 0; i < cntr.length - 1; i++) {\n\n            //Add quad for each face formed by the extruded contour\n            var x1 = this.pts[cntr[i]].x;\n            var y1 = this.pts[cntr[i]].y;\n            var x2 = this.pts[cntr[i + 1]].x;\n            var y2 = this.pts[cntr[i + 1]].y;\n\n            var etmp = {\n              v1: { x: x1, y: y1 },\n              v2: { x: x2, y: y2 },\n              dx: x2 - x1,\n              dy: y2 - y1,\n              length: Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2)) };\n\n\n            this.cachedEdges.push(etmp);\n          }\n        }\n      }\n\n      var e = {\n        v1: { x: ex1, y: ey1 },\n        v2: { x: ex2, y: ey2 },\n        dx: ex2 - ex1,\n        dy: ey2 - ey1,\n        length: Math.sqrt(Math.pow(ex1 - ex2, 2) + Math.pow(ey1 - ey2, 2)) };\n\n\n      var precision = this.bbox.size().length() * 1e-4;\n\n      var res = [];\n\n      for (var _i = 0; _i < this.cachedEdges.length; _i++) {\n        var _etmp = this.cachedEdges[_i];\n        var xsect = segmentsIntersect(e, _etmp, precision);\n\n        if (xsect && xsect.status === ONE_INTERSECTION) {\n          var pt = { x: xsect.e1[0], y: xsect.e1[1] };\n          pt.d = Math.sqrt(Math.pow(pt.x - ex1, 2) + Math.pow(pt.y - ey1, 2));\n          res.push(pt);\n        }\n      }\n\n      if (res.length) {\n        //Sort in order along the input segment\n        res.sort(function (a, b) {return a.d - b.d;});\n\n        //Drop start and/or end points if they coincide with the segment start/end\n        if (res[0].d < precision) {\n          res.shift();\n        }\n\n        if (res.length && Math.abs(res[res.length - 1].d - e.length) < precision) {\n          res.pop();\n        }\n      }\n\n      return res.length ? res : null;\n    }\n\n    //creates a vertex buffer containing a filled 2D polygon for visualization on the cut plane\n    //as 2D polygon mesh in the 3D model space\n  }, { key: \"toPolygonMesh\", value: function toPolygonMesh(packNormals) {\n\n      if (this.polygonMesh)\n      return this.polygonMesh;\n\n      var pts = this.pts;\n\n      var bg = new THREE.BufferGeometry();\n\n      var pos = new Float32Array(3 * pts.length);\n      for (var j = 0; j < pts.length; j++) {\n        pos[3 * j] = pts[j].x;\n        pos[3 * j + 1] = pts[j].y;\n        pos[3 * j + 2] = 0;\n      }\n      bg.addAttribute(\"position\", new THREE.BufferAttribute(pos, 3));\n\n      var normal = packNormals ? new Uint16Array(2 * pts.length) : new Float32Array(3 * pts.length);\n\n      for (var _j = 0; _j < pts.length; _j++) {\n\n        if (packNormals) {\n          var pnx = (0 /*Math.atan2(0, 0)*/ / Math.PI + 1.0) * 0.5;\n          var pny = (1.0 + 1.0) * 0.5;\n\n          normal[_j * 2] = pnx * 65535 | 0;\n          normal[_j * 2 + 1] = pny * 65535 | 0;\n        } else {\n          normal[3 * _j] = 0;\n          normal[3 * _j + 1] = 0;\n          normal[3 * _j + 2] = 1;\n        }\n      }\n\n      bg.addAttribute(\"normal\", new THREE.BufferAttribute(normal, packNormals ? 2 : 3));\n      if (packNormals) {\n        bg.attributes.normal.bytesPerItem = 2;\n        bg.attributes.normal.normalize = true;\n      }\n\n      var index = new Uint16Array(this.indices.length);\n      index.set(this.indices);\n\n      bg.addAttribute(\"index\", new THREE.BufferAttribute(index, 1));\n\n      bg.streamingDraw = true;\n      bg.streamingIndex = true;\n\n      this.polygonMesh = bg;\n\n      return bg;\n    }\n\n\n    //creates an extruded polygon 3d mesh\n    //with the given thickness (maxZ=0, minZ=-thickness)\n  }, { key: \"toExtrudedMesh\", value: function toExtrudedMesh(thickness) {\n\n      if (this.extrudedMesh)\n      return this.extrudedMesh;\n\n      if (thickness === undefined)\n      thickness = 1;\n\n      //TODO: in case of failed triangulation\n      //we can still generate a tube mesh with just the sides, without top and bottom caps\n      if (!this.indices)\n      return null;\n\n      var vb = [];\n      var indices = [];\n      var iblines = [];\n      var vbase = 0;\n\n      //TODO: for better performance we can allocate ArrayBuffers up front with known\n      //sizes... once the logic works.\n\n      //Add the top and bottom polygons\n\n      //The top is just the already triangulated 2D polygon\n      //same as toPolygonMesh\n\n      var pts = this.pts;\n      for (var i = 0; i < pts.length; i++) {\n        vb.push(pts[i].x, pts[i].y, 0);\n        vb.push(0, 0, 1);\n      }\n\n      var inds = this.indices;\n\n      for (var _i2 = 0; _i2 < inds.length; _i2 += 3) {\n        indices.push(inds[_i2], inds[_i2 + 1], inds[_i2 + 2]);\n      }\n\n      vbase += pts.length;\n\n      //The bottom is like the top, but mirrored.\n\n      for (var _i3 = 0; _i3 < pts.length; _i3++) {\n        vb.push(pts[_i3].x, pts[_i3].y, -thickness);\n        vb.push(0, 0, -1);\n      }\n\n      for (var _i4 = 0; _i4 < inds.length; _i4 += 3) {\n        indices.push(vbase + inds[_i4], vbase + inds[_i4 + 2], vbase + inds[_i4 + 1]);\n      }\n\n      vbase += pts.length;\n\n      //The sides -- each segment of the contours becomes a quad\n\n      var tmp = new Vector3();\n      var bbox = new Box3();\n\n      for (var j = 0; j < this.contours.length; j++) {\n        var cntr = this.contours[j];\n\n        for (var _i5 = 0; _i5 < cntr.length - 1; _i5++) {\n\n          //Add quad for each face formed by the extruded contour\n          var x1 = this.pts[cntr[_i5]].x;\n          var y1 = this.pts[cntr[_i5]].y;\n          var z1 = 0;\n\n          tmp.set(x1, y1, z1);\n          bbox.expandByPoint(tmp);\n\n          var x2 = this.pts[cntr[_i5 + 1]].x;\n          var y2 = this.pts[cntr[_i5 + 1]].y;\n          var z2 = 0;\n\n          tmp.set(x2, y2, z2);\n          bbox.expandByPoint(tmp);\n\n          tmp.set(x1, y1, z1 - thickness);\n          bbox.expandByPoint(tmp);\n\n          //orthogonal to the face, will use for the normals\n          tmp.set(y1 - y2, x2 - x1, 0).normalize();\n\n          iblines.push(vbase, vbase + 1, vbase, vbase + 2, vbase + 1, vbase + 3, vbase + 2, vbase + 3);\n\n          //If it's a hole, normals and faces are inverted\n          if (j > 0) {\n\n            vb.push(x1, y1, z1, -tmp.x, -tmp.y, -tmp.z,\n            x2, y2, z2, -tmp.x, -tmp.y, -tmp.z,\n            x1, y1, z1 - thickness, -tmp.x, -tmp.y, -tmp.z,\n            x2, y2, z2 - thickness, -tmp.x, -tmp.y, -tmp.z);\n\n            indices.push(vbase, vbase + 3, vbase + 2, vbase, vbase + 1, vbase + 3);\n          } else {\n            vb.push(x1, y1, z1, tmp.x, tmp.y, tmp.z,\n            x2, y2, z2, tmp.x, tmp.y, tmp.z,\n            x1, y1, z1 - thickness, tmp.x, tmp.y, tmp.z,\n            x2, y2, z2 - thickness, tmp.x, tmp.y, tmp.z);\n\n            indices.push(vbase, vbase + 2, vbase + 3, vbase + 0, vbase + 3, vbase + 1);\n          }\n\n          vbase += 4;\n        }\n      }\n\n      //Convert to mesh suitable for rendering\n      //TODO: As mentioned above, we can do this directly in the loop above\n      //for better performance.\n\n      var vbp = new Float32Array(vb.length);\n      vbp.set(vb);\n\n      var vbi = new Uint16Array(indices.length);\n      vbi.set(indices);\n\n      var vbili = new Uint16Array(iblines.length);\n      vbili.set(iblines);\n\n      var mdata = {\n        mesh: {\n          vb: vbp,\n          indices: vbi,\n          iblines: vbili,\n\n          vbstride: 6,\n          vblayout: {\n            position: { offset: 0, itemSize: 3, bytesPerItem: 4 },\n            normal: { offset: 3, itemSize: 3, bytesPerItem: 4 } },\n\n          boundingBox: bbox,\n          boundingSphere: { center: bbox.center(), radius: bbox.size().length * 0.5 } } };\n\n\n\n      avp.BufferGeometryUtils.meshToGeometry(mdata);\n\n      mdata.geometry.streamingDraw = true;\n      mdata.geometry.streamingIndex = true;\n\n      this.extrudedMesh = mdata.geometry;\n\n      return this.extrudedMesh;\n    } }]);return ComplexPolygon;}();","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\nimport { ComplexPolygon } from \"./complex-polygon\";\n\nexport function polygonArea(pts) {\n\n  if (pts.length < 3)\n  return 0;\n\n  var needsClose = false;\n  if (pts[0] !== pts[pts.length - 1])\n  needsClose = true;\n\n  var total = 0;\n  for (var i = 0, len = pts.length - 1; i < len; i++) {\n    var v1 = pts[i];\n    var _v = pts[i + 1];\n    total += v1.x * _v.y - _v.x * v1.y;\n  }\n\n  if (needsClose) {\n    var _v2 = pts[pts.length - 1];\n    var _v3 = pts[0];\n    total += _v2.x * _v3.y - _v3.x * _v2.y;\n  }\n\n  return total * 0.5;\n}\n\n\nvar v2 = new THREE.Vector2();\n\n\n//An intermediate complex polygon representation, used by the DCEL structure to compose and triangulate\n//complex polygons, and also to convert the polygon data to various visualization representations\nexport var ContourSet = /*#__PURE__*/function () {\n\n  function ContourSet() {_classCallCheck(this, ContourSet);\n    this.contours = [];\n    this.areas = [];\n    this.bbox = new THREE.Box2();\n\n    this.allPoints = this.pts = [];\n    this.allPointsMap = {};\n  }_createClass(ContourSet, [{ key: \"addContour\", value: function addContour(\n\n    verts, skipZeroAreas) {var _this = this;\n\n      this.polygon = null;\n      this.perimeterMem = undefined;\n\n      var area = polygonArea(verts);\n\n      if (area < 0) {\n        verts.reverse();\n        area = Math.abs(area);\n      }\n\n      var cntr = [];\n\n      verts.forEach(function (v, i) {\n\n        var id = v.id;\n\n        if (typeof id === \"undefined\") {\n          //Auto-assign unique vertex ID if not given -- this assumes the caller\n          //has cleaned up the vertex data, or the polygon is simple enough not to\n          //suffer from numeric issues.\n          id = _this.contours.length + \":\" + i;\n        }\n\n        var idx = _this.allPointsMap[id];\n        if (idx === undefined) {\n          idx = _this.allPoints.length;\n          _this.allPoints.push(v);\n          _this.allPointsMap[id] = idx;\n\n          v2.set(v.x, v.y);\n          _this.bbox.expandByPoint(v2);\n        }\n        cntr.push(idx);\n      });\n\n      if (area === 0 && skipZeroAreas)\n      return;\n\n      this.contours.push(cntr);\n      this.areas.push(area);\n    } }, { key: \"addContourSet\", value: function addContourSet(\n\n    cset) {\n\n      //TODO: this can be optimized to skip this pre-processing\n\n      var cntr = cset.contours[0];\n      var pts = cset.allPoints;\n\n      var ptlist = cntr.map(function (idx) {return pts[idx];});\n\n      this.addContour(ptlist);\n    } }, { key: \"triangulate\", value: function triangulate(\n\n\n    customInsideChecker) {\n\n      if (this.polygon)\n      return;\n\n      var pts = this.allPoints;\n\n      var polygon = new ComplexPolygon(pts, customInsideChecker, this.bbox);\n\n      polygon.contours = this.contours;\n\n      polygon.triangulate();\n\n      this.polygon = polygon;\n      this.triangulationFailed = this.polygon.triangulationFailed;\n    } }, { key: \"area\", value: function area()\n\n    {\n      return this.areas[0];\n    } }, { key: \"areaNet\", value: function areaNet()\n\n    {\n      var total = this.areas[0];\n      for (var i = 1; i < this.areas.length; i++) {\n        total -= this.areas[i];}\n      return total;\n    } }, { key: \"perimeter\", value: function perimeter()\n\n    {\n\n      if (this.perimeterMem)\n      return this.perimeterMem;\n\n      var total = 0;\n      var pts = this.contours[0];\n      for (var i = 0, len = pts.length - 1; i < len; i++) {\n        var v1 = pts[i];\n        var _v4 = pts[i + 1];\n        total += Math.sqrt((v1.x - _v4.x) * (v1.x - _v4.x) + (v1.y - _v4.y) * (v1.y - _v4.y));\n      }\n\n      this.perimeterMem = total;\n\n      return total;\n    } }, { key: \"getThemeColor\", value: function getThemeColor()\n\n\n    {\n      //returns a stable random-ish color value\n      //based on properties of the geometry,\n      //for use during colorized visualization of areas and volumes\n\n      var r = this.areas[0] * 100 % 17 / 16;\n      var g = this.allPoints.length % 23 / 22;\n      var b = this.perimeterMem * 100 % 29 / 28;\n\n      return { r: r, g: g, b: b };\n    } }, { key: \"hash\", value: function hash()\n\n    {var _this2 = this;\n      var all = [];\n      this.contours.forEach(function (c) {\n        var vids = c.map(function (idx) {return _this2.allPoints[idx].id;});\n        if (vids[0] === vids[vids.length - 1])\n        vids.pop(); //remove last point that equals first point, since the same closed contour can use any of its points as a start point\n        vids.sort();\n        all.push(vids);\n      });\n      return JSON.stringify(all);\n    } }, { key: \"stitchContours\", value: function stitchContours()\n\n\n    {\n\n      //invalidate this just in case something tries to use it...\n      //it makes no sense for open polylines anyway\n      this.areas = [];\n\n      var openCntrs = [];\n      for (var i = 0; i < this.contours.length; i++) {\n        var cntr = this.contours[i];\n        if (cntr[0] !== cntr[cntr.length - 1])\n        openCntrs.push(cntr);\n      }\n\n      if (!openCntrs.length)\n      return;\n\n\n      var didSomething = true;\n      while (didSomething) {\n\n        didSomething = false;\n\n        //Try to combine contours\n        var cntr_edge_table = {};\n        var contours = this.contours;\n\n        for (var _i = 0; _i < contours.length; _i++) {\n          var _cntr = contours[_i];\n\n          var start = _cntr[0];\n          var end = _cntr[_cntr.length - 1];\n\n          if (start === end)\n          continue;\n\n          if (!cntr_edge_table[start])\n          cntr_edge_table[start] = [-_i - 1];else\n\n          cntr_edge_table[start].push(-_i - 1);\n\n\n          if (!cntr_edge_table[end])\n          cntr_edge_table[end] = [_i];else\n\n          cntr_edge_table[end].push(_i);\n        }\n\n        for (var p in cntr_edge_table) {\n          var entry = cntr_edge_table[p];\n\n          if (entry.length === 2) {\n            var toerase = undefined;\n\n            if (entry[0] < 0 && entry[1] < 0) {\n              var c1 = -entry[0] - 1;var c2 = -entry[1] - 1;\n              //join start point to startpoint\n              contours[c2].shift();\n              Array.prototype.push.apply(contours[c1].reverse(), contours[c2]);\n              toerase = c2;\n            }\n\n            if (entry[0] < 0 && entry[1] > 0) {\n              var _c = -entry[0] - 1;var _c2 = entry[1];\n              //join start point to endpoint\n              contours[_c2].pop();\n              Array.prototype.push.apply(contours[_c2], contours[_c]);\n              toerase = _c;\n            }\n\n            if (entry[0] > 0 && entry[1] < 0) {\n              var _c3 = entry[0];var _c4 = -entry[1] - 1;\n              //join end point to startpoint\n              contours[_c3].pop();\n              Array.prototype.push.apply(contours[_c3], contours[_c4]);\n              toerase = _c4;\n            }\n\n            if (entry[0] > 0 && entry[1] > 0) {\n              var _c5 = entry[0];var _c6 = entry[1];\n              //join end point to endpoint\n              contours[_c5].pop();\n              Array.prototype.push.apply(contours[_c5], contours[_c6].reverse());\n              toerase = _c6;\n            }\n\n            if (toerase !== undefined) {\n              contours.splice(toerase, 1);\n              didSomething = true;\n            }\n            break;\n          }\n        }\n\n      }\n\n    } }, { key: \"containsPointFrom\", value: function containsPointFrom(\n\n\n    cs2) {\n\n      //Only need to check a single point from the interior of the\n      //potential hole. Make sure it's inside the triangulation and not on the edge\n      //to avoid numeric noise.\n      if (!cs2.polygon.indices || cs2.polygon.indices.length < 3)\n      return false;\n\n      var p0 = cs2.allPoints[cs2.polygon.indices[0]];\n      var p1 = cs2.allPoints[cs2.polygon.indices[1]];\n      var p2 = cs2.allPoints[cs2.polygon.indices[2]];\n\n      var cx = (p0.x + p1.x + p2.x) / 3;\n      var cy = (p0.y + p1.y + p2.y) / 3;\n\n      return this.polygon && this.polygon.pointInPolygon(cx, cy);\n    }\n\n\n    //creates a vertex buffer containing a filled 2D polygon for visualization on the cut plane\n    //as 2D polygon mesh in the 3D model space\n    //TODO: Use this directly from the this.polygon\n  }, { key: \"toPolygonMesh\", value: function toPolygonMesh(packNormals) {\n\n      return this.polygon.toPolygonMesh(packNormals);\n\n    }\n\n    //creates an extruded polygon 3d mesh\n    //with the given thickness (maxZ=0, minZ=-thickness)\n    //TODO: Use this directly from the this.polygon\n  }, { key: \"toExtrudedMesh\", value: function toExtrudedMesh(thickness) {\n\n      return this.polygon.toExtrudedMesh(thickness);\n    } }]);return ContourSet;}();","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}import { segmentsIntersect, pointOnLine } from \"./x-line-line\";\nimport { isZero, isEqual, TOL } from \"./fuzzy-math\";\nimport { ContourSet } from \"./contour-set\";\nimport { QuadTree } from \"./quad-tree\";\nimport { UniquePointList } from \"./point-list\";\n\nvar avp = Autodesk.Viewing.Private;\nvar logger = avp.logger;var\n\nVertex = /*#__PURE__*/function () {\n\n  function Vertex(x, y) {_classCallCheck(this, Vertex);\n    this.x = x;\n    this.y = y;\n\n    this.edges = [];\n    this.dbIds = [];\n    this.dbIdsChanged = false;\n  }_createClass(Vertex, [{ key: \"isDegenerate\", value: function isDegenerate()\n\n    {\n      return this.edges.length < 2;\n    } }, { key: \"addEdge\", value: function addEdge(\n\n    de) {\n\n      //Make sure the same edge doesn't already exist\n      for (var i = 0; i < this.edges.length; i++) {\n\n        var e = this.edges[i];\n\n        //We already have the exact same edge, return existing id\n        if (e.v1 === de.v1 && e.v2 === de.v2)\n        return e;\n      }\n\n      //Add the edge\n      this.edges.push(de);\n      return de;\n    } }, { key: \"removeEdge\", value: function removeEdge(\n\n    de) {\n      var idx = this.edges.indexOf(de);\n      if (idx >= 0)\n      this.edges.splice(idx, 1);else\n\n      logger.warn(\"Failed to find edge in vertex list\");\n    } }, { key: \"findEdgeTo\", value: function findEdgeTo(\n\n    v) {\n      for (var i = 0; i < this.edges.length; i++) {\n        var e = this.edges[i];\n        if (e.getOppositeVertex(this) === v)\n        return e;\n      }\n\n      return null;\n    }\n\n    //TODO: make use of this when removing redundant vertices\n  }, { key: \"disconnect\", value: function disconnect() {\n      for (var i = 0; i < this.edges.length; i++) {\n        var e = this.edges[i];\n        e.getOppositeVertex(this).removeEdge(e);\n      }\n\n      var res = this.edges;\n      this.edges = [];\n\n      //Return the edges that got orphaned and need deletion \n      //from the parent structure\n      return res;\n    } }, { key: \"sortEdges\", value: function sortEdges()\n\n    {var _this = this;\n\n      this.edges.sort(function (a, b) {\n        var angle1 = a.angle;\n        if (a.v1 !== _this) {\n          angle1 -= Math.PI;\n        }\n\n        var angle2 = b.angle;\n        if (b.v1 !== _this) {\n          angle2 -= Math.PI;\n        }\n\n        return angle1 - angle2;\n      });\n\n    } }, { key: \"_canTraverse\", value: function _canTraverse(\n\n    e) {\n      //forward edge\n      if (e.v1 === this && !e.flagFwd) {\n        e.flagFwd = 1;\n        return true;\n      }\n\n      //reverse edge (points into this vertex)\n      if (e.v2 === this && !e.flagRev) {\n        e.flagRev = 1;\n        return true;\n      }\n\n      return false;\n    }\n\n    //Returns an edge that's not yet traversed during\n    //area finding\n  }, { key: \"findUntraversedEdge\", value: function findUntraversedEdge() {\n      for (var i = 0; i < this.edges.length; i++) {\n        var e = this.edges[i];\n\n        if (this._canTraverse(e))\n        return e;\n      }\n\n      return null;\n    }\n\n    //Assuming edges are already sorted,\n    //returns the edge that's immediately CCW to \n    //the given edge\n  }, { key: \"findNextCCWEdge\", value: function findNextCCWEdge(e) {\n\n      var idx = this.edges.indexOf(e);\n\n      if (idx === -1) {\n        logger.error(\"This edge isn't mine.\");\n        return null;\n      }\n\n      //Dangling vertex\n      if (this.isDegenerate()) {\n        return null;\n      }\n      /*        \r\n                let idxNext = idx - 1;\r\n                if (idxNext < 0)\r\n                    idxNext = this.edges.length -1;\r\n                    */\n      var idxNext = (idx + 1) % this.edges.length;\n\n      var eNext = this.edges[idxNext];\n\n      if (this._canTraverse(eNext))\n      return eNext;\n\n      //logger.warn(\"Hmmm... Didn't find an edge to continue from here.\");\n      return null;\n    } }]);return Vertex;}();var\n\n\n\n\nDirectedEdge = /*#__PURE__*/function () {\n\n  function DirectedEdge(v1, v2, id) {_classCallCheck(this, DirectedEdge);\n    var swap = false;\n\n    //Orient the edge so it has increasing dy and dx\n    if (v2.y < v1.y)\n    swap = true;else\n    if (v2.y === v1.y)\n    swap = v2.x < v1.x;\n\n    //the coordinates stored in the edge\n    //might be slightly different from the vertex coordinates\n    //of the v1 and v2 vertices. The vertices are \"snapped\" to \n    //the nearest snap positin, while the edge coordinates are the \"original\" ones\n    //from the 3d mesh that generated the edge.\n    if (swap) {\n      this.v1 = v2;\n      this.v2 = v1;\n    } else {\n      this.v1 = v1;\n      this.v2 = v2;\n    }\n\n    this.dx = this.v2.x - this.v1.x;\n    this.dy = this.v2.y - this.v1.y;\n    this.length2 = this.dx * this.dx + this.dy * this.dy;\n    this.length = Math.sqrt(this.length2);\n    this.angle = Math.atan2(this.dy, this.dx);\n\n    if (this.angle < 0) {\n      if (isZero(this.angle))\n      this.angle = 0;else\n      if (isEqual(this.angle, -Math.PI))\n      this.angle = Math.PI;\n\n      if (this.angle < 0)\n      logger.warn(\"Unexpected edge slope <0 :\", this.angle);\n    }\n\n    //the edge index in the edge list of the parent data structure\n    this.id = id;\n\n    this.minx = Math.min(this.v1.x, this.v2.x);\n    this.miny = Math.min(this.v1.y, this.v2.y);\n    this.maxx = Math.max(this.v1.x, this.v2.x);\n    this.maxy = Math.max(this.v1.y, this.v2.y);\n\n\n    //traversal flags, set temporarily \n    //during graph tarversal\n    this.flagFwd = 0;\n    this.flagRev = 0;\n\n    this.dbIdsCached = null;\n  }_createClass(DirectedEdge, [{ key: \"paramAlong\", value: function paramAlong(\n\n    x, y) {\n      var dot = (x - this.v1.x) * this.dx + (y - this.v1.y) * this.dy;\n      return dot / this.length2;\n    } }, { key: \"getOppositeVertex\", value: function getOppositeVertex(\n\n    v) {\n      if (this.v1 === v)\n      return this.v2;else\n      if (this.v2 === v)\n      return this.v1;else\n\n      logger.warn(\"Edge does not own this vertex.\");\n    } }, { key: \"getDbIds\", value: function getDbIds()\n\n    {\n      //Return all dbIds that are common between the two \n      //vertices of the edge. Used when splitting edges\n      //to pass the information to new vertices\n\n      if (!this.v1.dbIdsChanged && !this.v2.dbIdsChanged) {\n        return this.dbIdsCached;\n      }\n\n      //Calculate intersection of the dbId arrays of\n      //the two vertices.\n      var res = [];\n      var idv1 = this.v1.dbIds;\n      var idv2 = this.v2.dbIds;\n      for (var i = 0; i < idv1.length; i++) {\n        if (idv2.indexOf(idv1[i]) !== -1)\n        res.push(idv1[i]);\n      }\n\n      //Cache the result so we don't recompute unnecessarily\n      //This requires cooperation by the vertex object change flag.\n      this.dbIdsCached = res;\n      this.v1.dbIdsChanged = false;\n      this.v2.dbIdsChanged = false;\n\n      return res;\n    } }]);return DirectedEdge;}();\n\n\n\n\n//doubly connected edge list\nexport var DCEL = /*#__PURE__*/function () {\n\n\n  function DCEL(bbox, precisionTolerance) {_classCallCheck(this, DCEL);\n\n    this.bbox = bbox;\n    this.boxSize = this.bbox.size().length();\n\n    if (typeof precisionTolerance === \"number\") {\n      //Input is in model units, e.g. if model is in feet,\n      //precision tolerance has to be in feet\n      this.precisionTolerance = precisionTolerance;\n    } else {\n      this.precisionTolerance = TOL * this.boxSize;\n    }\n\n    this.edges = [];\n    this.verts = new UniquePointList(this.bbox, this.precisionTolerance, Vertex, true);\n\n    this.quadTreeEdges = new QuadTree(this.bbox.min.x, this.bbox.min.y, this.bbox.max.x, this.bbox.max.y, this.precisionTolerance);\n\n    this.nextEdgeId = 1;\n  }_createClass(DCEL, [{ key: \"_addVertex\", value: function _addVertex(\n\n    px, py, dbIds) {\n      return this.verts.findOrAddPoint(px, py, dbIds);\n    } }, { key: \"splitEdge\", value: function splitEdge(\n\n\n    de, points) {\n\n      var pts = [];\n\n      pts.push({\n        x: de.v1.x,\n        y: de.v1.y,\n        u: 0 });\n\n\n      //Remember the originating objects for this edge, to set them on the\n      //resulting split edges\n      var dbIds = de.getDbIds();\n\n      for (var i = 0; i < points.length; i += 2) {\n\n        var p = {\n          x: points[i],\n          y: points[i + 1],\n          u: de.paramAlong(points[i], points[i + 1]) };\n\n\n        if (isZero(p.u) || isEqual(p.u, 1))\n        continue;\n\n        pts.push(p);\n      }\n\n      //The intersection points were either on the beginning or on the end\n      //vertex of the edge, so splitting is not needed as it will result\n      //in a zero length edge.\n      if (pts.length === 1)\n      return;\n\n      pts.push({\n        x: de.v2.x,\n        y: de.v2.y,\n        u: 1 });\n\n\n      pts.sort(function (a, b) {\n        return a.u - b.u;\n      });\n\n      //Remove the source edge\n      this.removeDirectedEdge(de);\n\n      //Add all the pieces that the edge was split into\n      for (var _i = 1; _i < pts.length; _i++) {\n        this.addDirectedEdge(pts[_i - 1].x, pts[_i - 1].y, pts[_i].x, pts[_i].y, true, dbIds);\n      }\n    } }, { key: \"_enumNearEdges\", value: function _enumNearEdges(\n\n    de, cb) {\n\n      this.quadTreeEdges.enumNearItems(de, cb);\n    } }, { key: \"addDirectedEdge\", value: function addDirectedEdge(\n\n    x1, y1, x2, y2, skipSplitting, dbIds) {var _this2 = this;\n      var v1 = this._addVertex(x1, y1, dbIds);\n      var v2 = this._addVertex(x2, y2, dbIds);\n\n      if (v1 === v2) {\n        //logger.warn(\"zero length edge\");\n        return;\n      }\n\n      if (v1.findEdgeTo(v2)) {\n        //edge already exists\n        return;\n      }\n\n      var de = new DirectedEdge(v1, v2, this.nextEdgeId++);\n\n      var addedEdge = de.v1.addEdge(de);\n\n      //If the edge did not already exist...\n      if (addedEdge === de) {\n        de.v2.addEdge(de);\n\n        //Remember the unsnapped positions used for this edge\n        de.sourcePts = [x1, y1, x2, y2];\n\n        this.edges[de.id] = de;\n\n        this.quadTreeEdges.addItem(de);\n      } else {\n        //Edge is already in the graph, nothing to do\n        return addedEdge;\n      }\n\n      if (skipSplitting)\n      return addedEdge;\n\n      //Now make sure the new edge doesn't overlap or intersect existing edges\n      //by finding and splitting any intersecting edges\n      var myInts = [];\n      var otherInts = {};\n\n      this._enumNearEdges(de, function (e) {\n        var ints = segmentsIntersect(e, de, _this2.precisionTolerance);\n\n        if (!ints)\n        return;\n\n        //Existing edge was crossed by new edge -- split it\n        if (ints.e1 && ints.e1.length) {\n          otherInts[e.id] = ints.e1;\n        }\n\n        //New edge crossed existing edge -- remember the intersection point for later\n        if (ints.e2 && ints.e2.length) {\n          myInts.push.apply(myInts, ints.e2);\n        }\n\n      });\n\n      for (var id in otherInts) {\n        this.splitEdge(this.edges[parseInt(id)], otherInts[id]);\n      }\n\n      if (myInts.length)\n      this.splitEdge(de, myInts);\n\n      this.dirty = true;\n\n      return addedEdge;\n    } }, { key: \"removeDirectedEdge\", value: function removeDirectedEdge(\n\n    de) {\n\n      de.v1.removeEdge(de);\n      de.v2.removeEdge(de);\n\n      this.edges[de.id] = undefined;\n\n      this.quadTreeEdges.deleteItem(de);\n    } }, { key: \"removeDanglingPolyline\", value: function removeDanglingPolyline(\n\n    startVertex) {\n\n      while (startVertex.edges.length === 1) {\n\n        var de = startVertex.edges[0];\n        var endVertex = de.getOppositeVertex(startVertex);\n        this.removeDirectedEdge(de);\n        startVertex = endVertex;\n      }\n\n    } }, { key: \"cleanupFlatEdges\", value: function cleanupFlatEdges()\n\n    {\n      //get rid of vertices that only have two parallel edges going into them\n\n      var removeList = [];\n\n      this.verts.forEach(function (v) {\n\n        if (!v)\n        return;\n\n        if (v.edges.length !== 2)\n        return;\n\n        var e1 = v.edges[0];\n        var e2 = v.edges[1];\n\n        //Detect co-linear edges\n        var angleDelta = Math.abs(e1.angle - e2.angle);\n        var ANGLE_TOLERANCE = 2e-3;\n        if (angleDelta < ANGLE_TOLERANCE || Math.abs(angleDelta - Math.PI) < ANGLE_TOLERANCE) {\n          removeList.push(v);\n        }\n\n        //Detect degenerate triangles\n        var v1 = e1.getOppositeVertex(v);\n        var v2 = e2.getOppositeVertex(v);\n        var eShared = v1.findEdgeTo(v2);\n\n        if (eShared) {\n          var area = 0.5 * Math.abs(e1.dx * e2.dy - e2.dx * e1.dy);\n          if (area < 1e-3) {\n            removeList.push(v);\n          }\n        }\n\n        //TODO: more generic co-linearity and degeneracy heuristics...\n\n      });\n\n\n      //if (removeList.length)\n      //    logger.log(\"Redundant edges\", removeList.length);\n\n      for (var i = 0; i < removeList.length; i++) {\n\n        var v = removeList[i];\n\n        if (v.edges.length !== 2) {\n          //logger.warn(\"Number of edges changed\");\n          continue;\n        }\n\n        var e1 = v.edges[0];\n        var e2 = v.edges[1];\n\n        var vOther1 = e1.getOppositeVertex(v);\n        var vOther2 = e2.getOppositeVertex(v);\n\n        this.removeDirectedEdge(e1);\n        this.removeDirectedEdge(e2);\n\n        this.verts.delete(v);\n\n        this.addDirectedEdge(vOther1.x, vOther1.y, vOther2.x, vOther2.y, true);\n      }\n\n      //Clean up again, until no more redundant vertices exist\n      if (removeList.length)\n      return this.cleanupFlatEdges();\n    } }, { key: \"_compactLists\", value: function _compactLists()\n\n\n\n    {\n\n      this.verts.compact();\n\n\n      var edges = [];\n\n      for (var i = 0, len = this.edges.length; i < len; i++) {\n        var e = this.edges[i];\n        if (!e)\n        continue;\n\n        e.oldid = e.id;\n        e.flagFwd = 0;\n        e.flagRev = 0;\n        e.id = edges.length;\n        edges.push(e);\n      }\n\n      this.edges = edges;\n    }\n\n\n    //converts closed areas to polygons with holes, in a way where\n    //holes themseves are also marked as separate polygons in their own\n    //right, thus filling the whole area (i.e. non-zero fill method).\n  }, { key: \"_detectHolesNonZero\", value: function _detectHolesNonZero(customInsideChecker) {\n\n      this.holes = [];\n\n      //Skip the very largest polygon, because that is\n      //the overall model perimeter\n      //TODO: This logic is Location Breakdown specific\n      this.outerPerimeter = this.closedAreas[this.closedAreas.length - 1];\n      if (this.outerPerimeter)\n      this.outerPerimeter.triangulate();\n\n      for (var i = 0, len = this.closedAreas.length - 1; i < len; i++) {\n\n        var cs = this.closedAreas[i];\n\n        //detect if the polygon is actually a hole in a\n        //bigger exterior polygon\n        //The logic we use here: if a polygon contains\n        //any of the smaller polygons inside it, it is a hole of a bigger polygon\n        //If a polygon contains a polygon marked as a hole, then add the hole to it\n        //before triangulating.\n        //TODO: this can be optimized via spatial index if number of polygons becomes large\n        for (var j = i - 1; j >= 0; j--) {\n          var cs2 = this.closedAreas[j];\n\n          //Only need to check a single point from the interior of the\n          //potential hole. Make sure it's inside the triangulation and not on the edge\n          //to avoid numeric noise.\n          if (cs.containsPointFrom(cs2)) {\n            if (cs2.isHole) {\n              cs.addContourSet(cs2);\n            } else {\n              cs.isHole = true;\n              this.holes.push(cs);\n              break;\n            }\n          }\n        }\n\n        //We added all the holes, now triangulate again with the holes in mind\n        if (!cs.isHole) {\n          cs.triangulate(customInsideChecker);\n        }\n\n      }\n\n\n      //Do a second pass over just the holes\n      //and convert each hole that contains a hole\n      //to a real polygon area.\n      //TODO: I don't really know if this is mathematically correct...\n      for (var _i2 = 0, _len = this.holes.length; _i2 < _len; _i2++) {\n\n        var _cs = this.holes[_i2];\n\n        _cs.triangulate(customInsideChecker);\n\n        //If a hole contains a hole inside it, then it is\n        //no longer hole, mark both as processed\n        for (var _j = _i2 - 1; _j >= 0; _j--) {\n\n          var _cs2 = this.holes[_j];\n\n          if (_cs2.holeProcessFlag)\n          continue;\n\n          //Only need to check a single point from the interior of the\n          //potential hole. Make sure it's inside the triangulation and not on the edge\n          //to avoid numeric noise.\n          if (_cs.containsPointFrom(_cs2)) {\n            _cs.addContourSet(_cs2);\n            _cs.isHole = false;\n            _cs2.holeProcessFlag = true;\n          }\n        }\n\n        //We added all the holes, now triangulate again with the holes in mind\n        if (!_cs.isHole) {\n          _cs.triangulate(customInsideChecker);\n        }\n\n      }\n\n      //Remove all holes from the list of polygons\n      var filteredNonHoles = [];\n      for (var _i3 = 0; _i3 < this.closedAreas.length - 1; _i3++) {\n        var _cs3 = this.closedAreas[_i3];\n        if (_cs3.isHole)\n        continue;\n\n        _cs3.id = filteredNonHoles.length;\n        filteredNonHoles.push(_cs3);\n      }\n\n      this.closedAreas = filteredNonHoles;\n\n\n    } }, { key: \"_detectHolesEvenOdd\", value: function _detectHolesEvenOdd(\n\n    customInsideChecker) {\n\n      var allAreas = this.closedAreas;\n      if (this.openAreas && this.openAreas.length)\n      allAreas = allAreas.concat(this.openAreas);\n\n      if (!allAreas.length) {\n        this.closedAreas = [];\n        this.openAreas = null;\n        return;\n      }\n\n      //In the DCEL, each polygon outline or hole contour\n      //appears twice (due to the structure being doubly connected), so\n      //here we drop the twin polygon.\n      var cmap = {};\n      var removed = 0;\n      for (var i = 0; i < allAreas.length; i++) {\n        var a = allAreas[i];\n        var hash = a.hash();\n        if (cmap[hash])\n        removed++;else\n\n        cmap[hash] = a;\n      }\n\n      //if (removed * 2 !== allAreas.length)\n      //    logger.log(\"Unexpected duplicate count: removed\", removed, \"from\", allAreas.length);\n\n      allAreas = Object.values(cmap);\n\n      //Make one giant complex polygon out of all the contours, and let\n      //it triangulate itself using its default even-odd fill rule\n      var csAll = new ContourSet();\n\n      for (var _i4 = 0; _i4 < allAreas.length; _i4++) {\n        csAll.addContourSet(allAreas[_i4]);\n      }\n\n      csAll.triangulate(customInsideChecker || this.quadTreeEdges);\n\n      if (csAll.triangulationFailed) {\n        //OK, now we get desperate -- the above triangulation attempt\n        //of the whole thing as one failed, so we triangulate each\n        //area separately (together with areas that are roughly inside it),\n        //and filter that result based on even-odd inside checker.\n        this._detectHolesNonZero(customInsideChecker || this.quadTreeEdges);\n      } else {\n        this.closedAreas = [csAll];\n        this.openAreas = [];\n      }\n    } }, { key: \"finalize\", value: function finalize(\n\n\n    useEvenOddFill, customInsideChecker) {\n\n      //Remove useless vertices\n      this.cleanupFlatEdges();\n\n      this._compactLists();\n\n      //Sort the edges of each vertex according to direction\n      this.verts.forEach(function (v) {return v.sortEdges();});\n\n      //traverse the graph and build closed polygons \n      //by following the edges in a counterclockwise direction\n\n      var polygons = [];\n      var openPolygons = [];\n\n      this.verts.forEach(function (v) {\n        var e = v.findUntraversedEdge();\n\n        if (!e)\n        return;\n\n        var polygon = [v];\n\n        var vNext = e.getOppositeVertex(v);\n        do {\n          polygon.push(vNext);\n          e = vNext.findNextCCWEdge(e);\n          if (!e)\n          break;\n          vNext = e.getOppositeVertex(vNext);\n        } while (vNext && vNext !== v);\n\n        if (vNext === v) {\n          polygon.push(v);\n          polygons.push(polygon);\n        } else {\n          openPolygons.push(polygon);\n        }\n      });\n\n      //logger.log(\"closed polygons:\", polygons.length);\n      //if (openPolygons.length)\n      //  logger.log(\"open polygons:\", openPolygons.length);\n\n      this.closedAreas = [];\n      for (var i = 0, len = polygons.length; i < len; i++) {\n        var cs = new ContourSet();\n        cs.addContour(polygons[i]);\n        this.closedAreas.push(cs);\n      }\n\n      //Sort by increasing area, so that\n      //we discover potential polygon holes before we\n      //triangulate their bigger exterior outlines\n      this.closedAreas.sort(function (a, b) {\n        return a.area() - b.area();\n      });\n\n\n      if (useEvenOddFill) {\n        this._detectHolesEvenOdd(customInsideChecker);\n      } else {\n        this._detectHolesNonZero(customInsideChecker);\n      }\n\n\n      //Put all open polygons into a single set of contours\n      //and combine as many as possible end to end to get\n      //a minimal number of open contours.\n      this.openAreas = [];\n      if (openPolygons.length) {\n        var openAreas = [];\n        var _cs4 = new ContourSet();\n        for (var _i5 = 0, _len2 = openPolygons.length; _i5 < _len2; _i5++) {\n          _cs4.addContour(openPolygons[_i5]);\n        }\n        _cs4.stitchContours();\n        _cs4.triangulate();\n        openAreas.push(_cs4);\n        //logger.log(\"Stitched open polygons\", cs.contours.length);\n\n        this.openAreas = openAreas;\n      }\n\n    } }, { key: \"deleteEdgesOnLine\", value: function deleteEdgesOnLine(\n\n\n    x1, y1, x2, y2) {var _this3 = this;\n\n      var v1Tmp = new Vertex(x1, y1);\n      var v2Tmp = new Vertex(x2, y2);\n      var deTmp = new DirectedEdge(v1Tmp, v2Tmp, -1);\n\n      //Find edges crossed by the given segment\n      var otherInts = {};\n\n      this._enumNearEdges(deTmp, function (e) {\n\n        var ints = segmentsIntersect(e, deTmp, _this3.precisionTolerance);\n\n        if (!ints)\n        return;\n\n        //Existing edge was crossed by new edge\n        if (ints.e1 && ints.e1.length) {\n          otherInts[e.id] = ints.e1;\n        }\n      });\n\n      //Remove the intersected edges, effectively\n      //joining all areas defined by those edges.\n      //This is brute force, in theory we can find all\n      //contour sets that own the intersected edges\n      //and update the triangulations, but it doesn't seem worth it\n      for (var sid in otherInts) {\n        var eid = parseInt(sid);\n        var edge = this.edges[eid];\n        this.removeDirectedEdge(edge);\n\n        //clean up any \"dangling\" vertices left by the edge removal.\n        //those are edges that are only connected to the deleted edge and nothing else\n        this.removeDanglingPolyline(edge.v1);\n        this.removeDanglingPolyline(edge.v2);\n      }\n\n      this.dirty = true;\n    }\n\n    //Given a rectangle, join all areas that intersect the rectangle\n  }, { key: \"deleteEdgesInRectangle\", value: function deleteEdgesInRectangle(x1, y1, x2, y2) {\n\n      var minx = Math.min(x1, x2);\n      var miny = Math.min(y1, y2);\n      var maxx = Math.max(x1, x2);\n      var maxy = Math.max(y1, y2);\n\n      var otherInts = {};\n\n      //find edges completely inside the rectangle\n      this.quadTreeEdges.enumInBox(minx, miny, maxx, maxy, function (e) {\n        otherInts[e.id] = e;\n      });\n\n      //Remove the intersected edges, effectively\n      //joining all areas defined by those edges.\n      //This is brute force, in theory we can find all\n      //contour sets that own the intersected edges\n      //and update the triangulations, but it doesn't seem worth it\n      for (var sid in otherInts) {\n        var eid = parseInt(sid);\n        var edge = this.edges[eid];\n\n        if (!edge)\n        continue;\n\n        this.removeDirectedEdge(edge);\n\n        //clean up any \"dangling\" vertices left by the edge removal.\n        //those are edges that are only connected to the deleted edge and nothing else\n        this.removeDanglingPolyline(edge.v1);\n        this.removeDanglingPolyline(edge.v2);\n      }\n\n\n      this.dirty = true;\n    } }, { key: \"findNearestVertex\", value: function findNearestVertex(\n\n    x, y, radius) {\n\n      if (typeof radius !== \"number\")\n      radius = this.precisionTolerance;\n\n      var dNear = Infinity;\n      var vNear = null;\n\n      this.verts.enumInBox(x - radius, y - radius, x + radius, y + radius, function (v) {\n\n        var d = (v.x - x) * (v.x - x) + (v.y - y) * (v.y - y);\n        if (d < dNear) {\n          dNear = d;\n          vNear = v;\n        }\n\n      });\n\n      return dNear <= radius * radius ? vNear : null;\n    } }, { key: \"findNearestPointOnEdge\", value: function findNearestPointOnEdge(\n\n    x, y, radius) {\n\n      if (typeof radius !== \"number\")\n      radius = this.precisionTolerance;\n\n      var tmp = { x: 0, y: 0, u: 0, d: -1 };\n      var ptNearest = { x: 0, y: 0, d: Infinity, e: null };\n\n      this.quadTreeEdges.enumInBox(x - radius, y - radius, x + radius, y + radius, function (e) {\n\n        var result = pointOnLine(x, y, e, true, radius, tmp);\n\n        if (result) {\n          if (tmp.d < ptNearest.d) {\n            ptNearest.x = tmp.x;\n            ptNearest.y = tmp.y;\n            ptNearest.d = tmp.d;\n            ptNearest.e = e;\n          }\n        }\n      });\n\n      return ptNearest.d <= radius ? ptNearest : null;\n\n    } }]);return DCEL;}();","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}import { IntervalTree } from \"./interval-tree\";\nimport { UniquePointList } from \"./point-list\";\nimport { ComplexPolygon } from \"./complex-polygon\";\n\nvar avp = Autodesk.Viewing.Private;\n\n//Functionality for converting a list of two-point line segments into a connected\n//set of (hopefully) closed contour lines. The contour set is then used\n//for triangulation.\n//This data structure assumes there are no intersecting edges (use the DCEL if there are, or you need fully-connected topology).\nexport var EdgeSet = /*#__PURE__*/function () {\n\n  function EdgeSet(edges, bbox, precisionTolerance) {_classCallCheck(this, EdgeSet);\n\n    this.edges = edges;\n    this.bbox = bbox;\n\n    this.verts = new UniquePointList(bbox, precisionTolerance);\n    this.polygon = null;\n  }_createClass(EdgeSet, [{ key: \"getPointIndex\", value: function getPointIndex(\n\n\n    px, py) {\n\n      var v = this.verts.findOrAddPoint(px, py);\n\n      return v.id;\n    } }, { key: \"snapEdges\", value: function snapEdges()\n\n    {\n\n      for (var i = 0; i < this.edges.length; i++) {\n\n        var e = this.edges[i];\n\n        e.p1 = this.getPointIndex(e.v1.x, e.v1.y);\n        e.p2 = this.getPointIndex(e.v2.x, e.v2.y);\n      }\n    } }, { key: \"sanitizeEdges\", value: function sanitizeEdges()\n\n    {\n      var edgeSet = {};\n      var sanitizedEdges = [];\n\n      for (var i = 0, len = this.edges.length; i < len; i++) {\n        var e = this.edges[i];\n        if (e.p1 === e.p2) {\n          continue;\n        }\n\n        var key = Math.min(e.p1, e.p2) + ':' + Math.max(e.p1, e.p2);\n        if (edgeSet[key] !== true) {\n          edgeSet[key] = true;\n          sanitizedEdges.push(e);\n        }\n      }\n\n      this.edges = sanitizedEdges;\n    } }, { key: \"stitchContours\", value: function stitchContours()\n\n\n    {\n\n      this.contours = [];\n\n      //Create jump table from edge to edge\n      //and back\n      var edge_table = {};\n\n      for (var i = 0; i < this.edges.length; i++) {\n        var e = this.edges[i];\n\n        if (e.p1 === e.p2)\n        continue;\n\n        if (edge_table[e.p1] !== undefined)\n        edge_table[e.p1].push(e.p2);else\n\n        edge_table[e.p1] = [e.p2];\n\n        if (edge_table[e.p2] !== undefined)\n        edge_table[e.p2].push(e.p1);else\n\n        edge_table[e.p2] = [e.p1];\n      }\n\n      var cur_cntr = [];\n\n      for (var p in edge_table) {\n        if (edge_table[p].length !== 2) {\n          avp.logger.warn(\"Incomplete edge table\");\n          break;\n        }\n      }\n\n      //Start with the first edge, and stitch until we can no longer\n      while (true) {\n\n        var sfrom = undefined;\n\n        //Look for doubly connected point first\n        for (var p in edge_table) {\n          if (edge_table[p].length > 1) {\n            sfrom = p;\n            break;\n          }\n        }\n\n        //If no double-connected point found, we know\n        //the it will be an open contour, but stitch as much\n        //as we can anyway.\n        if (!sfrom) {\n          for (var p in edge_table) {\n            if (edge_table[p].length > 0) {\n              sfrom = p;\n              break;\n            }\n          }\n        }\n\n        if (!sfrom)\n        break;\n\n        var prev = -1;\n        var cur = parseInt(sfrom);\n        var cur_segs = edge_table[sfrom];\n\n        //start a new contour\n        cur_cntr.push(cur);\n\n        while (cur_segs && cur_segs.length) {\n\n          var toPt = cur_segs.shift();\n\n          //skip backpointer if we hit it\n          if (toPt === prev)\n          toPt = cur_segs.shift();\n\n          if (toPt === undefined) {\n            delete edge_table[cur];\n            break;\n          }\n\n          cur_cntr.push(toPt);\n\n          if (cur_segs.length == 0)\n          delete edge_table[cur];else\n          if (cur_segs[0] === prev)\n          delete edge_table[cur];\n\n          prev = cur;\n          cur = toPt;\n          cur_segs = edge_table[toPt];\n        }\n\n        if (cur_cntr.length) {\n          this.contours.push(cur_cntr);\n          cur_cntr = [];\n        }\n      }\n\n      var openCntrs = [];\n      for (var i = 0; i < this.contours.length; i++) {\n        var cntr = this.contours[i];\n        if (cntr[0] !== cntr[cntr.length - 1])\n        openCntrs.push(cntr);\n      }\n\n\n      if (openCntrs.length) {\n        //avp.logger.warn(\"Incomplete stitch\");\n\n        var didSomething = true;\n        while (didSomething) {\n\n          didSomething = false;\n\n          //Try to combine contours\n          var cntr_edge_table = {};\n          var contours = this.contours;\n\n          for (var i = 0; i < contours.length; i++) {\n            var cntr = contours[i];\n            var start = cntr[0];\n            var end = cntr[cntr.length - 1];\n\n            if (start === end)\n            continue;\n\n            if (!cntr_edge_table[start])\n            cntr_edge_table[start] = [-i - 1];else\n\n            cntr_edge_table[start].push(-i - 1);\n\n\n            if (!cntr_edge_table[end])\n            cntr_edge_table[end] = [i];else\n\n            cntr_edge_table[end].push(i);\n          }\n\n          for (var p in cntr_edge_table) {\n            var entry = cntr_edge_table[p];\n\n            if (entry.length == 2) {\n              var toerase = undefined;\n\n              if (entry[0] < 0 && entry[1] < 0) {\n                var c1 = -entry[0] - 1;var c2 = -entry[1] - 1;\n                //join start point to startpoint\n                contours[c2].shift();\n                Array.prototype.push.apply(contours[c1].reverse(), contours[c2]);\n                toerase = c2;\n              }\n\n              if (entry[0] < 0 && entry[1] > 0) {\n                var c1 = -entry[0] - 1;var c2 = entry[1];\n                //join start point to endpoint\n                contours[c2].pop();\n                Array.prototype.push.apply(contours[c2], contours[c1]);\n                toerase = c1;\n              }\n\n              if (entry[0] > 0 && entry[1] < 0) {\n                var c1 = entry[0];var c2 = -entry[1] - 1;\n                //join end point to startpoint\n                contours[c1].pop();\n                Array.prototype.push.apply(contours[c1], contours[c2]);\n                toerase = c2;\n              }\n\n              if (entry[0] > 0 && entry[1] > 0) {\n                var c1 = entry[0];var c2 = entry[1];\n                //join end point to endpoint\n                contours[c1].pop();\n                Array.prototype.push.apply(contours[c1], contours[c2].reverse());\n                toerase = c2;\n              }\n\n              if (toerase !== undefined) {\n                contours.splice(toerase, 1);\n                didSomething = true;\n              }\n              break;\n            }\n          }\n\n        }\n\n      }\n    } }, { key: \"cleanupFlatEdges\", value: function cleanupFlatEdges()\n\n\n    {\n\n      var pts = this.verts.pts;\n      var TOL = this.verts.precisionTolerance;\n\n      for (var i = 0; i < this.contours.length; i++) {\n\n        var cntr = this.contours[i];\n\n        while (true) {\n\n\n          var removePt = -1;\n\n          for (var j = 1; j < cntr.length - 1; j++) {\n            var prev = cntr[j - 1];\n            var cur = cntr[j];\n            var next = cntr[j + 1];\n\n            var p0 = pts[prev];\n            var p1 = pts[cur];\n            var p2 = pts[next];\n\n            var dx1 = p1.x - p0.x;\n            var dy1 = p1.y - p0.y;\n            var dx2 = p2.x - p1.x;\n            var dy2 = p2.y - p1.y;\n\n            var len1 = Math.sqrt(dx1 * dx1 + dy1 * dy1);\n            if (len1 < TOL) {\n              removePt = j;\n              break;\n            }\n\n            var len2 = Math.sqrt(dx2 * dx2 + dy2 * dy2);\n            if (len2 < TOL) {\n              removePt = j;\n              break;\n            }\n\n            dx1 /= len1;\n            dy1 /= len1;\n            dx2 /= len2;\n            dy2 /= len2;\n\n            var dot = dx1 * dx2 + dy1 * dy2;\n\n            if (Math.abs(dot - 1.0) < 1e-2) {\n              removePt = j;\n              break;\n            }\n          }\n\n          if (removePt < 0)\n          break;\n\n          cntr.splice(removePt, 1);\n        }\n\n      }\n\n    } }, { key: \"triangulate\", value: function triangulate()\n\n\n    {\n\n      //this.cleanupFlatEdges();\n\n      //The interval tree is a faster and more tolerant\n      //way of checking if a point is inside the complex polygon defined\n      //by a set of edges. We use that in preference to the built-in\n      //ComplexPolygon inside checker.\n      var it = new IntervalTree(this.verts.pts, this.edges, this.bbox);\n      it.build();\n\n      var polygon = new ComplexPolygon(this.verts.pts, it, this.bbox);\n      polygon.contours = this.contours;\n      polygon.triangulate();\n      return polygon;\n\n    } }]);return EdgeSet;}();","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;} // Sample ellipse at a given angle.\n//  @param {number} angle    - ccw angle along the ellipse in radians. 0 = point is ellipse x-axis.\n//  @param {number} cx, cy   - ellipse center\n//  @param {number} rx, ry   - ellipse radii\n//  @param {number} rotation - ccw in radians\n//  @param {Vector2} [target]\n//  @returns {Vector2}\nexport var getEllipsePoint = function getEllipsePoint(angle, cx, cy, rx, ry) {var rotation = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0.0;var target = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : null;\n\n  var point = target || new THREE.Vector2();\n\n  // compute point from unrotated ellipse equation\n  var x = cx + rx * Math.cos(angle);\n  var y = cy + ry * Math.sin(angle);\n\n  // apply this.rotation: (x,y) around center (cx, cy)\n  if (rotation !== 0) {\n\n    var cos = Math.cos(rotation);\n    var sin = Math.sin(rotation);\n\n    var tx = x - cx;\n    var ty = y - cy;\n\n    // Rotate the point about the center of the ellipse.\n    x = tx * cos - ty * sin + cx;\n    y = tx * sin + ty * cos + cy;\n  }\n\n  return point.set(x, y);\n};\n\n// Sample a single point from an ellipse arc that runs counterclockwise from startAngle to endAngle.\n//  @param {number} cx, cy               - center\n//  @param {number} rx, ry               - radii in x/y axis\n//  @param {number} startAngle, endAngle - ccw angles in radians. 0 corresponds to (xRadius, 0)\n//  @param {number} rotation             - ellipse axis rotation, ccw in radians\n//  @param {number} t                    - sampling position along ellipse. 0 => startAngle, 1 = endAngle\n//  @param {Vector2} [target]\n//  @returns {Vector2}\nexport var getEllipseArcPoint = function getEllipseArcPoint(t, cx, cy, rx, ry, startAngle, endAngle) {var rotation = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : 0.0;var target = arguments.length > 8 && arguments[8] !== undefined ? arguments[8] : null;\n\n  var deltaAngle = endAngle - startAngle;\n\n  // If start/end angle are approximately the same, just sample at start angle\n  var samePoints = Math.abs(deltaAngle) < Number.EPSILON;\n  if (samePoints) {\n    return getEllipsePoint(0.0, cx, cy, rx, ry, rotation, target);\n  }\n\n  // ensures that deltaAngle is [0,2 PI[\n  deltaAngle = normalizeAngle(deltaAngle);\n\n  // Since samePoints was false, but deltaAngle is close to 0 after normalization, \n  // deltaAngle must be close to a multiple of 2*Pi.\n  var wholeEllipse = deltaAngle < Number.EPSILON;\n  if (wholeEllipse) {\n    deltaAngle = 2.0 * Math.PI;\n  }\n\n  // Sample ellipse point at that angle\n  var angle = startAngle + t * deltaAngle;\n  return getEllipsePoint(angle, cx, cy, rx, ry, rotation, target);\n};\n\n// Force angle to be within [0, 2Pi[\nexport var normalizeAngle = function normalizeAngle(angle) {\n  // Scale [0, 2Pi] to [0,1]\n  angle /= 2.0 * Math.PI;\n\n  // Remove integer part\n  angle -= Math.trunc(angle);\n\n  // Angle is either in [0,1] or was negative. In the latter case,\n  // it is in [-1, 0] now and we add 1 to bring it to [0,1] as well.\n  if (angle < 0) {\n    angle += 1.0;\n  }\n\n  // Scale back to [0, 2Pi] range\n  return angle * 2.0 * Math.PI;\n};\n\n// Compute the arc angle difference of an arc running from startAngle to endAngle.\n//  @param {number} startAngle - in radians\n//  @param {number} endAngle   - in radians\n//  @param {bool}   ccw        - whether the arc runs counterclockwise (true) or clockwise (false)\nvar _getAngleDelta = function getAngleDelta(startAngle, endAngle, ccw) {\n\n  // get angle difference\n  var delta = endAngle - startAngle;\n\n  // Force to [0, 2Pi] range\n  delta = normalizeAngle(delta);\n\n  // invert if arc is clockwise\n  return ccw ? delta : 2.0 * Math.PI - delta;\n};\n\n// Given start/end angle of an arc, this function checks whether angle is within the arc. \n// All angles are ccw in radians. We assume the arc to be running ccw. Note that start may be > end if the arc range contains a 2*Pi mulitple.\nexport { _getAngleDelta as getAngleDelta };export var angleInsideArcCCW = function angleInsideArcCCW(angle, start, end) {\n\n  // ensure 0 <= a < 2Pi for all angles\n  angle = normalizeAngle(angle);\n  start = normalizeAngle(start);\n  end = normalizeAngle(end);\n\n  if (start < end) {\n    return angle >= start && angle <= end;\n  }\n\n  // If start > end, we are crossing a full-circle boundary. So, the range between [start, end] is actually\n  // the circle part outside the arc.\n  // For start = end, the arc is the whole circle and the result will always be true.\n  return angle >= start || angle <= end;\n};\n\n// Like angleInsideCCW, but adding an option param to support clockwise arcs.\nexport var angleInsideArc = function angleInsideArc(angle, start, end) {var ccw = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : true;\n  var insideCCW = angleInsideArcCCW(angle, start, end);\n  return ccw ? insideCCW : !insideCCW;\n};\n\nvar svgAngle = function svgAngle(ux, uy, vx, vy) {\n\n  var dot = ux * vx + uy * vy;\n  var len = Math.sqrt(ux * ux + uy * uy) * Math.sqrt(vx * vx + vy * vy);\n  var ang = Math.acos(Math.max(-1, Math.min(1, dot / len))); // floating point precision, slightly over values appear\n  if (ux * vy - uy * vx < 0) ang = -ang;\n  return ang;\n};\n\nvar tmpVec = new THREE.Vector2();\n\n// Parameters to describe ellipse arc\nexport var EllipseArc = /*#__PURE__*/function () {\n\n  function EllipseArc(cx, cy, rx, ry, rotation, startAngle, endAngle, ccw) {_classCallCheck(this, EllipseArc);\n    this.set(cx, cy, rx, ry, rotation, startAngle, endAngle, ccw);\n  }_createClass(EllipseArc, [{ key: \"set\", value: function set(\n\n    cx, cy, rx, ry, rotation, startAngle, endAngle, ccw) {\n      // center\n      this.cx = cx;\n      this.cy = cy;\n\n      // radii\n      this.rx = rx;\n      this.ry = ry;\n\n      // angle in radians\n      this.startAngle = startAngle;\n      this.endAngle = endAngle;\n\n      // If true, arc runs from startAngle in counterclockwise direction, otherwise clockwise\n      this.ccw = ccw;\n\n      // ellipse rotation in radians\n      this.rotation = rotation;\n\n      return this;\n    }\n\n    /**\n       * Convert SVG-style specification of an ellipse arc into an ellipse arc with center and start/end angle that is easier to sample.\n       * Implementation is based on parseArcCommand() helper function in THREE.SVGLoader. All output angles in radians.\n       * \n       * https://www.w3.org/TR/SVG/implnote.html#ArcImplementationNotes\n       * https://mortoray.com/2017/02/16/rendering-an-svg-elliptical-arc-as-bezier-curves/ Appendix: Endpoint to center arc conversion\n       * \n       * @param {number}   rx, ry        - radii in x/y axis (before xAxisRoation)\n       * @param {number}   xAxisRotation - ccw rotation of the ellipse axes in degrees\n       * @param {bool}     largeArcFlag  - whether to use short or long path along the ellipse\n       * @param {bool}     sweepFlag     - whether to run counterclockwise around the arc from the startPoint\n       * @param {Vector2}  start, end    - startPoint and endPoint of the arc\n       */ }, { key: \"setFromSvgArc\", value: function setFromSvgArc(\n    rx, ry, xAxisRotation, largeArcFlag, sweepFlag, start, end) {\n\n      // get rotation in radians\n      var rotation = xAxisRotation * Math.PI / 180;\n\n      // Ensure radii are positive\n      rx = Math.abs(rx);\n      ry = Math.abs(ry);\n\n      // To avoid NaNs and for consistency with browser SVG behavior:\n      // If any radius is 0, fall back to a straight segment. An EllipseCurve is not able to represent a straight line segment.\n      // However, we can resemble this using an arc whose radius is large enough so that the angle difference is hardly noticeable.\n      if (rx == 0 || ry == 0) {\n        // Choose radius large enough so that 0.01 degrees correspond to the (start, end) distance.\n        var minAngleDelta = 0.01;\n        var dist = tmpVec.copy(start).distanceTo(end); // still works if start/end are just {x,y} pairs\n        var perimeter = dist * 360 / minAngleDelta;\n        var radius = perimeter / (2.0 * Math.PI);\n        rx = radius;\n        ry = radius;\n      }\n\n      // Compute (x1′, y1′)\n      var dx2 = (start.x - end.x) / 2.0;\n      var dy2 = (start.y - end.y) / 2.0;\n      var x1p = Math.cos(rotation) * dx2 + Math.sin(rotation) * dy2;\n      var y1p = -Math.sin(rotation) * dx2 + Math.cos(rotation) * dy2;\n\n      // Compute (cx′, cy′)\n      var rxs = rx * rx;\n      var rys = ry * ry;\n      var x1ps = x1p * x1p;\n      var y1ps = y1p * y1p;\n\n      // Ensure radii are large enough\n      var cr = x1ps / rxs + y1ps / rys;\n\n      if (cr > 1) {\n        // scale up rx,ry equally so cr == 1\n        var s = Math.sqrt(cr);\n        rx = s * rx;\n        ry = s * ry;\n        rxs = rx * rx;\n        rys = ry * ry;\n      }\n\n      var dq = rxs * y1ps + rys * x1ps;\n      var pq = (rxs * rys - dq) / dq;\n      var q = Math.sqrt(Math.max(0, pq));\n      if (largeArcFlag === sweepFlag) q = -q;\n      var cxp = q * rx * y1p / ry;\n      var cyp = -q * ry * x1p / rx;\n\n      // Step 3: Compute (cx, cy) from (cx′, cy′)\n      var cx = Math.cos(rotation) * cxp - Math.sin(rotation) * cyp + (start.x + end.x) / 2;\n      var cy = Math.sin(rotation) * cxp + Math.cos(rotation) * cyp + (start.y + end.y) / 2;\n\n      // Step 4: Compute θ1 and Δθ\n      var theta = svgAngle(1, 0, (x1p - cxp) / rx, (y1p - cyp) / ry);\n      var delta = svgAngle((x1p - cxp) / rx, (y1p - cyp) / ry, (-x1p - cxp) / rx, (-y1p - cyp) / ry) % (Math.PI * 2);\n\n      // Set curve params\n      this.cx = cx;\n      this.cy = cy;\n      this.rx = rx;\n      this.ry = ry;\n      this.rotation = rotation;\n      this.startAngle = theta;\n      this.endAngle = theta + delta;\n      this.ccw = sweepFlag;\n\n      return this;\n    }\n\n    // Sample point along arc. \n    //  @param {number}  t - 0: startPoint, 1: endPoint\n    //  @param {Vector2} [target]\n    //  @returns Vector2\n  }, { key: \"getPoint\", value: function getPoint(t, target) {\n\n      var start = this.startAngle;\n      var end = this.endAngle;\n\n      // In case the arc is clockwise...\n      if (!this.ccw) {\n        // Swap start/end to get opposite ccw arc and sample it at position 1-t instead.\n        start = this.endAngle;\n        end = this.startAngle;\n        t = 1.0 - t;\n      }\n\n      return getEllipseArcPoint(t, this.cx, this.cy, this.rx, this.ry, start, end, this.rotation, target);\n    } }, { key: \"isValid\", value: function isValid()\n\n    {\n      return isFinite(this.cx) && isFinite(this.cy) && isFinite(this.rx) && isFinite(this.ry) && isFinite(this.rotation) &&\n      isFinite(this.startAngle) && isFinite(this.endAngle);\n    }\n\n    // @param {Box2} [targetBox]\n    // returns {Box2}\n  }, { key: \"computeBBox\", value: function computeBBox(targetBox) {var _this = this;\n\n      // compute extreme points of ellipse equation\n      var tanPhi = Math.tan(this.rotation);\n      var thetaX1 = -Math.atan(this.ry * tanPhi / this.rx);\n      var thetaX2 = Math.PI - Math.atan(this.ry * tanPhi / this.rx);\n      var thetaY1 = Math.atan(this.ry / (tanPhi * this.rx));\n      var thetaY2 = Math.PI + Math.atan(this.ry / (tanPhi * this.rx));\n\n      // Clear targetBox or create a new one\n      var box = targetBox ? targetBox.makeEmpty() : new THREE.Box2();\n\n      // Helper function to add an ellipse point that we obtain at angle theta in the ellipse equation\n      var addEllipsePoint = function addEllipsePoint(theta) {\n        var p = getEllipsePoint(theta, _this.cx, _this.cy, _this.rx, _this.ry, _this.rotation);\n        box.expandByPoint(p);\n      };\n\n      addEllipsePoint(this.startAngle);\n      addEllipsePoint(this.endAngle);\n\n      // Add all extreme points to the bbox that are inside the arc\n      angleInsideArc(thetaX1, this.startAngle, this.endAngle, this.ccw) && addEllipsePoint(thetaX1);\n      angleInsideArc(thetaX2, this.startAngle, this.endAngle, this.ccw) && addEllipsePoint(thetaX2);\n      angleInsideArc(thetaY1, this.startAngle, this.endAngle, this.ccw) && addEllipsePoint(thetaY1);\n      angleInsideArc(thetaY2, this.startAngle, this.endAngle, this.ccw) && addEllipsePoint(thetaY2);\n\n      return box;\n    }\n\n    // Samples an ellipse arc as lineTo segments that are added a canvas context object.\n    // Note: lineTo() is not called with the arc starting point. ctx is expected to end at the arc start point already.\n    //\n    //  @param {Path2D|LmvCanvasContext|CanvasContext} ctx - line segment are added by ctx.lineTo(x,y) calls.\n    //  @param {number} maxSegmentCount  - Maximum number of line segments\n    //  @param {number} minSegmentLength - Skip small segments below this length\n  }, { key: \"tesselate\", value: function tesselate(ctx, maxSegments, minSegmentLength) {\n\n      // Init lastX/lastY\n      var lastPoint = this.getPoint(0);\n\n      // Note that we only iterate over inner points.\n      // Start point is not added by this function and endpoint is added separately below\n      for (var i = 1; i < maxSegments; i++) {\n\n        // get next point along arc\n        var t = i / maxSegments;\n        var _p = this.getPoint(t, tmpVec);\n\n        // Skip point if too close to previous point\n        var dist = _p.distanceTo(lastPoint);\n        if (dist < minSegmentLength) {\n          continue;\n        }\n\n        // add line segment\n        ctx.lineTo(_p.x, _p.y);\n        lastPoint.copy(_p);\n      }\n\n      // Always add end point (without minSegmentLength-check)\n      var p = this.getPoint(1.0, tmpVec);\n      ctx.lineTo(p.x, p.y);\n    } }, { key: \"getAngleDelta\", value: function getAngleDelta()\n\n    {\n      return _getAngleDelta(this.startAngle, this.endAngle, this.ccw);\n    } }]);return EllipseArc;}();","\nexport var TOL = 1e-6;\n\nexport function isZero(f) {\n  return Math.abs(f) < TOL;\n}\n\nexport function isEqual(a, b) {\n  return isZero(a - b);\n}","function _typeof(obj) {\"@babel/helpers - typeof\";if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _inherits(subClass, superClass) {if (typeof superClass !== \"function\" && superClass !== null) {throw new TypeError(\"Super expression must either be null or a function\");}subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } });if (superClass) _setPrototypeOf(subClass, superClass);}function _setPrototypeOf(o, p) {_setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {o.__proto__ = p;return o;};return _setPrototypeOf(o, p);}function _createSuper(Derived) {var hasNativeReflectConstruct = _isNativeReflectConstruct();return function _createSuperInternal() {var Super = _getPrototypeOf(Derived),result;if (hasNativeReflectConstruct) {var NewTarget = _getPrototypeOf(this).constructor;result = Reflect.construct(Super, arguments, NewTarget);} else {result = Super.apply(this, arguments);}return _possibleConstructorReturn(this, result);};}function _possibleConstructorReturn(self, call) {if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {return call;}return _assertThisInitialized(self);}function _assertThisInitialized(self) {if (self === void 0) {throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");}return self;}function _isNativeReflectConstruct() {if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;if (Reflect.construct.sham) return false;if (typeof Proxy === \"function\") return true;try {Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));return true;} catch (e) {return false;}}function _getPrototypeOf(o) {_getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {return o.__proto__ || Object.getPrototypeOf(o);};return _getPrototypeOf(o);}\nvar av = Autodesk.Viewing;\nvar avecg = AutodeskNamespace('Autodesk.Viewing.Extensions.CompGeom');\n\nfunction _export(m, ns) {\n  for (var prop in m) {\n    if (m.hasOwnProperty(prop)) {\n      //Export directly into the module (e.g. for node.js use, where LMV is used via require instead from global namespace)\n      module.exports[prop] = m[prop];\n\n      //Export into the desired viewer namespace\n      ns[prop] = m[prop];\n    }\n  }\n}\n\n_export(require(\"./contour-set\"), avecg);\n_export(require(\"./edge-set\"), avecg);\n_export(require(\"./dcel\"), avecg);\n_export(require(\"./fuzzy-math\"), avecg);\n_export(require(\"./quad-tree\"), avecg);\n_export(require(\"./x-box-box\"), avecg);\n_export(require(\"./x-box-plane\"), avecg);\n_export(require(\"./x-line-box\"), avecg);\n_export(require(\"./x-line-line\"), avecg);\n_export(require(\"./x-mesh-plane\"), avecg);\n_export(require(\"./x-plane-segment\"), avecg);\n_export(require(\"./x-triangle-plane\"), avecg);\n_export(require(\"./interval-tree\"), avecg);\n_export(require(\"./complex-polygon\"), avecg);\n_export(require(\"./point-list\"), avecg);\n_export(require(\"./poly2tri\"), avecg);\n_export(require(\"./ellipse\"), avecg);\n_export(require(\"./bezier\"), avecg);\n_export(require(\"./LmvCanvasContext\"), avecg);\n_export(require(\"./path2d\"), avecg);\n\n/**\n                                      * Computational geometry library extension\n                                      */var\nCompGeomExtension = /*#__PURE__*/function (_av$Extension) {\"use strict\";_inherits(CompGeomExtension, _av$Extension);var _super = _createSuper(CompGeomExtension);\n\n  function CompGeomExtension(viewer, options) {_classCallCheck(this, CompGeomExtension);return _super.call(this,\n    viewer, options);\n  }_createClass(CompGeomExtension, [{ key: \"load\", value: function load()\n\n    {return true;} }, { key: \"unload\", value: function unload()\n    {return true;} }, { key: \"activate\", value: function activate()\n    {return true;} }, { key: \"deactivate\", value: function deactivate()\n    {return false;} }]);return CompGeomExtension;}(av.Extension);\n\n\n// The ExtensionManager requires an extension to be registered.\nav.theExtensionManager.registerExtension('Autodesk.CompGeom', CompGeomExtension);","function IntervalNode() {\n\n  this.bbox = new THREE.Box2();\n  this.left = null;\n  this.right = null;\n  this.node_edges = [];\n}\n\n//Acceleration structure for point-in-polygon checking.\n//Takes in a list of points and edges indexing into those points.\n//The Point-in-polygon check is a simple even-odd test based on counting\n//number of edges intersected by a ray from the input point to infinity.\nexport function IntervalTree(pts, edges, bbox) {\n\n  this.pts = pts;\n  this.edges = edges;\n  this.bbox = bbox;\n  this.pipResult = false;\n\n}\n\n\n\nIntervalTree.prototype.splitNode = function (node) {\n\n  if (node.bbox.min.y >= node.bbox.max.y)\n  return;\n\n  if (node.node_edges.length < 3)\n  return;\n\n  var split = 0.5 * (node.bbox.min.y + node.bbox.max.y);\n\n  //node.bbox.makeEmpty();\n\n  node.left = new IntervalNode();\n  node.right = new IntervalNode();\n\n  var pts = this.pts;\n  var ne = node.node_edges;\n  var remaining_node_edges = [];\n  var tmpPt = new THREE.Vector2();\n\n  for (var i = 0; i < ne.length; i++) {\n\n    var e = this.edges[ne[i]];\n\n    var p1y = pts[e.p1].y;\n    var p2y = pts[e.p2].y;\n\n    if (p1y > p2y) {\n      var tmp = p1y;\n      p1y = p2y;\n      p2y = tmp;\n    }\n\n    var boxPtr = null;\n\n    if (p2y < split) {\n      node.left.node_edges.push(ne[i]);\n      boxPtr = node.left.bbox;\n    } else if (p1y > split) {\n      node.right.node_edges.push(ne[i]);\n      boxPtr = node.right.bbox;\n    } else {\n      remaining_node_edges.push(ne[i]);\n      //boxPtr = node.bbox;\n    }\n\n    if (boxPtr) {\n      tmpPt.set(pts[e.p1].x, pts[e.p1].y);\n      boxPtr.expandByPoint(tmpPt);\n      tmpPt.set(pts[e.p2].x, pts[e.p2].y);\n      boxPtr.expandByPoint(tmpPt);\n    }\n  }\n\n  node.node_edges = remaining_node_edges;\n\n  if (node.left.node_edges.length)\n  this.splitNode(node.left);\n  if (node.right.node_edges.length)\n  this.splitNode(node.right);\n};\n\n\nIntervalTree.prototype.build = function () {\n\n  this.root = new IntervalNode();\n\n  var edge_indices = this.root.node_edges;\n  for (var i = 0; i < this.edges.length; i++) {\n    edge_indices.push(i);}\n\n  this.root.bbox.copy(this.bbox);\n\n  //split recursively\n  this.splitNode(this.root);\n};\n\n\n\n\nIntervalTree.prototype.pointInPolygonRec = function (node, x, y) {\n\n  if (node.bbox.min.y <= y && node.bbox.max.y >= y) {\n\n    var pts = this.pts;\n    var ne = node.node_edges;\n\n    for (var i = 0, iEnd = ne.length; i < iEnd; i++) {\n\n      var e = this.edges[ne[i]];\n\n      // get the last point in the polygon\n      var p1 = pts[e.p1];\n      var vtx0X = p1.x;\n      var vtx0Y = p1.y;\n\n      // get test bit for above/below X axis\n      var yflag0 = vtx0Y >= y;\n\n      var p2 = pts[e.p2];\n      var vtx1X = p2.x;\n      var vtx1Y = p2.y;\n\n      var yflag1 = vtx1Y >= y;\n\n      // Check if endpoints straddle (are on opposite sides) of X axis\n      // (i.e. the Y's differ); if so, +X ray could intersect this edge.\n      // The old test also checked whether the endpoints are both to the\n      // right or to the left of the test point.  However, given the faster\n      // intersection point computation used below, this test was found to\n      // be a break-even proposition for most polygons and a loser for\n      // triangles (where 50% or more of the edges which survive this test\n      // will cross quadrants and so have to have the X intersection computed\n      // anyway).  I credit Joseph Samosky with inspiring me to try dropping\n      // the \"both left or both right\" part of my code.\n      if (yflag0 != yflag1)\n      {\n        // Check intersection of pgon segment with +X ray.\n        // Note if >= point's X; if so, the ray hits it.\n        // The division operation is avoided for the \">=\" test by checking\n        // the sign of the first vertex wrto the test point; idea inspired\n        // by Joseph Samosky's and Mark Haigh-Hutchinson's different\n        // polygon inclusion tests.\n        if ((vtx1Y - y) * (vtx0X - vtx1X) >=\n        (vtx1X - x) * (vtx0Y - vtx1Y) == yflag1)\n        {\n          this.pipResult = !this.pipResult;\n        }\n      }\n\n    }\n\n  }\n\n  var nl = node.left;\n  if (nl && nl.bbox.min.y <= y && nl.bbox.max.y >= y) {\n    this.pointInPolygonRec(nl, x, y);\n  }\n\n  var nr = node.right;\n  if (nr && nr.bbox.min.y <= y && nr.bbox.max.y >= y) {\n    this.pointInPolygonRec(nr, x, y);\n  }\n\n};\n\nIntervalTree.prototype.pointInPolygon = function (x, y) {\n\n  this.pipResult = false;\n\n  this.pointInPolygonRec(this.root, x, y);\n\n  return this.pipResult;\n\n};","/*******************************************************************************\n *                                                                              *\n * Author    :  Angus Johnson                                                   *\n * Version   :  6.4.2                                                           *\n * Date      :  27 February 2017                                                *\n * Website   :  http://www.angusj.com                                           *\n * Copyright :  Angus Johnson 2010-2017                                         *\n *                                                                              *\n * License:                                                                     *\n * Use, modification & distribution is subject to Boost Software License Ver 1. *\n * http://www.boost.org/LICENSE_1_0.txt                                         *\n *                                                                              *\n * Attributions:                                                                *\n * The code in this library is an extension of Bala Vatti's clipping algorithm: *\n * \"A generic solution to polygon clipping\"                                     *\n * Communications of the ACM, Vol 35, Issue 7 (July 1992) pp 56-63.             *\n * http://portal.acm.org/citation.cfm?id=129906                                 *\n *                                                                              *\n * Computer graphics and geometric modeling: implementation and algorithms      *\n * By Max K. Agoston                                                            *\n * Springer; 1 edition (January 4, 2005)                                        *\n * http://books.google.com/books?q=vatti+clipping+agoston                       *\n *                                                                              *\n * See also:                                                                    *\n * \"Polygon Offsetting by Computing Winding Numbers\"                            *\n * Paper no. DETC2005-85513 pp. 565-575                                         *\n * ASME 2005 International Design Engineering Technical Conferences             *\n * and Computers and Information in Engineering Conference (IDETC/CIE2005)      *\n * September 24-28, 2005 , Long Beach, California, USA                          *\n * http://www.me.berkeley.edu/~mcmains/pubs/DAC05OffsetPolygon.pdf              *\n *                                                                              *\n *******************************************************************************/\n/*******************************************************************************\n                                                                                   *                                                                              *\n                                                                                   * Author    :  Timo                                                            *\n                                                                                   * Version   :  6.4.2.2 (FPoint)                                                *\n                                                                                   * Date      :  8 September 2017                                                *\n                                                                                   *                                                                              *\n                                                                                   * This is a translation of the C# Clipper library to Javascript.               *\n                                                                                   *                                                                              *\n                                                                                   *******************************************************************************/\n(function () {var c = { version: \"6.4.2.2\", use_lines: !0, use_xyz: !1 };var r = !1;\"undefined\" !== typeof module && module.exports ? (module.exports = c, r = !0) : \"undefined\" !== typeof document ? window.ClipperLib = c : self.ClipperLib = c;r = r ? \"chrome\" : navigator.userAgent.toString().toLowerCase();-1 != r.indexOf(\"chrome\") && r.indexOf(\"chromium\");r.indexOf(\"chromium\");-1 != r.indexOf(\"safari\") && -1 == r.indexOf(\"chrome\") && r.indexOf(\"chromium\");r.indexOf(\"firefox\");r.indexOf(\"firefox/17\");r.indexOf(\"firefox/15\");r.indexOf(\"firefox/3\");r.indexOf(\"opera\");\n  r.indexOf(\"msie 10\");r.indexOf(\"msie 9\");r.indexOf(\"msie 8\");r.indexOf(\"msie 7\");r.indexOf(\"msie \");r = function r(a, b) {var d;if (\"undefined\" === typeof Object.getOwnPropertyNames) for (d in b.prototype) {if (\"undefined\" === typeof a.prototype[d] || a.prototype[d] === Object.prototype[d]) a.prototype[d] = b.prototype[d];} else for (var c = Object.getOwnPropertyNames(b.prototype), f = 0; f < c.length; f++) {\"undefined\" === typeof Object.getOwnPropertyDescriptor(a.prototype, c[f]) && Object.defineProperty(a.prototype, c[f], Object.getOwnPropertyDescriptor(b.prototype,\n      c[f]));}for (d in b) {\"undefined\" === typeof a[d] && (a[d] = b[d]);}a.$baseCtor = b;};c.Path = function () {return [];};c.Path.prototype.push = Array.prototype.push;c.Paths = function () {return [];};c.Paths.prototype.push = Array.prototype.push;c.PolyNode = function () {this.m_Parent = null;this.m_polygon = new c.Path();this.m_endtype = this.m_jointype = this.m_Index = 0;this.m_Childs = [];this.IsOpen = !1;};c.PolyNode.prototype.IsHoleNode = function () {for (var a = !0, b = this.m_Parent; null !== b;) {a = !a, b = b.m_Parent;}return a;};c.PolyNode.prototype.ChildCount =\n  function () {return this.m_Childs.length;};c.PolyNode.prototype.Contour = function () {return this.m_polygon;};c.PolyNode.prototype.AddChild = function (a) {var b = this.m_Childs.length;this.m_Childs.push(a);a.m_Parent = this;a.m_Index = b;};c.PolyNode.prototype.GetNext = function () {return 0 < this.m_Childs.length ? this.m_Childs[0] : this.GetNextSiblingUp();};c.PolyNode.prototype.GetNextSiblingUp = function () {return null === this.m_Parent ? null : this.m_Index === this.m_Parent.m_Childs.length - 1 ? this.m_Parent.GetNextSiblingUp() : this.m_Parent.m_Childs[this.m_Index +\n    1];};c.PolyNode.prototype.Childs = function () {return this.m_Childs;};c.PolyNode.prototype.Parent = function () {return this.m_Parent;};c.PolyNode.prototype.IsHole = function () {return this.IsHoleNode();};c.PolyTree = function () {this.m_AllPolys = [];c.PolyNode.call(this);};c.PolyTree.prototype.Clear = function () {for (var a = 0, b = this.m_AllPolys.length; a < b; a++) {this.m_AllPolys[a] = null;}this.m_AllPolys.length = 0;this.m_Childs.length = 0;};c.PolyTree.prototype.GetFirst = function () {return 0 < this.m_Childs.length ? this.m_Childs[0] : null;};\n  c.PolyTree.prototype.Total = function () {var a = this.m_AllPolys.length;0 < a && this.m_Childs[0] !== this.m_AllPolys[0] && a--;return a;};r(c.PolyTree, c.PolyNode);c.Clear = function (a) {a.length = 0;};c.PI = 3.141592653589793;c.PI2 = 6.283185307179586;c.FPoint = function () {var a = arguments;var b = a.length;this.Y = this.X = 0;c.use_xyz ? (this.Z = 0, 3 === b ? (this.X = a[0], this.Y = a[1], this.Z = a[2]) : 2 === b ? (this.X = a[0], this.Y = a[1], this.Z = 0) : 1 === b ? a[0] instanceof c.FPoint ? (a = a[0], this.X = a.X, this.Y = a.Y, this.Z = 0) : (a = a[0], \"undefined\" === typeof a.Z && (\n    a.Z = 0), this.X = a.X, this.Y = a.Y, this.Z = a.Z) : this.Z = this.Y = this.X = 0) : 2 === b ? (this.X = a[0], this.Y = a[1]) : 1 === b ? (a = a[0], this.X = a.X, this.Y = a.Y) : this.Y = this.X = 0;};c.FPoint.op_Equality = function (a, b) {return a.X === b.X && a.Y === b.Y;};c.FPoint.op_Inequality = function (a, b) {return a.X !== b.X || a.Y !== b.Y;};c.FPoint0 = function () {this.Y = this.X = 0;c.use_xyz && (this.Z = 0);};c.FPoint0.prototype = c.FPoint.prototype;c.FPoint1 = function (a) {this.X = a.X;this.Y = a.Y;c.use_xyz && (this.Z = \"undefined\" === typeof a.Z ? 0 : a.Z);};c.FPoint1.prototype = c.FPoint.prototype;\n  c.FPoint1dp = function (a) {this.X = a.X;this.Y = a.Y;c.use_xyz && (this.Z = 0);};c.FPoint1dp.prototype = c.FPoint.prototype;c.FPoint2 = function (a, b, d) {this.X = a;this.Y = b;c.use_xyz && (this.Z = \"undefined\" === typeof d ? 0 : d);};c.FPoint2.prototype = c.FPoint.prototype;c.FRect = function () {var a = arguments,b = a.length;4 === b ? (this.left = a[0], this.top = a[1], this.right = a[2], this.bottom = a[3]) : 1 === b ? (a = a[0], this.left = a.left, this.top = a.top, this.right = a.right, this.bottom = a.bottom) : this.bottom = this.right = this.top = this.left = 0;};c.FRect0 = function () {this.bottom =\n    this.right = this.top = this.left = 0;};c.FRect0.prototype = c.FRect.prototype;c.FRect1 = function (a) {this.left = a.left;this.top = a.top;this.right = a.right;this.bottom = a.bottom;};c.FRect1.prototype = c.FRect.prototype;c.FRect4 = function (a, b, d, c) {this.left = a;this.top = b;this.right = d;this.bottom = c;};c.FRect4.prototype = c.FRect.prototype;c.ClipType = { ctIntersection: 0, ctUnion: 1, ctDifference: 2, ctXor: 3 };c.PolyType = { ptSubject: 0, ptClip: 1 };c.PolyFillType = { pftEvenOdd: 0, pftNonZero: 1, pftPositive: 2, pftNegative: 3 };c.JoinType = { jtSquare: 0,\n    jtRound: 1, jtMiter: 2 };c.EndType = { etOpenSquare: 0, etOpenRound: 1, etOpenButt: 2, etClosedLine: 3, etClosedPolygon: 4 };c.EdgeSide = { esLeft: 0, esRight: 1 };c.Direction = { dRightToLeft: 0, dLeftToRight: 1 };c.TEdge = function () {this.Bot = new c.FPoint0();this.Curr = new c.FPoint0();this.Top = new c.FPoint0();this.Delta = new c.FPoint0();this.Dx = 0;this.PolyTyp = c.PolyType.ptSubject;this.Side = c.EdgeSide.esLeft;this.OutIdx = this.WindCnt2 = this.WindCnt = this.WindDelta = 0;this.PrevInSEL = this.NextInSEL = this.PrevInAEL = this.NextInAEL = this.NextInLML =\n    this.Prev = this.Next = null;};c.IntersectNode = function () {this.Edge2 = this.Edge1 = null;this.Pt = new c.FPoint0();};c.MyIntersectNodeSort = function () {};c.MyIntersectNodeSort.Compare = function (a, b) {var d = b.Pt.Y - a.Pt.Y;return 0 < d ? 1 : 0 > d ? -1 : 0;};c.LocalMinima = function () {this.Y = 0;this.Next = this.RightBound = this.LeftBound = null;};c.Scanbeam = function () {this.Y = 0;this.Next = null;};c.Maxima = function () {this.X = 0;this.Prev = this.Next = null;};c.OutRec = function () {this.Idx = 0;this.IsOpen = this.IsHole = !1;this.PolyNode = this.BottomPt = this.Pts =\n    this.FirstLeft = null;};c.OutPt = function () {this.Idx = 0;this.Pt = new c.FPoint0();this.Prev = this.Next = null;};c.Join = function () {this.OutPt2 = this.OutPt1 = null;this.OffPt = new c.FPoint0();};c.ClipperBase = function () {this.m_CurrentLM = this.m_MinimaList = null;this.m_edges = [];this.PreserveCollinear = this.m_HasOpenPaths = !1;this.m_ActiveEdges = this.m_PolyOuts = this.m_Scanbeam = null;};c.ClipperBase.horizontal = -3.4E38;c.ClipperBase.Skip = -2;c.ClipperBase.Unassigned = -1;c.ClipperBase.tolerance = 1E-20;c.ClipperBase.maxValue = Math.sqrt(Number.MAX_VALUE);\n  c.ClipperBase.minValue = Math.sqrt(Number.MIN_VALUE);c.ClipperBase.near_zero = function (a) {return a > -c.ClipperBase.tolerance && a < c.ClipperBase.tolerance;};c.ClipperBase.IsHorizontal = function (a) {return 0 === a.Delta.Y;};c.ClipperBase.prototype.PointIsVertex = function (a, b) {var d = b;do {if (c.FPoint.op_Equality(d.Pt, a)) return !0;d = d.Next;} while (d !== b);return !1;};c.ClipperBase.prototype.PointOnLineSegment = function (a, b, d) {return a.X === b.X && a.Y === b.Y || a.X === d.X && a.Y === d.Y || a.X > b.X === a.X < d.X && a.Y > b.Y === a.Y < d.Y && (a.X - b.X) * (\n    d.Y - b.Y) === (d.X - b.X) * (a.Y - b.Y);};c.ClipperBase.prototype.PointOnPolygon = function (a, b) {for (var d = b;;) {if (this.PointOnLineSegment(a, d.Pt, d.Next.Pt)) return !0;d = d.Next;if (d === b) break;}return !1;};c.ClipperBase.prototype.SlopesEqual = c.ClipperBase.SlopesEqual = function () {var a = arguments,b = a.length;if (2 === b) return b = a[0], a = a[1], b.Delta.Y * a.Delta.X === b.Delta.X * a.Delta.Y;if (3 === b) {b = a[0];var d = a[1];var c = a[2];return 0 === (b.Y - d.Y) * (d.X - c.X) - (b.X - d.X) * (d.Y - c.Y);}b = a[0];d = a[1];c = a[2];a = a[3];return 0 === (b.Y - d.Y) * (c.X -\n    a.X) - (b.X - d.X) * (c.Y - a.Y);};c.ClipperBase.SlopesEqual3 = function (a, b) {return a.Delta.Y * b.Delta.X === a.Delta.X * b.Delta.Y;};c.ClipperBase.SlopesEqual4 = function (a, b, d) {return 0 === (a.Y - b.Y) * (b.X - d.X) - (a.X - b.X) * (b.Y - d.Y);};c.ClipperBase.SlopesEqual5 = function (a, b, d, c) {return 0 === (a.Y - b.Y) * (d.X - c.X) - (a.X - b.X) * (d.Y - c.Y);};c.ClipperBase.prototype.Clear = function () {this.DisposeLocalMinimaList();for (var a = 0, b = this.m_edges.length; a < b; ++a) {for (var d = 0, e = this.m_edges[a].length; d < e; ++d) {this.m_edges[a][d] = null;}c.Clear(this.m_edges[a]);}c.Clear(this.m_edges);\n    this.m_HasOpenPaths = !1;};c.ClipperBase.prototype.DisposeLocalMinimaList = function () {for (; null !== this.m_MinimaList;) {var a = this.m_MinimaList.Next;this.m_MinimaList = null;this.m_MinimaList = a;}this.m_CurrentLM = null;};c.ClipperBase.prototype.RangeTest = function (a) {(a.X > c.ClipperBase.maxValue || a.X < -c.ClipperBase.maxValue || a.Y > c.ClipperBase.maxValue || a.Y < -c.ClipperBase.maxValue || 0 < a.X && a.X < c.ClipperBase.minValue || 0 < a.Y && a.Y < c.ClipperBase.minValue || 0 > a.X && a.X > -c.ClipperBase.minValue || 0 > a.Y && a.Y > -c.ClipperBase.minValue) &&\n    c.Error(\"Coordinate outside allowed range in RangeTest().\");};c.ClipperBase.prototype.InitEdge = function (a, b, d, e) {a.Next = b;a.Prev = d;a.Curr.X = e.X;a.Curr.Y = e.Y;c.use_xyz && (a.Curr.Z = e.Z);a.OutIdx = -1;};c.ClipperBase.prototype.InitEdge2 = function (a, b) {a.Curr.Y >= a.Next.Curr.Y ? (a.Bot.X = a.Curr.X, a.Bot.Y = a.Curr.Y, c.use_xyz && (a.Bot.Z = a.Curr.Z), a.Top.X = a.Next.Curr.X, a.Top.Y = a.Next.Curr.Y, c.use_xyz && (a.Top.Z = a.Next.Curr.Z)) : (a.Top.X = a.Curr.X, a.Top.Y = a.Curr.Y, c.use_xyz && (a.Top.Z = a.Curr.Z), a.Bot.X = a.Next.Curr.X, a.Bot.Y =\n    a.Next.Curr.Y, c.use_xyz && (a.Bot.Z = a.Next.Curr.Z));this.SetDx(a);a.PolyTyp = b;};c.ClipperBase.prototype.FindNextLocMin = function (a) {for (var b;;) {for (; c.FPoint.op_Inequality(a.Bot, a.Prev.Bot) || c.FPoint.op_Equality(a.Curr, a.Top);) {a = a.Next;}if (a.Dx !== c.ClipperBase.horizontal && a.Prev.Dx !== c.ClipperBase.horizontal) break;for (; a.Prev.Dx === c.ClipperBase.horizontal;) {a = a.Prev;}for (b = a; a.Dx === c.ClipperBase.horizontal;) {a = a.Next;}if (a.Top.Y !== a.Prev.Bot.Y) {b.Prev.Bot.X < a.Bot.X && (a = b);break;}}return a;};c.ClipperBase.prototype.ProcessBound =\n  function (a, b) {var d = a,e;if (d.OutIdx === c.ClipperBase.Skip) {a = d;if (b) {for (; a.Top.Y === a.Next.Bot.Y;) {a = a.Next;}for (; a !== d && a.Dx === c.ClipperBase.horizontal;) {a = a.Prev;}} else {for (; a.Top.Y === a.Prev.Bot.Y;) {a = a.Prev;}for (; a !== d && a.Dx === c.ClipperBase.horizontal;) {a = a.Next;}}if (a === d) d = b ? a.Next : a.Prev;else {a = b ? d.Next : d.Prev;var f = new c.LocalMinima();f.Next = null;f.Y = a.Bot.Y;f.LeftBound = null;f.RightBound = a;a.WindDelta = 0;d = this.ProcessBound(a, b);this.InsertLocalMinima(f);}return d;}a.Dx === c.ClipperBase.horizontal && (f = b ? a.Prev :\n    a.Next, f.Dx === c.ClipperBase.horizontal ? f.Bot.X !== a.Bot.X && f.Top.X !== a.Bot.X && this.ReverseHorizontal(a) : f.Bot.X !== a.Bot.X && this.ReverseHorizontal(a));f = a;if (b) {for (; d.Top.Y === d.Next.Bot.Y && d.Next.OutIdx !== c.ClipperBase.Skip;) {d = d.Next;}if (d.Dx === c.ClipperBase.horizontal && d.Next.OutIdx !== c.ClipperBase.Skip) {for (e = d; e.Prev.Dx === c.ClipperBase.horizontal;) {e = e.Prev;}e.Prev.Top.X > d.Next.Top.X && (d = e.Prev);}for (; a !== d;) {a.NextInLML = a.Next, a.Dx === c.ClipperBase.horizontal && a !== f && a.Bot.X !== a.Prev.Top.X && this.ReverseHorizontal(a),\n        a = a.Next;}a.Dx === c.ClipperBase.horizontal && a !== f && a.Bot.X !== a.Prev.Top.X && this.ReverseHorizontal(a);d = d.Next;} else {for (; d.Top.Y === d.Prev.Bot.Y && d.Prev.OutIdx !== c.ClipperBase.Skip;) {d = d.Prev;}if (d.Dx === c.ClipperBase.horizontal && d.Prev.OutIdx !== c.ClipperBase.Skip) {for (e = d; e.Next.Dx === c.ClipperBase.horizontal;) {e = e.Next;}if (e.Next.Top.X === d.Prev.Top.X || e.Next.Top.X > d.Prev.Top.X) d = e.Next;}for (; a !== d;) {a.NextInLML = a.Prev, a.Dx === c.ClipperBase.horizontal && a !== f && a.Bot.X !== a.Next.Top.X && this.ReverseHorizontal(a),\n        a = a.Prev;}a.Dx === c.ClipperBase.horizontal && a !== f && a.Bot.X !== a.Next.Top.X && this.ReverseHorizontal(a);d = d.Prev;}return d;};c.ClipperBase.prototype.AddPath = function (a, b, d) {c.use_lines ? d || b !== c.PolyType.ptClip || c.Error(\"AddPath: Open paths must be subject.\") : d || c.Error(\"AddPath: Open paths have been disabled.\");var e = a.length - 1;if (d) for (; 0 < e && c.FPoint.op_Equality(a[e], a[0]);) {--e;}for (; 0 < e && c.FPoint.op_Equality(a[e], a[e - 1]);) {--e;}if (d && 2 > e || !d && 1 > e) return !1;for (var f = [], g = 0; g <= e; g++) {f.push(new c.TEdge());}var h =\n    !0;f[1].Curr.X = a[1].X;f[1].Curr.Y = a[1].Y;c.use_xyz && (f[1].Curr.Z = a[1].Z);this.RangeTest(a[0]);this.RangeTest(a[e]);this.InitEdge(f[0], f[1], f[e], a[0]);this.InitEdge(f[e], f[0], f[e - 1], a[e]);for (g = e - 1; 1 <= g; --g) {this.RangeTest(a[g]), this.InitEdge(f[g], f[g + 1], f[g - 1], a[g]);}for (g = a = e = f[0];;) {if (a.Curr !== a.Next.Curr || !d && a.Next === e) {if (a.Prev === a.Next) break;else if (d && c.ClipperBase.SlopesEqual4(a.Prev.Curr, a.Curr, a.Next.Curr) && (!this.PreserveCollinear || !this.Pt2IsBetweenPt1AndPt3(a.Prev.Curr, a.Curr, a.Next.Curr))) {a ===\n          e && (e = a.Next);a = this.RemoveEdge(a);g = a = a.Prev;continue;}a = a.Next;if (a === g || !d && a.Next === e) break;} else {if (a === a.Next) break;a === e && (e = a.Next);g = a = this.RemoveEdge(a);}}if (!d && a === a.Next || d && a.Prev === a.Next) return !1;d || (this.m_HasOpenPaths = !0, e.Prev.OutIdx = c.ClipperBase.Skip);a = e;do {this.InitEdge2(a, b), a = a.Next, h && a.Curr.Y !== e.Curr.Y && (h = !1);} while (a !== e);if (h) {if (d) return !1;a.Prev.OutIdx = c.ClipperBase.Skip;b = new c.LocalMinima();b.Next = null;b.Y = a.Bot.Y;b.LeftBound = null;b.RightBound = a;b.RightBound.Side = c.EdgeSide.esRight;\n      for (b.RightBound.WindDelta = 0;;) {a.Bot.X !== a.Prev.Top.X && this.ReverseHorizontal(a);if (a.Next.OutIdx === c.ClipperBase.Skip) break;a = a.NextInLML = a.Next;}this.InsertLocalMinima(b);this.m_edges.push(f);return !0;}this.m_edges.push(f);h = null;c.FPoint.op_Equality(a.Prev.Bot, a.Prev.Top) && (a = a.Next);for (;;) {a = this.FindNextLocMin(a);if (a === h) break;else null === h && (h = a);b = new c.LocalMinima();b.Next = null;b.Y = a.Bot.Y;a.Dx < a.Prev.Dx ? (b.LeftBound = a.Prev, b.RightBound = a, f = !1) : (b.LeftBound = a, b.RightBound = a.Prev, f = !0);b.LeftBound.Side =\n      c.EdgeSide.esLeft;b.RightBound.Side = c.EdgeSide.esRight;b.LeftBound.WindDelta = d ? b.LeftBound.Next === b.RightBound ? -1 : 1 : 0;b.RightBound.WindDelta = -b.LeftBound.WindDelta;a = this.ProcessBound(b.LeftBound, f);a.OutIdx === c.ClipperBase.Skip && (a = this.ProcessBound(a, f));e = this.ProcessBound(b.RightBound, !f);e.OutIdx === c.ClipperBase.Skip && (e = this.ProcessBound(e, !f));b.LeftBound.OutIdx === c.ClipperBase.Skip ? b.LeftBound = null : b.RightBound.OutIdx === c.ClipperBase.Skip && (b.RightBound = null);this.InsertLocalMinima(b);f || (\n      a = e);}return !0;};c.ClipperBase.prototype.AddPaths = function (a, b, d) {for (var c = !1, f = 0, g = a.length; f < g; ++f) {this.AddPath(a[f], b, d) && (c = !0);}return c;};c.ClipperBase.prototype.Pt2IsBetweenPt1AndPt3 = function (a, b, d) {return c.FPoint.op_Equality(a, d) || c.FPoint.op_Equality(a, b) || c.FPoint.op_Equality(d, b) ? !1 : a.X !== d.X ? b.X > a.X === b.X < d.X : b.Y > a.Y === b.Y < d.Y;};c.ClipperBase.prototype.RemoveEdge = function (a) {a.Prev.Next = a.Next;a.Next.Prev = a.Prev;var b = a.Next;a.Prev = null;return b;};c.ClipperBase.prototype.SetDx = function (a) {a.Delta.X =\n    a.Top.X - a.Bot.X;a.Delta.Y = a.Top.Y - a.Bot.Y;a.Dx = 0 === a.Delta.Y ? c.ClipperBase.horizontal : a.Delta.X / a.Delta.Y;};c.ClipperBase.prototype.InsertLocalMinima = function (a) {if (null === this.m_MinimaList) this.m_MinimaList = a;else if (a.Y >= this.m_MinimaList.Y) a.Next = this.m_MinimaList, this.m_MinimaList = a;else {for (var b = this.m_MinimaList; null !== b.Next && a.Y < b.Next.Y;) {b = b.Next;}a.Next = b.Next;b.Next = a;}};c.ClipperBase.prototype.PopLocalMinima = function (a, b) {b.v = this.m_CurrentLM;return null !== this.m_CurrentLM && this.m_CurrentLM.Y ===\n    a ? (this.m_CurrentLM = this.m_CurrentLM.Next, !0) : !1;};c.ClipperBase.prototype.ReverseHorizontal = function (a) {var b = a.Top.X;a.Top.X = a.Bot.X;a.Bot.X = b;c.use_xyz && (b = a.Top.Z, a.Top.Z = a.Bot.Z, a.Bot.Z = b);};c.ClipperBase.prototype.Reset = function () {this.m_CurrentLM = this.m_MinimaList;if (null !== this.m_CurrentLM) {this.m_Scanbeam = null;for (var a = this.m_MinimaList; null !== a;) {this.InsertScanbeam(a.Y);var b = a.LeftBound;null !== b && (b.Curr.X = b.Bot.X, b.Curr.Y = b.Bot.Y, c.use_xyz && (b.Curr.Z = b.Bot.Z), b.OutIdx = c.ClipperBase.Unassigned);\n        b = a.RightBound;null !== b && (b.Curr.X = b.Bot.X, b.Curr.Y = b.Bot.Y, c.use_xyz && (b.Curr.Z = b.Bot.Z), b.OutIdx = c.ClipperBase.Unassigned);a = a.Next;}this.m_ActiveEdges = null;}};c.ClipperBase.prototype.InsertScanbeam = function (a) {if (null === this.m_Scanbeam) this.m_Scanbeam = new c.Scanbeam(), this.m_Scanbeam.Next = null, this.m_Scanbeam.Y = a;else if (a > this.m_Scanbeam.Y) {var b = new c.Scanbeam();b.Y = a;b.Next = this.m_Scanbeam;this.m_Scanbeam = b;} else {for (b = this.m_Scanbeam; null !== b.Next && a <= b.Next.Y;) {b = b.Next;}if (a !== b.Y) {var d = new c.Scanbeam();\n        d.Y = a;d.Next = b.Next;b.Next = d;}}};c.ClipperBase.prototype.PopScanbeam = function (a) {if (null === this.m_Scanbeam) return a.v = 0, !1;a.v = this.m_Scanbeam.Y;this.m_Scanbeam = this.m_Scanbeam.Next;return !0;};c.ClipperBase.prototype.LocalMinimaPending = function () {return null !== this.m_CurrentLM;};c.ClipperBase.prototype.CreateOutRec = function () {var a = new c.OutRec();a.Idx = c.ClipperBase.Unassigned;a.IsHole = !1;a.IsOpen = !1;a.FirstLeft = null;a.Pts = null;a.BottomPt = null;a.PolyNode = null;this.m_PolyOuts.push(a);a.Idx = this.m_PolyOuts.length -\n    1;return a;};c.ClipperBase.prototype.DisposeOutRec = function (a) {this.m_PolyOuts[a].Pts = null;this.m_PolyOuts[a] = null;};c.ClipperBase.prototype.UpdateEdgeIntoAEL = function (a) {null === a.NextInLML && c.Error(\"UpdateEdgeIntoAEL: invalid call\");var b = a.PrevInAEL,d = a.NextInAEL;a.NextInLML.OutIdx = a.OutIdx;null !== b ? b.NextInAEL = a.NextInLML : this.m_ActiveEdges = a.NextInLML;null !== d && (d.PrevInAEL = a.NextInLML);a.NextInLML.Side = a.Side;a.NextInLML.WindDelta = a.WindDelta;a.NextInLML.WindCnt = a.WindCnt;a.NextInLML.WindCnt2 =\n    a.WindCnt2;a = a.NextInLML;a.Curr.X = a.Bot.X;a.Curr.Y = a.Bot.Y;a.PrevInAEL = b;a.NextInAEL = d;c.ClipperBase.IsHorizontal(a) || this.InsertScanbeam(a.Top.Y);return a;};c.ClipperBase.prototype.SwapPositionsInAEL = function (a, b) {if (a.NextInAEL !== a.PrevInAEL && b.NextInAEL !== b.PrevInAEL) {if (a.NextInAEL === b) {var d = b.NextInAEL;null !== d && (d.PrevInAEL = a);var c = a.PrevInAEL;null !== c && (c.NextInAEL = b);b.PrevInAEL = c;b.NextInAEL = a;a.PrevInAEL = b;a.NextInAEL = d;} else b.NextInAEL === a ? (d = a.NextInAEL, null !== d && (d.PrevInAEL = b), c = b.PrevInAEL,\n      null !== c && (c.NextInAEL = a), a.PrevInAEL = c, a.NextInAEL = b, b.PrevInAEL = a, b.NextInAEL = d) : (d = a.NextInAEL, c = a.PrevInAEL, a.NextInAEL = b.NextInAEL, null !== a.NextInAEL && (a.NextInAEL.PrevInAEL = a), a.PrevInAEL = b.PrevInAEL, null !== a.PrevInAEL && (a.PrevInAEL.NextInAEL = a), b.NextInAEL = d, null !== b.NextInAEL && (b.NextInAEL.PrevInAEL = b), b.PrevInAEL = c, null !== b.PrevInAEL && (b.PrevInAEL.NextInAEL = b));null === a.PrevInAEL ? this.m_ActiveEdges = a : null === b.PrevInAEL && (this.m_ActiveEdges = b);}};c.ClipperBase.prototype.DeleteFromAEL = function (a) {var b =\n    a.PrevInAEL,d = a.NextInAEL;if (null !== b || null !== d || a === this.m_ActiveEdges) null !== b ? b.NextInAEL = d : this.m_ActiveEdges = d, null !== d && (d.PrevInAEL = b), a.NextInAEL = null, a.PrevInAEL = null;};c.Clipper = function (a) {\"undefined\" === typeof a && (a = 0);this.m_PolyOuts = null;this.m_ClipType = c.ClipType.ctIntersection;this.m_IntersectNodeComparer = this.m_IntersectList = this.m_SortedEdges = this.m_ActiveEdges = this.m_Maxima = this.m_Scanbeam = null;this.m_ExecuteLocked = !1;this.m_SubjFillType = this.m_ClipFillType = c.PolyFillType.pftEvenOdd;\n    this.m_GhostJoins = this.m_Joins = null;this.StrictlySimple = this.ReverseSolution = this.m_UsingPolyTree = !1;c.ClipperBase.call(this);this.m_SortedEdges = this.m_ActiveEdges = this.m_Maxima = this.m_Scanbeam = null;this.m_IntersectList = [];this.m_IntersectNodeComparer = c.MyIntersectNodeSort.Compare;this.m_UsingPolyTree = this.m_ExecuteLocked = !1;this.m_PolyOuts = [];this.m_Joins = [];this.m_GhostJoins = [];this.ReverseSolution = 0 !== (1 & a);this.StrictlySimple = 0 !== (2 & a);this.PreserveCollinear = 0 !== (4 & a);c.use_xyz && (this.ZFillFunction =\n    null);};c.Clipper.ioReverseSolution = 1;c.Clipper.ioStrictlySimple = 2;c.Clipper.ioPreserveCollinear = 4;c.Clipper.prototype.Clear = function () {0 !== this.m_edges.length && (this.DisposeAllPolyPts(), c.ClipperBase.prototype.Clear.call(this));};c.Clipper.prototype.InsertMaxima = function (a) {var b = new c.Maxima();b.X = a;if (null === this.m_Maxima) this.m_Maxima = b, this.m_Maxima.Next = null, this.m_Maxima.Prev = null;else if (a < this.m_Maxima.X) b.Next = this.m_Maxima, b.Prev = null, this.m_Maxima = b;else {for (var d = this.m_Maxima; null !== d.Next &&\n      a >= d.Next.X;) {d = d.Next;}a !== d.X && (b.Next = d.Next, b.Prev = d, null !== d.Next && (d.Next.Prev = b), d.Next = b);}};c.Clipper.prototype.Execute = function () {var a;var b = arguments;var d = b.length;var e = b[1] instanceof c.PolyTree;if (4 !== d || e) {if (4 === d && e) {d = b[0];var f = b[1];e = b[2];b = b[3];if (this.m_ExecuteLocked) return !1;this.m_ExecuteLocked = !0;this.m_SubjFillType = e;this.m_ClipFillType = b;this.m_ClipType = d;this.m_UsingPolyTree = !0;try {(a = this.ExecuteInternal()) && this.BuildResult2(f);} finally {this.DisposeAllPolyPts(), this.m_ExecuteLocked =\n          !1;}return a;}if (2 === d && !e || 2 === d && e) return d = b[0], f = b[1], this.Execute(d, f, c.PolyFillType.pftEvenOdd, c.PolyFillType.pftEvenOdd);} else {d = b[0];f = b[1];e = b[2];b = b[3];if (this.m_ExecuteLocked) return !1;this.m_HasOpenPaths && c.Error(\"Error: PolyTree struct is needed for open path clipping.\");this.m_ExecuteLocked = !0;c.Clear(f);this.m_SubjFillType = e;this.m_ClipFillType = b;this.m_ClipType = d;this.m_UsingPolyTree = !1;try {(a = this.ExecuteInternal()) && this.BuildResult(f);} finally {this.DisposeAllPolyPts(), this.m_ExecuteLocked =\n        !1;}return a;}};c.Clipper.prototype.FixHoleLinkage = function (a) {if (null !== a.FirstLeft && (a.IsHole === a.FirstLeft.IsHole || null === a.FirstLeft.Pts)) {for (var b = a.FirstLeft; null !== b && (b.IsHole === a.IsHole || null === b.Pts);) {b = b.FirstLeft;}a.FirstLeft = b;}};c.Clipper.prototype.ExecuteInternal = function () {try {this.Reset();this.m_Maxima = this.m_SortedEdges = null;var a = {},b = {};if (!this.PopScanbeam(a)) return !1;for (this.InsertLocalMinimaIntoAEL(a.v); this.PopScanbeam(b) || this.LocalMinimaPending();) {this.ProcessHorizontals();\n        this.m_GhostJoins.length = 0;if (!this.ProcessIntersections(b.v)) return !1;this.ProcessEdgesAtTopOfScanbeam(b.v);a.v = b.v;this.InsertLocalMinimaIntoAEL(a.v);}var d;var c = 0;for (d = this.m_PolyOuts.length; c < d; c++) {var f = this.m_PolyOuts[c];null === f.Pts || f.IsOpen || (f.IsHole ^ this.ReverseSolution) == 0 < this.Area$1(f) && this.ReversePolyPtLinks(f.Pts);}this.JoinCommonEdges();c = 0;for (d = this.m_PolyOuts.length; c < d; c++) {f = this.m_PolyOuts[c], null !== f.Pts && (f.IsOpen ? this.FixupOutPolyline(f) : this.FixupOutPolygon(f));}this.StrictlySimple &&\n      this.DoSimplePolygons();return !0;} finally {this.m_Joins.length = 0, this.m_GhostJoins.length = 0;}};c.Clipper.prototype.DisposeAllPolyPts = function () {for (var a = 0, b = this.m_PolyOuts.length; a < b; ++a) {this.DisposeOutRec(a);}c.Clear(this.m_PolyOuts);};c.Clipper.prototype.AddJoin = function (a, b, d) {var e = new c.Join();e.OutPt1 = a;e.OutPt2 = b;e.OffPt.X = d.X;e.OffPt.Y = d.Y;c.use_xyz && (e.OffPt.Z = d.Z);this.m_Joins.push(e);};c.Clipper.prototype.AddGhostJoin = function (a, b) {var d = new c.Join();d.OutPt1 = a;d.OffPt.X = b.X;d.OffPt.Y = b.Y;c.use_xyz && (\n    d.OffPt.Z = b.Z);this.m_GhostJoins.push(d);};c.Clipper.prototype.SetZ = function (a, b, d) {null !== this.ZFillFunction && 0 === a.Z && null !== this.ZFillFunction && (c.FPoint.op_Equality(a, b.Bot) ? a.Z = b.Bot.Z : c.FPoint.op_Equality(a, b.Top) ? a.Z = b.Top.Z : c.FPoint.op_Equality(a, d.Bot) ? a.Z = d.Bot.Z : c.FPoint.op_Equality(a, d.Top) ? a.Z = d.Top.Z : this.ZFillFunction(b.Bot, b.Top, d.Bot, d.Top, a));};c.Clipper.prototype.InsertLocalMinimaIntoAEL = function (a) {for (var b, d = {}, e, f; this.PopLocalMinima(a, d);) {e = d.v.LeftBound;f = d.v.RightBound;var g =\n      null;null === e ? (this.InsertEdgeIntoAEL(f, null), this.SetWindingCount(f), this.IsContributing(f) && (g = this.AddOutPt(f, f.Bot))) : (null === f ? (this.InsertEdgeIntoAEL(e, null), this.SetWindingCount(e), this.IsContributing(e) && (g = this.AddOutPt(e, e.Bot))) : (this.InsertEdgeIntoAEL(e, null), this.InsertEdgeIntoAEL(f, e), this.SetWindingCount(e), f.WindCnt = e.WindCnt, f.WindCnt2 = e.WindCnt2, this.IsContributing(e) && (g = this.AddLocalMinPoly(e, f, e.Bot))), this.InsertScanbeam(e.Top.Y));null !== f && (c.ClipperBase.IsHorizontal(f) ? (null !==\n      f.NextInLML && this.InsertScanbeam(f.NextInLML.Top.Y), this.AddEdgeToSEL(f)) : this.InsertScanbeam(f.Top.Y));if (null !== e && null !== f) {if (null !== g && c.ClipperBase.IsHorizontal(f) && 0 < this.m_GhostJoins.length && 0 !== f.WindDelta) {b = 0;for (var h = this.m_GhostJoins.length; b < h; b++) {var l = this.m_GhostJoins[b];this.HorzSegmentsOverlap(l.OutPt1.Pt.X, l.OffPt.X, f.Bot.X, f.Top.X) && this.AddJoin(l.OutPt1, g, l.OffPt);}}0 <= e.OutIdx && null !== e.PrevInAEL && e.PrevInAEL.Curr.X === e.Bot.X && 0 <= e.PrevInAEL.OutIdx && c.ClipperBase.SlopesEqual5(e.PrevInAEL.Curr,\n        e.PrevInAEL.Top, e.Curr, e.Top) && 0 !== e.WindDelta && 0 !== e.PrevInAEL.WindDelta && (b = this.AddOutPt(e.PrevInAEL, e.Bot), this.AddJoin(g, b, e.Top));if (e.NextInAEL !== f && (0 <= f.OutIdx && 0 <= f.PrevInAEL.OutIdx && c.ClipperBase.SlopesEqual5(f.PrevInAEL.Curr, f.PrevInAEL.Top, f.Curr, f.Top) && 0 !== f.WindDelta && 0 !== f.PrevInAEL.WindDelta && (b = this.AddOutPt(f.PrevInAEL, f.Bot), this.AddJoin(g, b, f.Top)), g = e.NextInAEL, null !== g)) for (; g !== f;) {this.IntersectEdges(f, g, e.Curr), g = g.NextInAEL;}}}};c.Clipper.prototype.InsertEdgeIntoAEL = function (a,\n  b) {if (null === this.m_ActiveEdges) a.PrevInAEL = null, a.NextInAEL = null, this.m_ActiveEdges = a;else if (null === b && this.E2InsertsBeforeE1(this.m_ActiveEdges, a)) a.PrevInAEL = null, a.NextInAEL = this.m_ActiveEdges, this.m_ActiveEdges = this.m_ActiveEdges.PrevInAEL = a;else {null === b && (b = this.m_ActiveEdges);for (; null !== b.NextInAEL && !this.E2InsertsBeforeE1(b.NextInAEL, a);) {b = b.NextInAEL;}a.NextInAEL = b.NextInAEL;null !== b.NextInAEL && (b.NextInAEL.PrevInAEL = a);a.PrevInAEL = b;b.NextInAEL = a;}};c.Clipper.prototype.E2InsertsBeforeE1 =\n  function (a, b) {return b.Curr.X === a.Curr.X ? b.Top.Y > a.Top.Y ? b.Top.X < c.Clipper.TopX(a, b.Top.Y) : a.Top.X > c.Clipper.TopX(b, a.Top.Y) : b.Curr.X < a.Curr.X;};c.Clipper.prototype.IsEvenOddFillType = function (a) {return a.PolyTyp === c.PolyType.ptSubject ? this.m_SubjFillType === c.PolyFillType.pftEvenOdd : this.m_ClipFillType === c.PolyFillType.pftEvenOdd;};c.Clipper.prototype.IsEvenOddAltFillType = function (a) {return a.PolyTyp === c.PolyType.ptSubject ? this.m_ClipFillType === c.PolyFillType.pftEvenOdd : this.m_SubjFillType === c.PolyFillType.pftEvenOdd;};\n  c.Clipper.prototype.IsContributing = function (a) {if (a.PolyTyp === c.PolyType.ptSubject) {var b = this.m_SubjFillType;var d = this.m_ClipFillType;} else b = this.m_ClipFillType, d = this.m_SubjFillType;switch (b) {case c.PolyFillType.pftEvenOdd:if (0 === a.WindDelta && 1 !== a.WindCnt) return !1;break;case c.PolyFillType.pftNonZero:if (1 !== Math.abs(a.WindCnt)) return !1;break;case c.PolyFillType.pftPositive:if (1 !== a.WindCnt) return !1;break;default:if (-1 !== a.WindCnt) return !1;}switch (this.m_ClipType) {case c.ClipType.ctIntersection:switch (d) {case c.PolyFillType.pftEvenOdd:case c.PolyFillType.pftNonZero:return 0 !==\n            a.WindCnt2;case c.PolyFillType.pftPositive:return 0 < a.WindCnt2;default:return 0 > a.WindCnt2;}case c.ClipType.ctUnion:switch (d) {case c.PolyFillType.pftEvenOdd:case c.PolyFillType.pftNonZero:return 0 === a.WindCnt2;case c.PolyFillType.pftPositive:return 0 >= a.WindCnt2;default:return 0 <= a.WindCnt2;}case c.ClipType.ctDifference:if (a.PolyTyp === c.PolyType.ptSubject) switch (d) {case c.PolyFillType.pftEvenOdd:case c.PolyFillType.pftNonZero:return 0 === a.WindCnt2;case c.PolyFillType.pftPositive:return 0 >= a.WindCnt2;\n          default:return 0 <= a.WindCnt2;} else switch (d) {case c.PolyFillType.pftEvenOdd:case c.PolyFillType.pftNonZero:return 0 !== a.WindCnt2;case c.PolyFillType.pftPositive:return 0 < a.WindCnt2;default:return 0 > a.WindCnt2;}case c.ClipType.ctXor:if (0 === a.WindDelta) switch (d) {case c.PolyFillType.pftEvenOdd:case c.PolyFillType.pftNonZero:return 0 === a.WindCnt2;case c.PolyFillType.pftPositive:return 0 >= a.WindCnt2;default:return 0 <= a.WindCnt2;}}return !0;};c.Clipper.prototype.SetWindingCount = function (a) {for (var b = a.PrevInAEL; null !==\n    b && (b.PolyTyp !== a.PolyTyp || 0 === b.WindDelta);) {b = b.PrevInAEL;}if (null === b) b = a.PolyTyp === c.PolyType.ptSubject ? this.m_SubjFillType : this.m_ClipFillType, a.WindCnt = 0 === a.WindDelta ? b === c.PolyFillType.pftNegative ? -1 : 1 : a.WindDelta, a.WindCnt2 = 0, b = this.m_ActiveEdges;else {if (0 === a.WindDelta && this.m_ClipType !== c.ClipType.ctUnion) a.WindCnt = 1;else if (this.IsEvenOddFillType(a)) {if (0 === a.WindDelta) {for (var d = !0, e = b.PrevInAEL; null !== e;) {e.PolyTyp === b.PolyTyp && 0 !== e.WindDelta && (d = !d), e = e.PrevInAEL;}a.WindCnt = d ? 0 : 1;} else a.WindCnt =\n        a.WindDelta;} else a.WindCnt = 0 > b.WindCnt * b.WindDelta ? 1 < Math.abs(b.WindCnt) ? 0 > b.WindDelta * a.WindDelta ? b.WindCnt : b.WindCnt + a.WindDelta : 0 === a.WindDelta ? 1 : a.WindDelta : 0 === a.WindDelta ? 0 > b.WindCnt ? b.WindCnt - 1 : b.WindCnt + 1 : 0 > b.WindDelta * a.WindDelta ? b.WindCnt : b.WindCnt + a.WindDelta;a.WindCnt2 = b.WindCnt2;b = b.NextInAEL;}if (this.IsEvenOddAltFillType(a)) for (; b !== a;) {0 !== b.WindDelta && (a.WindCnt2 = 0 === a.WindCnt2 ? 1 : 0), b = b.NextInAEL;} else for (; b !== a;) {a.WindCnt2 += b.WindDelta, b = b.NextInAEL;}};c.Clipper.prototype.AddEdgeToSEL =\n  function (a) {null === this.m_SortedEdges ? (this.m_SortedEdges = a, a.PrevInSEL = null, a.NextInSEL = null) : (a.NextInSEL = this.m_SortedEdges, a.PrevInSEL = null, this.m_SortedEdges = this.m_SortedEdges.PrevInSEL = a);};c.Clipper.prototype.PopEdgeFromSEL = function (a) {a.v = this.m_SortedEdges;if (null === a.v) return !1;var b = a.v;this.m_SortedEdges = a.v.NextInSEL;null !== this.m_SortedEdges && (this.m_SortedEdges.PrevInSEL = null);b.NextInSEL = null;b.PrevInSEL = null;return !0;};c.Clipper.prototype.CopyAELToSEL = function () {var a = this.m_ActiveEdges;\n    for (this.m_SortedEdges = a; null !== a;) {a.PrevInSEL = a.PrevInAEL, a = a.NextInSEL = a.NextInAEL;}};c.Clipper.prototype.SwapPositionsInSEL = function (a, b) {if (null !== a.NextInSEL || null !== a.PrevInSEL) if (null !== b.NextInSEL || null !== b.PrevInSEL) {if (a.NextInSEL === b) {var d = b.NextInSEL;null !== d && (d.PrevInSEL = a);var c = a.PrevInSEL;null !== c && (c.NextInSEL = b);b.PrevInSEL = c;b.NextInSEL = a;a.PrevInSEL = b;a.NextInSEL = d;} else b.NextInSEL === a ? (d = a.NextInSEL, null !== d && (d.PrevInSEL = b), c = b.PrevInSEL, null !== c && (c.NextInSEL = a), a.PrevInSEL =\n      c, a.NextInSEL = b, b.PrevInSEL = a, b.NextInSEL = d) : (d = a.NextInSEL, c = a.PrevInSEL, a.NextInSEL = b.NextInSEL, null !== a.NextInSEL && (a.NextInSEL.PrevInSEL = a), a.PrevInSEL = b.PrevInSEL, null !== a.PrevInSEL && (a.PrevInSEL.NextInSEL = a), b.NextInSEL = d, null !== b.NextInSEL && (b.NextInSEL.PrevInSEL = b), b.PrevInSEL = c, null !== b.PrevInSEL && (b.PrevInSEL.NextInSEL = b));null === a.PrevInSEL ? this.m_SortedEdges = a : null === b.PrevInSEL && (this.m_SortedEdges = b);}};c.Clipper.prototype.AddLocalMaxPoly = function (a, b, d) {this.AddOutPt(a, d);0 === b.WindDelta &&\n    this.AddOutPt(b, d);a.OutIdx === b.OutIdx ? (a.OutIdx = -1, b.OutIdx = -1) : a.OutIdx < b.OutIdx ? this.AppendPolygon(a, b) : this.AppendPolygon(b, a);};c.Clipper.prototype.AddLocalMinPoly = function (a, b, d) {if (c.ClipperBase.IsHorizontal(b) || a.Dx > b.Dx) {var e = this.AddOutPt(a, d);b.OutIdx = a.OutIdx;a.Side = c.EdgeSide.esLeft;b.Side = c.EdgeSide.esRight;var f = a;a = f.PrevInAEL === b ? b.PrevInAEL : f.PrevInAEL;} else e = this.AddOutPt(b, d), a.OutIdx = b.OutIdx, a.Side = c.EdgeSide.esRight, b.Side = c.EdgeSide.esLeft, f = b, a = f.PrevInAEL === a ? a.PrevInAEL :\n    f.PrevInAEL;if (null !== a && 0 <= a.OutIdx && a.Top.Y < d.Y && f.Top.Y < d.Y) {b = c.Clipper.TopX(a, d.Y);var g = c.Clipper.TopX(f, d.Y);b === g && 0 !== f.WindDelta && 0 !== a.WindDelta && c.ClipperBase.SlopesEqual5(new c.FPoint2(b, d.Y), a.Top, new c.FPoint2(g, d.Y), f.Top) && (d = this.AddOutPt(a, d), this.AddJoin(e, d, f.Top));}return e;};c.Clipper.prototype.AddOutPt = function (a, b) {if (0 > a.OutIdx) {var d = this.CreateOutRec();d.IsOpen = 0 === a.WindDelta;var e = new c.OutPt();d.Pts = e;e.Idx = d.Idx;e.Pt.X = b.X;e.Pt.Y = b.Y;c.use_xyz && (e.Pt.Z = b.Z);e.Next = e;e.Prev =\n      e;d.IsOpen || this.SetHoleState(a, d);a.OutIdx = d.Idx;} else {d = this.m_PolyOuts[a.OutIdx];var f = d.Pts,g = a.Side === c.EdgeSide.esLeft;if (g && c.FPoint.op_Equality(b, f.Pt)) return f;if (!g && c.FPoint.op_Equality(b, f.Prev.Pt)) return f.Prev;e = new c.OutPt();e.Idx = d.Idx;e.Pt.X = b.X;e.Pt.Y = b.Y;c.use_xyz && (e.Pt.Z = b.Z);e.Next = f;e.Prev = f.Prev;e.Prev.Next = e;f.Prev = e;g && (d.Pts = e);}return e;};c.Clipper.prototype.GetLastOutPt = function (a) {var b = this.m_PolyOuts[a.OutIdx];return a.Side === c.EdgeSide.esLeft ? b.Pts : b.Pts.Prev;};c.Clipper.prototype.SwapPoints =\n  function (a, b) {var d = new c.FPoint1(a.Value);a.Value.X = b.Value.X;a.Value.Y = b.Value.Y;c.use_xyz && (a.Value.Z = b.Value.Z);b.Value.X = d.X;b.Value.Y = d.Y;c.use_xyz && (b.Value.Z = d.Z);};c.Clipper.prototype.HorzSegmentsOverlap = function (a, b, d, c) {if (a > b) {var e = a;a = b;b = e;}d > c && (e = d, d = c, c = e);return a < c && d < b;};c.Clipper.prototype.SetHoleState = function (a, b) {for (var d = a.PrevInAEL, c = null; null !== d;) {0 <= d.OutIdx && 0 !== d.WindDelta && (null === c ? c = d : c.OutIdx === d.OutIdx && (c = null)), d = d.PrevInAEL;}null === c ? (b.FirstLeft = null, b.IsHole =\n    !1) : (b.FirstLeft = this.m_PolyOuts[c.OutIdx], b.IsHole = !b.FirstLeft.IsHole);};c.Clipper.prototype.GetDx = function (a, b) {return a.Y === b.Y ? c.ClipperBase.horizontal : (b.X - a.X) / (b.Y - a.Y);};c.Clipper.prototype.FirstIsBottomPt = function (a, b) {for (var d = a.Prev; c.FPoint.op_Equality(d.Pt, a.Pt) && d !== a;) {d = d.Prev;}var e = Math.abs(this.GetDx(a.Pt, d.Pt));for (d = a.Next; c.FPoint.op_Equality(d.Pt, a.Pt) && d !== a;) {d = d.Next;}var f = Math.abs(this.GetDx(a.Pt, d.Pt));for (d = b.Prev; c.FPoint.op_Equality(d.Pt, b.Pt) && d !== b;) {d = d.Prev;}var g = Math.abs(this.GetDx(b.Pt,\n    d.Pt));for (d = b.Next; c.FPoint.op_Equality(d.Pt, b.Pt) && d !== b;) {d = d.Next;}d = Math.abs(this.GetDx(b.Pt, d.Pt));return Math.max(e, f) === Math.max(g, d) && Math.min(e, f) === Math.min(g, d) ? 0 < this.Area(a) : e >= g && e >= d || f >= g && f >= d;};c.Clipper.prototype.GetBottomPt = function (a) {for (var b = null, d = a.Next; d !== a;) {d.Pt.Y > a.Pt.Y ? (a = d, b = null) : d.Pt.Y === a.Pt.Y && d.Pt.X <= a.Pt.X && (d.Pt.X < a.Pt.X ? (b = null, a = d) : d.Next !== a && d.Prev !== a && (b = d)), d = d.Next;}if (null !== b) for (; b !== d;) {for (this.FirstIsBottomPt(d, b) || (a = b), b = b.Next; c.FPoint.op_Inequality(b.Pt,\n      a.Pt);) {b = b.Next;}}return a;};c.Clipper.prototype.GetLowermostRec = function (a, b) {null === a.BottomPt && (a.BottomPt = this.GetBottomPt(a.Pts));null === b.BottomPt && (b.BottomPt = this.GetBottomPt(b.Pts));var d = a.BottomPt,c = b.BottomPt;return d.Pt.Y > c.Pt.Y ? a : d.Pt.Y < c.Pt.Y ? b : d.Pt.X < c.Pt.X ? a : d.Pt.X > c.Pt.X ? b : d.Next === d ? b : c.Next === c ? a : this.FirstIsBottomPt(d, c) ? a : b;};c.Clipper.prototype.OutRec1RightOfOutRec2 = function (a, b) {do {if (a = a.FirstLeft, a === b) return !0;} while (null !== a);return !1;};c.Clipper.prototype.GetOutRec = function (a) {for (a =\n    this.m_PolyOuts[a]; a !== this.m_PolyOuts[a.Idx];) {a = this.m_PolyOuts[a.Idx];}return a;};c.Clipper.prototype.AppendPolygon = function (a, b) {var d = this.m_PolyOuts[a.OutIdx],e = this.m_PolyOuts[b.OutIdx];var f = this.OutRec1RightOfOutRec2(d, e) ? e : this.OutRec1RightOfOutRec2(e, d) ? d : this.GetLowermostRec(d, e);var g = d.Pts,h = g.Prev,l = e.Pts,k = l.Prev;a.Side === c.EdgeSide.esLeft ? b.Side === c.EdgeSide.esLeft ? (this.ReversePolyPtLinks(l), l.Next = g, g.Prev = l, h.Next = k, k.Prev = h, d.Pts = k) : (k.Next = g, g.Prev = k, l.Prev = h, h.Next = l, d.Pts = l) :\n    b.Side === c.EdgeSide.esRight ? (this.ReversePolyPtLinks(l), h.Next = k, k.Prev = h, l.Next = g, g.Prev = l) : (h.Next = l, l.Prev = h, g.Prev = k, k.Next = g);d.BottomPt = null;f === e && (e.FirstLeft !== d && (d.FirstLeft = e.FirstLeft), d.IsHole = e.IsHole);e.Pts = null;e.BottomPt = null;e.FirstLeft = d;f = a.OutIdx;g = b.OutIdx;a.OutIdx = -1;b.OutIdx = -1;for (h = this.m_ActiveEdges; null !== h;) {if (h.OutIdx === g) {h.OutIdx = f;h.Side = a.Side;break;}h = h.NextInAEL;}e.Idx = d.Idx;};c.Clipper.prototype.ReversePolyPtLinks = function (a) {if (null !== a) {var b = a;do {var d = b.Next;\n        b.Next = b.Prev;b = b.Prev = d;} while (b !== a);}};c.Clipper.SwapSides = function (a, b) {var d = a.Side;a.Side = b.Side;b.Side = d;};c.Clipper.SwapPolyIndexes = function (a, b) {var d = a.OutIdx;a.OutIdx = b.OutIdx;b.OutIdx = d;};c.Clipper.prototype.IntersectEdges = function (a, b, d) {var e = 0 <= a.OutIdx,f = 0 <= b.OutIdx;c.use_xyz && this.SetZ(d, a, b);if (!c.use_lines || 0 !== a.WindDelta && 0 !== b.WindDelta) {if (a.PolyTyp === b.PolyTyp) {if (this.IsEvenOddFillType(a)) {var g = a.WindCnt;a.WindCnt = b.WindCnt;b.WindCnt = g;} else a.WindCnt = 0 === a.WindCnt + b.WindDelta ?\n        -a.WindCnt : a.WindCnt + b.WindDelta, b.WindCnt = 0 === b.WindCnt - a.WindDelta ? -b.WindCnt : b.WindCnt - a.WindDelta;} else this.IsEvenOddFillType(b) ? a.WindCnt2 = 0 === a.WindCnt2 ? 1 : 0 : a.WindCnt2 += b.WindDelta, this.IsEvenOddFillType(a) ? b.WindCnt2 = 0 === b.WindCnt2 ? 1 : 0 : b.WindCnt2 -= a.WindDelta;if (a.PolyTyp === c.PolyType.ptSubject) {var h = this.m_SubjFillType;var l = this.m_ClipFillType;} else h = this.m_ClipFillType, l = this.m_SubjFillType;if (b.PolyTyp === c.PolyType.ptSubject) {var k = this.m_SubjFillType;g = this.m_ClipFillType;} else k = this.m_ClipFillType,\n      g = this.m_SubjFillType;switch (h) {case c.PolyFillType.pftPositive:h = a.WindCnt;break;case c.PolyFillType.pftNegative:h = -a.WindCnt;break;default:h = Math.abs(a.WindCnt);}switch (k) {case c.PolyFillType.pftPositive:k = b.WindCnt;break;case c.PolyFillType.pftNegative:k = -b.WindCnt;break;default:k = Math.abs(b.WindCnt);}if (e && f) 0 !== h && 1 !== h || 0 !== k && 1 !== k || a.PolyTyp !== b.PolyTyp && this.m_ClipType !== c.ClipType.ctXor ? this.AddLocalMaxPoly(a, b, d) : (this.AddOutPt(a, d), this.AddOutPt(b, d), c.Clipper.SwapSides(a, b), c.Clipper.SwapPolyIndexes(a,\n      b));else if (e) {if (0 === k || 1 === k) this.AddOutPt(a, d), c.Clipper.SwapSides(a, b), c.Clipper.SwapPolyIndexes(a, b);} else if (f) {if (0 === h || 1 === h) this.AddOutPt(b, d), c.Clipper.SwapSides(a, b), c.Clipper.SwapPolyIndexes(a, b);} else if (!(0 !== h && 1 !== h || 0 !== k && 1 !== k)) {switch (l) {case c.PolyFillType.pftPositive:e = a.WindCnt2;break;case c.PolyFillType.pftNegative:e = -a.WindCnt2;break;default:e = Math.abs(a.WindCnt2);}switch (g) {case c.PolyFillType.pftPositive:f = b.WindCnt2;break;case c.PolyFillType.pftNegative:f = -b.WindCnt2;break;\n          default:f = Math.abs(b.WindCnt2);}if (a.PolyTyp !== b.PolyTyp) this.AddLocalMinPoly(a, b, d);else if (1 === h && 1 === k) switch (this.m_ClipType) {case c.ClipType.ctIntersection:0 < e && 0 < f && this.AddLocalMinPoly(a, b, d);break;case c.ClipType.ctUnion:0 >= e && 0 >= f && this.AddLocalMinPoly(a, b, d);break;case c.ClipType.ctDifference:(a.PolyTyp === c.PolyType.ptClip && 0 < e && 0 < f || a.PolyTyp === c.PolyType.ptSubject && 0 >= e && 0 >= f) && this.AddLocalMinPoly(a, b, d);break;case c.ClipType.ctXor:this.AddLocalMinPoly(a, b, d);} else c.Clipper.SwapSides(a,\n        b);}} else if (0 !== a.WindDelta || 0 !== b.WindDelta) a.PolyTyp === b.PolyTyp && a.WindDelta !== b.WindDelta && this.m_ClipType === c.ClipType.ctUnion ? 0 === a.WindDelta ? f && (this.AddOutPt(a, d), e && (a.OutIdx = -1)) : e && (this.AddOutPt(b, d), f && (b.OutIdx = -1)) : a.PolyTyp !== b.PolyTyp && (0 !== a.WindDelta || 1 !== Math.abs(b.WindCnt) || this.m_ClipType === c.ClipType.ctUnion && 0 !== b.WindCnt2 ? 0 !== b.WindDelta || 1 !== Math.abs(a.WindCnt) || this.m_ClipType === c.ClipType.ctUnion && 0 !== a.WindCnt2 || (this.AddOutPt(b, d), f && (b.OutIdx = -1)) : (this.AddOutPt(a, d),\n    e && (a.OutIdx = -1)));};c.Clipper.prototype.DeleteFromSEL = function (a) {var b = a.PrevInSEL,d = a.NextInSEL;if (null !== b || null !== d || a === this.m_SortedEdges) null !== b ? b.NextInSEL = d : this.m_SortedEdges = d, null !== d && (d.PrevInSEL = b), a.NextInSEL = null, a.PrevInSEL = null;};c.Clipper.prototype.ProcessHorizontals = function () {for (var a = {}; this.PopEdgeFromSEL(a);) {this.ProcessHorizontal(a.v);}};c.Clipper.prototype.GetHorzDirection = function (a, b) {a.Bot.X < a.Top.X ? (b.Left = a.Bot.X, b.Right = a.Top.X, b.Dir = c.Direction.dLeftToRight) : (b.Left =\n    a.Top.X, b.Right = a.Bot.X, b.Dir = c.Direction.dRightToLeft);};c.Clipper.prototype.ProcessHorizontal = function (a) {var b,d = { Dir: null, Left: null, Right: null };this.GetHorzDirection(a, d);var e = d.Dir,f = d.Left;d = d.Right;for (var g = 0 === a.WindDelta, h = a, l = null; null !== h.NextInLML && c.ClipperBase.IsHorizontal(h.NextInLML);) {h = h.NextInLML;}null === h.NextInLML && (l = this.GetMaximaPair(h));var k = this.m_Maxima;if (null !== k) if (e === c.Direction.dLeftToRight) {for (; null !== k && k.X <= a.Bot.X;) {k = k.Next;}null !== k && k.X >= h.Top.X && (k = null);} else {for (; null !==\n      k.Next && k.Next.X < a.Bot.X;) {k = k.Next;}k.X <= h.Top.X && (k = null);}for (var m = null;;) {for (var p = a === h, n = this.GetNextInAEL(a, e); null !== n;) {if (null !== k) if (e === c.Direction.dLeftToRight) for (; null !== k && k.X < n.Curr.X;) {0 <= a.OutIdx && !g && this.AddOutPt(a, new c.FPoint2(k.X, a.Bot.Y)), k = k.Next;} else for (; null !== k && k.X > n.Curr.X;) {0 <= a.OutIdx && !g && this.AddOutPt(a, new c.FPoint2(k.X, a.Bot.Y)), k = k.Prev;}if (e === c.Direction.dLeftToRight && n.Curr.X > d || e === c.Direction.dRightToLeft && n.Curr.X < f) break;if (n.Curr.X === a.Top.X && null !== a.NextInLML &&\n        n.Dx < a.NextInLML.Dx) break;if (0 <= a.OutIdx && !g) {c.use_xyz && (e === c.Direction.dLeftToRight ? this.SetZ(n.Curr, a, n) : this.SetZ(n.Curr, n, a));m = this.AddOutPt(a, n.Curr);for (b = this.m_SortedEdges; null !== b;) {if (0 <= b.OutIdx && this.HorzSegmentsOverlap(a.Bot.X, a.Top.X, b.Bot.X, b.Top.X)) {var q = this.GetLastOutPt(b);this.AddJoin(q, m, b.Top);}b = b.NextInSEL;}this.AddGhostJoin(m, a.Bot);}if (n === l && p) {0 <= a.OutIdx && this.AddLocalMaxPoly(a, l, a.Top);this.DeleteFromAEL(a);this.DeleteFromAEL(l);return;}e === c.Direction.dLeftToRight ? (q =\n        new c.FPoint2(n.Curr.X, a.Curr.Y), this.IntersectEdges(a, n, q)) : (q = new c.FPoint2(n.Curr.X, a.Curr.Y), this.IntersectEdges(n, a, q));q = this.GetNextInAEL(n, e);this.SwapPositionsInAEL(a, n);n = q;}if (null === a.NextInLML || !c.ClipperBase.IsHorizontal(a.NextInLML)) break;a = this.UpdateEdgeIntoAEL(a);0 <= a.OutIdx && this.AddOutPt(a, a.Bot);d = { Dir: e, Left: f, Right: d };this.GetHorzDirection(a, d);e = d.Dir;f = d.Left;d = d.Right;}if (0 <= a.OutIdx && null === m) {m = this.GetLastOutPt(a);for (b = this.m_SortedEdges; null !== b;) {0 <= b.OutIdx && this.HorzSegmentsOverlap(a.Bot.X,\n        a.Top.X, b.Bot.X, b.Top.X) && (q = this.GetLastOutPt(b), this.AddJoin(q, m, b.Top)), b = b.NextInSEL;}this.AddGhostJoin(m, a.Top);}null !== a.NextInLML ? 0 <= a.OutIdx ? (m = this.AddOutPt(a, a.Top), a = this.UpdateEdgeIntoAEL(a), 0 !== a.WindDelta && (e = a.PrevInAEL, q = a.NextInAEL, null !== e && e.Curr.X === a.Bot.X && e.Curr.Y === a.Bot.Y && 0 === e.WindDelta && 0 <= e.OutIdx && e.Curr.Y > e.Top.Y && c.ClipperBase.SlopesEqual3(a, e) ? (q = this.AddOutPt(e, a.Bot), this.AddJoin(m, q, a.Top)) : null !== q && q.Curr.X === a.Bot.X && q.Curr.Y === a.Bot.Y && 0 !== q.WindDelta && 0 <= q.OutIdx &&\n    q.Curr.Y > q.Top.Y && c.ClipperBase.SlopesEqual3(a, q) && (q = this.AddOutPt(q, a.Bot), this.AddJoin(m, q, a.Top)))) : this.UpdateEdgeIntoAEL(a) : (0 <= a.OutIdx && this.AddOutPt(a, a.Top), this.DeleteFromAEL(a));};c.Clipper.prototype.GetNextInAEL = function (a, b) {return b === c.Direction.dLeftToRight ? a.NextInAEL : a.PrevInAEL;};c.Clipper.prototype.IsMinima = function (a) {return null !== a && a.Prev.NextInLML !== a && a.Next.NextInLML !== a;};c.Clipper.prototype.IsMaxima = function (a, b) {return null !== a && a.Top.Y === b && null === a.NextInLML;};c.Clipper.prototype.IsIntermediate =\n  function (a, b) {return a.Top.Y === b && null !== a.NextInLML;};c.Clipper.prototype.GetMaximaPair = function (a) {return c.FPoint.op_Equality(a.Next.Top, a.Top) && null === a.Next.NextInLML ? a.Next : c.FPoint.op_Equality(a.Prev.Top, a.Top) && null === a.Prev.NextInLML ? a.Prev : null;};c.Clipper.prototype.GetMaximaPairEx = function (a) {a = this.GetMaximaPair(a);return null === a || a.OutIdx === c.ClipperBase.Skip || a.NextInAEL === a.PrevInAEL && !c.ClipperBase.IsHorizontal(a) ? null : a;};c.Clipper.prototype.ProcessIntersections = function (a) {if (null ===\n    this.m_ActiveEdges) return !0;try {this.BuildIntersectList(a);if (0 === this.m_IntersectList.length) return !0;if (1 === this.m_IntersectList.length || this.FixupIntersectionOrder()) this.ProcessIntersectList();else return !1;} catch (b) {this.m_SortedEdges = null, this.m_IntersectList.length = 0, c.Error(\"ProcessIntersections error\");}this.m_SortedEdges = null;return !0;};c.Clipper.prototype.BuildIntersectList = function (a) {if (null !== this.m_ActiveEdges) {var b = this.m_ActiveEdges;for (this.m_SortedEdges = b; null !== b;) {b.PrevInSEL = b.PrevInAEL,\n        b.NextInSEL = b.NextInAEL, b.Curr.X = c.Clipper.TopX(b, a), b = b.NextInAEL;}for (var d = !0; d && null !== this.m_SortedEdges;) {d = !1;for (b = this.m_SortedEdges; null !== b.NextInSEL;) {var e = b.NextInSEL,f = new c.FPoint0();b.Curr.X > e.Curr.X ? (this.IntersectPoint(b, e, f), f.Y < a && (f = new c.FPoint2(c.Clipper.TopX(b, a), a)), d = new c.IntersectNode(), d.Edge1 = b, d.Edge2 = e, d.Pt.X = f.X, d.Pt.Y = f.Y, c.use_xyz && (d.Pt.Z = f.Z), this.m_IntersectList.push(d), this.SwapPositionsInSEL(b, e), d = !0) : b = e;}if (null !== b.PrevInSEL) b.PrevInSEL.NextInSEL = null;else break;}this.m_SortedEdges =\n      null;}};c.Clipper.prototype.EdgesAdjacent = function (a) {return a.Edge1.NextInSEL === a.Edge2 || a.Edge1.PrevInSEL === a.Edge2;};c.Clipper.IntersectNodeSort = function (a, b) {return b.Pt.Y - a.Pt.Y;};c.Clipper.prototype.FixupIntersectionOrder = function () {this.m_IntersectList.sort(this.m_IntersectNodeComparer);this.CopyAELToSEL();for (var a = this.m_IntersectList.length, b = 0; b < a; b++) {if (!this.EdgesAdjacent(this.m_IntersectList[b])) {for (var d = b + 1; d < a && !this.EdgesAdjacent(this.m_IntersectList[d]);) {d++;}if (d === a) return !1;var c =\n        this.m_IntersectList[b];this.m_IntersectList[b] = this.m_IntersectList[d];this.m_IntersectList[d] = c;}this.SwapPositionsInSEL(this.m_IntersectList[b].Edge1, this.m_IntersectList[b].Edge2);}return !0;};c.Clipper.prototype.ProcessIntersectList = function () {for (var a = 0, b = this.m_IntersectList.length; a < b; a++) {var d = this.m_IntersectList[a];this.IntersectEdges(d.Edge1, d.Edge2, d.Pt);this.SwapPositionsInAEL(d.Edge1, d.Edge2);}this.m_IntersectList.length = 0;};c.Clipper.TopX = function (a, b) {return b === a.Top.Y ? a.Top.X : a.Bot.X +\n    a.Dx * (b - a.Bot.Y);};c.Clipper.prototype.IntersectPoint = function (a, b, d) {d.X = 0;d.Y = 0;if (a.Dx === b.Dx) d.Y = a.Curr.Y, d.X = c.Clipper.TopX(a, d.Y);else {if (0 === a.Delta.X) {if (d.X = a.Bot.X, c.ClipperBase.IsHorizontal(b)) d.Y = b.Bot.Y;else {var e = b.Bot.Y - b.Bot.X / b.Dx;d.Y = d.X / b.Dx + e;}} else if (0 === b.Delta.X) {if (d.X = b.Bot.X, c.ClipperBase.IsHorizontal(a)) d.Y = a.Bot.Y;else {var f = a.Bot.Y - a.Bot.X / a.Dx;d.Y = d.X / a.Dx + f;}} else {f = a.Bot.X - a.Bot.Y * a.Dx;e = b.Bot.X - b.Bot.Y * b.Dx;var g = (e - f) / (a.Dx - b.Dx);d.Y = g;d.X = Math.abs(a.Dx) < Math.abs(b.Dx) ?\n        a.Dx * g + f : b.Dx * g + e;}if (d.Y < a.Top.Y || d.Y < b.Top.Y) {if (a.Top.Y > b.Top.Y) return d.Y = a.Top.Y, d.X = c.Clipper.TopX(b, a.Top.Y), d.X < a.Top.X;d.Y = b.Top.Y;d.X = Math.abs(a.Dx) < Math.abs(b.Dx) ? c.Clipper.TopX(a, d.Y) : c.Clipper.TopX(b, d.Y);}d.Y > a.Curr.Y && (d.Y = a.Curr.Y, d.X = Math.abs(a.Dx) > Math.abs(b.Dx) ? c.Clipper.TopX(b, d.Y) : c.Clipper.TopX(a, d.Y));}};c.Clipper.prototype.ProcessEdgesAtTopOfScanbeam = function (a) {for (var b, d, e = this.m_ActiveEdges; null !== e;) {if (d = this.IsMaxima(e, a)) d = this.GetMaximaPairEx(e), d = null === d || !c.ClipperBase.IsHorizontal(d);\n      if (d) this.StrictlySimple && this.InsertMaxima(e.Top.X), b = e.PrevInAEL, this.DoMaxima(e), e = null === b ? this.m_ActiveEdges : b.NextInAEL;else {this.IsIntermediate(e, a) && c.ClipperBase.IsHorizontal(e.NextInLML) ? (e = this.UpdateEdgeIntoAEL(e), 0 <= e.OutIdx && this.AddOutPt(e, e.Bot), this.AddEdgeToSEL(e)) : (e.Curr.X = c.Clipper.TopX(e, a), e.Curr.Y = a);c.use_xyz && (e.Curr.Z = e.Top.Y === a ? e.Top.Z : e.Bot.Y === a ? e.Bot.Z : 0);if (this.StrictlySimple && (b = e.PrevInAEL, 0 <= e.OutIdx && 0 !== e.WindDelta && null !== b && 0 <= b.OutIdx && b.Curr.X === e.Curr.X &&\n        0 !== b.WindDelta)) {var f = new c.FPoint1(e.Curr);c.use_xyz && this.SetZ(f, b, e);d = this.AddOutPt(b, f);b = this.AddOutPt(e, f);this.AddJoin(d, b, f);}e = e.NextInAEL;}}this.ProcessHorizontals();this.m_Maxima = null;for (e = this.m_ActiveEdges; null !== e;) {this.IsIntermediate(e, a) && (d = null, 0 <= e.OutIdx && (d = this.AddOutPt(e, e.Top)), e = this.UpdateEdgeIntoAEL(e), b = e.PrevInAEL, f = e.NextInAEL, null !== b && b.Curr.X === e.Bot.X && b.Curr.Y === e.Bot.Y && null !== d && 0 <= b.OutIdx && b.Curr.Y === b.Top.Y && c.ClipperBase.SlopesEqual5(e.Curr, e.Top, b.Curr,\n      b.Top) && 0 !== e.WindDelta && 0 !== b.WindDelta ? (b = this.AddOutPt(ePrev2, e.Bot), this.AddJoin(d, b, e.Top)) : null !== f && f.Curr.X === e.Bot.X && f.Curr.Y === e.Bot.Y && null !== d && 0 <= f.OutIdx && f.Curr.Y === f.Top.Y && c.ClipperBase.SlopesEqual5(e.Curr, e.Top, f.Curr, f.Top) && 0 !== e.WindDelta && 0 !== f.WindDelta && (b = this.AddOutPt(f, e.Bot), this.AddJoin(d, b, e.Top))), e = e.NextInAEL;}};c.Clipper.prototype.DoMaxima = function (a) {var b = this.GetMaximaPairEx(a);if (null === b) 0 <= a.OutIdx && this.AddOutPt(a, a.Top), this.DeleteFromAEL(a);else {for (var d =\n      a.NextInAEL; null !== d && d !== b;) {this.IntersectEdges(a, d, a.Top), this.SwapPositionsInAEL(a, d), d = a.NextInAEL;}-1 === a.OutIdx && -1 === b.OutIdx ? (this.DeleteFromAEL(a), this.DeleteFromAEL(b)) : 0 <= a.OutIdx && 0 <= b.OutIdx ? (0 <= a.OutIdx && this.AddLocalMaxPoly(a, b, a.Top), this.DeleteFromAEL(a), this.DeleteFromAEL(b)) : c.use_lines && 0 === a.WindDelta ? (0 <= a.OutIdx && (this.AddOutPt(a, a.Top), a.OutIdx = c.ClipperBase.Unassigned), this.DeleteFromAEL(a), 0 <= b.OutIdx && (this.AddOutPt(b, a.Top), b.OutIdx = c.ClipperBase.Unassigned), this.DeleteFromAEL(b)) :\n      c.Error(\"DoMaxima error\");}};c.Clipper.ReversePaths = function (a) {for (var b = 0, d = a.length; b < d; b++) {a[b].reverse();}};c.Clipper.Orientation = function (a) {return 0 <= c.Clipper.Area(a);};c.Clipper.prototype.PointCount = function (a) {if (null === a) return 0;var b = 0,d = a;do {b++, d = d.Next;} while (d !== a);return b;};c.Clipper.prototype.BuildResult = function (a) {c.Clear(a);for (var b = 0, d = this.m_PolyOuts.length; b < d; b++) {var e = this.m_PolyOuts[b];if (null !== e.Pts) {e = e.Pts.Prev;var f = this.PointCount(e);if (!(2 > f)) {for (var g = Array(f), h =\n          0; h < f; h++) {g[h] = e.Pt, e = e.Prev;}a.push(g);}}}};c.Clipper.prototype.BuildResult2 = function (a) {a.Clear();for (var b = 0, d = this.m_PolyOuts.length; b < d; b++) {var e = this.m_PolyOuts[b];var f = this.PointCount(e.Pts);if (!(e.IsOpen && 2 > f || !e.IsOpen && 3 > f)) {this.FixHoleLinkage(e);var g = new c.PolyNode();a.m_AllPolys.push(g);e.PolyNode = g;g.m_polygon.length = f;e = e.Pts.Prev;for (var h = 0; h < f; h++) {g.m_polygon[h] = e.Pt, e = e.Prev;}}}b = 0;for (d = this.m_PolyOuts.length; b < d; b++) {e = this.m_PolyOuts[b], null !== e.PolyNode && (e.IsOpen ? (e.PolyNode.IsOpen =\n      !0, a.AddChild(e.PolyNode)) : null !== e.FirstLeft && null !== e.FirstLeft.PolyNode ? e.FirstLeft.PolyNode.AddChild(e.PolyNode) : a.AddChild(e.PolyNode));}};c.Clipper.prototype.FixupOutPolyline = function (a) {for (var b = a.Pts, d = b.Prev; b !== d;) {if (b = b.Next, c.FPoint.op_Equality(b.Pt, b.Prev.Pt)) {b === d && (d = b.Prev);var e = b.Prev;e.Next = b.Next;b = b.Next.Prev = e;}}b === b.Prev && (a.Pts = null);};c.Clipper.prototype.FixupOutPolygon = function (a) {var b = null;a.BottomPt = null;for (var d = a.Pts, e = this.PreserveCollinear || this.StrictlySimple;;) {if (d.Prev ===\n      d || d.Prev === d.Next) {a.Pts = null;return;}if (c.FPoint.op_Equality(d.Pt, d.Next.Pt) || c.FPoint.op_Equality(d.Pt, d.Prev.Pt) || c.ClipperBase.SlopesEqual4(d.Prev.Pt, d.Pt, d.Next.Pt) && (!e || !this.Pt2IsBetweenPt1AndPt3(d.Prev.Pt, d.Pt, d.Next.Pt))) b = null, d.Prev.Next = d.Next, d = d.Next.Prev = d.Prev;else if (d === b) break;else null === b && (b = d), d = d.Next;}a.Pts = d;};c.Clipper.prototype.DupOutPt = function (a, b) {var d = new c.OutPt();d.Pt.X = a.Pt.X;d.Pt.Y = a.Pt.Y;c.use_xyz && (d.Pt.Z = a.Pt.Z);d.Idx = a.Idx;b ? (d.Next = a.Next, d.Prev = a, a.Next.Prev =\n    d, a.Next = d) : (d.Prev = a.Prev, d.Next = a, a.Prev.Next = d, a.Prev = d);return d;};c.Clipper.prototype.GetOverlap = function (a, b, d, c, f) {a < b ? d < c ? (f.Left = Math.max(a, d), f.Right = Math.min(b, c)) : (f.Left = Math.max(a, c), f.Right = Math.min(b, d)) : d < c ? (f.Left = Math.max(b, d), f.Right = Math.min(a, c)) : (f.Left = Math.max(b, c), f.Right = Math.min(a, d));return f.Left < f.Right;};c.Clipper.prototype.JoinHorz = function (a, b, d, e, f, g) {var h = a.Pt.X > b.Pt.X ? c.Direction.dRightToLeft : c.Direction.dLeftToRight;e = d.Pt.X > e.Pt.X ? c.Direction.dRightToLeft : c.Direction.dLeftToRight;\n    if (h === e) return !1;if (h === c.Direction.dLeftToRight) {for (; a.Next.Pt.X <= f.X && a.Next.Pt.X >= a.Pt.X && a.Next.Pt.Y === f.Y;) {a = a.Next;}g && a.Pt.X !== f.X && (a = a.Next);b = this.DupOutPt(a, !g);c.FPoint.op_Inequality(b.Pt, f) && (a = b, a.Pt.X = f.X, a.Pt.Y = f.Y, c.use_xyz && (a.Pt.Z = f.Z), b = this.DupOutPt(a, !g));} else {for (; a.Next.Pt.X >= f.X && a.Next.Pt.X <= a.Pt.X && a.Next.Pt.Y === f.Y;) {a = a.Next;}g || a.Pt.X === f.X || (a = a.Next);b = this.DupOutPt(a, g);c.FPoint.op_Inequality(b.Pt, f) && (a = b, a.Pt.X = f.X, a.Pt.Y = f.Y, c.use_xyz && (a.Pt.Z = f.Z), b = this.DupOutPt(a,\n      g));}if (e === c.Direction.dLeftToRight) {for (; d.Next.Pt.X <= f.X && d.Next.Pt.X >= d.Pt.X && d.Next.Pt.Y === f.Y;) {d = d.Next;}g && d.Pt.X !== f.X && (d = d.Next);e = this.DupOutPt(d, !g);c.FPoint.op_Inequality(e.Pt, f) && (d = e, d.Pt.X = f.X, d.Pt.Y = f.Y, c.use_xyz && (d.Pt.Z = f.Z), e = this.DupOutPt(d, !g));} else {for (; d.Next.Pt.X >= f.X && d.Next.Pt.X <= d.Pt.X && d.Next.Pt.Y === f.Y;) {d = d.Next;}g || d.Pt.X === f.X || (d = d.Next);e = this.DupOutPt(d, g);c.FPoint.op_Inequality(e.Pt, f) && (d = e, d.Pt.X = f.X, d.Pt.Y = f.Y, c.use_xyz && (d.Pt.Z = f.Z), e = this.DupOutPt(d, g));}h === c.Direction.dLeftToRight ===\n    g ? (a.Prev = d, d.Next = a, b.Next = e, e.Prev = b) : (a.Next = d, d.Prev = a, b.Prev = e, e.Next = b);return !0;};c.Clipper.prototype.JoinPoints = function (a, b, d) {var e = a.OutPt1,f;new c.OutPt();var g = a.OutPt2,h;new c.OutPt();if ((h = a.OutPt1.Pt.Y === a.OffPt.Y) && c.FPoint.op_Equality(a.OffPt, a.OutPt1.Pt) && c.FPoint.op_Equality(a.OffPt, a.OutPt2.Pt)) {if (b !== d) return !1;for (f = a.OutPt1.Next; f !== e && c.FPoint.op_Equality(f.Pt, a.OffPt);) {f = f.Next;}f = f.Pt.Y > a.OffPt.Y;for (h = a.OutPt2.Next; h !== g && c.FPoint.op_Equality(h.Pt, a.OffPt);) {h = h.Next;}if (f ===\n      h.Pt.Y > a.OffPt.Y) return !1;f ? (f = this.DupOutPt(e, !1), h = this.DupOutPt(g, !0), e.Prev = g, g.Next = e, f.Next = h, h.Prev = f) : (f = this.DupOutPt(e, !0), h = this.DupOutPt(g, !1), e.Next = g, g.Prev = e, f.Prev = h, h.Next = f);a.OutPt1 = e;a.OutPt2 = f;return !0;}if (h) {for (f = e; e.Prev.Pt.Y === e.Pt.Y && e.Prev !== f && e.Prev !== g;) {e = e.Prev;}for (; f.Next.Pt.Y === f.Pt.Y && f.Next !== e && f.Next !== g;) {f = f.Next;}if (f.Next === e || f.Next === g) return !1;for (h = g; g.Prev.Pt.Y === g.Pt.Y && g.Prev !== h && g.Prev !== f;) {g = g.Prev;}for (; h.Next.Pt.Y === h.Pt.Y && h.Next !== g && h.Next !== e;) {h =\n        h.Next;}if (h.Next === g || h.Next === e) return !1;d = { Left: null, Right: null };if (!this.GetOverlap(e.Pt.X, f.Pt.X, g.Pt.X, h.Pt.X, d)) return !1;b = d.Left;var l = d.Right;d = new c.FPoint0();e.Pt.X >= b && e.Pt.X <= l ? (d.X = e.Pt.X, d.Y = e.Pt.Y, c.use_xyz && (d.Z = e.Pt.Z), b = e.Pt.X > f.Pt.X) : g.Pt.X >= b && g.Pt.X <= l ? (d.X = g.Pt.X, d.Y = g.Pt.Y, c.use_xyz && (d.Z = g.Pt.Z), b = g.Pt.X > h.Pt.X) : f.Pt.X >= b && f.Pt.X <= l ? (d.X = f.Pt.X, d.Y = f.Pt.Y, c.use_xyz && (d.Z = f.Pt.Z), b = f.Pt.X > e.Pt.X) : (d.X = h.Pt.X, d.Y = h.Pt.Y, c.use_xyz && (d.Z = h.Pt.Z), b = h.Pt.X > g.Pt.X);a.OutPt1 = e;a.OutPt2 =\n      g;return this.JoinHorz(e, f, g, h, d, b);}for (f = e.Next; c.FPoint.op_Equality(f.Pt, e.Pt) && f !== e;) {f = f.Next;}if (l = f.Pt.Y > e.Pt.Y || !c.ClipperBase.SlopesEqual4(e.Pt, f.Pt, a.OffPt)) {for (f = e.Prev; c.FPoint.op_Equality(f.Pt, e.Pt) && f !== e;) {f = f.Prev;}if (f.Pt.Y > e.Pt.Y || !c.ClipperBase.SlopesEqual4(e.Pt, f.Pt, a.OffPt)) return !1;}for (h = g.Next; c.FPoint.op_Equality(h.Pt, g.Pt) && h !== g;) {h = h.Next;}var k = h.Pt.Y > g.Pt.Y || !c.ClipperBase.SlopesEqual4(g.Pt, h.Pt, a.OffPt);if (k) {for (h = g.Prev; c.FPoint.op_Equality(h.Pt, g.Pt) && h !== g;) {h = h.Prev;}if (h.Pt.Y >\n      g.Pt.Y || !c.ClipperBase.SlopesEqual4(g.Pt, h.Pt, a.OffPt)) return !1;}if (f === e || h === g || f === h || b === d && l === k) return !1;l ? (f = this.DupOutPt(e, !1), h = this.DupOutPt(g, !0), e.Prev = g, g.Next = e, f.Next = h, h.Prev = f) : (f = this.DupOutPt(e, !0), h = this.DupOutPt(g, !1), e.Next = g, g.Prev = e, f.Prev = h, h.Next = f);a.OutPt1 = e;a.OutPt2 = f;return !0;};c.Clipper.GetBounds = function (a) {for (var b = 0, d = a.length; b < d && 0 === a[b].length;) {b++;}if (b === d) return new c.FRect(0, 0, 0, 0);var e = new c.FRect();e.left = a[b][0].X;e.right = e.left;e.top = a[b][0].Y;for (e.bottom =\n    e.top; b < d; b++) {for (var f = 0, g = a[b].length; f < g; f++) {a[b][f].X < e.left ? e.left = a[b][f].X : a[b][f].X > e.right && (e.right = a[b][f].X), a[b][f].Y < e.top ? e.top = a[b][f].Y : a[b][f].Y > e.bottom && (e.bottom = a[b][f].Y);}}return e;};c.Clipper.prototype.GetBounds2 = function (a) {var b = a,d = new c.FRect();d.left = a.Pt.X;d.right = a.Pt.X;d.top = a.Pt.Y;d.bottom = a.Pt.Y;for (a = a.Next; a !== b;) {a.Pt.X < d.left && (d.left = a.Pt.X), a.Pt.X > d.right && (d.right = a.Pt.X), a.Pt.Y < d.top && (d.top = a.Pt.Y), a.Pt.Y > d.bottom && (d.bottom = a.Pt.Y), a = a.Next;}return d;};c.Clipper.PointInPolygon =\n  function (a, b) {var c = 0,e = b.length;if (3 > e) return 0;for (var f = b[0], g = 1; g <= e; ++g) {var h = g === e ? b[0] : b[g];if (h.Y === a.Y && (h.X === a.X || f.Y === a.Y && h.X > a.X === f.X < a.X)) return -1;if (f.Y < a.Y !== h.Y < a.Y) if (f.X >= a.X) {if (h.X > a.X) c = 1 - c;else {var l = (f.X - a.X) * (h.Y - a.Y) - (h.X - a.X) * (f.Y - a.Y);if (0 === l) return -1;0 < l === h.Y > f.Y && (c = 1 - c);}} else if (h.X > a.X) {l = (f.X - a.X) * (h.Y - a.Y) - (h.X - a.X) * (f.Y - a.Y);if (0 === l) return -1;0 < l === h.Y > f.Y && (c = 1 - c);}f = h;}return c;};c.Clipper.prototype.PointInPolygon = function (a, b) {var c = 0,e = b,f = a.X,g = a.Y;var h = b.Pt.X;\n    var l = b.Pt.Y;do {b = b.Next;var k = b.Pt.X,m = b.Pt.Y;if (m === g && (k === f || l === g && k > f === h < f)) return -1;if (l < g !== m < g) if (h >= f) {if (k > f) c = 1 - c;else {h = (h - f) * (m - g) - (k - f) * (l - g);if (0 === h) return -1;0 < h === m > l && (c = 1 - c);}} else if (k > f) {h = (h - f) * (m - g) - (k - f) * (l - g);if (0 === h) return -1;0 < h === m > l && (c = 1 - c);}h = k;l = m;} while (e !== b);return c;};c.Clipper.prototype.Poly2ContainsPoly1 = function (a, b) {var c = a;do {var e = this.PointInPolygon(c.Pt, b);if (0 <= e) return 0 < e;c = c.Next;} while (c !== a);return !0;};c.Clipper.prototype.FixupFirstLefts1 = function (a, b) {for (var d,\n    e, f = 0, g = this.m_PolyOuts.length; f < g; f++) {d = this.m_PolyOuts[f], e = c.Clipper.ParseFirstLeft(d.FirstLeft), null !== d.Pts && e === a && this.Poly2ContainsPoly1(d.Pts, b.Pts) && (d.FirstLeft = b);}};c.Clipper.prototype.FixupFirstLefts2 = function (a, b) {for (var d = b.FirstLeft, e, f, g = 0, h = this.m_PolyOuts.length; g < h; g++) {if (e = this.m_PolyOuts[g], null !== e.Pts && e !== b && e !== a && (f = c.Clipper.ParseFirstLeft(e.FirstLeft), f === d || f === a || f === b)) if (this.Poly2ContainsPoly1(e.Pts, a.Pts)) e.FirstLeft = a;else if (this.Poly2ContainsPoly1(e.Pts, b.Pts)) e.FirstLeft =\n      b;else if (e.FirstLeft === a || e.FirstLeft === b) e.FirstLeft = d;}};c.Clipper.prototype.FixupFirstLefts3 = function (a, b) {for (var d, e, f = 0, g = this.m_PolyOuts.length; f < g; f++) {d = this.m_PolyOuts[f], e = c.Clipper.ParseFirstLeft(d.FirstLeft), null !== d.Pts && e === a && (d.FirstLeft = b);}};c.Clipper.ParseFirstLeft = function (a) {for (; null !== a && null === a.Pts;) {a = a.FirstLeft;}return a;};c.Clipper.prototype.JoinCommonEdges = function () {for (var a = 0, b = this.m_Joins.length; a < b; a++) {var c = this.m_Joins[a],e = this.GetOutRec(c.OutPt1.Idx),f = this.GetOutRec(c.OutPt2.Idx);\n      if (null !== e.Pts && null !== f.Pts && !e.IsOpen && !f.IsOpen) {var g = e === f ? e : this.OutRec1RightOfOutRec2(e, f) ? f : this.OutRec1RightOfOutRec2(f, e) ? e : this.GetLowermostRec(e, f);this.JoinPoints(c, e, f) && (e === f ? (e.Pts = c.OutPt1, e.BottomPt = null, f = this.CreateOutRec(), f.Pts = c.OutPt2, this.UpdateOutPtIdxs(f), this.Poly2ContainsPoly1(f.Pts, e.Pts) ? (f.IsHole = !e.IsHole, f.FirstLeft = e, this.m_UsingPolyTree && this.FixupFirstLefts2(f, e), (f.IsHole ^ this.ReverseSolution) == 0 < this.Area$1(f) && this.ReversePolyPtLinks(f.Pts)) : this.Poly2ContainsPoly1(e.Pts,\n        f.Pts) ? (f.IsHole = e.IsHole, e.IsHole = !f.IsHole, f.FirstLeft = e.FirstLeft, e.FirstLeft = f, this.m_UsingPolyTree && this.FixupFirstLefts2(e, f), (e.IsHole ^ this.ReverseSolution) == 0 < this.Area$1(e) && this.ReversePolyPtLinks(e.Pts)) : (f.IsHole = e.IsHole, f.FirstLeft = e.FirstLeft, this.m_UsingPolyTree && this.FixupFirstLefts1(e, f))) : (f.Pts = null, f.BottomPt = null, f.Idx = e.Idx, e.IsHole = g.IsHole, g === f && (e.FirstLeft = f.FirstLeft), f.FirstLeft = e, this.m_UsingPolyTree && this.FixupFirstLefts3(f, e)));}}};c.Clipper.prototype.UpdateOutPtIdxs =\n  function (a) {var b = a.Pts;do {b.Idx = a.Idx, b = b.Prev;} while (b !== a.Pts);};c.Clipper.prototype.DoSimplePolygons = function () {for (var a = 0; a < this.m_PolyOuts.length;) {var b = this.m_PolyOuts[a++],d = b.Pts;if (null !== d && !b.IsOpen) {do {for (var e = d.Next; e !== b.Pts;) {if (c.FPoint.op_Equality(d.Pt, e.Pt) && e.Next !== d && e.Prev !== d) {var f = d.Prev,g = e.Prev;d.Prev = g;g.Next = d;e.Prev = f;f.Next = e;b.Pts = d;f = this.CreateOutRec();f.Pts = e;this.UpdateOutPtIdxs(f);this.Poly2ContainsPoly1(f.Pts, b.Pts) ? (f.IsHole = !b.IsHole, f.FirstLeft = b, this.m_UsingPolyTree &&\n              this.FixupFirstLefts2(f, b)) : this.Poly2ContainsPoly1(b.Pts, f.Pts) ? (f.IsHole = b.IsHole, b.IsHole = !f.IsHole, f.FirstLeft = b.FirstLeft, b.FirstLeft = f, this.m_UsingPolyTree && this.FixupFirstLefts2(b, f)) : (f.IsHole = b.IsHole, f.FirstLeft = b.FirstLeft, this.m_UsingPolyTree && this.FixupFirstLefts1(b, f));e = d;}e = e.Next;}d = d.Next;} while (d !== b.Pts);}}};c.Clipper.Area = function (a) {if (!Array.isArray(a)) return 0;var b = a.length;if (3 > b) return 0;for (var c = 0, e = 0, f = b - 1; e < b; ++e) {c += (a[f].X + a[e].X) * (a[f].Y - a[e].Y), f = e;}return .5 * -c;};c.Clipper.prototype.Area =\n  function (a) {var b = a;if (null === a) return 0;var c = 0;do {c += (a.Prev.Pt.X + a.Pt.X) * (a.Prev.Pt.Y - a.Pt.Y), a = a.Next;} while (a !== b);return .5 * c;};c.Clipper.prototype.Area$1 = function (a) {return this.Area(a.Pts);};c.Clipper.SimplifyPolygon = function (a, b) {var d = [],e = new c.Clipper(0);e.StrictlySimple = !0;e.AddPath(a, c.PolyType.ptSubject, !0);e.Execute(c.ClipType.ctUnion, d, b, b);return d;};c.Clipper.SimplifyPolygons = function (a, b) {\"undefined\" === typeof b && (b = c.PolyFillType.pftEvenOdd);var d = [],e = new c.Clipper(0);e.StrictlySimple =\n    !0;e.AddPaths(a, c.PolyType.ptSubject, !0);e.Execute(c.ClipType.ctUnion, d, b, b);return d;};c.Clipper.DistanceSqrd = function (a, b) {var c = a.X - b.X,e = a.Y - b.Y;return c * c + e * e;};c.Clipper.DistanceFromLineSqrd = function (a, b, c) {var d = b.Y - c.Y;c = c.X - b.X;b = d * b.X + c * b.Y;b = d * a.X + c * a.Y - b;return b * b / (d * d + c * c);};c.Clipper.SlopesNearCollinear = function (a, b, d, e) {return Math.abs(a.X - b.X) > Math.abs(a.Y - b.Y) ? a.X > b.X === a.X < d.X ? c.Clipper.DistanceFromLineSqrd(a, b, d) < e : b.X > a.X === b.X < d.X ? c.Clipper.DistanceFromLineSqrd(b, a, d) < e : c.Clipper.DistanceFromLineSqrd(d,\n    a, b) < e : a.Y > b.Y === a.Y < d.Y ? c.Clipper.DistanceFromLineSqrd(a, b, d) < e : b.Y > a.Y === b.Y < d.Y ? c.Clipper.DistanceFromLineSqrd(b, a, d) < e : c.Clipper.DistanceFromLineSqrd(d, a, b) < e;};c.Clipper.PointsAreClose = function (a, b, c) {var d = a.X - b.X;a = a.Y - b.Y;return d * d + a * a <= c;};c.Clipper.ExcludeOp = function (a) {var b = a.Prev;b.Next = a.Next;a.Next.Prev = b;b.Idx = 0;return b;};c.Clipper.CleanPolygon = function (a, b) {\"undefined\" === typeof b && (b = 1.415);var d = a.length;if (0 === d) return [];for (var e = Array(d), f = 0; f < d; ++f) {e[f] = new c.OutPt();}for (f = 0; f <\n    d; ++f) {e[f].Pt = a[f], e[f].Next = e[(f + 1) % d], e[f].Next.Prev = e[f], e[f].Idx = 0;}f = b * b;for (e = e[0]; 0 === e.Idx && e.Next !== e.Prev;) {c.Clipper.PointsAreClose(e.Pt, e.Prev.Pt, f) ? (e = c.Clipper.ExcludeOp(e), d--) : c.Clipper.PointsAreClose(e.Prev.Pt, e.Next.Pt, f) ? (c.Clipper.ExcludeOp(e.Next), e = c.Clipper.ExcludeOp(e), d -= 2) : c.Clipper.SlopesNearCollinear(e.Prev.Pt, e.Pt, e.Next.Pt, f) ? (e = c.Clipper.ExcludeOp(e), d--) : (e.Idx = 1, e = e.Next);}3 > d && (d = 0);var g = Array(d);for (f = 0; f < d; ++f) {g[f] = new c.FPoint1(e.Pt), e = e.Next;}return g;};c.Clipper.CleanPolygons =\n  function (a, b) {for (var d = Array(a.length), e = 0, f = a.length; e < f; e++) {d[e] = c.Clipper.CleanPolygon(a[e], b);}return d;};c.Clipper.Minkowski = function (a, b, d, e) {e = e ? 1 : 0;var f = a.length,g = b.length,h = [];if (d) for (d = 0; d < g; d++) {var l = Array(f);for (var k = 0, m = a.length, p = a[k]; k < m; k++, p = a[k]) {l[k] = new c.FPoint2(b[d].X + p.X, b[d].Y + p.Y);}h.push(l);} else for (d = 0; d < g; d++) {l = Array(f);k = 0;m = a.length;for (p = a[k]; k < m; k++, p = a[k]) {l[k] = new c.FPoint2(b[d].X - p.X, b[d].Y - p.Y);}h.push(l);}a = [];for (d = 0; d < g - 1 + e; d++) {for (k = 0; k < f; k++) {b = [], b.push(h[d %\n        g][k % f]), b.push(h[(d + 1) % g][k % f]), b.push(h[(d + 1) % g][(k + 1) % f]), b.push(h[d % g][(k + 1) % f]), c.Clipper.Orientation(b) || b.reverse(), a.push(b);}}return a;};c.Clipper.MinkowskiSum = function (a, b, d) {if (b[0] instanceof Array) {var e = b;var f = new c.Paths();b = new c.Clipper();for (var g = 0; g < e.length; ++g) {var h = c.Clipper.Minkowski(a, e[g], !0, d);b.AddPaths(h, c.PolyType.ptSubject, !0);d && (h = c.Clipper.TranslatePath(e[g], a[0]), b.AddPath(h, c.PolyType.ptClip, !0));}b.Execute(c.ClipType.ctUnion, f, c.PolyFillType.pftNonZero, c.PolyFillType.pftNonZero);\n      return f;}e = c.Clipper.Minkowski(a, b, !0, d);b = new c.Clipper();b.AddPaths(e, c.PolyType.ptSubject, !0);b.Execute(c.ClipType.ctUnion, e, c.PolyFillType.pftNonZero, c.PolyFillType.pftNonZero);return e;};c.Clipper.TranslatePath = function (a, b) {for (var d = new c.Path(), e = 0; e < a.length; e++) {d.push(new c.FPoint2(a[e].X + b.X, a[e].Y + b.Y));}return d;};c.Clipper.MinkowskiDiff = function (a, b) {var d = c.Clipper.Minkowski(a, b, !1, !0),e = new c.Clipper();e.AddPaths(d, c.PolyType.ptSubject, !0);e.Execute(c.ClipType.ctUnion, d, c.PolyFillType.pftNonZero,\n    c.PolyFillType.pftNonZero);return d;};c.Clipper.PolyTreeToPaths = function (a) {var b = [];c.Clipper.AddPolyNodeToPaths(a, c.Clipper.NodeType.ntAny, b);return b;};c.Clipper.AddPolyNodeToPaths = function (a, b, d) {var e = !0;switch (b) {case c.Clipper.NodeType.ntOpen:return;case c.Clipper.NodeType.ntClosed:e = !a.IsOpen;}0 < a.m_polygon.length && e && d.push(a.m_polygon);e = 0;a = a.Childs();for (var f = a.length, g = a[e]; e < f; e++, g = a[e]) {c.Clipper.AddPolyNodeToPaths(g, b, d);}};c.Clipper.OpenPathsFromPolyTree = function (a) {for (var b = new c.Paths(),\n    d = 0, e = a.ChildCount(); d < e; d++) {a.Childs()[d].IsOpen && b.push(a.Childs()[d].m_polygon);}return b;};c.Clipper.ClosedPathsFromPolyTree = function (a) {var b = new c.Paths();c.Clipper.AddPolyNodeToPaths(a, c.Clipper.NodeType.ntClosed, b);return b;};r(c.Clipper, c.ClipperBase);c.Clipper.NodeType = { ntAny: 0, ntOpen: 1, ntClosed: 2 };c.ClipperOffset = function (a, b) {\"undefined\" === typeof a && (a = 2);\"undefined\" === typeof b && (b = c.ClipperOffset.def_arc_tolerance);this.m_destPolys = new c.Paths();this.m_srcPoly = new c.Path();this.m_destPoly = new c.Path();\n    this.m_normals = [];this.m_StepsPerRad = this.m_miterLim = this.m_cos = this.m_sin = this.m_sinA = this.m_delta = 0;this.m_lowest = new c.FPoint0();this.m_polyNodes = new c.PolyNode();this.MiterLimit = a;this.ArcTolerance = b;this.m_lowest.X = -1;};c.ClipperOffset.two_pi = 6.28318530717959;c.ClipperOffset.def_arc_tolerance = .25;c.ClipperOffset.prototype.Clear = function () {c.Clear(this.m_polyNodes.Childs());this.m_lowest.X = -1;};c.ClipperOffset.prototype.AddPath = function (a, b, d) {var e = a.length - 1;if (!(0 > e)) {var f = new c.PolyNode();f.m_jointype =\n      b;f.m_endtype = d;if (d === c.EndType.etClosedLine || d === c.EndType.etClosedPolygon) for (; 0 < e && c.FPoint.op_Equality(a[0], a[e]);) {e--;}f.m_polygon.push(a[0]);var g = 0;b = 0;for (var h = 1; h <= e; h++) {c.FPoint.op_Inequality(f.m_polygon[g], a[h]) && (g++, f.m_polygon.push(a[h]), a[h].Y > f.m_polygon[b].Y || a[h].Y === f.m_polygon[b].Y && a[h].X < f.m_polygon[b].X) && (b = g);}if (!(d === c.EndType.etClosedPolygon && 2 > g) && (this.m_polyNodes.AddChild(f), d === c.EndType.etClosedPolygon)) if (0 > this.m_lowest.X) this.m_lowest = new c.FPoint2(this.m_polyNodes.ChildCount() -\n      1, b);else if (a = this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon[this.m_lowest.Y], f.m_polygon[b].Y > a.Y || f.m_polygon[b].Y === a.Y && f.m_polygon[b].X < a.X) this.m_lowest = new c.FPoint2(this.m_polyNodes.ChildCount() - 1, b);}};c.ClipperOffset.prototype.AddPaths = function (a, b, c) {for (var d = 0, f = a.length; d < f; d++) {this.AddPath(a[d], b, c);}};c.ClipperOffset.prototype.FixOrientations = function () {if (0 <= this.m_lowest.X && !c.Clipper.Orientation(this.m_polyNodes.Childs()[this.m_lowest.X].m_polygon)) for (var a = 0; a < this.m_polyNodes.ChildCount(); a++) {var b =\n      this.m_polyNodes.Childs()[a];(b.m_endtype === c.EndType.etClosedPolygon || b.m_endtype === c.EndType.etClosedLine && c.Clipper.Orientation(b.m_polygon)) && b.m_polygon.reverse();} else for (a = 0; a < this.m_polyNodes.ChildCount(); a++) {b = this.m_polyNodes.Childs()[a], b.m_endtype !== c.EndType.etClosedLine || c.Clipper.Orientation(b.m_polygon) || b.m_polygon.reverse();}};c.ClipperOffset.GetUnitNormal = function (a, b) {var d = b.X - a.X,e = b.Y - a.Y;if (0 === d && 0 === e) return new c.FPoint2(0, 0);var f = 1 / Math.sqrt(d * d + e * e);return new c.FPoint2(e *\n    f, -(d * f));};c.ClipperOffset.prototype.DoOffset = function (a) {var b;this.m_destPolys = [];this.m_delta = a;if (c.ClipperBase.near_zero(a)) for (var d = 0; d < this.m_polyNodes.ChildCount(); d++) {var e = this.m_polyNodes.Childs()[d];e.m_endtype === c.EndType.etClosedPolygon && this.m_destPolys.push(e.m_polygon);} else {this.m_miterLim = 2 < this.MiterLimit ? 2 / (this.MiterLimit * this.MiterLimit) : .5;var f = 3.14159265358979 / Math.acos(1 - (0 >= this.ArcTolerance ? c.ClipperOffset.def_arc_tolerance : this.ArcTolerance > Math.abs(a) * c.ClipperOffset.def_arc_tolerance ?\n      Math.abs(a) * c.ClipperOffset.def_arc_tolerance : this.ArcTolerance) / Math.abs(a));this.m_sin = Math.sin(c.ClipperOffset.two_pi / f);this.m_cos = Math.cos(c.ClipperOffset.two_pi / f);this.m_StepsPerRad = f / c.ClipperOffset.two_pi;0 > a && (this.m_sin = -this.m_sin);for (d = 0; d < this.m_polyNodes.ChildCount(); d++) {e = this.m_polyNodes.Childs()[d];this.m_srcPoly = e.m_polygon;var g = this.m_srcPoly.length;if (!(0 === g || 0 >= a && (3 > g || e.m_endtype !== c.EndType.etClosedPolygon))) {this.m_destPoly = [];if (1 === g) {if (e.m_jointype === c.JoinType.jtRound) for (g =\n            1, e = 0, b = 1; b <= f; b++) {this.m_destPoly.push(new c.FPoint2(this.m_srcPoly[0].X + g * a, this.m_srcPoly[0].Y + e * a));var h = g;g = g * this.m_cos - this.m_sin * e;e = h * this.m_sin + e * this.m_cos;} else for (e = g = -1, b = 0; 4 > b; ++b) {this.m_destPoly.push(new c.FPoint2(this.m_srcPoly[0].X + g * a, this.m_srcPoly[0].Y + e * a)), 0 > g ? g = 1 : 0 > e ? e = 1 : g = -1;}} else {for (b = this.m_normals.length = 0; b < g - 1; b++) {this.m_normals.push(c.ClipperOffset.GetUnitNormal(this.m_srcPoly[b], this.m_srcPoly[b + 1]));}e.m_endtype === c.EndType.etClosedLine || e.m_endtype === c.EndType.etClosedPolygon ?\n            this.m_normals.push(c.ClipperOffset.GetUnitNormal(this.m_srcPoly[g - 1], this.m_srcPoly[0])) : this.m_normals.push(new c.FPoint1(this.m_normals[g - 2]));if (e.m_endtype === c.EndType.etClosedPolygon) for (h = g - 1, b = 0; b < g; b++) {h = this.OffsetPoint(b, h, e.m_jointype);} else if (e.m_endtype === c.EndType.etClosedLine) {h = g - 1;for (b = 0; b < g; b++) {h = this.OffsetPoint(b, h, e.m_jointype);}this.m_destPolys.push(this.m_destPoly);this.m_destPoly = [];h = this.m_normals[g - 1];for (b = g - 1; 0 < b; b--) {this.m_normals[b] = new c.FPoint2(-this.m_normals[b -\n                1].X, -this.m_normals[b - 1].Y);}this.m_normals[0] = new c.FPoint2(-h.X, -h.Y);h = 0;for (b = g - 1; 0 <= b; b--) {h = this.OffsetPoint(b, h, e.m_jointype);}} else {h = 0;for (b = 1; b < g - 1; ++b) {h = this.OffsetPoint(b, h, e.m_jointype);}e.m_endtype === c.EndType.etOpenButt ? (b = g - 1, h = new c.FPoint2(this.m_srcPoly[b].X + this.m_normals[b].X * a, this.m_srcPoly[b].Y + this.m_normals[b].Y * a), this.m_destPoly.push(h), h = new c.FPoint2(this.m_srcPoly[b].X - this.m_normals[b].X * a, this.m_srcPoly[b].Y - this.m_normals[b].Y * a), this.m_destPoly.push(h)) : (b = g - 1, h = g - 2,\n              this.m_sinA = 0, this.m_normals[b] = new c.FPoint2(-this.m_normals[b].X, -this.m_normals[b].Y), e.m_endtype === c.EndType.etOpenSquare ? this.DoSquare(b, h) : this.DoRound(b, h));for (b = g - 1; 0 < b; b--) {this.m_normals[b] = new c.FPoint2(-this.m_normals[b - 1].X, -this.m_normals[b - 1].Y);}this.m_normals[0] = new c.FPoint2(-this.m_normals[1].X, -this.m_normals[1].Y);h = g - 1;for (b = h - 1; 0 < b; --b) {h = this.OffsetPoint(b, h, e.m_jointype);}e.m_endtype === c.EndType.etOpenButt ? (h = new c.FPoint2(this.m_srcPoly[0].X - this.m_normals[0].X * a, this.m_srcPoly[0].Y -\n              this.m_normals[0].Y * a), this.m_destPoly.push(h), h = new c.FPoint2(this.m_srcPoly[0].X + this.m_normals[0].X * a, this.m_srcPoly[0].Y + this.m_normals[0].Y * a), this.m_destPoly.push(h)) : (this.m_sinA = 0, e.m_endtype === c.EndType.etOpenSquare ? this.DoSquare(0, 1) : this.DoRound(0, 1));}}this.m_destPolys.push(this.m_destPoly);}}}};c.ClipperOffset.prototype.Execute = function () {var a = arguments;if (a[0] instanceof c.PolyTree) {var b = a[0];var d = a[1];b.Clear();this.FixOrientations();this.DoOffset(d);a = new c.Clipper(0);a.AddPaths(this.m_destPolys,\n      c.PolyType.ptSubject, !0);if (0 < d) a.Execute(c.ClipType.ctUnion, b, c.PolyFillType.pftPositive, c.PolyFillType.pftPositive);else {var e = c.Clipper.GetBounds(this.m_destPolys);d = new c.Path();d.push(new c.FPoint2(e.left - 10, e.bottom + 10));d.push(new c.FPoint2(e.right + 10, e.bottom + 10));d.push(new c.FPoint2(e.right + 10, e.top - 10));d.push(new c.FPoint2(e.left - 10, e.top - 10));a.AddPath(d, c.PolyType.ptSubject, !0);a.ReverseSolution = !0;a.Execute(c.ClipType.ctUnion, b, c.PolyFillType.pftNegative, c.PolyFillType.pftNegative);if (1 ===\n        b.ChildCount() && 0 < b.Childs()[0].ChildCount()) for (a = b.Childs()[0], b.Childs()[0] = a.Childs()[0], b.Childs()[0].m_Parent = b, d = 1; d < a.ChildCount(); d++) {b.AddChild(a.Childs()[d]);} else b.Clear();}} else b = a[0], d = a[1], c.Clear(b), this.FixOrientations(), this.DoOffset(d), a = new c.Clipper(0), a.AddPaths(this.m_destPolys, c.PolyType.ptSubject, !0), 0 < d ? a.Execute(c.ClipType.ctUnion, b, c.PolyFillType.pftPositive, c.PolyFillType.pftPositive) : (e = c.Clipper.GetBounds(this.m_destPolys), d = new c.Path(), d.push(new c.FPoint2(e.left - 10,\n    e.bottom + 10)), d.push(new c.FPoint2(e.right + 10, e.bottom + 10)), d.push(new c.FPoint2(e.right + 10, e.top - 10)), d.push(new c.FPoint2(e.left - 10, e.top - 10)), a.AddPath(d, c.PolyType.ptSubject, !0), a.ReverseSolution = !0, a.Execute(c.ClipType.ctUnion, b, c.PolyFillType.pftNegative, c.PolyFillType.pftNegative), 0 < b.length && b.splice(0, 1));};c.ClipperOffset.prototype.OffsetPoint = function (a, b, d) {this.m_sinA = this.m_normals[b].X * this.m_normals[a].Y - this.m_normals[a].X * this.m_normals[b].Y;if (0 === this.m_sinA) return b;1 < this.m_sinA ?\n    this.m_sinA = 1 : -1 > this.m_sinA && (this.m_sinA = -1);if (0 > this.m_sinA * this.m_delta) this.m_destPoly.push(new c.FPoint2(this.m_srcPoly[a].X + this.m_normals[b].X * this.m_delta, this.m_srcPoly[a].Y + this.m_normals[b].Y * this.m_delta)), this.m_destPoly.push(new c.FPoint1(this.m_srcPoly[a])), this.m_destPoly.push(new c.FPoint2(this.m_srcPoly[a].X + this.m_normals[a].X * this.m_delta, this.m_srcPoly[a].Y + this.m_normals[a].Y * this.m_delta));else switch (d) {case c.JoinType.jtMiter:d = 1 + (this.m_normals[a].X * this.m_normals[b].X +\n        this.m_normals[a].Y * this.m_normals[b].Y);d >= this.m_miterLim ? this.DoMiter(a, b, d) : this.DoSquare(a, b);break;case c.JoinType.jtSquare:this.DoSquare(a, b);break;case c.JoinType.jtRound:this.DoRound(a, b);}return a;};c.ClipperOffset.prototype.DoSquare = function (a, b) {var d = Math.tan(Math.atan2(this.m_sinA, this.m_normals[b].X * this.m_normals[a].X + this.m_normals[b].Y * this.m_normals[a].Y) / 4);this.m_destPoly.push(new c.FPoint2(this.m_srcPoly[a].X + this.m_delta * (this.m_normals[b].X - this.m_normals[b].Y * d), this.m_srcPoly[a].Y +\n    this.m_delta * (this.m_normals[b].Y + this.m_normals[b].X * d)));this.m_destPoly.push(new c.FPoint2(this.m_srcPoly[a].X + this.m_delta * (this.m_normals[a].X + this.m_normals[a].Y * d), this.m_srcPoly[a].Y + this.m_delta * (this.m_normals[a].Y - this.m_normals[a].X * d)));};c.ClipperOffset.prototype.DoMiter = function (a, b, d) {d = this.m_delta / d;this.m_destPoly.push(new c.FPoint2(this.m_srcPoly[a].X + (this.m_normals[b].X + this.m_normals[a].X) * d, this.m_srcPoly[a].Y + (this.m_normals[b].Y + this.m_normals[a].Y) * d));};c.ClipperOffset.prototype.DoRound =\n  function (a, b) {for (var d = Math.max(Math.round(this.m_StepsPerRad * Math.abs(Math.atan2(this.m_sinA, this.m_normals[b].X * this.m_normals[a].X + this.m_normals[b].Y * this.m_normals[a].Y))), 1), e = this.m_normals[b].X, f = this.m_normals[b].Y, g, h = 0; h < d; ++h) {this.m_destPoly.push(new c.FPoint2(this.m_srcPoly[a].X + e * this.m_delta, this.m_srcPoly[a].Y + f * this.m_delta)), g = e, e = e * this.m_cos - this.m_sin * f, f = g * this.m_sin + f * this.m_cos;}this.m_destPoly.push(new c.FPoint2(this.m_srcPoly[a].X + this.m_normals[a].X * this.m_delta, this.m_srcPoly[a].Y +\n    this.m_normals[a].Y * this.m_delta));};c.Error = function (a) {try {throw Error(a);} catch (b) {alert(b.message);}};c.JS = {};c.JS.AreaOfPolygon = function (a) {return c.Clipper.Area(a);};c.JS.AreaOfPolygons = function (a) {for (var b = 0, d = 0; d < a.length; d++) {b += c.Clipper.Area(a[d]);}return b;};c.JS.BoundsOfPath = function (a) {return c.JS.BoundsOfPaths([a]);};c.JS.BoundsOfPaths = function (a) {return c.Clipper.GetBounds(a);};c.JS.Clean = function (a, b) {if (!(a instanceof Array)) return [];var d = a[0] instanceof Array;a = c.JS.Clone(a);if (\"number\" !==\n    typeof b || null === b) return c.Error(\"Delta is not a number in Clean().\"), a;if (0 === a.length || 1 === a.length && 0 === a[0].length || 0 > b) return a;d || (a = [a]);for (var e = a.length, f, g, h, l, k, m, p, n = [], q = 0; q < e; q++) {if (g = a[q], f = g.length, 0 !== f) if (3 > f) h = g, n.push(h);else {h = g;l = b * b;k = g[0];for (p = m = 1; p < f; p++) {(g[p].X - k.X) * (g[p].X - k.X) + (g[p].Y - k.Y) * (g[p].Y - k.Y) <= l || (h[m] = g[p], k = g[p], m++);}k = g[m - 1];(g[0].X - k.X) * (g[0].X - k.X) + (g[0].Y - k.Y) * (g[0].Y - k.Y) <= l && m--;m < f && h.splice(m, f - m);h.length && n.push(h);}}!d && n.length ? n = n[0] : d || 0 !== n.length ?\n    d && 0 === n.length && (n = [[]]) : n = [];return n;};c.JS.Clone = function (a) {if (!(a instanceof Array) || 0 === a.length) return [];if (1 === a.length && 0 === a[0].length) return [[]];var b = a[0] instanceof Array;b || (a = [a]);var c = a.length,e,f,g = Array(c);for (e = 0; e < c; e++) {var h = a[e].length;var l = Array(h);for (f = 0; f < h; f++) {l[f] = { X: a[e][f].X, Y: a[e][f].Y };}g[e] = l;}b || (g = g[0]);return g;};c.JS.Lighten = function (a, b) {if (!(a instanceof Array)) return [];if (\"number\" !== typeof b || null === b) return c.Error(\"Tolerance is not a number in Lighten().\"),\n    c.JS.Clone(a);if (0 === a.length || 1 === a.length && 0 === a[0].length || 0 > b) return c.JS.Clone(a);var d = a[0] instanceof Array;d || (a = [a]);var e,f,g,h = a.length,l = b * b,k = [];for (e = 0; e < h; e++) {var m = a[e];var p = m.length;if (0 !== p) {for (g = 0; 1E6 > g; g++) {var n = [];p = m.length;if (m[p - 1].X !== m[0].X || m[p - 1].Y !== m[0].Y) {var q = 1;m.push({ X: m[0].X, Y: m[0].Y });p = m.length;} else q = 0;var r = [];for (f = 0; f < p - 2; f++) {var t = m[f];var y = m[f + 1];var v = m[f + 2];var w = t.X;var x = t.Y;t = v.X - w;var u = v.Y - x;if (0 !== t || 0 !== u) {var z = ((y.X - w) * t + (y.Y - x) * u) / (t * t +\n              u * u);1 < z ? (w = v.X, x = v.Y) : 0 < z && (w += t * z, x += u * z);}t = y.X - w;u = y.Y - x;v = t * t + u * u;v <= l && (r[f + 1] = 1, f++);}n.push({ X: m[0].X, Y: m[0].Y });for (f = 1; f < p - 1; f++) {r[f] || n.push({ X: m[f].X, Y: m[f].Y });}n.push({ X: m[p - 1].X, Y: m[p - 1].Y });q && m.pop();if (r.length) m = n;else break;}p = n.length;n[p - 1].X === n[0].X && n[p - 1].Y === n[0].Y && n.pop();2 < n.length && k.push(n);}}d || (k = k[0]);\"undefined\" === typeof k && (k = []);return k;};c.JS.PerimeterOfPath = function (a, b) {if (\"undefined\" === typeof a) return 0;var c = Math.sqrt,e = 0,f = a.length;if (2 > f) return 0;b && (a[f] = a[0],\n    f++);for (; --f;) {var g = a[f];var h = g.X;g = g.Y;var l = a[f - 1];var k = l.X;l = l.Y;e += c((h - k) * (h - k) + (g - l) * (g - l));}b && a.pop();return e;};c.JS.PerimeterOfPaths = function (a, b) {for (var d = 0, e = 0; e < a.length; e++) {d += c.JS.PerimeterOfPath(a[e], b);}return d;};c.ExPolygons = function () {return [];};c.ExPolygon = function () {this.holes = this.outer = null;};c.JS.AddOuterPolyNodeToExPolygons = function (a, b) {var d = new c.ExPolygon();d.outer = a.Contour();var e = a.Childs(),f = e.length;d.holes = Array(f);var g, h;for (g = 0; g < f; g++) {var l = e[g];d.holes[g] = l.Contour();\n      var k = 0;var m = l.Childs();for (h = m.length; k < h; k++) {l = m[k], c.JS.AddOuterPolyNodeToExPolygons(l, b);}}b.push(d);};c.JS.ExPolygonsToPaths = function (a) {var b,d,e = new c.Paths();var f = 0;for (b = a.length; f < b; f++) {e.push(a[f].outer);var g = 0;for (d = a[f].holes.length; g < d; g++) {e.push(a[f].holes[g]);}}return e;};c.JS.PolyTreeToExPolygons = function (a) {var b = new c.ExPolygons(),d;var e = 0;var f = a.Childs();for (d = f.length; e < d; e++) {a = f[e], c.JS.AddOuterPolyNodeToExPolygons(a, b);}return b;};})();","function _typeof(obj) {\"@babel/helpers - typeof\";if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}!function (e) {if (\"object\" == (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) && \"undefined\" != typeof module) module.exports = e();else if (\"function\" == typeof define && define.amd) define([], e);else {(\"undefined\" != typeof window ? window : \"undefined\" != typeof global ? global : \"undefined\" != typeof self ? self : this).earcut = e();}}(function () {return function i(u, f, o) {function v(n, e) {if (!f[n]) {if (!u[n]) {var t = \"function\" == typeof require && require;if (!e && t) return t(n, !0);if (y) return y(n, !0);var r = new Error(\"Cannot find module '\" + n + \"'\");throw r.code = \"MODULE_NOT_FOUND\", r;}var x = f[n] = { exports: {} };u[n][0].call(x.exports, function (e) {return v(u[n][1][e] || e);}, x, x.exports, i, u, f, o);}return f[n].exports;}for (var y = \"function\" == typeof require && require, e = 0; e < o.length; e++) {v(o[e]);}return v;}({ 1: [function (e, n, t) {\"use strict\";function r(e, n, t) {t = t || 2;var r,x,i,u,f,o,v,y = n && n.length,p = y ? n[0] * t : e.length,a = s(e, 0, p, t, !0),l = [];if (!a || a.next === a.prev) return l;if (y && (a = function (e, n, t, r) {var x,i,u,f,o,v = [];for (x = 0, i = n.length; x < i; x++) {u = n[x] * r, f = x < i - 1 ? n[x + 1] * r : e.length, (o = s(e, u, f, r, !1)) === o.next && (o.steiner = !0), v.push(M(o));}for (v.sort(Z), x = 0; x < v.length; x++) {g(v[x], t), t = c(t, t.next);}return t;}(e, n, a, t)), e.length > 80 * t) {r = i = e[0], x = u = e[1];for (var h = t; h < p; h += t) {(f = e[h]) < r && (r = f), (o = e[h + 1]) < x && (x = o), i < f && (i = f), u < o && (u = o);}v = 0 !== (v = Math.max(i - r, u - x)) ? 1 / v : 0;}return d(a, l, t, r, x, v), l;}function s(e, n, t, r, x) {var i, u;if (x === 0 < D(e, n, t, r)) for (i = n; i < t; i += r) {u = f(i, e[i], e[i + 1], u);} else for (i = t - r; n <= i; i -= r) {u = f(i, e[i], e[i + 1], u);}return u && h(u, u.next) && (k(u), u = u.next), u;}function c(e, n) {if (!e) return e;n = n || e;var t,r = e;do {if (t = !1, r.steiner || !h(r, r.next) && 0 !== m(r.prev, r, r.next)) r = r.next;else {if (k(r), (r = n = r.prev) === r.next) break;t = !0;}} while (t || r !== n);return n;}function d(e, n, t, r, x, i, u) {if (e) {!u && i && function (e, n, t, r) {var x = e;for (; null === x.z && (x.z = w(x.x, x.y, n, t, r)), x.prevZ = x.prev, x.nextZ = x.next, x = x.next, x !== e;) {;}x.prevZ.nextZ = null, x.prevZ = null, function (e) {var n,t,r,x,i,u,f,o,v = 1;do {for (t = e, i = e = null, u = 0; t;) {for (u++, r = t, n = f = 0; n < v && (f++, r = r.nextZ); n++) {;}for (o = v; 0 < f || 0 < o && r;) {0 !== f && (0 === o || !r || t.z <= r.z) ? (t = (x = t).nextZ, f--) : (r = (x = r).nextZ, o--), i ? i.nextZ = x : e = x, x.prevZ = i, i = x;}t = r;}i.nextZ = null, v *= 2;} while (1 < u);}(x);}(e, r, x, i);for (var f, o, v = e; e.prev !== e.next;) {if (f = e.prev, o = e.next, i ? p(e, r, x, i) : y(e)) n.push(f.i / t), n.push(e.i / t), n.push(o.i / t), k(e), e = o.next, v = o.next;else if ((e = o) === v) {u ? 1 === u ? d(e = a(c(e), n, t), n, t, r, x, i, 2) : 2 === u && l(e, n, t, r, x, i) : d(c(e), n, t, r, x, i, 1);break;}}}}function y(e) {var n = e.prev,t = e,r = e.next;if (0 <= m(n, t, r)) return !1;for (var x = e.next.next; x !== e.prev;) {if (b(n.x, n.y, t.x, t.y, r.x, r.y, x.x, x.y) && 0 <= m(x.prev, x, x.next)) return !1;x = x.next;}return !0;}function p(e, n, t, r) {var x = e.prev,i = e,u = e.next;if (0 <= m(x, i, u)) return !1;for (var f = x.x < i.x ? x.x < u.x ? x.x : u.x : i.x < u.x ? i.x : u.x, o = x.y < i.y ? x.y < u.y ? x.y : u.y : i.y < u.y ? i.y : u.y, v = x.x > i.x ? x.x > u.x ? x.x : u.x : i.x > u.x ? i.x : u.x, y = x.y > i.y ? x.y > u.y ? x.y : u.y : i.y > u.y ? i.y : u.y, p = w(f, o, n, t, r), a = w(v, y, n, t, r), l = e.prevZ, h = e.nextZ; l && l.z >= p && h && h.z <= a;) {if (l !== e.prev && l !== e.next && b(x.x, x.y, i.x, i.y, u.x, u.y, l.x, l.y) && 0 <= m(l.prev, l, l.next)) return !1;if (l = l.prevZ, h !== e.prev && h !== e.next && b(x.x, x.y, i.x, i.y, u.x, u.y, h.x, h.y) && 0 <= m(h.prev, h, h.next)) return !1;h = h.nextZ;}for (; l && l.z >= p;) {if (l !== e.prev && l !== e.next && b(x.x, x.y, i.x, i.y, u.x, u.y, l.x, l.y) && 0 <= m(l.prev, l, l.next)) return !1;l = l.prevZ;}for (; h && h.z <= a;) {if (h !== e.prev && h !== e.next && b(x.x, x.y, i.x, i.y, u.x, u.y, h.x, h.y) && 0 <= m(h.prev, h, h.next)) return !1;h = h.nextZ;}return !0;}function a(e, n, t) {var r = e;do {var x = r.prev,i = r.next.next;!h(x, i) && z(x, r, r.next, i) && q(x, i) && q(i, x) && (n.push(x.i / t), n.push(r.i / t), n.push(i.i / t), k(r), k(r.next), r = e = i), r = r.next;} while (r !== e);return c(r);}function l(e, n, t, r, x, i) {var u,f,o = e;do {for (var v = o.next.next; v !== o.prev;) {if (o.i !== v.i && (f = v, (u = o).next.i !== f.i && u.prev.i !== f.i && !function (e, n) {var t = e;do {if (t.i !== e.i && t.next.i !== e.i && t.i !== n.i && t.next.i !== n.i && z(t, t.next, e, n)) return !0;t = t.next;} while (t !== e);return !1;}(u, f) && (q(u, f) && q(f, u) && function (e, n) {var t = e,r = !1,x = (e.x + n.x) / 2,i = (e.y + n.y) / 2;for (; t.y > i != t.next.y > i && t.next.y !== t.y && x < (t.next.x - t.x) * (i - t.y) / (t.next.y - t.y) + t.x && (r = !r), t = t.next, t !== e;) {;}return r;}(u, f) && (m(u.prev, u, f.prev) || m(u, f.prev, f)) || h(u, f) && 0 < m(u.prev, u, u.next) && 0 < m(f.prev, f, f.next)))) {var y = O(o, v);return o = c(o, o.next), y = c(y, y.next), d(o, n, t, r, x, i), void d(y, n, t, r, x, i);}v = v.next;}o = o.next;} while (o !== e);}function Z(e, n) {return e.x - n.x;}function g(e, n) {if (n = function (e, n) {var t,r = n,x = e.x,i = e.y,u = -1 / 0;do {if (i <= r.y && i >= r.next.y && r.next.y !== r.y) {var f = r.x + (i - r.y) * (r.next.x - r.x) / (r.next.y - r.y);if (f <= x && u < f) {if ((u = f) === x) {if (i === r.y) return r;if (i === r.next.y) return r.next;}t = r.x < r.next.x ? r : r.next;}}r = r.next;} while (r !== n);if (!t) return null;if (x === u) return t;var o,v = t,y = t.x,p = t.y,a = 1 / 0;r = t;for (; x >= r.x && r.x >= y && x !== r.x && b(i < p ? x : u, i, y, p, i < p ? u : x, i, r.x, r.y) && (o = Math.abs(i - r.y) / (x - r.x), q(r, e) && (o < a || o === a && (r.x > t.x || r.x === t.x && (h = r, m((l = t).prev, l, h.prev) < 0 && m(h.next, l, l.next) < 0))) && (t = r, a = o)), r = r.next, r !== v;) {;}var l, h;return t;}(e, n)) {var t = O(n, e);c(t, t.next);}}function w(e, n, t, r, x) {return (e = 1431655765 & ((e = 858993459 & ((e = 252645135 & ((e = 16711935 & ((e = 32767 * (e - t) * x) | e << 8)) | e << 4)) | e << 2)) | e << 1)) | (n = 1431655765 & ((n = 858993459 & ((n = 252645135 & ((n = 16711935 & ((n = 32767 * (n - r) * x) | n << 8)) | n << 4)) | n << 2)) | n << 1)) << 1;}function M(e) {for (var n = e, t = e; (n.x < t.x || n.x === t.x && n.y < t.y) && (t = n), (n = n.next) !== e;) {;}return t;}function b(e, n, t, r, x, i, u, f) {return 0 <= (x - u) * (n - f) - (e - u) * (i - f) && 0 <= (e - u) * (r - f) - (t - u) * (n - f) && 0 <= (t - u) * (i - f) - (x - u) * (r - f);}function m(e, n, t) {return (n.y - e.y) * (t.x - n.x) - (n.x - e.x) * (t.y - n.y);}function h(e, n) {return e.x === n.x && e.y === n.y;}function z(e, n, t, r) {var x = v(m(e, n, t)),i = v(m(e, n, r)),u = v(m(t, r, e)),f = v(m(t, r, n));return x !== i && u !== f || !(0 !== x || !o(e, t, n)) || !(0 !== i || !o(e, r, n)) || !(0 !== u || !o(t, e, r)) || !(0 !== f || !o(t, n, r));}function o(e, n, t) {return n.x <= Math.max(e.x, t.x) && n.x >= Math.min(e.x, t.x) && n.y <= Math.max(e.y, t.y) && n.y >= Math.min(e.y, t.y);}function v(e) {return 0 < e ? 1 : e < 0 ? -1 : 0;}function q(e, n) {return m(e.prev, e, e.next) < 0 ? 0 <= m(e, n, e.next) && 0 <= m(e, e.prev, n) : m(e, n, e.prev) < 0 || m(e, e.next, n) < 0;}function O(e, n) {var t = new u(e.i, e.x, e.y),r = new u(n.i, n.x, n.y),x = e.next,i = n.prev;return (e.next = n).prev = e, (t.next = x).prev = t, (r.next = t).prev = r, (i.next = r).prev = i, r;}function f(e, n, t, r) {var x = new u(e, n, t);return r ? (x.next = r.next, (x.prev = r).next.prev = x, r.next = x) : (x.prev = x).next = x, x;}function k(e) {e.next.prev = e.prev, e.prev.next = e.next, e.prevZ && (e.prevZ.nextZ = e.nextZ), e.nextZ && (e.nextZ.prevZ = e.prevZ);}function u(e, n, t) {this.i = e, this.x = n, this.y = t, this.prev = null, this.next = null, this.z = null, this.prevZ = null, this.nextZ = null, this.steiner = !1;}function D(e, n, t, r) {for (var x = 0, i = n, u = t - r; i < t; i += r) {x += (e[u] - e[i]) * (e[i + 1] + e[u + 1]), u = i;}return x;}n.exports = r, (n.exports.default = r).deviation = function (e, n, t, r) {var x = n && n.length,i = x ? n[0] * t : e.length,u = Math.abs(D(e, 0, i, t));if (x) for (var f = 0, o = n.length; f < o; f++) {var v = n[f] * t,y = f < o - 1 ? n[f + 1] * t : e.length;u -= Math.abs(D(e, v, y, t));}var p = 0;for (f = 0; f < r.length; f += 3) {var a = r[f] * t,l = r[f + 1] * t,h = r[f + 2] * t;p += Math.abs((e[a] - e[h]) * (e[1 + l] - e[1 + a]) - (e[a] - e[l]) * (e[1 + h] - e[1 + a]));}return 0 === u && 0 === p ? 0 : Math.abs((p - u) / u);}, r.flatten = function (e) {for (var n = e[0][0].length, t = { vertices: [], holes: [], dimensions: n }, r = 0, x = 0; x < e.length; x++) {for (var i = 0; i < e[x].length; i++) {for (var u = 0; u < n; u++) {t.vertices.push(e[x][i][u]);}}0 < x && (r += e[x - 1].length, t.holes.push(r));}return t;};}, {}] }, {}, [1])(1);});","\nimport ClipperLib from \"./libs/clipper\";\nimport Earcut from \"./libs/earcut\";\nimport { TesselateQuad, TesselateCubic, DefaultTessParams } from \"./bezier\";\n\n//Helper for converting complex HTML Canvas paths to simple polylines / polygons\n\n\nvar MOVETO = 0,\nLINETO = 1,\nARC = 2,\nARCTO = 3,\nQUADTO = 4,\nCUBICTO = 5,\nELLIPSE = 6,\nCLOSE = 7;\n\n\nvar _v2 = new THREE.Vector2();\nvar _tmpBox = new THREE.Box2();\n\n// Tmp objct for Ellipse Arcs. We need delayed initialization, \n// because Autodesk.Extensions.CompGeom might not be available yet at compile time.\nvar _tmpArc = null;\nvar getTmpArc = function getTmpArc() {\n  _tmpArc = _tmpArc || new Autodesk.Extensions.CompGeom.EllipseArc();\n  return _tmpArc;\n};\n\nexport function Path2D(precisionTolerance) {\n  this.segTypes = [];\n  this.segData = [];\n  this.hasCurves = false;\n  this.bbox = new THREE.Box2();\n  this.precisionTolerance = precisionTolerance;\n}\n\n// Optional: Use custom tesselation params for bezier arcs. Undefined sets to default.\nPath2D.prototype.setTessParams = function (tessParams) {\n  this.tessParams = tessParams;\n};\n\nPath2D.prototype.closePath = function () {\n  if (this.segTypes.length && this.segTypes[this.segTypes.length - 1] === CLOSE)\n  return;\n  this.segTypes.push(CLOSE);\n};\n\n\nPath2D.prototype.moveTo = function (x, y) {\n  this.segTypes.push(MOVETO);\n  this.segData.push(x, y);\n\n  this.bbox.expandByPoint(_v2.set(x, y));\n};\n\nPath2D.prototype.lineTo = function (x, y) {\n  this.segTypes.push(LINETO);\n  this.segData.push(x, y);\n\n  this.bbox.expandByPoint(_v2.set(x, y));\n};\n\nPath2D.prototype.arc = function (x, y, radius, startAngle, endAngle, anticlockwise) {\n  this.hasCurves = true;\n  this.segTypes.push(ARC);\n  this.segData.push(x, y, radius, startAngle, endAngle, anticlockwise);\n\n  this.bbox.expandByPoint(_v2.set(x, y)); //TODO: all corners\n};\n\nPath2D.prototype.arcTo = function (x1, y1, x2, y2, radius) {\n  this.hasCurves = true;\n  this.segTypes.push(ARCTO);\n  this.segData.push(x1, y1, x2, y2, radius);\n\n  this.bbox.expandByPoint(_v2.set(x1, y1));\n  this.bbox.expandByPoint(_v2.set(x2, y2));\n};\n\nPath2D.prototype.quadraticCurveTo = function (cp1x, cp1y, x, y) {\n  this.hasCurves = true;\n  this.segTypes.push(QUADTO);\n  this.segData.push(cp1x, cp1y, x, y);\n\n  this.bbox.expandByPoint(_v2.set(cp1x, cp1y));\n  this.bbox.expandByPoint(_v2.set(x, y));\n};\n\nPath2D.prototype.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n  this.hasCurves = true;\n  this.segTypes.push(CUBICTO);\n  this.segData.push(cp1x, cp1y, cp2x, cp2y, x, y);\n  this.bbox.expandByPoint(_v2.set(cp1x, cp1y));\n  this.bbox.expandByPoint(_v2.set(cp2x, cp2y));\n  this.bbox.expandByPoint(_v2.set(x, y));\n};\n\n// for params, see https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/ellipse\nPath2D.prototype.ellipse = function (cx, cy, rx, ry, rotation, startAngle, endAngle, ccw) {\n\n  this.hasCurves = true;\n  this.segTypes.push(ELLIPSE);\n  this.segData.push(cx, cy, rx, ry, rotation, startAngle, endAngle, ccw);\n\n  // consider arc in bbox\n  var arcBox = getTmpArc().set(cx, cy, rx, ry, rotation, startAngle, endAngle, ccw).computeBBox(_tmpBox);\n  this.bbox.union(arcBox);\n};\n\nPath2D.prototype.flatten = function (forceCloseContours) {\n\n  var ret = new Path2D(this.precisionTolerance);\n\n  var dataOffset = 0;\n  var lastX = 0;\n  var lastY = 0;\n  var contourStartX = lastX;\n  var contourStartY = lastY;\n\n  var segTypes = this.segTypes;\n  var segData = this.segData;\n\n  var sz = this.bbox.size().length();\n\n  for (var i = 0; i < segTypes.length; i++) {\n\n    var st = segTypes[i];\n\n    switch (st) {\n\n      case MOVETO:{\n          if (forceCloseContours) {\n            if (lastX !== contourStartX || lastY !== contourStartY) {\n              ret.closePath();\n            }\n          }\n\n          lastX = segData[dataOffset++];\n          lastY = segData[dataOffset++];\n          contourStartX = lastX;\n          contourStartY = lastY;\n          ret.moveTo(lastX, lastY);\n        }\n        break;\n      case CLOSE:\n        ret.closePath();\n        break;\n      case LINETO:{\n          var x = segData[dataOffset++];\n          var y = segData[dataOffset++];\n\n          if (x !== lastX || y !== lastY) {\n            ret.lineTo(x, y);\n\n            lastX = x;\n            lastY = y;\n          }\n        }\n        break;\n      case QUADTO:{\n          var cp1x = segData[dataOffset++],cp1y = segData[dataOffset++],\n          x = segData[dataOffset++],y = segData[dataOffset++];\n          TesselateQuad(ret, lastX, lastY, cp1x, cp1y, x, y, sz, this.tessParams, !!this.isFontChar);\n          //ret.lineTo(cp1x, cp1y);ret.lineTo(x.y);\n\n          lastX = x;\n          lastY = y;\n        }\n        break;\n      case CUBICTO:{\n          var cp1x = segData[dataOffset++],cp1y = segData[dataOffset++],\n          cp2x = segData[dataOffset++],cp2y = segData[dataOffset++],\n          x = segData[dataOffset++],y = segData[dataOffset++];\n          TesselateCubic(ret, lastX, lastY, cp1x, cp1y, cp2x, cp2y, x, y, sz, this.tessParams, !!this.isFontChar);\n          //ret.lineTo(cp1x, cp1y);ret.lineTo(cp2x,cp2y);ret.lineTo(x.y);\n\n          lastX = x;\n          lastY = y;\n        }\n        break;\n      case ARC:\n        console.warn(\"not implemented: arc\");\n        dataOffset += 6;\n        break;\n      case ARCTO:\n        console.warn(\"not implemented: arcto\");\n        dataOffset += 4;\n        break;\n      case ELLIPSE:{\n          // read ellipse params\n          var cx = segData[dataOffset++];\n          var cy = segData[dataOffset++];\n          var rx = segData[dataOffset++];\n          var ry = segData[dataOffset++];\n          var rotation = segData[dataOffset++];\n          var startAngle = segData[dataOffset++];\n          var endAngle = segData[dataOffset++];\n          var ccw = segData[dataOffset++];\n\n          // determine tesselation params\n          var tessParams = this.tessParams || DefaultTessParams;\n          var maxSegments = tessParams.numIterations;\n          var minSegmentLength = tessParams.minSegLenFraction * sz;\n\n          // tesselate arc\n          var arc = getTmpArc().set(cx, cy, rx, ry, rotation, startAngle, endAngle, ccw);\n          arc.tesselate(ret, maxSegments, minSegmentLength);\n\n          // Update lastX/lastY\n          // The last lineTo() appends x and y of the end position to ret.segData. \n          // So, we can always extract it from there.\n          lastX = ret.segData[ret.segData.length - 2];\n          lastY = ret.segData[ret.segData.length - 1];\n        }\n        break;}\n\n  }\n\n  if (forceCloseContours) {\n    if (lastX !== contourStartX || lastY !== contourStartY) {\n      ret.closePath();\n    }\n  }\n\n  return ret;\n};\n\nPath2D.prototype.applyTransform = function (loader, xform) {\n\n  for (var i = 0; i < this.segData.length; i += 2) {\n\n    var x = this.segData[i];\n    var y = this.segData[i + 1];\n\n    this.segData[i] = loader.tx(x, y, xform);\n    this.segData[i + 1] = loader.ty(x, y, xform);\n  }\n};\n\nPath2D.prototype.stroke = function (loader, lineWidth, color, dbId, layerId, clipPathIn, applyTransform, lineStyle) {var _this = this;\n  var needClipping = clipPathIn != null;\n  var subjFlatted = this;\n  if (applyTransform || this.hasCurves) {\n    subjFlatted = this.flatten(false);\n  }\n\n  var self = this;\n  // check weather we can do simple path\n  if (needClipping) {\n    var subPaths = [];\n    var subPath;\n    var segIndex = 0;\n    for (var i = 0; i < subjFlatted.segTypes.length; i++) {\n      if (subjFlatted.segTypes[i] == MOVETO) {\n        subPath = new Path2D(this.precisionTolerance);\n        subPaths.push(subPath);\n        subPath.moveTo(subjFlatted.segData[segIndex++], subjFlatted.segData[segIndex++]);\n      } else if (subjFlatted.segTypes[i] == LINETO) {var _subPath;\n        (_subPath = subPath) === null || _subPath === void 0 ? void 0 : _subPath.lineTo(subjFlatted.segData[segIndex++], subjFlatted.segData[segIndex++]);\n      } else if (subjFlatted.segTypes[i] == CLOSE) {var _subPath2;\n        (_subPath2 = subPath) === null || _subPath2 === void 0 ? void 0 : _subPath2.closePath();\n      }\n    }\n\n    var clipFlatted = clipPathIn.flattened || clipPathIn.flatten(true);\n    var clips = clipFlatted.toClipperPath(loader, false);\n    subPaths.map(function (subPath) {\n      // still need to do a check for each subPath\n      var subPreResult = self.preCheckForClipping(loader, clipFlatted, subPath, applyTransform, true);\n      if (subPreResult.needCancel) {\n        return;\n      } else if (subPreResult.needClipping) {\n        var myPath = subPath.toClipperPath(loader, applyTransform)[0];\n        if (!myPath) {\n          return;\n        }\n\n        var solution = new ClipperLib.PolyTree();\n        var cpr = new ClipperLib.Clipper();\n        // if the path is closed, but we set the open flag, it will cause infinity loop\n        var closed = myPath[0].X == myPath[myPath.length - 1].X && myPath[0].Y == myPath[myPath.length - 1].Y;\n        cpr.AddPath(myPath, ClipperLib.PolyType.ptSubject, closed);\n        cpr.AddPaths(clips, ClipperLib.PolyType.ptClip, true);\n\n        cpr.Execute(ClipperLib.ClipType.ctIntersection, solution, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n        strokeClipperSolution(solution);\n      } else {\n        _this.strokeFlattedPath(loader, subPath, lineWidth, color, dbId, layerId, applyTransform, lineStyle);\n      }\n    });\n  } else {\n    // just draw all the segments\n    this.strokeFlattedPath(loader, subjFlatted, lineWidth, color, dbId, layerId, applyTransform, lineStyle);\n  }\n\n  function strokeClipperSolution(solution) {\n    var node = solution.GetFirst();\n    while (node) {\n      self.strokeClipperContour(loader, node.Contour(), node.IsOpen, color, lineWidth, dbId, layerId, loader.currentVpId, lineStyle, false);\n      node = node.GetNext();\n    }\n  }\n};\n\nPath2D.prototype.strokeFlattedPath = function (loader, flatted, lineWidth, color, dbId, layerId, applyTransform, lineStyle) {\n  var segData = flatted.segData;\n  var segTypes = flatted.segTypes;\n\n  var xform;\n  if (applyTransform) {\n    xform = loader.getCurrentTransform();\n  }\n\n  var dataOffset = 0;\n  var lastX = 0;\n  var lastY = 0;\n  var contourStartX = 0;\n  var contourStartY = 0;\n\n  for (var i = 0; i < segTypes.length; i++) {\n\n    var st = segTypes[i];\n\n    switch (st) {\n\n      case MOVETO:{\n          var tmpx = segData[dataOffset++];\n          var tmpy = segData[dataOffset++];\n\n          if (applyTransform) {\n            contourStartX = loader.tx(tmpx, tmpy, xform);\n            contourStartY = loader.ty(tmpx, tmpy, xform);\n          } else {\n            contourStartX = tmpx;\n            contourStartY = tmpy;\n          }\n\n          lastX = contourStartX;\n          lastY = contourStartY;\n        }\n        break;\n      case CLOSE:\n      case LINETO:{\n          var x = void 0,y = void 0;\n          if (st === CLOSE) {\n            x = contourStartX;\n            y = contourStartY;\n          } else {\n            var _tmpx = segData[dataOffset++];\n            var _tmpy = segData[dataOffset++];\n\n            if (applyTransform) {\n              x = loader.tx(_tmpx, _tmpy, xform);\n              y = loader.ty(_tmpx, _tmpy, xform);\n            } else {\n              x = _tmpx;\n              y = _tmpy;\n            }\n          }\n\n          // LMV-5336 - Paths that contain a moveTo and a lineTo at the same X, Y positions were not being drawn.\n          // Add the segment when the previous operation was moveTo.\n          var isPrevMoveTo = i > 0 && segTypes[i - 1] === MOVETO;\n          if (x !== lastX || y !== lastY || isPrevMoveTo) {\n\n            //Use centerpoint for the initial inside check for better numeric stability,\n            //in case the start point is exactly on the clip polygon's edge, in which case the inside\n            //check would return a random result\n\n            //Segment is either completely inside or completely outside (does not intersect the clip path at all)\n            loader.flushBuffer(4);\n\n            loader.currentVbb.addSegment(lastX, lastY, x, y,\n            /*totalDistance*/0, lineWidth, color, dbId, layerId, loader.currentVpId || 0, lineStyle);\n\n\n            lastX = x;\n            lastY = y;\n          }\n        }\n        break;\n      default:{\n          console.error(\"Path must be flattened before rendering\");\n        }}\n\n  }\n};\n\nPath2D.prototype.strokeClipperContour = function (loader, contour, isOpen, color, lineWidth, dbId, layerId, vpId, lineStyle, applyTransform) {\n  var l = contour.length;\n  var lastIndex = isOpen ? 0 : l - 1;\n  var startIndex = isOpen ? 1 : 0;\n  var xform;\n  if (applyTransform) {\n    xform = loader.getCurrentTransform();\n  }\n  var lastx = applyTransform ? loader.tx(contour[lastIndex].X, contour[lastIndex].Y, xform) : contour[lastIndex].X;\n  var lasty = applyTransform ? loader.ty(contour[lastIndex].X, contour[lastIndex].Y, xform) : contour[lastIndex].Y;\n  for (var i = startIndex; i < l; i++) {\n    var x = applyTransform ? loader.tx(contour[i].X, contour[i].Y, xform) : contour[i].X;\n    var y = applyTransform ? loader.ty(contour[i].X, contour[i].Y, xform) : contour[i].Y;\n\n    loader.flushBuffer(4);\n    loader.currentVbb.addSegment(lastx, lasty, x, y, 0, lineWidth, color, dbId, layerId, vpId, lineStyle);\n    lastx = x, lasty = y;\n  }\n};\n\n//Checks if the path is a simple AABB.\n//Used to speed up polygon clipping operations.\nPath2D.prototype.isAABB = function () {\n\n  var EPS = 1e-10;\n  var ANGLE_EPS = 1e-3;\n\n  var st = this.segTypes;\n\n  if (st.length !== 6 && st.length !== 5)\n  return false;\n\n  if (st[0] !== MOVETO)\n  return false;\n\n  if (st.length === 6 && st[5] !== CLOSE)\n  return false;else\n  if (st.length === 5 && st[4] !== CLOSE && st[4] !== LINETO)\n  return false;\n\n  for (var i = 1; i < st.length - 1; i++) {\n    if (st[i] !== LINETO)\n    return false;}\n\n\n  var seg = this.segData;\n\n  //check segments 1 and 3 for parallel and same length\n  var dxA = seg[2] - seg[0];\n  var dyA = seg[3] - seg[1];\n  var dxC = seg[6] - seg[4];\n  var dyC = seg[7] - seg[5];\n  var lenA = Math.sqrt(dxA * dxA + dyA * dyA);\n  var lenC = Math.sqrt(dxC * dxC + dyC * dyC);\n\n  if (Math.abs(lenA - lenC) > EPS)\n  return false;\n\n  dxA /= lenA;dyA /= lenA;\n  dxC /= lenC;dyC /= lenC;\n  var dot = dxA * dxC + dyA * dyC;\n\n  if (Math.abs(1 + dot) > ANGLE_EPS)\n  return false;\n\n  //check segments 2 and 4 for parallel and same length\n  var dxB = seg[4] - seg[2];\n  var dyB = seg[5] - seg[3];\n  var dxD = seg[8] - seg[6];\n  var dyD = seg[9] - seg[7];\n  var lenB = Math.sqrt(dxB * dxB + dyB * dyB);\n  var lenD = Math.sqrt(dxD * dxD + dyD * dyD);\n\n  if (Math.abs(lenB - lenD) > EPS)\n  return false;\n\n  dxB /= lenB;dyB /= lenB;\n  dxD /= lenD;dyD /= lenD;\n  dot = dxB * dxD + dyB * dyD;\n\n  if (Math.abs(1 + dot) > ANGLE_EPS)\n  return false;\n\n  //make sure there is a right angle\n  dot = dxA * dxB + dyA * dyB;\n\n  if (Math.abs(dot) > ANGLE_EPS)\n  return false;\n\n  //make sure segments are vertical/horizontal\n  if (Math.abs(dxA) > EPS && Math.abs(dyA))\n  return false;\n\n  return true;\n};\n\nvar INSIDE = 1;\nvar OUTSIDE = 2;\nvar UNKNOWN = 4;\n\nfunction bboxOverlap(clipBox, pathBox, precisionTolerance) {\n\n  if (clipBox.containsBox(pathBox))\n  return INSIDE;\n\n  //The above AABB containment check is exact\n  //and sometimes misses cases where the bboxes are\n  //almost exactly equal, with very slight numeric noise in the values\n  //(which happens quite often with Revit PDFs)\n\n  //So now do another check if our bbox contains the input bbox within a tolerance\n  var EPS = precisionTolerance;\n\n  if (EPS === undefined) {\n    EPS = 1e-3 / clipBox.size().length();\n  }\n\n  if (pathBox.min.x - clipBox.max.x > EPS)\n  return OUTSIDE;\n  if (pathBox.min.y - clipBox.min.y > EPS)\n  return OUTSIDE;\n\n  if (pathBox.max.x - clipBox.max.x < -EPS)\n  return OUTSIDE;\n  if (pathBox.max.y - clipBox.max.y < -EPS)\n  return OUTSIDE;\n\n  if (pathBox.min.x - clipBox.min.x < -EPS)\n  return UNKNOWN;\n  if (pathBox.min.y - clipBox.min.y < -EPS)\n  return UNKNOWN;\n\n  if (pathBox.max.x - clipBox.max.x > EPS)\n  return UNKNOWN;\n  if (pathBox.max.y - clipBox.max.y > EPS)\n  return UNKNOWN;\n\n  return INSIDE;\n}\n\nPath2D.prototype.isAABBContain = function (bbox) {\n\n  if (!this.isAABB())\n  return UNKNOWN;\n\n  return bboxOverlap(this.bbox, bbox, this.precisionTolerance);\n};\n\n\nPath2D.prototype.clip = function (clipPathIn, mode) {\n  var clipFlatted = clipPathIn.flattened || clipPathIn.flatten(true);\n  var subjFlatted = this.flattened || this.flatten(true);\n\n  var preResult = this.preCheckForClipping(null, clipFlatted, subjFlatted, false, false);\n  if (preResult.needCancel) {\n    console.warn(\"No overlap between nested clip regions.\");\n    return new Path2D();\n  } else if (preResult.needClipping == false) {\n    if (preResult.needSwapSubject) {\n      return clipPathIn;\n    } else {\n      return this;\n    }\n  } else {\n    // do the clipping here\n    var clips = clipFlatted.toClipperPath(null, false);\n    var myPath = subjFlatted.toClipperPath(null, false);\n\n    var solution = new ClipperLib.PolyTree();\n    var cpr = new ClipperLib.Clipper();\n    cpr.AddPaths(myPath, ClipperLib.PolyType.ptSubject, true);\n    cpr.AddPaths(clips, ClipperLib.PolyType.ptClip, true);\n\n    cpr.Execute(ClipperLib.ClipType.ctIntersection, solution, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n\n    // need to rebuild a path from the solution, no need to do the tesselation\n    var res = new Path2D(this.precisionTolerance);\n    var node = solution.GetFirst();\n    while (node) {\n      var contour = node.Contour();\n      for (var i = 0; i < contour.length; i++) {\n        if (i == 0) {\n          res.moveTo(contour[i].X, contour[i].Y);\n        } else {\n          res.lineTo(contour[i].X, contour[i].Y);\n        }\n      }\n\n      if (contour[contour.length - 1].X != contour[0].X || contour[contour.length - 1].Y != contour[0].Y) {\n        res.lineTo(contour[0].X, contour[0].Y);\n      }\n      node = node.GetNext();\n    }\n    return res;\n  }\n};\n\n/**\n    * If segments type is 0, 1, 0, 1 pattern, we should avoid to do fill to it\n    * Most of the time, it wants to be line segments, but from 2D, you can always pass a fill/stroke command to it.\n    * Eatch MoveTo should start with a segment.\n    */\nPath2D.prototype.isFillable = function () {\n  //Skip some easily detectable degenerate polygons that result in no fill\n  var p = this.flattened || this.flatten(true);\n  if (p.segTypes.length < 3) {\n    return false;\n  } else if (p.segTypes.length === 3) {\n    if (p.segTypes[2] === CLOSE &&\n    p.segTypes[1] === LINETO &&\n    p.segTypes[0] === MOVETO) {\n      return false;\n    }\n  } else {\n    var isFillable = false;\n\n    for (var i = 0; i < p.segTypes.length; i += 2) {\n      if (!(p.segTypes[i] == MOVETO && p.segTypes[i + 1] == LINETO)) {\n        isFillable = true;\n        break;\n      }\n    }\n    return isFillable;\n  }\n};\n\nPath2D.prototype.fill = function (loader, color, dbId, layerId, clipPathIn, applyTransform, isFillStrokeCombo) {\n  if (!this.isFillable()) {\n    return;\n  }\n\n  var subjFlatted = this.flattened || this.flatten(true);\n  var self = this;\n\n  function clipProcess() {\n    var needClipping = clipPathIn != null;\n    var needSwapSubject = false;\n    // check weather we can do simple path\n    if (needClipping) {\n      var clipFlatted = clipPathIn.flattened || clipPathIn.flatten(true);\n\n      var preResult = self.preCheckForClipping(loader, clipFlatted, subjFlatted, applyTransform, false);\n      if (preResult.needCancel) {\n        return;\n      }\n\n      needClipping = preResult.needClipping;\n      needSwapSubject = preResult.needSwapSubject;\n    }\n\n    if (needClipping) {\n      var clipFlatted = clipPathIn.flattened || clipPathIn.flatten(true);\n      var clips = clipFlatted.toClipperPath(loader, false);\n      var myPath = subjFlatted.toClipperPath(loader, applyTransform);\n\n      var solution = new ClipperLib.PolyTree();\n      var cpr = new ClipperLib.Clipper();\n      cpr.AddPaths(myPath, ClipperLib.PolyType.ptSubject, true);\n      cpr.AddPaths(clips, ClipperLib.PolyType.ptClip, true);\n\n      cpr.Execute(ClipperLib.ClipType.ctIntersection, solution, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n\n      var polygons = self.getPolygonFromClipperSolution(solution);\n      return {\n        polygons: polygons,\n        appliedTransform: applyTransform,\n        needClipping: needClipping };\n\n    } else {\n      // if we use clip path directly as subject, we can not cache it, and should not apply transform to it\n      subjFlatted = !needSwapSubject ? subjFlatted : clipFlatted;\n      if (self.cached) {\n        return {\n          polygons: self.cached,\n          appliedTransform: false,\n          needClipping: needClipping,\n          subjFlatted: subjFlatted };\n\n      } else {\n        var myPath = subjFlatted.toClipperPath(loader, false);\n\n        var solution = new ClipperLib.PolyTree();\n        var cpr = new ClipperLib.Clipper();\n        cpr.AddPaths(myPath, ClipperLib.PolyType.ptSubject, true);\n        cpr.Execute(ClipperLib.ClipType.ctUnion, solution, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n        var polygons = self.getPolygonFromClipperSolution(solution);\n        if (!needSwapSubject) {\n          self.cached = polygons;\n        }\n        return {\n          polygons: polygons,\n          appliedTransform: needSwapSubject, // clipPath has already applied transform\n          needClipping: needClipping,\n          subjFlatted: subjFlatted };\n\n      }\n    }\n  }\n\n  function fillPolygon(polygon, needApplytransform, needClipping) {\n    var vertices = polygon.vertices;\n\n    if (needApplytransform) {\n      var xform = loader.getCurrentTransform();\n      var vertices1 = [];\n      for (var i = 0; i < vertices.length; i += 2) {\n        var x = loader.tx(vertices[i], vertices[i + 1], xform);\n        var y = loader.ty(vertices[i], vertices[i + 1], xform);\n        vertices1.push(x, y);\n      }\n      vertices = vertices1;\n    }\n    loader.addPolyTriangle(vertices, polygon.indices, color, dbId, layerId, false);\n\n    // do the antialias stroke here\n    if (!isFillStrokeCombo) {\n      if (needClipping || !self.isFontChar) {\n        for (var c in polygon.contours) {\n          self.strokeClipperContour(loader, polygon.contours[c], true, color, -0.5, dbId, layerId, loader.currentVpId, 0, needApplytransform);\n        }\n      } else {\n        // stroke the line with the original flatted path\n        self.strokeFlattedPath(loader, result.subjFlatted, -0.5, color, dbId, layerId, needApplytransform, 0);\n      }\n    }\n  }\n\n  var result = clipProcess();\n  if (result) {\n    result.polygons.map(function (polygon) {\n      var needApplytransform = applyTransform && !result.appliedTransform;\n      fillPolygon(polygon, needApplytransform, result.needClipping);\n    });\n  }\n};\n\n\nPath2D.prototype.toClipperPath = function (loader, applyTransform) {\n  var paths = [];\n  var path = [];\n  var segTypes = this.segTypes;\n  var segData = this.segData;\n  var segIndex = 0;\n  var xform;\n  if (applyTransform) {\n    xform = loader.getCurrentTransform();\n  }\n\n  function addPoint(path, point) {\n    if (applyTransform) {\n      var x = loader.tx(point.X, point.Y, xform);\n      var y = loader.ty(point.X, point.Y, xform);\n      point.X = x;\n      point.Y = y;\n    }\n\n    if (path.length > 0 && (path[path.length - 1].X != point.X || path[path.length - 1].Y != point.Y) || path.length == 0) {\n      path.push(point);\n    }\n  }\n\n  for (var i = 0; i < segTypes.length; i++) {\n    if (segTypes[i] == MOVETO) {\n      if (path && path.length > 1) {\n        paths.push(path);\n      }\n      path = [];\n      addPoint(path, { X: segData[segIndex++], Y: segData[segIndex++] });\n    } else if (segTypes[i] == LINETO) {\n      addPoint(path, { X: segData[segIndex++], Y: segData[segIndex++] });\n    } else if (segTypes[i] == CLOSE) {\n      path.push({ X: path[0].X, Y: path[0].Y });\n      paths.push(path);\n      path = [];\n    }\n  }\n\n  if (path && path.length > 1) {\n    paths.push(path);\n  }\n\n  return paths;\n};\n\nPath2D.prototype.hasIntersection = function (box1, box2, tolerance) {\n  return !(box1.max.x - box2.min.x <= -tolerance || // left\n  box1.max.y - box2.min.y <= -tolerance || // bottom\n  box1.min.x - box2.max.x >= tolerance || // right\n  box1.min.y - box2.max.y >= tolerance); // top\n};\n\nPath2D.prototype.preCheckForClipping = function (loader, clipFlatted, subjFlatted, applyTransform, strokeOnly) {\n  var clipBound = clipFlatted.bbox;\n  var subjBound = subjFlatted.bbox;\n\n  if (applyTransform) {\n    var xform = loader.getCurrentTransform();\n    // we need to apply transform to the subject bounds\n    subjBound = loader.transformBox(subjBound, xform, _tmpBox);\n  }\n\n  // do a simple check if two bounds has no overlap, set need cancel to true\n  if (!this.hasIntersection(clipBound, subjBound, this.precisionTolerance)) {\n    return {\n      needCancel: true };\n\n  } else if (clipFlatted.isAABB() && clipBound.containsBox(subjBound)) {\n    return {\n      needClipping: false };\n\n  } else\n  if (subjFlatted.isAABB() && subjBound.containsBox(clipBound)) {\n    // there is nothing to stroke\n    if (strokeOnly) {\n      return {\n        needCancel: true };\n\n    } else {\n      return {\n        needClipping: false,\n        needSwapSubject: true };\n\n    }\n  } else\n  {\n    return {\n      needClipping: true };\n\n  }\n};\n\nPath2D.prototype.getPolygonFromClipperSolution = function (solution) {\n  function addContour(contours, vertices, contour) {\n    for (var i = 0; i < contour.length; i++) {\n      vertices.push(contour[i].X, contour[i].Y);\n    }\n    contours.push(contour);\n  }\n\n  var exPolygons = ClipperLib.JS.PolyTreeToExPolygons(solution);\n  var polygons = exPolygons.map(function (item) {\n    var vertices = [];\n    var holeIndices = [];\n    var contours = [];\n\n    // clipper library has some defect when we use 4 thickline to construct a rectangle with border\n    // It flipped the hole and outer\n    // Add this logic to flip it back to the correct value\n    if (item.holes.length == 1 && Math.abs(ClipperLib.JS.AreaOfPolygons(item.holes)) > Math.abs(ClipperLib.JS.AreaOfPolygon(item.outer))) {\n      var temp = item.holes[0];\n      item.holes[0] = item.outer;\n      item.outer = temp;\n    }\n    addContour(contours, vertices, item.outer);\n\n    item.holes.map(function (hole) {\n      holeIndices.push(vertices.length / 2);\n      addContour(contours, vertices, hole);\n    });\n\n    var indices = Earcut(vertices, holeIndices);\n    return {\n      vertices: vertices,\n      indices: indices,\n      holeIndices: holeIndices,\n      contours: contours };\n\n  });\n\n  return polygons;\n};\n\n\nPath2D.prototype.msdfClipping = function (clipFlatted) {\n  var subjFlatted = this.flattened || this.flatten(true);\n  var myPath = subjFlatted.toClipperPath(null, false);\n  var clips = clipFlatted.toClipperPath(null, false);\n\n  var solution = new ClipperLib.PolyTree();\n  var cpr = new ClipperLib.Clipper();\n  cpr.AddPaths(myPath, ClipperLib.PolyType.ptSubject, true);\n  cpr.AddPaths(clips, ClipperLib.PolyType.ptClip, true);\n\n  cpr.Execute(ClipperLib.ClipType.ctIntersection, solution, ClipperLib.PolyFillType.pftEvenOdd, ClipperLib.PolyFillType.pftEvenOdd);\n\n  return this.getPolygonFromClipperSolution(solution);\n};","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\nimport { TOL } from \"./fuzzy-math\";\nimport { QuadTree } from \"./quad-tree\";\nimport { Point } from \"./poly2tri\";\n\nexport var UniquePointList = /*#__PURE__*/function () {\n\n  function UniquePointList(bbox, precisionTolerance, VertexConstructor, useQuadTree) {_classCallCheck(this, UniquePointList);\n\n    this.bbox = bbox;\n    this.boxSize = this.bbox.size().length();\n\n    if (typeof precisionTolerance === \"number\") {\n      //Input is in model units, e.g. if model is in feet,\n      //precision tolerance has to be in feet\n      this.precisionTolerance = precisionTolerance;\n      this.scale = 1.0 / this.precisionTolerance;\n    } else {\n      this.precisionTolerance = TOL * this.boxSize;\n      this.scale = 1.0 / this.precisionTolerance;\n    }\n\n    this.precisionToleranceSq = this.precisionTolerance * this.precisionTolerance;\n\n    this.snapBaseX = this.bbox.min.x; ///- 0.5 * this.precisionTolerance;\n    this.snapBaseY = this.bbox.min.y; //- 0.5 * this.precisionTolerance;\n\n\n    this.pts = [];\n    this.xymap = new Map();\n\n    if (useQuadTree)\n    this.quadTreeVerts = new QuadTree(bbox.min.x, bbox.min.y, bbox.max.x, bbox.max.y, precisionTolerance);\n\n    this.vertexConstructor = VertexConstructor;\n  }_createClass(UniquePointList, [{ key: \"findOrAddPoint\", value: function findOrAddPoint(\n\n    px, py, dbIds) {\n\n      //Snap the vertex to our desired granularity\n      var x = 0 | /*Math.round*/(px - this.snapBaseX) * this.scale;\n      var y = 0 | /*Math.round*/(py - this.snapBaseY) * this.scale;\n\n      //Find the nearest snapped vertex or create new\n      var v;\n      var minDist = Infinity;\n      //Look in the 9 square area surrounding the vertex\n      for (var i = x - 1; i <= x + 1; i++) {\n        var mx = this.xymap.get(i);\n        if (!mx)\n        continue;\n\n        for (var j = y - 1; j <= y + 1; j++) {\n          var tmp = mx.get(j);\n          if (!tmp)\n          continue;\n\n          var dist = (tmp.x - px) * (tmp.x - px) + (tmp.y - py) * (tmp.y - py);\n\n          if (dist < minDist) {\n            v = tmp;\n            minDist = dist;\n          }\n        }\n      }\n\n      if (minDist > this.precisionToleranceSq)\n      v = undefined;\n\n      if (v === undefined) {\n        var _mx = this.xymap.get(x);\n\n        if (!_mx) {\n          _mx = new Map();\n          this.xymap.set(x, _mx);\n        }\n\n        v = this.vertexConstructor ? new this.vertexConstructor(px, py) : new Point(px, py);\n        _mx.set(y, v);\n        v.id = this.pts.length;\n        this.pts.push(v);\n\n        if (this.quadTreeVerts)\n        this.quadTreeVerts.addItem(v);\n      }\n\n      //Remember the source object that's adding this vertex\n      if (typeof dbIds !== \"undefined\") {\n        if (typeof dbIds === \"number\") {\n          if (v.dbIds.indexOf(dbIds) === -1)\n          v.dbIds.push(dbIds);\n        } else if (dbIds) {\n          for (var _i = 0; _i < dbIds.length; _i++) {\n            var dbId = dbIds[_i];\n            if (v.dbIds.indexOf(dbId) === -1)\n            v.dbIds.push(dbId);\n          }\n        }\n        v.dbIdsChanged = true;\n      }\n\n      return v;\n    } }, { key: \"forEach\", value: function forEach(\n\n\n    f) {\n      this.pts.forEach(f);\n    } }, { key: \"delete\", value: function _delete(\n\n    v) {\n      this.pts[v.id] = undefined;\n\n      if (this.quadTreeVerts)\n      this.quadTreeVerts.deleteItem(v);\n    }\n\n    //filters out null entries from the point list\n  }, { key: \"compact\", value: function compact() {\n\n      var pts = [];\n\n      for (var i = 0, len = this.pts.length; i < len; i++) {\n        var v = this.pts[i];\n        if (!v)\n        continue;\n\n        v.oldid = v.id;\n        v.id = pts.length;\n        pts.push(v);\n      }\n\n      this.pts = pts;\n\n    } }, { key: \"enumInBox\", value: function enumInBox(\n\n    minx, miny, maxx, maxy, f) {\n      this.quadTreeVerts.enumInBox(minx, miny, maxx, maxy, f);\n    } }]);return UniquePointList;}();","function _typeof(obj) {\"@babel/helpers - typeof\";if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}(function (f) {if ((typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) === \"object\" && typeof module !== \"undefined\") {module.exports = f();} else if (typeof define === \"function\" && define.amd) {define([], f);} else {var g;if (typeof window !== \"undefined\") {g = window;} else if (typeof global !== \"undefined\") {g = global;} else if (typeof self !== \"undefined\") {g = self;} else {g = this;}g.poly2tri = f();}})(function () {var define, module, exports;return function e(t, n, r) {function s(o, u) {if (!n[o]) {if (!t[o]) {var a = typeof require == \"function\" && require;if (!u && a) return a(o, !0);if (i) return i(o, !0);var f = new Error(\"Cannot find module '\" + o + \"'\");throw f.code = \"MODULE_NOT_FOUND\", f;}var l = n[o] = { exports: {} };t[o][0].call(l.exports, function (e) {var n = t[o][1][e];return s(n ? n : e);}, l, l.exports, e, t, n, r);}return n[o].exports;}var i = typeof require == \"function\" && require;for (var o = 0; o < r.length; o++) {s(r[o]);}return s;}({ 1: [function (require, module, exports) {\n      module.exports = { \"version\": \"1.5.0\" };\n    }, {}], 2: [function (require, module, exports) {\n      /*\r\n                                                      * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n                                                      * http://code.google.com/p/poly2tri/\r\n                                                      * \r\n                                                      * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n                                                      * https://github.com/r3mi/poly2tri.js\r\n                                                      * \r\n                                                      * All rights reserved.\r\n                                                      * \r\n                                                      * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n                                                      */\n\n      /* jshint maxcomplexity:11 */\n\n      \"use strict\";\n\n\n      /*\r\n                     * Note\r\n                     * ====\r\n                     * the structure of this JavaScript version of poly2tri intentionally follows\r\n                     * as closely as possible the structure of the reference C++ version, to make it \r\n                     * easier to keep the 2 versions in sync.\r\n                     */\n\n\n      // -------------------------------------------------------------------------Node\n\n      /**\r\n       * Advancing front node\r\n       * @constructor\r\n       * @private\r\n       * @struct\r\n       * @param {!XY} p - Point\r\n       * @param {Triangle=} t triangle (optional)\r\n       */\n      var Node = function Node(p, t) {\n        /** @type {XY} */\n        this.point = p;\n\n        /** @type {Triangle|null} */\n        this.triangle = t || null;\n\n        /** @type {Node|null} */\n        this.next = null;\n        /** @type {Node|null} */\n        this.prev = null;\n\n        /** @type {number} */\n        this.value = p.x;\n      };\n\n      // ---------------------------------------------------------------AdvancingFront\n      /**\r\n       * @constructor\r\n       * @private\r\n       * @struct\r\n       * @param {Node} head\r\n       * @param {Node} tail\r\n       */\n      var AdvancingFront = function AdvancingFront(head, tail) {\n        /** @type {Node} */\n        this.head_ = head;\n        /** @type {Node} */\n        this.tail_ = tail;\n        /** @type {Node} */\n        this.search_node_ = head;\n      };\n\n      /** @return {Node} */\n      AdvancingFront.prototype.head = function () {\n        return this.head_;\n      };\n\n      /** @param {Node} node */\n      AdvancingFront.prototype.setHead = function (node) {\n        this.head_ = node;\n      };\n\n      /** @return {Node} */\n      AdvancingFront.prototype.tail = function () {\n        return this.tail_;\n      };\n\n      /** @param {Node} node */\n      AdvancingFront.prototype.setTail = function (node) {\n        this.tail_ = node;\n      };\n\n      /** @return {Node} */\n      AdvancingFront.prototype.search = function () {\n        return this.search_node_;\n      };\n\n      /** @param {Node} node */\n      AdvancingFront.prototype.setSearch = function (node) {\n        this.search_node_ = node;\n      };\n\n      /** @return {Node} */\n      AdvancingFront.prototype.findSearchNode = function () /*x*/{\n        // TODO: implement BST index\n        return this.search_node_;\n      };\n\n      /**\r\n          * @param {number} x value\r\n          * @return {Node}\r\n          */\n      AdvancingFront.prototype.locateNode = function (x) {\n        var node = this.search_node_;\n\n        /* jshint boss:true */\n        if (x < node.value) {\n          while (node = node.prev) {\n            if (x >= node.value) {\n              this.search_node_ = node;\n              return node;\n            }\n          }\n        } else {\n          while (node = node.next) {\n            if (x < node.value) {\n              this.search_node_ = node.prev;\n              return node.prev;\n            }\n          }\n        }\n        return null;\n      };\n\n      /**\r\n          * @param {!XY} point - Point\r\n          * @return {Node}\r\n          */\n      AdvancingFront.prototype.locatePoint = function (point) {\n        var px = point.x;\n        var node = this.findSearchNode(px);\n        var nx = node.point.x;\n\n        if (px === nx) {\n          // Here we are comparing point references, not values\n          if (point !== node.point) {\n            // We might have two nodes with same x value for a short time\n            if (point === node.prev.point) {\n              node = node.prev;\n            } else if (point === node.next.point) {\n              node = node.next;\n            } else {\n              throw new Error('poly2tri Invalid AdvancingFront.locatePoint() call');\n            }\n          }\n        } else if (px < nx) {\n          /* jshint boss:true */\n          while (node = node.prev) {\n            if (point === node.point) {\n              break;\n            }\n          }\n        } else {\n          while (node = node.next) {\n            if (point === node.point) {\n              break;\n            }\n          }\n        }\n\n        if (node) {\n          this.search_node_ = node;\n        }\n        return node;\n      };\n\n\n      // ----------------------------------------------------------------------Exports\n\n      module.exports = AdvancingFront;\n      module.exports.Node = Node;\n\n\n    }, {}], 3: [function (require, module, exports) {\n      /*\r\n                                                      * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n                                                      * http://code.google.com/p/poly2tri/\r\n                                                      *\r\n                                                      * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n                                                      * https://github.com/r3mi/poly2tri.js\r\n                                                      *\r\n                                                      * All rights reserved.\r\n                                                      *\r\n                                                      * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n                                                      */\n\n      \"use strict\";\n\n      /*\r\n                     * Function added in the JavaScript version (was not present in the c++ version)\r\n                     */\n\n      /**\r\n                         * assert and throw an exception.\r\n                         *\r\n                         * @private\r\n                         * @param {boolean} condition   the condition which is asserted\r\n                         * @param {string} message      the message which is display is condition is falsy\r\n                         */\n      function assert(condition, message) {\n        if (!condition) {\n          throw new Error(message || \"Assert Failed\");\n        }\n      }\n      module.exports = assert;\n\n\n\n    }, {}], 4: [function (require, module, exports) {\n      /*\r\n                                                      * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n                                                      * http://code.google.com/p/poly2tri/\r\n                                                      * \r\n                                                      * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n                                                      * https://github.com/r3mi/poly2tri.js\r\n                                                      * \r\n                                                      * All rights reserved.\r\n                                                      * \r\n                                                      * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n                                                      */\n\n      \"use strict\";\n\n\n      /*\r\n                     * Note\r\n                     * ====\r\n                     * the structure of this JavaScript version of poly2tri intentionally follows\r\n                     * as closely as possible the structure of the reference C++ version, to make it \r\n                     * easier to keep the 2 versions in sync.\r\n                     */\n\n      var xy = require('./xy');\n\n      // ------------------------------------------------------------------------Point\n      /**\r\n       * Construct a point\r\n       * @example\r\n       *      var point = new poly2tri.Point(150, 150);\r\n       * @public\r\n       * @constructor\r\n       * @struct\r\n       * @param {number=} x    coordinate (0 if undefined)\r\n       * @param {number=} y    coordinate (0 if undefined)\r\n       */\n      var Point = function Point(x, y) {\n        /**\r\n                                         * @type {number}\r\n                                         * @expose\r\n                                         */\n        this.x = +x || 0;\n        /**\r\n                           * @type {number}\r\n                           * @expose\r\n                           */\n        this.y = +y || 0;\n\n        // All extra fields added to Point are prefixed with _p2t_\n        // to avoid collisions if custom Point class is used.\n\n        /**\r\n         * The edges this point constitutes an upper ending point\r\n         * @private\r\n         * @type {Array.<Edge>}\r\n         */\n        this._p2t_edge_list = null;\n      };\n\n      /**\r\n          * For pretty printing\r\n          * @example\r\n          *      \"p=\" + new poly2tri.Point(5,42)\r\n          *      // → \"p=(5;42)\"\r\n          * @returns {string} <code>\"(x;y)\"</code>\r\n          */\n      Point.prototype.toString = function () {\n        return xy.toStringBase(this);\n      };\n\n      /**\r\n          * JSON output, only coordinates\r\n          * @example\r\n          *      JSON.stringify(new poly2tri.Point(1,2))\r\n          *      // → '{\"x\":1,\"y\":2}'\r\n          */\n      Point.prototype.toJSON = function () {\n        return { x: this.x, y: this.y };\n      };\n\n      /**\r\n          * Creates a copy of this Point object.\r\n          * @return {Point} new cloned point\r\n          */\n      Point.prototype.clone = function () {\n        return new Point(this.x, this.y);\n      };\n\n      /**\r\n          * Set this Point instance to the origo. <code>(0; 0)</code>\r\n          * @return {Point} this (for chaining)\r\n          */\n      Point.prototype.set_zero = function () {\n        this.x = 0.0;\n        this.y = 0.0;\n        return this; // for chaining\n      };\n\n      /**\r\n          * Set the coordinates of this instance.\r\n          * @param {number} x   coordinate\r\n          * @param {number} y   coordinate\r\n          * @return {Point} this (for chaining)\r\n          */\n      Point.prototype.set = function (x, y) {\n        this.x = +x || 0;\n        this.y = +y || 0;\n        return this; // for chaining\n      };\n\n      /**\r\n          * Negate this Point instance. (component-wise)\r\n          * @return {Point} this (for chaining)\r\n          */\n      Point.prototype.negate = function () {\n        this.x = -this.x;\n        this.y = -this.y;\n        return this; // for chaining\n      };\n\n      /**\r\n          * Add another Point object to this instance. (component-wise)\r\n          * @param {!Point} n - Point object.\r\n          * @return {Point} this (for chaining)\r\n          */\n      Point.prototype.add = function (n) {\n        this.x += n.x;\n        this.y += n.y;\n        return this; // for chaining\n      };\n\n      /**\r\n          * Subtract this Point instance with another point given. (component-wise)\r\n          * @param {!Point} n - Point object.\r\n          * @return {Point} this (for chaining)\r\n          */\n      Point.prototype.sub = function (n) {\n        this.x -= n.x;\n        this.y -= n.y;\n        return this; // for chaining\n      };\n\n      /**\r\n          * Multiply this Point instance by a scalar. (component-wise)\r\n          * @param {number} s   scalar.\r\n          * @return {Point} this (for chaining)\r\n          */\n      Point.prototype.mul = function (s) {\n        this.x *= s;\n        this.y *= s;\n        return this; // for chaining\n      };\n\n      /**\r\n          * Return the distance of this Point instance from the origo.\r\n          * @return {number} distance\r\n          */\n      Point.prototype.length = function () {\n        return Math.sqrt(this.x * this.x + this.y * this.y);\n      };\n\n      /**\r\n          * Normalize this Point instance (as a vector).\r\n          * @return {number} The original distance of this instance from the origo.\r\n          */\n      Point.prototype.normalize = function () {\n        var len = this.length();\n        this.x /= len;\n        this.y /= len;\n        return len;\n      };\n\n      /**\r\n          * Test this Point object with another for equality.\r\n          * @param {!XY} p - any \"Point like\" object with {x,y}\r\n          * @return {boolean} <code>true</code> if same x and y coordinates, <code>false</code> otherwise.\r\n          */\n      Point.prototype.equals = function (p) {\n        return this.x === p.x && this.y === p.y;\n      };\n\n\n      // -----------------------------------------------------Point (\"static\" methods)\n\n      /**\r\n       * Negate a point component-wise and return the result as a new Point object.\r\n       * @param {!XY} p - any \"Point like\" object with {x,y}\r\n       * @return {Point} the resulting Point object.\r\n       */\n      Point.negate = function (p) {\n        return new Point(-p.x, -p.y);\n      };\n\n      /**\r\n          * Add two points component-wise and return the result as a new Point object.\r\n          * @param {!XY} a - any \"Point like\" object with {x,y}\r\n          * @param {!XY} b - any \"Point like\" object with {x,y}\r\n          * @return {Point} the resulting Point object.\r\n          */\n      Point.add = function (a, b) {\n        return new Point(a.x + b.x, a.y + b.y);\n      };\n\n      /**\r\n          * Subtract two points component-wise and return the result as a new Point object.\r\n          * @param {!XY} a - any \"Point like\" object with {x,y}\r\n          * @param {!XY} b - any \"Point like\" object with {x,y}\r\n          * @return {Point} the resulting Point object.\r\n          */\n      Point.sub = function (a, b) {\n        return new Point(a.x - b.x, a.y - b.y);\n      };\n\n      /**\r\n          * Multiply a point by a scalar and return the result as a new Point object.\r\n          * @param {number} s - the scalar\r\n          * @param {!XY} p - any \"Point like\" object with {x,y}\r\n          * @return {Point} the resulting Point object.\r\n          */\n      Point.mul = function (s, p) {\n        return new Point(s * p.x, s * p.y);\n      };\n\n      /**\r\n          * Perform the cross product on either two points (this produces a scalar)\r\n          * or a point and a scalar (this produces a point).\r\n          * This function requires two parameters, either may be a Point object or a\r\n          * number.\r\n          * @param  {XY|number} a - Point object or scalar.\r\n          * @param  {XY|number} b - Point object or scalar.\r\n          * @return {Point|number} a Point object or a number, depending on the parameters.\r\n          */\n      Point.cross = function (a, b) {\n        if (typeof a === 'number') {\n          if (typeof b === 'number') {\n            return a * b;\n          } else {\n            return new Point(-a * b.y, a * b.x);\n          }\n        } else {\n          if (typeof b === 'number') {\n            return new Point(b * a.y, -b * a.x);\n          } else {\n            return a.x * b.y - a.y * b.x;\n          }\n        }\n      };\n\n\n      // -----------------------------------------------------------------\"Point-Like\"\n      /*\r\n       * The following functions operate on \"Point\" or any \"Point like\" object \r\n       * with {x,y} (duck typing).\r\n       */\n\n      Point.toString = xy.toString;\n      Point.compare = xy.compare;\n      Point.cmp = xy.compare; // backward compatibility\n      Point.equals = xy.equals;\n\n      /**\r\n                                 * Peform the dot product on two vectors.\r\n                                 * @public\r\n                                 * @param {!XY} a - any \"Point like\" object with {x,y}\r\n                                 * @param {!XY} b - any \"Point like\" object with {x,y}\r\n                                 * @return {number} The dot product\r\n                                 */\n      Point.dot = function (a, b) {\n        return a.x * b.x + a.y * b.y;\n      };\n\n\n      // ---------------------------------------------------------Exports (public API)\n\n      module.exports = Point;\n\n    }, { \"./xy\": 11 }], 5: [function (require, module, exports) {\n      /*\r\n                                                                  * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n                                                                  * http://code.google.com/p/poly2tri/\r\n                                                                  * \r\n                                                                  * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n                                                                  * https://github.com/r3mi/poly2tri.js\r\n                                                                  * \r\n                                                                  * All rights reserved.\r\n                                                                  * \r\n                                                                  * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n                                                                  */\n\n      \"use strict\";\n\n      /*\r\n                     * Class added in the JavaScript version (was not present in the c++ version)\r\n                     */\n\n      var xy = require('./xy');\n\n      /**\r\n                                 * Custom exception class to indicate invalid Point values\r\n                                 * @constructor\r\n                                 * @public\r\n                                 * @extends Error\r\n                                 * @struct\r\n                                 * @param {string=} message - error message\r\n                                 * @param {Array.<XY>=} points - invalid points\r\n                                 */\n      var PointError = function PointError(message, points) {\n        this.name = \"PointError\";\n        /**\r\n                                   * Invalid points\r\n                                   * @public\r\n                                   * @type {Array.<XY>}\r\n                                   */\n        this.points = points = points || [];\n        /**\r\n                                              * Error message\r\n                                              * @public\r\n                                              * @type {string}\r\n                                              */\n        this.message = message || \"Invalid Points!\";\n        for (var i = 0; i < points.length; i++) {\n          this.message += \" \" + xy.toString(points[i]);\n        }\n      };\n      PointError.prototype = new Error();\n      PointError.prototype.constructor = PointError;\n\n\n      module.exports = PointError;\n\n    }, { \"./xy\": 11 }], 6: [function (require, module, exports) {\n      (function (global) {\n        /*\r\n                           * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n                           * http://code.google.com/p/poly2tri/\r\n                           * \r\n                           * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n                           * https://github.com/r3mi/poly2tri.js\r\n                           *\r\n                           * All rights reserved.\r\n                           *\r\n                           * Redistribution and use in source and binary forms, with or without modification,\r\n                           * are permitted provided that the following conditions are met:\r\n                           *\r\n                           * * Redistributions of source code must retain the above copyright notice,\r\n                           *   this list of conditions and the following disclaimer.\r\n                           * * Redistributions in binary form must reproduce the above copyright notice,\r\n                           *   this list of conditions and the following disclaimer in the documentation\r\n                           *   and/or other materials provided with the distribution.\r\n                           * * Neither the name of Poly2Tri nor the names of its contributors may be\r\n                           *   used to endorse or promote products derived from this software without specific\r\n                           *   prior written permission.\r\n                           *\r\n                           * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\r\n                           * \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\r\n                           * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\r\n                           * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR\r\n                           * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,\r\n                           * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,\r\n                           * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR\r\n                           * PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF\r\n                           * LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\r\n                           * NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\r\n                           * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n                           */\n\n        \"use strict\";\n\n        /**\r\n                       * Public API for poly2tri.js\r\n                       * @module poly2tri\r\n                       */\n\n\n        /**\r\n                           * If you are not using a module system (e.g. CommonJS, RequireJS), you can access this library\r\n                           * as a global variable <code>poly2tri</code> i.e. <code>window.poly2tri</code> in a browser.\r\n                           * @name poly2tri\r\n                           * @global\r\n                           * @public\r\n                           * @type {module:poly2tri}\r\n                           */\n        var previousPoly2tri = global.poly2tri;\n        /**\r\n                                                 * For Browser + &lt;script&gt; :\r\n                                                 * reverts the {@linkcode poly2tri} global object to its previous value,\r\n                                                 * and returns a reference to the instance called.\r\n                                                 *\r\n                                                 * @example\r\n                                                 *              var p = poly2tri.noConflict();\r\n                                                 * @public\r\n                                                 * @return {module:poly2tri} instance called\r\n                                                 */\n        // (this feature is not automatically provided by browserify).\n        exports.noConflict = function () {\n          global.poly2tri = previousPoly2tri;\n          return exports;\n        };\n\n        /**\r\n            * poly2tri library version\r\n            * @public\r\n            * @const {string}\r\n            */\n        exports.VERSION = require('../dist/version.json').version;\n\n        /**\r\n                                                                    * Exports the {@linkcode PointError} class.\r\n                                                                    * @public\r\n                                                                    * @typedef {PointError} module:poly2tri.PointError\r\n                                                                    * @function\r\n                                                                    */\n        exports.PointError = require('./pointerror');\n        /**\r\n                                                       * Exports the {@linkcode Point} class.\r\n                                                       * @public\r\n                                                       * @typedef {Point} module:poly2tri.Point\r\n                                                       * @function\r\n                                                       */\n        exports.Point = require('./point');\n        /**\r\n                                             * Exports the {@linkcode Triangle} class.\r\n                                             * @public\r\n                                             * @typedef {Triangle} module:poly2tri.Triangle\r\n                                             * @function\r\n                                             */\n        exports.Triangle = require('./triangle');\n        /**\r\n                                                   * Exports the {@linkcode SweepContext} class.\r\n                                                   * @public\r\n                                                   * @typedef {SweepContext} module:poly2tri.SweepContext\r\n                                                   * @function\r\n                                                   */\n        exports.SweepContext = require('./sweepcontext');\n\n\n        // Backward compatibility\n        var sweep = require('./sweep');\n        /**\r\n                                         * @function\r\n                                         * @deprecated use {@linkcode SweepContext#triangulate} instead\r\n                                         */\n        exports.triangulate = sweep.triangulate;\n        /**\r\n                                                  * @deprecated use {@linkcode SweepContext#triangulate} instead\r\n                                                  * @property {function} Triangulate - use {@linkcode SweepContext#triangulate} instead\r\n                                                  */\n        exports.sweep = { Triangulate: sweep.triangulate };\n\n      }).call(this, typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {});\n    }, { \"../dist/version.json\": 1, \"./point\": 4, \"./pointerror\": 5, \"./sweep\": 7, \"./sweepcontext\": 8, \"./triangle\": 9 }], 7: [function (require, module, exports) {\n      /*\r\n                                                                                                                                                                      * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n                                                                                                                                                                      * http://code.google.com/p/poly2tri/\r\n                                                                                                                                                                      * \r\n                                                                                                                                                                      * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n                                                                                                                                                                      * https://github.com/r3mi/poly2tri.js\r\n                                                                                                                                                                      * \r\n                                                                                                                                                                      * All rights reserved.\r\n                                                                                                                                                                      * \r\n                                                                                                                                                                      * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n                                                                                                                                                                      */\n\n      /* jshint latedef:nofunc, maxcomplexity:9 */\n\n      \"use strict\";\n\n      /**\r\n                     * This 'Sweep' module is present in order to keep this JavaScript version\r\n                     * as close as possible to the reference C++ version, even though almost all\r\n                     * functions could be declared as methods on the {@linkcode module:sweepcontext~SweepContext} object.\r\n                     * @module\r\n                     * @private\r\n                     */\n\n      /*\r\n                         * Note\r\n                         * ====\r\n                         * the structure of this JavaScript version of poly2tri intentionally follows\r\n                         * as closely as possible the structure of the reference C++ version, to make it \r\n                         * easier to keep the 2 versions in sync.\r\n                         */\n\n      var assert = require('./assert');\n      var PointError = require('./pointerror');\n      var Triangle = require('./triangle');\n      var Node = require('./advancingfront').Node;\n\n\n      // ------------------------------------------------------------------------utils\n\n      var utils = require('./utils');\n\n      /** @const */\n      var EPSILON = utils.EPSILON;\n\n      /** @const */\n      var Orientation = utils.Orientation;\n      /** @const */\n      var orient2d = utils.orient2d;\n      /** @const */\n      var inScanArea = utils.inScanArea;\n      /** @const */\n      var isAngleObtuse = utils.isAngleObtuse;\n\n\n      // ------------------------------------------------------------------------Sweep\n\n      /**\r\n       * Triangulate the polygon with holes and Steiner points.\r\n       * Do this AFTER you've added the polyline, holes, and Steiner points\r\n       * @private\r\n       * @param {!SweepContext} tcx - SweepContext object\r\n       */\n      function triangulate(tcx) {\n        tcx.initTriangulation();\n        tcx.createAdvancingFront();\n        // Sweep points; build mesh\n        sweepPoints(tcx);\n        // Clean up\n        finalizationPolygon(tcx);\n      }\n\n      /**\r\n         * Start sweeping the Y-sorted point set from bottom to top\r\n         * @param {!SweepContext} tcx - SweepContext object\r\n         */\n      function sweepPoints(tcx) {\n        var i,len = tcx.pointCount();\n        for (i = 1; i < len; ++i) {\n          var point = tcx.getPoint(i);\n          var node = pointEvent(tcx, point);\n          var edges = point._p2t_edge_list;\n          for (var j = 0; edges && j < edges.length; ++j) {\n            edgeEventByEdge(tcx, edges[j], node);\n          }\n        }\n      }\n\n      /**\r\n         * @param {!SweepContext} tcx - SweepContext object\r\n         */\n      function finalizationPolygon(tcx) {\n        // Get an Internal triangle to start with\n        var t = tcx.front().head().next.triangle;\n        var p = tcx.front().head().next.point;\n        while (!t.getConstrainedEdgeCW(p)) {\n          t = t.neighborCCW(p);\n        }\n\n        // Collect interior triangles constrained by edges\n        tcx.meshClean(t);\n      }\n\n      /**\r\n         * Find closes node to the left of the new point and\r\n         * create a new triangle. If needed new holes and basins\r\n         * will be filled to.\r\n         * @param {!SweepContext} tcx - SweepContext object\r\n         * @param {!XY} point   Point\r\n         */\n      function pointEvent(tcx, point) {\n        var node = tcx.locateNode(point);\n        var new_node = newFrontTriangle(tcx, point, node);\n\n        // Only need to check +epsilon since point never have smaller\n        // x value than node due to how we fetch nodes from the front\n        if (point.x <= node.point.x + EPSILON) {\n          fill(tcx, node);\n        }\n\n        //tcx.AddNode(new_node);\n\n        fillAdvancingFront(tcx, new_node);\n        return new_node;\n      }\n\n      function edgeEventByEdge(tcx, edge, node) {\n        tcx.edge_event.constrained_edge = edge;\n        tcx.edge_event.right = edge.p.x > edge.q.x;\n\n        if (isEdgeSideOfTriangle(node.triangle, edge.p, edge.q)) {\n          return;\n        }\n\n        // For now we will do all needed filling\n        // TODO: integrate with flip process might give some better performance\n        //       but for now this avoid the issue with cases that needs both flips and fills\n        fillEdgeEvent(tcx, edge, node);\n        edgeEventByPoints(tcx, edge.p, edge.q, node.triangle, edge.q);\n      }\n\n      function edgeEventByPoints(tcx, ep, eq, triangle, point) {\n        if (isEdgeSideOfTriangle(triangle, ep, eq)) {\n          return;\n        }\n\n        var p1 = triangle.pointCCW(point);\n        var o1 = orient2d(eq, p1, ep);\n        if (o1 === Orientation.COLLINEAR) {\n          // TODO integrate here changes from C++ version\n          // (C++ repo revision 09880a869095 dated March 8, 2011)\n          throw new PointError('poly2tri EdgeEvent: Collinear not supported!', [eq, p1, ep]);\n        }\n\n        var p2 = triangle.pointCW(point);\n        var o2 = orient2d(eq, p2, ep);\n        if (o2 === Orientation.COLLINEAR) {\n          // TODO integrate here changes from C++ version\n          // (C++ repo revision 09880a869095 dated March 8, 2011)\n          throw new PointError('poly2tri EdgeEvent: Collinear not supported!', [eq, p2, ep]);\n        }\n\n        if (o1 === o2) {\n          // Need to decide if we are rotating CW or CCW to get to a triangle\n          // that will cross edge\n          if (o1 === Orientation.CW) {\n            triangle = triangle.neighborCCW(point);\n          } else {\n            triangle = triangle.neighborCW(point);\n          }\n          edgeEventByPoints(tcx, ep, eq, triangle, point);\n        } else {\n          // This triangle crosses constraint so lets flippin start!\n          flipEdgeEvent(tcx, ep, eq, triangle, point);\n        }\n      }\n\n      function isEdgeSideOfTriangle(triangle, ep, eq) {\n        var index = triangle.edgeIndex(ep, eq);\n        if (index !== -1) {\n          triangle.markConstrainedEdgeByIndex(index);\n          var t = triangle.getNeighbor(index);\n          if (t) {\n            t.markConstrainedEdgeByPoints(ep, eq);\n          }\n          return true;\n        }\n        return false;\n      }\n\n      /**\r\n         * Creates a new front triangle and legalize it\r\n         * @param {!SweepContext} tcx - SweepContext object\r\n         */\n      function newFrontTriangle(tcx, point, node) {\n        var triangle = new Triangle(point, node.point, node.next.point);\n\n        triangle.markNeighbor(node.triangle);\n        tcx.addToMap(triangle);\n\n        var new_node = new Node(point);\n        new_node.next = node.next;\n        new_node.prev = node;\n        node.next.prev = new_node;\n        node.next = new_node;\n\n        if (!legalize(tcx, triangle)) {\n          tcx.mapTriangleToNodes(triangle);\n        }\n\n        return new_node;\n      }\n\n      /**\r\n         * Adds a triangle to the advancing front to fill a hole.\r\n         * @param {!SweepContext} tcx - SweepContext object\r\n         * @param node - middle node, that is the bottom of the hole\r\n         */\n      function fill(tcx, node) {\n        var triangle = new Triangle(node.prev.point, node.point, node.next.point);\n\n        // TODO: should copy the constrained_edge value from neighbor triangles\n        //       for now constrained_edge values are copied during the legalize\n        triangle.markNeighbor(node.prev.triangle);\n        triangle.markNeighbor(node.triangle);\n\n        tcx.addToMap(triangle);\n\n        // Update the advancing front\n        node.prev.next = node.next;\n        node.next.prev = node.prev;\n\n\n        // If it was legalized the triangle has already been mapped\n        if (!legalize(tcx, triangle)) {\n          tcx.mapTriangleToNodes(triangle);\n        }\n\n        //tcx.removeNode(node);\n      }\n\n      /**\r\n         * Fills holes in the Advancing Front\r\n         * @param {!SweepContext} tcx - SweepContext object\r\n         */\n      function fillAdvancingFront(tcx, n) {\n        // Fill right holes\n        var node = n.next;\n        while (node.next) {\n          // TODO integrate here changes from C++ version\n          // (C++ repo revision acf81f1f1764 dated April 7, 2012)\n          if (isAngleObtuse(node.point, node.next.point, node.prev.point)) {\n            break;\n          }\n          fill(tcx, node);\n          node = node.next;\n        }\n\n        // Fill left holes\n        node = n.prev;\n        while (node.prev) {\n          // TODO integrate here changes from C++ version\n          // (C++ repo revision acf81f1f1764 dated April 7, 2012)\n          if (isAngleObtuse(node.point, node.next.point, node.prev.point)) {\n            break;\n          }\n          fill(tcx, node);\n          node = node.prev;\n        }\n\n        // Fill right basins\n        if (n.next && n.next.next) {\n          if (isBasinAngleRight(n)) {\n            fillBasin(tcx, n);\n          }\n        }\n      }\n\n      /**\r\n         * The basin angle is decided against the horizontal line [1,0].\r\n         * @param {Node} node\r\n         * @return {boolean} true if angle < 3*π/4\r\n         */\n      function isBasinAngleRight(node) {\n        var ax = node.point.x - node.next.next.point.x;\n        var ay = node.point.y - node.next.next.point.y;\n        assert(ay >= 0, \"unordered y\");\n        return ax >= 0 || Math.abs(ax) < ay;\n      }\n\n      /**\r\n         * Returns true if triangle was legalized\r\n         * @param {!SweepContext} tcx - SweepContext object\r\n         * @return {boolean}\r\n         */\n      function legalize(tcx, t) {\n        // To legalize a triangle we start by finding if any of the three edges\n        // violate the Delaunay condition\n        for (var i = 0; i < 3; ++i) {\n          if (t.delaunay_edge[i]) {\n            continue;\n          }\n          var ot = t.getNeighbor(i);\n          if (ot) {\n            var p = t.getPoint(i);\n            var op = ot.oppositePoint(t, p);\n            var oi = ot.index(op);\n\n            // If this is a Constrained Edge or a Delaunay Edge(only during recursive legalization)\n            // then we should not try to legalize\n            if (ot.constrained_edge[oi] || ot.delaunay_edge[oi]) {\n              t.constrained_edge[i] = ot.constrained_edge[oi];\n              continue;\n            }\n\n            var inside = inCircle(p, t.pointCCW(p), t.pointCW(p), op);\n            if (inside) {\n              // Lets mark this shared edge as Delaunay\n              t.delaunay_edge[i] = true;\n              ot.delaunay_edge[oi] = true;\n\n              // Lets rotate shared edge one vertex CW to legalize it\n              rotateTrianglePair(t, p, ot, op);\n\n              // We now got one valid Delaunay Edge shared by two triangles\n              // This gives us 4 new edges to check for Delaunay\n\n              // Make sure that triangle to node mapping is done only one time for a specific triangle\n              var not_legalized = !legalize(tcx, t);\n              if (not_legalized) {\n                tcx.mapTriangleToNodes(t);\n              }\n\n              not_legalized = !legalize(tcx, ot);\n              if (not_legalized) {\n                tcx.mapTriangleToNodes(ot);\n              }\n              // Reset the Delaunay edges, since they only are valid Delaunay edges\n              // until we add a new triangle or point.\n              // XXX: need to think about this. Can these edges be tried after we\n              //      return to previous recursive level?\n              t.delaunay_edge[i] = false;\n              ot.delaunay_edge[oi] = false;\n\n              // If triangle have been legalized no need to check the other edges since\n              // the recursive legalization will handles those so we can end here.\n              return true;\n            }\n          }\n        }\n        return false;\n      }\n\n      /**\r\n         * <b>Requirement</b>:<br>\r\n         * 1. a,b and c form a triangle.<br>\r\n         * 2. a and d is know to be on opposite side of bc<br>\r\n         * <pre>\r\n         *                a\r\n         *                +\r\n         *               / \\\r\n         *              /   \\\r\n         *            b/     \\c\r\n         *            +-------+\r\n         *           /    d    \\\r\n         *          /           \\\r\n         * </pre>\r\n         * <b>Fact</b>: d has to be in area B to have a chance to be inside the circle formed by\r\n         *  a,b and c<br>\r\n         *  d is outside B if orient2d(a,b,d) or orient2d(c,a,d) is CW<br>\r\n         *  This preknowledge gives us a way to optimize the incircle test\r\n         * @param pa - triangle point, opposite d\r\n         * @param pb - triangle point\r\n         * @param pc - triangle point\r\n         * @param pd - point opposite a\r\n         * @return {boolean} true if d is inside circle, false if on circle edge\r\n         */\n      function inCircle(pa, pb, pc, pd) {\n        var adx = pa.x - pd.x;\n        var ady = pa.y - pd.y;\n        var bdx = pb.x - pd.x;\n        var bdy = pb.y - pd.y;\n\n        var adxbdy = adx * bdy;\n        var bdxady = bdx * ady;\n        var oabd = adxbdy - bdxady;\n        if (oabd <= 0) {\n          return false;\n        }\n\n        var cdx = pc.x - pd.x;\n        var cdy = pc.y - pd.y;\n\n        var cdxady = cdx * ady;\n        var adxcdy = adx * cdy;\n        var ocad = cdxady - adxcdy;\n        if (ocad <= 0) {\n          return false;\n        }\n\n        var bdxcdy = bdx * cdy;\n        var cdxbdy = cdx * bdy;\n\n        var alift = adx * adx + ady * ady;\n        var blift = bdx * bdx + bdy * bdy;\n        var clift = cdx * cdx + cdy * cdy;\n\n        var det = alift * (bdxcdy - cdxbdy) + blift * ocad + clift * oabd;\n        return det > 0;\n      }\n\n      /**\r\n         * Rotates a triangle pair one vertex CW\r\n         *<pre>\r\n         *       n2                    n2\r\n         *  P +-----+             P +-----+\r\n         *    | t  /|               |\\  t |\r\n         *    |   / |               | \\   |\r\n         *  n1|  /  |n3           n1|  \\  |n3\r\n         *    | /   |    after CW   |   \\ |\r\n         *    |/ oT |               | oT \\|\r\n         *    +-----+ oP            +-----+\r\n         *       n4                    n4\r\n         * </pre>\r\n         */\n      function rotateTrianglePair(t, p, ot, op) {\n        var n1, n2, n3, n4;\n        n1 = t.neighborCCW(p);\n        n2 = t.neighborCW(p);\n        n3 = ot.neighborCCW(op);\n        n4 = ot.neighborCW(op);\n\n        var ce1, ce2, ce3, ce4;\n        ce1 = t.getConstrainedEdgeCCW(p);\n        ce2 = t.getConstrainedEdgeCW(p);\n        ce3 = ot.getConstrainedEdgeCCW(op);\n        ce4 = ot.getConstrainedEdgeCW(op);\n\n        var de1, de2, de3, de4;\n        de1 = t.getDelaunayEdgeCCW(p);\n        de2 = t.getDelaunayEdgeCW(p);\n        de3 = ot.getDelaunayEdgeCCW(op);\n        de4 = ot.getDelaunayEdgeCW(op);\n\n        t.legalize(p, op);\n        ot.legalize(op, p);\n\n        // Remap delaunay_edge\n        ot.setDelaunayEdgeCCW(p, de1);\n        t.setDelaunayEdgeCW(p, de2);\n        t.setDelaunayEdgeCCW(op, de3);\n        ot.setDelaunayEdgeCW(op, de4);\n\n        // Remap constrained_edge\n        ot.setConstrainedEdgeCCW(p, ce1);\n        t.setConstrainedEdgeCW(p, ce2);\n        t.setConstrainedEdgeCCW(op, ce3);\n        ot.setConstrainedEdgeCW(op, ce4);\n\n        // Remap neighbors\n        // XXX: might optimize the markNeighbor by keeping track of\n        //      what side should be assigned to what neighbor after the\n        //      rotation. Now mark neighbor does lots of testing to find\n        //      the right side.\n        t.clearNeighbors();\n        ot.clearNeighbors();\n        if (n1) {\n          ot.markNeighbor(n1);\n        }\n        if (n2) {\n          t.markNeighbor(n2);\n        }\n        if (n3) {\n          t.markNeighbor(n3);\n        }\n        if (n4) {\n          ot.markNeighbor(n4);\n        }\n        t.markNeighbor(ot);\n      }\n\n      /**\r\n         * Fills a basin that has formed on the Advancing Front to the right\r\n         * of given node.<br>\r\n         * First we decide a left,bottom and right node that forms the\r\n         * boundaries of the basin. Then we do a reqursive fill.\r\n         *\r\n         * @param {!SweepContext} tcx - SweepContext object\r\n         * @param node - starting node, this or next node will be left node\r\n         */\n      function fillBasin(tcx, node) {\n        if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {\n          tcx.basin.left_node = node.next.next;\n        } else {\n          tcx.basin.left_node = node.next;\n        }\n\n        // Find the bottom and right node\n        tcx.basin.bottom_node = tcx.basin.left_node;\n        while (tcx.basin.bottom_node.next && tcx.basin.bottom_node.point.y >= tcx.basin.bottom_node.next.point.y) {\n          tcx.basin.bottom_node = tcx.basin.bottom_node.next;\n        }\n        if (tcx.basin.bottom_node === tcx.basin.left_node) {\n          // No valid basin\n          return;\n        }\n\n        tcx.basin.right_node = tcx.basin.bottom_node;\n        while (tcx.basin.right_node.next && tcx.basin.right_node.point.y < tcx.basin.right_node.next.point.y) {\n          tcx.basin.right_node = tcx.basin.right_node.next;\n        }\n        if (tcx.basin.right_node === tcx.basin.bottom_node) {\n          // No valid basins\n          return;\n        }\n\n        tcx.basin.width = tcx.basin.right_node.point.x - tcx.basin.left_node.point.x;\n        tcx.basin.left_highest = tcx.basin.left_node.point.y > tcx.basin.right_node.point.y;\n\n        fillBasinReq(tcx, tcx.basin.bottom_node);\n      }\n\n      /**\r\n         * Recursive algorithm to fill a Basin with triangles\r\n         *\r\n         * @param {!SweepContext} tcx - SweepContext object\r\n         * @param node - bottom_node\r\n         */\n      function fillBasinReq(tcx, node) {\n        // if shallow stop filling\n        if (isShallow(tcx, node)) {\n          return;\n        }\n\n        fill(tcx, node);\n\n        var o;\n        if (node.prev === tcx.basin.left_node && node.next === tcx.basin.right_node) {\n          return;\n        } else if (node.prev === tcx.basin.left_node) {\n          o = orient2d(node.point, node.next.point, node.next.next.point);\n          if (o === Orientation.CW) {\n            return;\n          }\n          node = node.next;\n        } else if (node.next === tcx.basin.right_node) {\n          o = orient2d(node.point, node.prev.point, node.prev.prev.point);\n          if (o === Orientation.CCW) {\n            return;\n          }\n          node = node.prev;\n        } else {\n          // Continue with the neighbor node with lowest Y value\n          if (node.prev.point.y < node.next.point.y) {\n            node = node.prev;\n          } else {\n            node = node.next;\n          }\n        }\n\n        fillBasinReq(tcx, node);\n      }\n\n      function isShallow(tcx, node) {\n        var height;\n        if (tcx.basin.left_highest) {\n          height = tcx.basin.left_node.point.y - node.point.y;\n        } else {\n          height = tcx.basin.right_node.point.y - node.point.y;\n        }\n\n        // if shallow stop filling\n        if (tcx.basin.width > height) {\n          return true;\n        }\n        return false;\n      }\n\n      function fillEdgeEvent(tcx, edge, node) {\n        if (tcx.edge_event.right) {\n          fillRightAboveEdgeEvent(tcx, edge, node);\n        } else {\n          fillLeftAboveEdgeEvent(tcx, edge, node);\n        }\n      }\n\n      function fillRightAboveEdgeEvent(tcx, edge, node) {\n        while (node.next.point.x < edge.p.x) {\n          // Check if next node is below the edge\n          if (orient2d(edge.q, node.next.point, edge.p) === Orientation.CCW) {\n            fillRightBelowEdgeEvent(tcx, edge, node);\n          } else {\n            node = node.next;\n          }\n        }\n      }\n\n      function fillRightBelowEdgeEvent(tcx, edge, node) {\n        if (node.point.x < edge.p.x) {\n          if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {\n            // Concave\n            fillRightConcaveEdgeEvent(tcx, edge, node);\n          } else {\n            // Convex\n            fillRightConvexEdgeEvent(tcx, edge, node);\n            // Retry this one\n            fillRightBelowEdgeEvent(tcx, edge, node);\n          }\n        }\n      }\n\n      function fillRightConcaveEdgeEvent(tcx, edge, node) {\n        fill(tcx, node.next);\n        if (node.next.point !== edge.p) {\n          // Next above or below edge?\n          if (orient2d(edge.q, node.next.point, edge.p) === Orientation.CCW) {\n            // Below\n            if (orient2d(node.point, node.next.point, node.next.next.point) === Orientation.CCW) {\n              // Next is concave\n              fillRightConcaveEdgeEvent(tcx, edge, node);\n            } else {\n              // Next is convex\n              /* jshint noempty:false */\n            }\n          }\n        }\n      }\n\n      function fillRightConvexEdgeEvent(tcx, edge, node) {\n        // Next concave or convex?\n        if (orient2d(node.next.point, node.next.next.point, node.next.next.next.point) === Orientation.CCW) {\n          // Concave\n          fillRightConcaveEdgeEvent(tcx, edge, node.next);\n        } else {\n          // Convex\n          // Next above or below edge?\n          if (orient2d(edge.q, node.next.next.point, edge.p) === Orientation.CCW) {\n            // Below\n            fillRightConvexEdgeEvent(tcx, edge, node.next);\n          } else {\n            // Above\n            /* jshint noempty:false */\n          }\n        }\n      }\n\n      function fillLeftAboveEdgeEvent(tcx, edge, node) {\n        while (node.prev.point.x > edge.p.x) {\n          // Check if next node is below the edge\n          if (orient2d(edge.q, node.prev.point, edge.p) === Orientation.CW) {\n            fillLeftBelowEdgeEvent(tcx, edge, node);\n          } else {\n            node = node.prev;\n          }\n        }\n      }\n\n      function fillLeftBelowEdgeEvent(tcx, edge, node) {\n        if (node.point.x > edge.p.x) {\n          if (orient2d(node.point, node.prev.point, node.prev.prev.point) === Orientation.CW) {\n            // Concave\n            fillLeftConcaveEdgeEvent(tcx, edge, node);\n          } else {\n            // Convex\n            fillLeftConvexEdgeEvent(tcx, edge, node);\n            // Retry this one\n            fillLeftBelowEdgeEvent(tcx, edge, node);\n          }\n        }\n      }\n\n      function fillLeftConvexEdgeEvent(tcx, edge, node) {\n        // Next concave or convex?\n        if (orient2d(node.prev.point, node.prev.prev.point, node.prev.prev.prev.point) === Orientation.CW) {\n          // Concave\n          fillLeftConcaveEdgeEvent(tcx, edge, node.prev);\n        } else {\n          // Convex\n          // Next above or below edge?\n          if (orient2d(edge.q, node.prev.prev.point, edge.p) === Orientation.CW) {\n            // Below\n            fillLeftConvexEdgeEvent(tcx, edge, node.prev);\n          } else {\n            // Above\n            /* jshint noempty:false */\n          }\n        }\n      }\n\n      function fillLeftConcaveEdgeEvent(tcx, edge, node) {\n        fill(tcx, node.prev);\n        if (node.prev.point !== edge.p) {\n          // Next above or below edge?\n          if (orient2d(edge.q, node.prev.point, edge.p) === Orientation.CW) {\n            // Below\n            if (orient2d(node.point, node.prev.point, node.prev.prev.point) === Orientation.CW) {\n              // Next is concave\n              fillLeftConcaveEdgeEvent(tcx, edge, node);\n            } else {\n              // Next is convex\n              /* jshint noempty:false */\n            }\n          }\n        }\n      }\n\n      function flipEdgeEvent(tcx, ep, eq, t, p) {\n        var ot = t.neighborAcross(p);\n        assert(ot, \"FLIP failed due to missing triangle!\");\n\n        var op = ot.oppositePoint(t, p);\n\n        // Additional check from Java version (see issue #88)\n        if (t.getConstrainedEdgeAcross(p)) {\n          var index = t.index(p);\n          throw new PointError(\"poly2tri Intersecting Constraints\",\n          [p, op, t.getPoint((index + 1) % 3), t.getPoint((index + 2) % 3)]);\n        }\n\n        if (inScanArea(p, t.pointCCW(p), t.pointCW(p), op)) {\n          // Lets rotate shared edge one vertex CW\n          rotateTrianglePair(t, p, ot, op);\n          tcx.mapTriangleToNodes(t);\n          tcx.mapTriangleToNodes(ot);\n\n          // XXX: in the original C++ code for the next 2 lines, we are\n          // comparing point values (and not pointers). In this JavaScript\n          // code, we are comparing point references (pointers). This works\n          // because we can't have 2 different points with the same values.\n          // But to be really equivalent, we should use \"Point.equals\" here.\n          if (p === eq && op === ep) {\n            if (eq === tcx.edge_event.constrained_edge.q && ep === tcx.edge_event.constrained_edge.p) {\n              t.markConstrainedEdgeByPoints(ep, eq);\n              ot.markConstrainedEdgeByPoints(ep, eq);\n              legalize(tcx, t);\n              legalize(tcx, ot);\n            } else {\n              // XXX: I think one of the triangles should be legalized here?\n              /* jshint noempty:false */\n            }\n          } else {\n            var o = orient2d(eq, op, ep);\n            t = nextFlipTriangle(tcx, o, t, ot, p, op);\n            flipEdgeEvent(tcx, ep, eq, t, p);\n          }\n        } else {\n          var newP = nextFlipPoint(ep, eq, ot, op);\n          flipScanEdgeEvent(tcx, ep, eq, t, ot, newP);\n          edgeEventByPoints(tcx, ep, eq, t, p);\n        }\n      }\n\n      /**\r\n         * After a flip we have two triangles and know that only one will still be\r\n         * intersecting the edge. So decide which to contiune with and legalize the other\r\n         *\r\n         * @param {!SweepContext} tcx - SweepContext object\r\n         * @param o - should be the result of an orient2d( eq, op, ep )\r\n         * @param t - triangle 1\r\n         * @param ot - triangle 2\r\n         * @param p - a point shared by both triangles\r\n         * @param op - another point shared by both triangles\r\n         * @return returns the triangle still intersecting the edge\r\n         */\n      function nextFlipTriangle(tcx, o, t, ot, p, op) {\n        var edge_index;\n        if (o === Orientation.CCW) {\n          // ot is not crossing edge after flip\n          edge_index = ot.edgeIndex(p, op);\n          ot.delaunay_edge[edge_index] = true;\n          legalize(tcx, ot);\n          ot.clearDelaunayEdges();\n          return t;\n        }\n\n        // t is not crossing edge after flip\n        edge_index = t.edgeIndex(p, op);\n\n        t.delaunay_edge[edge_index] = true;\n        legalize(tcx, t);\n        t.clearDelaunayEdges();\n        return ot;\n      }\n\n      /**\r\n         * When we need to traverse from one triangle to the next we need\r\n         * the point in current triangle that is the opposite point to the next\r\n         * triangle.\r\n         */\n      function nextFlipPoint(ep, eq, ot, op) {\n        var o2d = orient2d(eq, op, ep);\n        if (o2d === Orientation.CW) {\n          // Right\n          return ot.pointCCW(op);\n        } else if (o2d === Orientation.CCW) {\n          // Left\n          return ot.pointCW(op);\n        } else {\n          throw new PointError(\"poly2tri [Unsupported] nextFlipPoint: opposing point on constrained edge!\", [eq, op, ep]);\n        }\n      }\n\n      /**\r\n         * Scan part of the FlipScan algorithm<br>\r\n         * When a triangle pair isn't flippable we will scan for the next\r\n         * point that is inside the flip triangle scan area. When found\r\n         * we generate a new flipEdgeEvent\r\n         *\r\n         * @param {!SweepContext} tcx - SweepContext object\r\n         * @param ep - last point on the edge we are traversing\r\n         * @param eq - first point on the edge we are traversing\r\n         * @param {!Triangle} flip_triangle - the current triangle sharing the point eq with edge\r\n         * @param t\r\n         * @param p\r\n         */\n      function flipScanEdgeEvent(tcx, ep, eq, flip_triangle, t, p) {\n        var ot = t.neighborAcross(p);\n        assert(ot, \"FLIP failed due to missing triangle\");\n\n        var op = ot.oppositePoint(t, p);\n\n        if (inScanArea(eq, flip_triangle.pointCCW(eq), flip_triangle.pointCW(eq), op)) {\n          // flip with new edge op.eq\n          flipEdgeEvent(tcx, eq, op, ot, op);\n        } else {\n          var newP = nextFlipPoint(ep, eq, ot, op);\n          flipScanEdgeEvent(tcx, ep, eq, flip_triangle, ot, newP);\n        }\n      }\n\n\n      // ----------------------------------------------------------------------Exports\n\n      exports.triangulate = triangulate;\n\n    }, { \"./advancingfront\": 2, \"./assert\": 3, \"./pointerror\": 5, \"./triangle\": 9, \"./utils\": 10 }], 8: [function (require, module, exports) {\n      /*\r\n                                                                                                                                               * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n                                                                                                                                               * http://code.google.com/p/poly2tri/\r\n                                                                                                                                               * \r\n                                                                                                                                               * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n                                                                                                                                               * https://github.com/r3mi/poly2tri.js\r\n                                                                                                                                               * \r\n                                                                                                                                               * All rights reserved.\r\n                                                                                                                                               * \r\n                                                                                                                                               * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n                                                                                                                                               */\n\n      /* jshint maxcomplexity:6 */\n\n      \"use strict\";\n\n\n      /*\r\n                     * Note\r\n                     * ====\r\n                     * the structure of this JavaScript version of poly2tri intentionally follows\r\n                     * as closely as possible the structure of the reference C++ version, to make it \r\n                     * easier to keep the 2 versions in sync.\r\n                     */\n\n      var PointError = require('./pointerror');\n      var Point = require('./point');\n      var Triangle = require('./triangle');\n      var sweep = require('./sweep');\n      var AdvancingFront = require('./advancingfront');\n      var Node = AdvancingFront.Node;\n\n\n      // ------------------------------------------------------------------------utils\n\n      /**\r\n       * Initial triangle factor, seed triangle will extend 30% of\r\n       * PointSet width to both left and right.\r\n       * @private\r\n       * @const\r\n       */\n      var kAlpha = 0.3;\n\n\n      // -------------------------------------------------------------------------Edge\n      /**\r\n       * Represents a simple polygon's edge\r\n       * @constructor\r\n       * @struct\r\n       * @private\r\n       * @param {Point} p1\r\n       * @param {Point} p2\r\n       * @throw {PointError} if p1 is same as p2\r\n       */\n      var Edge = function Edge(p1, p2) {\n        this.p = p1;\n        this.q = p2;\n\n        if (p1.y > p2.y) {\n          this.q = p1;\n          this.p = p2;\n        } else if (p1.y === p2.y) {\n          if (p1.x > p2.x) {\n            this.q = p1;\n            this.p = p2;\n          } else if (p1.x === p2.x) {\n            throw new PointError('poly2tri Invalid Edge constructor: repeated points!', [p1]);\n          }\n        }\n\n        if (!this.q._p2t_edge_list) {\n          this.q._p2t_edge_list = [];\n        }\n        this.q._p2t_edge_list.push(this);\n      };\n\n\n      // ------------------------------------------------------------------------Basin\n      /**\r\n       * @constructor\r\n       * @struct\r\n       * @private\r\n       */\n      var Basin = function Basin() {\n        /** @type {Node} */\n        this.left_node = null;\n        /** @type {Node} */\n        this.bottom_node = null;\n        /** @type {Node} */\n        this.right_node = null;\n        /** @type {number} */\n        this.width = 0.0;\n        /** @type {boolean} */\n        this.left_highest = false;\n      };\n\n      Basin.prototype.clear = function () {\n        this.left_node = null;\n        this.bottom_node = null;\n        this.right_node = null;\n        this.width = 0.0;\n        this.left_highest = false;\n      };\n\n      // --------------------------------------------------------------------EdgeEvent\n      /**\r\n       * @constructor\r\n       * @struct\r\n       * @private\r\n       */\n      var EdgeEvent = function EdgeEvent() {\n        /** @type {Edge} */\n        this.constrained_edge = null;\n        /** @type {boolean} */\n        this.right = false;\n      };\n\n      // ----------------------------------------------------SweepContext (public API)\n      /**\r\n       * SweepContext constructor option\r\n       * @typedef {Object} SweepContextOptions\r\n       * @property {boolean=} cloneArrays - if <code>true</code>, do a shallow copy of the Array parameters\r\n       *                  (contour, holes). Points inside arrays are never copied.\r\n       *                  Default is <code>false</code> : keep a reference to the array arguments,\r\n       *                  who will be modified in place.\r\n       */\n      /**\r\n           * Constructor for the triangulation context.\r\n           * It accepts a simple polyline (with non repeating points), \r\n           * which defines the constrained edges.\r\n           *\r\n           * @example\r\n           *          var contour = [\r\n           *              new poly2tri.Point(100, 100),\r\n           *              new poly2tri.Point(100, 300),\r\n           *              new poly2tri.Point(300, 300),\r\n           *              new poly2tri.Point(300, 100)\r\n           *          ];\r\n           *          var swctx = new poly2tri.SweepContext(contour, {cloneArrays: true});\r\n           * @example\r\n           *          var contour = [{x:100, y:100}, {x:100, y:300}, {x:300, y:300}, {x:300, y:100}];\r\n           *          var swctx = new poly2tri.SweepContext(contour, {cloneArrays: true});\r\n           * @constructor\r\n           * @public\r\n           * @struct\r\n           * @param {Array.<XY>} contour - array of point objects. The points can be either {@linkcode Point} instances,\r\n           *          or any \"Point like\" custom class with <code>{x, y}</code> attributes.\r\n           * @param {SweepContextOptions=} options - constructor options\r\n           */\n      var SweepContext = function SweepContext(contour, options) {\n        options = options || {};\n        this.triangles_ = [];\n        this.map_ = [];\n        this.points_ = options.cloneArrays ? contour.slice(0) : contour;\n        this.edge_list = [];\n\n        // Bounding box of all points. Computed at the start of the triangulation, \n        // it is stored in case it is needed by the caller.\n        this.pmin_ = this.pmax_ = null;\n\n        /**\r\n                                         * Advancing front\r\n                                         * @private\r\n                                         * @type {AdvancingFront}\r\n                                         */\n        this.front_ = null;\n\n        /**\r\n                             * head point used with advancing front\r\n                             * @private\r\n                             * @type {Point}\r\n                             */\n        this.head_ = null;\n\n        /**\r\n                            * tail point used with advancing front\r\n                            * @private\r\n                            * @type {Point}\r\n                            */\n        this.tail_ = null;\n\n        /**\r\n                            * @private\r\n                            * @type {Node}\r\n                            */\n        this.af_head_ = null;\n        /**\r\n                               * @private\r\n                               * @type {Node}\r\n                               */\n        this.af_middle_ = null;\n        /**\r\n                                 * @private\r\n                                 * @type {Node}\r\n                                 */\n        this.af_tail_ = null;\n\n        this.basin = new Basin();\n        this.edge_event = new EdgeEvent();\n\n        this.initEdges(this.points_);\n      };\n\n\n      /**\r\n          * Add a hole to the constraints\r\n          * @example\r\n          *      var swctx = new poly2tri.SweepContext(contour);\r\n          *      var hole = [\r\n          *          new poly2tri.Point(200, 200),\r\n          *          new poly2tri.Point(200, 250),\r\n          *          new poly2tri.Point(250, 250)\r\n          *      ];\r\n          *      swctx.addHole(hole);\r\n          * @example\r\n          *      var swctx = new poly2tri.SweepContext(contour);\r\n          *      swctx.addHole([{x:200, y:200}, {x:200, y:250}, {x:250, y:250}]);\r\n          * @public\r\n          * @param {Array.<XY>} polyline - array of \"Point like\" objects with {x,y}\r\n          */\n      SweepContext.prototype.addHole = function (polyline) {\n        this.initEdges(polyline);\n        var i,len = polyline.length;\n        for (i = 0; i < len; i++) {\n          this.points_.push(polyline[i]);\n        }\n        return this; // for chaining\n      };\n\n      /**\r\n          * For backward compatibility\r\n          * @function\r\n          * @deprecated use {@linkcode SweepContext#addHole} instead\r\n          */\n      SweepContext.prototype.AddHole = SweepContext.prototype.addHole;\n\n\n      /**\r\n                                                                        * Add several holes to the constraints\r\n                                                                        * @example\r\n                                                                        *      var swctx = new poly2tri.SweepContext(contour);\r\n                                                                        *      var holes = [\r\n                                                                        *          [ new poly2tri.Point(200, 200), new poly2tri.Point(200, 250), new poly2tri.Point(250, 250) ],\r\n                                                                        *          [ new poly2tri.Point(300, 300), new poly2tri.Point(300, 350), new poly2tri.Point(350, 350) ]\r\n                                                                        *      ];\r\n                                                                        *      swctx.addHoles(holes);\r\n                                                                        * @example\r\n                                                                        *      var swctx = new poly2tri.SweepContext(contour);\r\n                                                                        *      var holes = [\r\n                                                                        *          [{x:200, y:200}, {x:200, y:250}, {x:250, y:250}],\r\n                                                                        *          [{x:300, y:300}, {x:300, y:350}, {x:350, y:350}]\r\n                                                                        *      ];\r\n                                                                        *      swctx.addHoles(holes);\r\n                                                                        * @public\r\n                                                                        * @param {Array.<Array.<XY>>} holes - array of array of \"Point like\" objects with {x,y}\r\n                                                                        */\n      // Method added in the JavaScript version (was not present in the c++ version)\n      SweepContext.prototype.addHoles = function (holes) {\n        var i,len = holes.length;\n        for (i = 0; i < len; i++) {\n          this.initEdges(holes[i]);\n        }\n        this.points_ = this.points_.concat.apply(this.points_, holes);\n        return this; // for chaining\n      };\n\n\n      /**\r\n          * Add a Steiner point to the constraints\r\n          * @example\r\n          *      var swctx = new poly2tri.SweepContext(contour);\r\n          *      var point = new poly2tri.Point(150, 150);\r\n          *      swctx.addPoint(point);\r\n          * @example\r\n          *      var swctx = new poly2tri.SweepContext(contour);\r\n          *      swctx.addPoint({x:150, y:150});\r\n          * @public\r\n          * @param {XY} point - any \"Point like\" object with {x,y}\r\n          */\n      SweepContext.prototype.addPoint = function (point) {\n        this.points_.push(point);\n        return this; // for chaining\n      };\n\n      /**\r\n          * For backward compatibility\r\n          * @function\r\n          * @deprecated use {@linkcode SweepContext#addPoint} instead\r\n          */\n      SweepContext.prototype.AddPoint = SweepContext.prototype.addPoint;\n\n\n      /**\r\n                                                                          * Add several Steiner points to the constraints\r\n                                                                          * @example\r\n                                                                          *      var swctx = new poly2tri.SweepContext(contour);\r\n                                                                          *      var points = [\r\n                                                                          *          new poly2tri.Point(150, 150),\r\n                                                                          *          new poly2tri.Point(200, 250),\r\n                                                                          *          new poly2tri.Point(250, 250)\r\n                                                                          *      ];\r\n                                                                          *      swctx.addPoints(points);\r\n                                                                          * @example\r\n                                                                          *      var swctx = new poly2tri.SweepContext(contour);\r\n                                                                          *      swctx.addPoints([{x:150, y:150}, {x:200, y:250}, {x:250, y:250}]);\r\n                                                                          * @public\r\n                                                                          * @param {Array.<XY>} points - array of \"Point like\" object with {x,y}\r\n                                                                          */\n      // Method added in the JavaScript version (was not present in the c++ version)\n      SweepContext.prototype.addPoints = function (points) {\n        this.points_ = this.points_.concat(points);\n        return this; // for chaining\n      };\n\n\n      /**\r\n          * Triangulate the polygon with holes and Steiner points.\r\n          * Do this AFTER you've added the polyline, holes, and Steiner points\r\n          * @example\r\n          *      var swctx = new poly2tri.SweepContext(contour);\r\n          *      swctx.triangulate();\r\n          *      var triangles = swctx.getTriangles();\r\n          * @public\r\n          */\n      // Shortcut method for sweep.triangulate(SweepContext).\n      // Method added in the JavaScript version (was not present in the c++ version)\n      SweepContext.prototype.triangulate = function () {\n        sweep.triangulate(this);\n        return this; // for chaining\n      };\n\n\n      /**\r\n          * Get the bounding box of the provided constraints (contour, holes and \r\n          * Steinter points). Warning : these values are not available if the triangulation \r\n          * has not been done yet.\r\n          * @public\r\n          * @returns {{min:Point,max:Point}} object with 'min' and 'max' Point\r\n          */\n      // Method added in the JavaScript version (was not present in the c++ version)\n      SweepContext.prototype.getBoundingBox = function () {\n        return { min: this.pmin_, max: this.pmax_ };\n      };\n\n      /**\r\n          * Get result of triangulation.\r\n          * The output triangles have vertices which are references\r\n          * to the initial input points (not copies): any custom fields in the\r\n          * initial points can be retrieved in the output triangles.\r\n          * @example\r\n          *      var swctx = new poly2tri.SweepContext(contour);\r\n          *      swctx.triangulate();\r\n          *      var triangles = swctx.getTriangles();\r\n          * @example\r\n          *      var contour = [{x:100, y:100, id:1}, {x:100, y:300, id:2}, {x:300, y:300, id:3}];\r\n          *      var swctx = new poly2tri.SweepContext(contour);\r\n          *      swctx.triangulate();\r\n          *      var triangles = swctx.getTriangles();\r\n          *      typeof triangles[0].getPoint(0).id\r\n          *      // → \"number\"\r\n          * @public\r\n          * @returns {array<Triangle>}   array of triangles\r\n          */\n      SweepContext.prototype.getTriangles = function () {\n        return this.triangles_;\n      };\n\n      /**\r\n          * For backward compatibility\r\n          * @function\r\n          * @deprecated use {@linkcode SweepContext#getTriangles} instead\r\n          */\n      SweepContext.prototype.GetTriangles = SweepContext.prototype.getTriangles;\n\n\n      // ---------------------------------------------------SweepContext (private API)\n\n      /** @private */\n      SweepContext.prototype.front = function () {\n        return this.front_;\n      };\n\n      /** @private */\n      SweepContext.prototype.pointCount = function () {\n        return this.points_.length;\n      };\n\n      /** @private */\n      SweepContext.prototype.head = function () {\n        return this.head_;\n      };\n\n      /** @private */\n      SweepContext.prototype.setHead = function (p1) {\n        this.head_ = p1;\n      };\n\n      /** @private */\n      SweepContext.prototype.tail = function () {\n        return this.tail_;\n      };\n\n      /** @private */\n      SweepContext.prototype.setTail = function (p1) {\n        this.tail_ = p1;\n      };\n\n      /** @private */\n      SweepContext.prototype.getMap = function () {\n        return this.map_;\n      };\n\n      /** @private */\n      SweepContext.prototype.initTriangulation = function () {\n        var xmax = this.points_[0].x;\n        var xmin = this.points_[0].x;\n        var ymax = this.points_[0].y;\n        var ymin = this.points_[0].y;\n\n        // Calculate bounds\n        var i,len = this.points_.length;\n        for (i = 1; i < len; i++) {\n          var p = this.points_[i];\n          /* jshint expr:true */\n          p.x > xmax && (xmax = p.x);\n          p.x < xmin && (xmin = p.x);\n          p.y > ymax && (ymax = p.y);\n          p.y < ymin && (ymin = p.y);\n        }\n        this.pmin_ = new Point(xmin, ymin);\n        this.pmax_ = new Point(xmax, ymax);\n\n        var dx = kAlpha * (xmax - xmin);\n        var dy = kAlpha * (ymax - ymin);\n        this.head_ = new Point(xmax + dx, ymin - dy);\n        this.tail_ = new Point(xmin - dx, ymin - dy);\n\n        // Sort points along y-axis\n        this.points_.sort(Point.compare);\n      };\n\n      /** @private */\n      SweepContext.prototype.initEdges = function (polyline, isOpen) {\n        var i,len = polyline.length,iEnd = isOpen ? polyline.length - 1 : polyline.length;\n        for (i = 0; i < iEnd; ++i) {\n          this.edge_list.push(new Edge(polyline[i], polyline[(i + 1) % len]));\n        }\n      };\n\n      /** @private */\n      SweepContext.prototype.getPoint = function (index) {\n        return this.points_[index];\n      };\n\n      /** @private */\n      SweepContext.prototype.addToMap = function (triangle) {\n        this.map_.push(triangle);\n      };\n\n      /** @private */\n      SweepContext.prototype.locateNode = function (point) {\n        return this.front_.locateNode(point.x);\n      };\n\n      /** @private */\n      SweepContext.prototype.createAdvancingFront = function () {\n        var head;\n        var middle;\n        var tail;\n        // Initial triangle\n        var triangle = new Triangle(this.points_[0], this.tail_, this.head_);\n\n        this.map_.push(triangle);\n\n        head = new Node(triangle.getPoint(1), triangle);\n        middle = new Node(triangle.getPoint(0), triangle);\n        tail = new Node(triangle.getPoint(2));\n\n        this.front_ = new AdvancingFront(head, tail);\n\n        head.next = middle;\n        middle.next = tail;\n        middle.prev = head;\n        tail.prev = middle;\n      };\n\n      /** @private */\n      SweepContext.prototype.removeNode = function (node) {\n        // do nothing\n        /* jshint unused:false */\n      };\n\n      /** @private */\n      SweepContext.prototype.mapTriangleToNodes = function (t) {\n        for (var i = 0; i < 3; ++i) {\n          if (!t.getNeighbor(i)) {\n            var n = this.front_.locatePoint(t.pointCW(t.getPoint(i)));\n            if (n) {\n              n.triangle = t;\n            }\n          }\n        }\n      };\n\n      /** @private */\n      SweepContext.prototype.removeFromMap = function (triangle) {\n        var i,map = this.map_,len = map.length;\n        for (i = 0; i < len; i++) {\n          if (map[i] === triangle) {\n            map.splice(i, 1);\n            break;\n          }\n        }\n      };\n\n      /**\r\n          * Do a depth first traversal to collect triangles\r\n          * @private\r\n          * @param {Triangle} triangle start\r\n          */\n      SweepContext.prototype.meshClean = function (triangle) {\n        // New implementation avoids recursive calls and use a loop instead.\n        // Cf. issues # 57, 65 and 69.\n        var triangles = [triangle],t,i;\n        /* jshint boss:true */\n        while (t = triangles.pop()) {\n          if (!t.isInterior()) {\n            t.setInterior(true);\n            this.triangles_.push(t);\n            for (i = 0; i < 3; i++) {\n              if (!t.constrained_edge[i]) {\n                triangles.push(t.getNeighbor(i));\n              }\n            }\n          }\n        }\n      };\n\n      // ----------------------------------------------------------------------Exports\n\n      module.exports = SweepContext;\n\n    }, { \"./advancingfront\": 2, \"./point\": 4, \"./pointerror\": 5, \"./sweep\": 7, \"./triangle\": 9 }], 9: [function (require, module, exports) {\n      /*\r\n                                                                                                                                             * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n                                                                                                                                             * http://code.google.com/p/poly2tri/\r\n                                                                                                                                             * \r\n                                                                                                                                             * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n                                                                                                                                             * https://github.com/r3mi/poly2tri.js\r\n                                                                                                                                             *\r\n                                                                                                                                             * All rights reserved.\r\n                                                                                                                                             * \r\n                                                                                                                                             * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n                                                                                                                                             */\n\n      /* jshint maxcomplexity:10 */\n\n      \"use strict\";\n\n\n      /*\r\n                     * Note\r\n                     * ====\r\n                     * the structure of this JavaScript version of poly2tri intentionally follows\r\n                     * as closely as possible the structure of the reference C++ version, to make it \r\n                     * easier to keep the 2 versions in sync.\r\n                     */\n\n      var xy = require(\"./xy\");\n\n\n      // ---------------------------------------------------------------------Triangle\n      /**\r\n       * Triangle class.<br>\r\n       * Triangle-based data structures are known to have better performance than\r\n       * quad-edge structures.\r\n       * See: J. Shewchuk, \"Triangle: Engineering a 2D Quality Mesh Generator and\r\n       * Delaunay Triangulator\", \"Triangulations in CGAL\"\r\n       *\r\n       * @constructor\r\n       * @struct\r\n       * @param {!XY} pa  point object with {x,y}\r\n       * @param {!XY} pb  point object with {x,y}\r\n       * @param {!XY} pc  point object with {x,y}\r\n       */\n      var Triangle = function Triangle(a, b, c) {\n        /**\r\n                                                  * Triangle points\r\n                                                  * @private\r\n                                                  * @type {Array.<XY>}\r\n                                                  */\n        this.points_ = [a, b, c];\n\n        /**\r\n                                   * Neighbor list\r\n                                   * @private\r\n                                   * @type {Array.<Triangle>}\r\n                                   */\n        this.neighbors_ = [null, null, null];\n\n        /**\r\n                                               * Has this triangle been marked as an interior triangle?\r\n                                               * @private\r\n                                               * @type {boolean}\r\n                                               */\n        this.interior_ = false;\n\n        /**\r\n                                 * Flags to determine if an edge is a Constrained edge\r\n                                 * @private\r\n                                 * @type {Array.<boolean>}\r\n                                 */\n        this.constrained_edge = [false, false, false];\n\n        /**\r\n                                                        * Flags to determine if an edge is a Delauney edge\r\n                                                        * @private\r\n                                                        * @type {Array.<boolean>}\r\n                                                        */\n        this.delaunay_edge = [false, false, false];\n      };\n\n      var p2s = xy.toString;\n      /**\r\n                              * For pretty printing ex. <code>\"[(5;42)(10;20)(21;30)]\"</code>.\r\n                              * @public\r\n                              * @return {string}\r\n                              */\n      Triangle.prototype.toString = function () {\n        return \"[\" + p2s(this.points_[0]) + p2s(this.points_[1]) + p2s(this.points_[2]) + \"]\";\n      };\n\n      /**\r\n          * Get one vertice of the triangle.\r\n          * The output triangles of a triangulation have vertices which are references\r\n          * to the initial input points (not copies): any custom fields in the\r\n          * initial points can be retrieved in the output triangles.\r\n          * @example\r\n          *      var contour = [{x:100, y:100, id:1}, {x:100, y:300, id:2}, {x:300, y:300, id:3}];\r\n          *      var swctx = new poly2tri.SweepContext(contour);\r\n          *      swctx.triangulate();\r\n          *      var triangles = swctx.getTriangles();\r\n          *      typeof triangles[0].getPoint(0).id\r\n          *      // → \"number\"\r\n          * @param {number} index - vertice index: 0, 1 or 2\r\n          * @public\r\n          * @returns {XY}\r\n          */\n      Triangle.prototype.getPoint = function (index) {\n        return this.points_[index];\n      };\n\n      /**\r\n          * For backward compatibility\r\n          * @function\r\n          * @deprecated use {@linkcode Triangle#getPoint} instead\r\n          */\n      Triangle.prototype.GetPoint = Triangle.prototype.getPoint;\n\n      /**\r\n                                                                  * Get all 3 vertices of the triangle as an array\r\n                                                                  * @public\r\n                                                                  * @return {Array.<XY>}\r\n                                                                  */\n      // Method added in the JavaScript version (was not present in the c++ version)\n      Triangle.prototype.getPoints = function () {\n        return this.points_;\n      };\n\n      /**\r\n          * @private\r\n          * @param {number} index\r\n          * @returns {?Triangle}\r\n          */\n      Triangle.prototype.getNeighbor = function (index) {\n        return this.neighbors_[index];\n      };\n\n      /**\r\n          * Test if this Triangle contains the Point object given as parameter as one of its vertices.\r\n          * Only point references are compared, not values.\r\n          * @public\r\n          * @param {XY} point - point object with {x,y}\r\n          * @return {boolean} <code>True</code> if the Point object is of the Triangle's vertices,\r\n          *         <code>false</code> otherwise.\r\n          */\n      Triangle.prototype.containsPoint = function (point) {\n        var points = this.points_;\n        // Here we are comparing point references, not values\n        return point === points[0] || point === points[1] || point === points[2];\n      };\n\n      /**\r\n          * Test if this Triangle contains the Edge object given as parameter as its\r\n          * bounding edges. Only point references are compared, not values.\r\n          * @private\r\n          * @param {Edge} edge\r\n          * @return {boolean} <code>True</code> if the Edge object is of the Triangle's bounding\r\n          *         edges, <code>false</code> otherwise.\r\n          */\n      Triangle.prototype.containsEdge = function (edge) {\n        return this.containsPoint(edge.p) && this.containsPoint(edge.q);\n      };\n\n      /**\r\n          * Test if this Triangle contains the two Point objects given as parameters among its vertices.\r\n          * Only point references are compared, not values.\r\n          * @param {XY} p1 - point object with {x,y}\r\n          * @param {XY} p2 - point object with {x,y}\r\n          * @return {boolean}\r\n          */\n      Triangle.prototype.containsPoints = function (p1, p2) {\n        return this.containsPoint(p1) && this.containsPoint(p2);\n      };\n\n      /**\r\n          * Has this triangle been marked as an interior triangle?\r\n          * @returns {boolean}\r\n          */\n      Triangle.prototype.isInterior = function () {\n        return this.interior_;\n      };\n\n      /**\r\n          * Mark this triangle as an interior triangle\r\n          * @private\r\n          * @param {boolean} interior\r\n          * @returns {Triangle} this\r\n          */\n      Triangle.prototype.setInterior = function (interior) {\n        this.interior_ = interior;\n        return this;\n      };\n\n      /**\r\n          * Update neighbor pointers.\r\n          * @private\r\n          * @param {XY} p1 - point object with {x,y}\r\n          * @param {XY} p2 - point object with {x,y}\r\n          * @param {Triangle} t Triangle object.\r\n          * @throws {Error} if can't find objects\r\n          */\n      Triangle.prototype.markNeighborPointers = function (p1, p2, t) {\n        var points = this.points_;\n        // Here we are comparing point references, not values\n        if (p1 === points[2] && p2 === points[1] || p1 === points[1] && p2 === points[2]) {\n          this.neighbors_[0] = t;\n        } else if (p1 === points[0] && p2 === points[2] || p1 === points[2] && p2 === points[0]) {\n          this.neighbors_[1] = t;\n        } else if (p1 === points[0] && p2 === points[1] || p1 === points[1] && p2 === points[0]) {\n          this.neighbors_[2] = t;\n        } else {\n          throw new Error('poly2tri Invalid Triangle.markNeighborPointers() call');\n        }\n      };\n\n      /**\r\n          * Exhaustive search to update neighbor pointers\r\n          * @private\r\n          * @param {!Triangle} t\r\n          */\n      Triangle.prototype.markNeighbor = function (t) {\n        var points = this.points_;\n        if (t.containsPoints(points[1], points[2])) {\n          this.neighbors_[0] = t;\n          t.markNeighborPointers(points[1], points[2], this);\n        } else if (t.containsPoints(points[0], points[2])) {\n          this.neighbors_[1] = t;\n          t.markNeighborPointers(points[0], points[2], this);\n        } else if (t.containsPoints(points[0], points[1])) {\n          this.neighbors_[2] = t;\n          t.markNeighborPointers(points[0], points[1], this);\n        }\n      };\n\n\n      Triangle.prototype.clearNeighbors = function () {\n        this.neighbors_[0] = null;\n        this.neighbors_[1] = null;\n        this.neighbors_[2] = null;\n      };\n\n      Triangle.prototype.clearDelaunayEdges = function () {\n        this.delaunay_edge[0] = false;\n        this.delaunay_edge[1] = false;\n        this.delaunay_edge[2] = false;\n      };\n\n      /**\r\n          * Returns the point clockwise to the given point.\r\n          * @private\r\n          * @param {XY} p - point object with {x,y}\r\n          */\n      Triangle.prototype.pointCW = function (p) {\n        var points = this.points_;\n        // Here we are comparing point references, not values\n        if (p === points[0]) {\n          return points[2];\n        } else if (p === points[1]) {\n          return points[0];\n        } else if (p === points[2]) {\n          return points[1];\n        } else {\n          return null;\n        }\n      };\n\n      /**\r\n          * Returns the point counter-clockwise to the given point.\r\n          * @private\r\n          * @param {XY} p - point object with {x,y}\r\n          */\n      Triangle.prototype.pointCCW = function (p) {\n        var points = this.points_;\n        // Here we are comparing point references, not values\n        if (p === points[0]) {\n          return points[1];\n        } else if (p === points[1]) {\n          return points[2];\n        } else if (p === points[2]) {\n          return points[0];\n        } else {\n          return null;\n        }\n      };\n\n      /**\r\n          * Returns the neighbor clockwise to given point.\r\n          * @private\r\n          * @param {XY} p - point object with {x,y}\r\n          */\n      Triangle.prototype.neighborCW = function (p) {\n        // Here we are comparing point references, not values\n        if (p === this.points_[0]) {\n          return this.neighbors_[1];\n        } else if (p === this.points_[1]) {\n          return this.neighbors_[2];\n        } else {\n          return this.neighbors_[0];\n        }\n      };\n\n      /**\r\n          * Returns the neighbor counter-clockwise to given point.\r\n          * @private\r\n          * @param {XY} p - point object with {x,y}\r\n          */\n      Triangle.prototype.neighborCCW = function (p) {\n        // Here we are comparing point references, not values\n        if (p === this.points_[0]) {\n          return this.neighbors_[2];\n        } else if (p === this.points_[1]) {\n          return this.neighbors_[0];\n        } else {\n          return this.neighbors_[1];\n        }\n      };\n\n      Triangle.prototype.getConstrainedEdgeCW = function (p) {\n        // Here we are comparing point references, not values\n        if (p === this.points_[0]) {\n          return this.constrained_edge[1];\n        } else if (p === this.points_[1]) {\n          return this.constrained_edge[2];\n        } else {\n          return this.constrained_edge[0];\n        }\n      };\n\n      Triangle.prototype.getConstrainedEdgeCCW = function (p) {\n        // Here we are comparing point references, not values\n        if (p === this.points_[0]) {\n          return this.constrained_edge[2];\n        } else if (p === this.points_[1]) {\n          return this.constrained_edge[0];\n        } else {\n          return this.constrained_edge[1];\n        }\n      };\n\n      // Additional check from Java version (see issue #88)\n      Triangle.prototype.getConstrainedEdgeAcross = function (p) {\n        // Here we are comparing point references, not values\n        if (p === this.points_[0]) {\n          return this.constrained_edge[0];\n        } else if (p === this.points_[1]) {\n          return this.constrained_edge[1];\n        } else {\n          return this.constrained_edge[2];\n        }\n      };\n\n      Triangle.prototype.setConstrainedEdgeCW = function (p, ce) {\n        // Here we are comparing point references, not values\n        if (p === this.points_[0]) {\n          this.constrained_edge[1] = ce;\n        } else if (p === this.points_[1]) {\n          this.constrained_edge[2] = ce;\n        } else {\n          this.constrained_edge[0] = ce;\n        }\n      };\n\n      Triangle.prototype.setConstrainedEdgeCCW = function (p, ce) {\n        // Here we are comparing point references, not values\n        if (p === this.points_[0]) {\n          this.constrained_edge[2] = ce;\n        } else if (p === this.points_[1]) {\n          this.constrained_edge[0] = ce;\n        } else {\n          this.constrained_edge[1] = ce;\n        }\n      };\n\n      Triangle.prototype.getDelaunayEdgeCW = function (p) {\n        // Here we are comparing point references, not values\n        if (p === this.points_[0]) {\n          return this.delaunay_edge[1];\n        } else if (p === this.points_[1]) {\n          return this.delaunay_edge[2];\n        } else {\n          return this.delaunay_edge[0];\n        }\n      };\n\n      Triangle.prototype.getDelaunayEdgeCCW = function (p) {\n        // Here we are comparing point references, not values\n        if (p === this.points_[0]) {\n          return this.delaunay_edge[2];\n        } else if (p === this.points_[1]) {\n          return this.delaunay_edge[0];\n        } else {\n          return this.delaunay_edge[1];\n        }\n      };\n\n      Triangle.prototype.setDelaunayEdgeCW = function (p, e) {\n        // Here we are comparing point references, not values\n        if (p === this.points_[0]) {\n          this.delaunay_edge[1] = e;\n        } else if (p === this.points_[1]) {\n          this.delaunay_edge[2] = e;\n        } else {\n          this.delaunay_edge[0] = e;\n        }\n      };\n\n      Triangle.prototype.setDelaunayEdgeCCW = function (p, e) {\n        // Here we are comparing point references, not values\n        if (p === this.points_[0]) {\n          this.delaunay_edge[2] = e;\n        } else if (p === this.points_[1]) {\n          this.delaunay_edge[0] = e;\n        } else {\n          this.delaunay_edge[1] = e;\n        }\n      };\n\n      /**\r\n          * The neighbor across to given point.\r\n          * @private\r\n          * @param {XY} p - point object with {x,y}\r\n          * @returns {Triangle}\r\n          */\n      Triangle.prototype.neighborAcross = function (p) {\n        // Here we are comparing point references, not values\n        if (p === this.points_[0]) {\n          return this.neighbors_[0];\n        } else if (p === this.points_[1]) {\n          return this.neighbors_[1];\n        } else {\n          return this.neighbors_[2];\n        }\n      };\n\n      /**\r\n          * @private\r\n          * @param {!Triangle} t Triangle object.\r\n          * @param {XY} p - point object with {x,y}\r\n          */\n      Triangle.prototype.oppositePoint = function (t, p) {\n        var cw = t.pointCW(p);\n        return this.pointCW(cw);\n      };\n\n      /**\r\n          * Legalize triangle by rotating clockwise around oPoint\r\n          * @private\r\n          * @param {XY} opoint - point object with {x,y}\r\n          * @param {XY} npoint - point object with {x,y}\r\n          * @throws {Error} if oPoint can not be found\r\n          */\n      Triangle.prototype.legalize = function (opoint, npoint) {\n        var points = this.points_;\n        // Here we are comparing point references, not values\n        if (opoint === points[0]) {\n          points[1] = points[0];\n          points[0] = points[2];\n          points[2] = npoint;\n        } else if (opoint === points[1]) {\n          points[2] = points[1];\n          points[1] = points[0];\n          points[0] = npoint;\n        } else if (opoint === points[2]) {\n          points[0] = points[2];\n          points[2] = points[1];\n          points[1] = npoint;\n        } else {\n          throw new Error('poly2tri Invalid Triangle.legalize() call');\n        }\n      };\n\n      /**\r\n          * Returns the index of a point in the triangle. \r\n          * The point *must* be a reference to one of the triangle's vertices.\r\n          * @private\r\n          * @param {XY} p - point object with {x,y}\r\n          * @returns {number} index 0, 1 or 2\r\n          * @throws {Error} if p can not be found\r\n          */\n      Triangle.prototype.index = function (p) {\n        var points = this.points_;\n        // Here we are comparing point references, not values\n        if (p === points[0]) {\n          return 0;\n        } else if (p === points[1]) {\n          return 1;\n        } else if (p === points[2]) {\n          return 2;\n        } else {\n          throw new Error('poly2tri Invalid Triangle.index() call');\n        }\n      };\n\n      /**\r\n          * @private\r\n          * @param {XY} p1 - point object with {x,y}\r\n          * @param {XY} p2 - point object with {x,y}\r\n          * @return {number} index 0, 1 or 2, or -1 if errror\r\n          */\n      Triangle.prototype.edgeIndex = function (p1, p2) {\n        var points = this.points_;\n        // Here we are comparing point references, not values\n        if (p1 === points[0]) {\n          if (p2 === points[1]) {\n            return 2;\n          } else if (p2 === points[2]) {\n            return 1;\n          }\n        } else if (p1 === points[1]) {\n          if (p2 === points[2]) {\n            return 0;\n          } else if (p2 === points[0]) {\n            return 2;\n          }\n        } else if (p1 === points[2]) {\n          if (p2 === points[0]) {\n            return 1;\n          } else if (p2 === points[1]) {\n            return 0;\n          }\n        }\n        return -1;\n      };\n\n      /**\r\n          * Mark an edge of this triangle as constrained.\r\n          * @private\r\n          * @param {number} index - edge index\r\n          */\n      Triangle.prototype.markConstrainedEdgeByIndex = function (index) {\n        this.constrained_edge[index] = true;\n      };\n      /**\r\n          * Mark an edge of this triangle as constrained.\r\n          * @private\r\n          * @param {Edge} edge instance\r\n          */\n      Triangle.prototype.markConstrainedEdgeByEdge = function (edge) {\n        this.markConstrainedEdgeByPoints(edge.p, edge.q);\n      };\n      /**\r\n          * Mark an edge of this triangle as constrained.\r\n          * This method takes two Point instances defining the edge of the triangle.\r\n          * @private\r\n          * @param {XY} p - point object with {x,y}\r\n          * @param {XY} q - point object with {x,y}\r\n          */\n      Triangle.prototype.markConstrainedEdgeByPoints = function (p, q) {\n        var points = this.points_;\n        // Here we are comparing point references, not values        \n        if (q === points[0] && p === points[1] || q === points[1] && p === points[0]) {\n          this.constrained_edge[2] = true;\n        } else if (q === points[0] && p === points[2] || q === points[2] && p === points[0]) {\n          this.constrained_edge[1] = true;\n        } else if (q === points[1] && p === points[2] || q === points[2] && p === points[1]) {\n          this.constrained_edge[0] = true;\n        }\n      };\n\n\n      // ---------------------------------------------------------Exports (public API)\n\n      module.exports = Triangle;\n\n    }, { \"./xy\": 11 }], 10: [function (require, module, exports) {\n      /*\r\n                                                                   * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n                                                                   * http://code.google.com/p/poly2tri/\r\n                                                                   * \r\n                                                                   * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n                                                                   * https://github.com/r3mi/poly2tri.js\r\n                                                                   * \r\n                                                                   * All rights reserved.\r\n                                                                   * \r\n                                                                   * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n                                                                   */\n\n      \"use strict\";\n\n      /**\r\n                     * Precision to detect repeated or collinear points\r\n                     * @private\r\n                     * @const {number}\r\n                     * @default\r\n                     */\n      var EPSILON = 1e-12;\n      exports.EPSILON = EPSILON;\n\n      /**\r\n                                  * @private\r\n                                  * @enum {number}\r\n                                  * @readonly\r\n                                  */\n      var Orientation = {\n        \"CW\": 1,\n        \"CCW\": -1,\n        \"COLLINEAR\": 0 };\n\n      exports.Orientation = Orientation;\n\n\n      /**\r\n                                          * Formula to calculate signed area<br>\r\n                                          * Positive if CCW<br>\r\n                                          * Negative if CW<br>\r\n                                          * 0 if collinear<br>\r\n                                          * <pre>\r\n                                          * A[P1,P2,P3]  =  (x1*y2 - y1*x2) + (x2*y3 - y2*x3) + (x3*y1 - y3*x1)\r\n                                          *              =  (x1-x3)*(y2-y3) - (y1-y3)*(x2-x3)\r\n                                          * </pre>\r\n                                          *\r\n                                          * @private\r\n                                          * @param {!XY} pa  point object with {x,y}\r\n                                          * @param {!XY} pb  point object with {x,y}\r\n                                          * @param {!XY} pc  point object with {x,y}\r\n                                          * @return {Orientation}\r\n                                          */\n      function orient2d(pa, pb, pc) {\n        var detleft = (pa.x - pc.x) * (pb.y - pc.y);\n        var detright = (pa.y - pc.y) * (pb.x - pc.x);\n        var val = detleft - detright;\n        if (val > -EPSILON && val < EPSILON) {\n          return Orientation.COLLINEAR;\n        } else if (val > 0) {\n          return Orientation.CCW;\n        } else {\n          return Orientation.CW;\n        }\n      }\n      exports.orient2d = orient2d;\n\n\n      /**\r\n                                    *\r\n                                    * @private\r\n                                    * @param {!XY} pa  point object with {x,y}\r\n                                    * @param {!XY} pb  point object with {x,y}\r\n                                    * @param {!XY} pc  point object with {x,y}\r\n                                    * @param {!XY} pd  point object with {x,y}\r\n                                    * @return {boolean}\r\n                                    */\n      function inScanArea(pa, pb, pc, pd) {\n        var oadb = (pa.x - pb.x) * (pd.y - pb.y) - (pd.x - pb.x) * (pa.y - pb.y);\n        if (oadb >= -EPSILON) {\n          return false;\n        }\n\n        var oadc = (pa.x - pc.x) * (pd.y - pc.y) - (pd.x - pc.x) * (pa.y - pc.y);\n        if (oadc <= EPSILON) {\n          return false;\n        }\n        return true;\n      }\n      exports.inScanArea = inScanArea;\n\n\n      /**\r\n                                        * Check if the angle between (pa,pb) and (pa,pc) is obtuse i.e. (angle > π/2 || angle < -π/2)\r\n                                        *\r\n                                        * @private\r\n                                        * @param {!XY} pa  point object with {x,y}\r\n                                        * @param {!XY} pb  point object with {x,y}\r\n                                        * @param {!XY} pc  point object with {x,y}\r\n                                        * @return {boolean} true if angle is obtuse\r\n                                        */\n      function isAngleObtuse(pa, pb, pc) {\n        var ax = pb.x - pa.x;\n        var ay = pb.y - pa.y;\n        var bx = pc.x - pa.x;\n        var by = pc.y - pa.y;\n        return ax * bx + ay * by < 0;\n      }\n      exports.isAngleObtuse = isAngleObtuse;\n\n\n    }, {}], 11: [function (require, module, exports) {\n      /*\r\n                                                       * Poly2Tri Copyright (c) 2009-2014, Poly2Tri Contributors\r\n                                                       * http://code.google.com/p/poly2tri/\r\n                                                       * \r\n                                                       * poly2tri.js (JavaScript port) (c) 2009-2014, Poly2Tri Contributors\r\n                                                       * https://github.com/r3mi/poly2tri.js\r\n                                                       * \r\n                                                       * All rights reserved.\r\n                                                       * \r\n                                                       * Distributed under the 3-clause BSD License, see LICENSE.txt\r\n                                                       */\n\n      \"use strict\";\n\n      /**\r\n                     * The following functions operate on \"Point\" or any \"Point like\" object with {x,y},\r\n                     * as defined by the {@link XY} type\r\n                     * ({@link http://en.wikipedia.org/wiki/Duck_typing|duck typing}).\r\n                     * @module\r\n                     * @private\r\n                     */\n\n      /**\r\n                         * poly2tri.js supports using custom point class instead of {@linkcode Point}.\r\n                         * Any \"Point like\" object with <code>{x, y}</code> attributes is supported\r\n                         * to initialize the SweepContext polylines and points\r\n                         * ({@link http://en.wikipedia.org/wiki/Duck_typing|duck typing}).\r\n                         *\r\n                         * poly2tri.js might add extra fields to the point objects when computing the\r\n                         * triangulation : they are prefixed with <code>_p2t_</code> to avoid collisions\r\n                         * with fields in the custom class.\r\n                         *\r\n                         * @example\r\n                         *      var contour = [{x:100, y:100}, {x:100, y:300}, {x:300, y:300}, {x:300, y:100}];\r\n                         *      var swctx = new poly2tri.SweepContext(contour);\r\n                         *\r\n                         * @typedef {Object} XY\r\n                         * @property {number} x - x coordinate\r\n                         * @property {number} y - y coordinate\r\n                         */\n\n\n      /**\r\n                             * Point pretty printing : prints x and y coordinates.\r\n                             * @example\r\n                             *      xy.toStringBase({x:5, y:42})\r\n                             *      // → \"(5;42)\"\r\n                             * @protected\r\n                             * @param {!XY} p - point object with {x,y}\r\n                             * @returns {string} <code>\"(x;y)\"</code>\r\n                             */\n      function toStringBase(p) {\n        return \"(\" + p.x + \";\" + p.y + \")\";\n      }\n\n      /**\r\n         * Point pretty printing. Delegates to the point's custom \"toString()\" method if exists,\r\n         * else simply prints x and y coordinates.\r\n         * @example\r\n         *      xy.toString({x:5, y:42})\r\n         *      // → \"(5;42)\"\r\n         * @example\r\n         *      xy.toString({x:5,y:42,toString:function() {return this.x+\":\"+this.y;}})\r\n         *      // → \"5:42\"\r\n         * @param {!XY} p - point object with {x,y}\r\n         * @returns {string} <code>\"(x;y)\"</code>\r\n         */\n      function toString(p) {\n        // Try a custom toString first, and fallback to own implementation if none\n        var s = p.toString();\n        return s === '[object Object]' ? toStringBase(p) : s;\n      }\n\n\n      /**\r\n         * Compare two points component-wise. Ordered by y axis first, then x axis.\r\n         * @param {!XY} a - point object with {x,y}\r\n         * @param {!XY} b - point object with {x,y}\r\n         * @return {number} <code>&lt; 0</code> if <code>a &lt; b</code>,\r\n         *         <code>&gt; 0</code> if <code>a &gt; b</code>, \r\n         *         <code>0</code> otherwise.\r\n         */\n      function compare(a, b) {\n        if (a.y === b.y) {\n          return a.x - b.x;\n        } else {\n          return a.y - b.y;\n        }\n      }\n\n      /**\r\n         * Test two Point objects for equality.\r\n         * @param {!XY} a - point object with {x,y}\r\n         * @param {!XY} b - point object with {x,y}\r\n         * @return {boolean} <code>True</code> if <code>a == b</code>, <code>false</code> otherwise.\r\n         */\n      function equals(a, b) {\n        return a.x === b.x && a.y === b.y;\n      }\n\n\n      module.exports = {\n        toString: toString,\n        toStringBase: toStringBase,\n        compare: compare,\n        equals: equals };\n\n\n    }, {}] }, {}, [6])(6);\n});","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}import { xLineBox } from \"./x-line-box\";\nimport { xBoxBox } from \"./x-box-box\";\n\n//Spatial index data structure for fast lookup of line segments or points.\n//\n// It can also be used for other kinds of items. For this, you can specify an itemHandler, which tells the quadtree \n// how to work with the items. It must provide two functions:\n//\n// itemHandler = {\n//    // Check wheter the (bbox of) this item intersects with the given one\n//    insersectsBox: function(item, xmin, ymin, xmax, ymax) {...},\n// \n//    // Set 'outPoint' to a point on or close to the item, e.g. bbox center. outPoint is a {x, y} pair.\n//    getPoint: function(item, outPoint) {...}\n//  }\n\n\n\nvar ITEMS_PER_NODE = 16;\nvar EPS = 1e-20;\nvar avp = Autodesk.Viewing.Private;\nvar logger = avp.logger;\n\nvar tmpPoint = { x: 0, y: 0 };\n\nexport var QuadTree = /*#__PURE__*/function () {\n\n  function QuadTree(minx, miny, maxx, maxy, extraDistance, itemHandler) {_classCallCheck(this, QuadTree);\n\n    this.items = [];\n    this.children = null;\n    this.itemCount = 0;\n\n    this.extraDistance = extraDistance;\n\n    this.minx = minx;\n    this.miny = miny;\n    this.maxx = maxx;\n    this.maxy = maxy;\n\n    this.itemHandler = itemHandler;\n  }_createClass(QuadTree, [{ key: \"addItem\", value: function addItem(\n\n\n    e) {\n\n      //TODO: must check if item fits inside our total bbox\n      //before adding. In such case we may have to expand the\n      //tree somehow\n\n      this.itemCount++;\n\n      if (this.children) {\n        var overlapCount = 0;\n        var whichChild = null;\n\n        for (var i = 0; i < 4; i++) {\n          if (this.children[i].intersectsItem(e)) {\n            whichChild = this.children[i];\n            overlapCount++;\n          }\n        }\n\n        if (overlapCount === 0) {\n\n        } else if (overlapCount === 1) {\n          whichChild.addItem(e);\n        } else {\n          this.items.push(e);\n        }\n\n      } else {\n        this.items.push(e);\n\n        if (this.items.length > ITEMS_PER_NODE)\n        this.subdivide();\n      }\n\n      return this.itemCount;\n    } }, { key: \"deleteItem\", value: function deleteItem(\n\n    e) {\n\n      if (!this.intersectsItem(e))\n      return 0;\n\n      if (this.items) {\n        var idx = this.items.indexOf(e);\n        if (idx >= 0) {\n          this.items.splice(idx, 1);\n          this.itemCount--;\n          return 1;\n        }\n      }\n\n      if (this.children) {\n        var deleteCount = 0;\n        var remainingItemsCount = 0;\n        for (var i = 0; i < 4; i++) {\n          deleteCount += this.children[i].deleteItem(e);\n          remainingItemsCount += this.children[i].itemCount;\n        }\n\n        if (remainingItemsCount < ITEMS_PER_NODE) {\n          //TODO: un-split the node here\n        }\n\n        if (deleteCount === 1) {\n          this.itemCount--;\n          return 1;\n        } else {\n          logger.warn(\"Did not find item to delete. Something is wrong.\", deleteCount);\n          return 0;\n        }\n      }\n\n      return 0;\n    } }, { key: \"intersectsBox\", value: function intersectsBox(\n\n    minx, miny, maxx, maxy) {\n\n      var d = this.extraDistance;\n\n      return xBoxBox(minx, miny, maxx, maxy,\n      this.minx - d, this.miny - d, this.maxx + d, this.maxy + d);\n    } }, { key: \"intersectsItem\", value: function intersectsItem(\n\n    e) {\n\n      if (this.itemHandler) {\n        return this.itemHandler.intersectsBox(e,\n        this.minx - this.extraDistance, this.miny - this.extraDistance,\n        this.maxx + this.extraDistance, this.maxy + this.extraDistance);\n\n      } else if (e.v1) {\n        //Edge\n        return xLineBox(e.v1.x, e.v1.y, e.v2.x, e.v2.y,\n        this.minx - this.extraDistance, this.miny - this.extraDistance,\n        this.maxx + this.extraDistance, this.maxy + this.extraDistance);\n      } else {\n        //Vertex\n        return this.intersectsBox(e.x, e.y, e.x, e.y);\n      }\n    } }, { key: \"findSplitPoint\", value: function findSplitPoint()\n\n    {\n      //determine split location -- we split along the\n      //midpoint of actual data inside the node\n      var xs = [];\n      var ys = [];\n\n      if (this.itemHandler) {\n        for (var i = 0; i < this.items.length; i++) {\n          this.itemHandler.getPoint(this.items[i], tmpPoint);\n          xs.push(tmpPoint.x);\n          ys.push(tmpPoint.y);\n        }\n      } else if (this.items[0].v1) {\n        for (var _i = 0; _i < this.items.length; _i++) {\n          xs.push(this.items[_i].v1.x);\n          ys.push(this.items[_i].v1.y);\n        }\n      } else {\n        for (var _i2 = 0; _i2 < this.items.length; _i2++) {\n          xs.push(this.items[_i2].x);\n          ys.push(this.items[_i2].y);\n        }\n      }\n\n      xs.sort(function (a, b) {return a - b;});\n      ys.sort(function (a, b) {return a - b;});\n\n      //Split slightly to the left of the median min point for all edge items\n      var midx = xs[0 | (xs.length + 1) / 2] - this.extraDistance - EPS;\n      var midy = ys[0 | (ys.length + 1) / 2] - this.extraDistance - EPS;\n\n      if (midx <= this.minx || midx >= this.maxx || midy <= this.miny || midy >= this.maxy) {\n        //logger.warn(\"Failed to split quad tree node. Something is wrong with the split choice.\");\n        return null;\n      }\n\n      return { midx: midx, midy: midy };\n    } }, { key: \"subdivide\", value: function subdivide()\n\n\n    {\n\n      if (this.children) {\n        logger.error(\"Attempt to subdivide already split node\");\n        return;\n      }\n\n      if (!this.items.length) {\n        logger.error(\"Attempt to subdivide empty node\");\n        return;\n      }\n\n      var minx = this.minx;\n      var miny = this.miny;\n      var maxx = this.maxx;\n      var maxy = this.maxy;\n\n      //determine split location -- we split along the\n      //midpoint of actual data inside the node\n      var split = this.findSplitPoint();\n\n      if (!split) {\n        //logger.warn(\"Failed to split node\");\n        return;\n      }var\n\n      midx = split.midx,midy = split.midy;\n\n      this.children = new Array(4);\n      this.children[0] = new QuadTree(minx, miny, midx, midy, this.extraDistance, this.itemHandler);\n      this.children[1] = new QuadTree(midx, miny, maxx, midy, this.extraDistance, this.itemHandler);\n      this.children[2] = new QuadTree(midx, midy, maxx, maxy, this.extraDistance, this.itemHandler);\n      this.children[3] = new QuadTree(minx, midy, midx, maxy, this.extraDistance, this.itemHandler);\n\n      var keepItems = [];\n\n      for (var i = 0, iEnd = this.items.length; i < iEnd; i++) {\n\n        var overlapCount = 0;\n        var whichChild = null;\n\n        for (var j = 0; j < 4; j++) {\n          if (this.children[j].intersectsItem(this.items[i])) {\n            whichChild = this.children[j];\n            overlapCount++;\n          }\n        }\n\n        if (overlapCount === 0) {\n          logger.error(\"Expected at least one overlap\");\n        } else if (overlapCount === 1) {\n          whichChild.addItem(this.items[i]);\n        } else {\n          keepItems.push(this.items[i]);\n        }\n      }\n\n      this.items = keepItems;\n    } }, { key: \"enumNearItems\", value: function enumNearItems(\n\n    e, cb) {\n\n      if (!this.intersectsItem(e))\n      return;\n\n      if (this.items) {\n        for (var i = 0; i < this.items.length; i++) {\n          cb(this.items[i]);\n        }\n      }\n\n      if (this.children) {\n        for (var _i3 = 0; _i3 < 4; _i3++) {\n          this.children[_i3].enumNearItems(e, cb);\n        }\n      }\n\n    } }, { key: \"enumInBox\", value: function enumInBox(\n\n    minx, miny, maxx, maxy, cb) {\n\n      if (!this.intersectsBox(minx, miny, maxx, maxy))\n      return;\n\n      if (this.items) {\n        for (var i = 0; i < this.items.length; i++) {\n          var e = this.items[i];\n\n          if (this.itemHandler) {\n            if (this.itemHandler.intersectsBox(e, minx, miny, maxx, maxy)) {\n              cb(e);\n            }\n          } else if (e.v1) {\n            if (xLineBox(e.v1.x, e.v1.y, e.v2.x, e.v2.y, minx, miny, maxx, maxy))\n            cb(e);\n          } else {\n            if (xBoxBox(e.x, e.y, e.x, e.y, minx, miny, maxx, maxy))\n            cb(e);\n          }\n        }\n      }\n\n      if (this.children) {\n        for (var _i4 = 0; _i4 < 4; _i4++) {\n          this.children[_i4].enumInBox(minx, miny, maxx, maxy, cb);\n        }\n      }\n\n    } }, { key: \"pointInPolygonRec\", value: function pointInPolygonRec(\n\n\n    e, x, y) {\n\n      // get the last point in the polygon\n      var vtx0X = e.v1.x;\n      var vtx0Y = e.v1.y;\n\n      // get test bit for above/below X axis\n      var yflag0 = vtx0Y >= y;\n\n      var vtx1X = e.v2.x;\n      var vtx1Y = e.v2.y;\n\n      var yflag1 = vtx1Y >= y;\n\n      // Check if endpoints straddle (are on opposite sides) of X axis\n      // (i.e. the Y's differ); if so, +X ray could intersect this edge.\n      // The old test also checked whether the endpoints are both to the\n      // right or to the left of the test point.  However, given the faster\n      // intersection point computation used below, this test was found to\n      // be a break-even proposition for most polygons and a loser for\n      // triangles (where 50% or more of the edges which survive this test\n      // will cross quadrants and so have to have the X intersection computed\n      // anyway).  I credit Joseph Samosky with inspiring me to try dropping\n      // the \"both left or both right\" part of my code.\n      if (yflag0 != yflag1)\n      {\n        // Check intersection of pgon segment with +X ray.\n        // Note if >= point's X; if so, the ray hits it.\n        // The division operation is avoided for the \">=\" test by checking\n        // the sign of the first vertex wrto the test point; idea inspired\n        // by Joseph Samosky's and Mark Haigh-Hutchinson's different\n        // polygon inclusion tests.\n        if ((vtx1Y - y) * (vtx0X - vtx1X) >=\n        (vtx1X - x) * (vtx0Y - vtx1Y) == yflag1)\n        {\n          this.pipResult = !this.pipResult;\n        }\n      }\n\n    } }, { key: \"pointInPolygon\", value: function pointInPolygon(\n\n    x, y) {var _this = this;\n\n      this.pipResult = false;\n\n      this.enumInBox(-Infinity, y, Infinity, y, function (item) {\n\n        _this.pointInPolygonRec(item, x, y);\n\n      });\n\n      return this.pipResult;\n\n    } }]);return QuadTree;}();","\nexport function xBoxBox(minx1, miny1, maxx1, maxy1,\nminx2, miny2, maxx2, maxy2) {\n\n  return minx1 <= maxx2 &&\n  miny1 <= maxy2 &&\n  maxx1 >= minx2 &&\n  maxy1 >= miny2;\n\n}","\nvar point = new THREE.Vector3();\n\nexport function xBoxPlane(plane, box) {\n\n  point.set(box.min.x, box.min.y, box.min.z); // 000\n  var d = plane.distanceToPoint(point);\n  var s = Math.sign(d);\n\n  point.set(box.min.x, box.min.y, box.max.z); // 001\n  var d2 = plane.distanceToPoint(point);\n  if (Math.sign(d2) !== s)\n  return true;\n\n  point.set(box.min.x, box.max.y, box.min.z); // 010\n  d2 = plane.distanceToPoint(point);\n  if (Math.sign(d2) !== s)\n  return true;\n\n  point.set(box.min.x, box.max.y, box.max.z); // 011\n  d2 = plane.distanceToPoint(point);\n  if (Math.sign(d2) !== s)\n  return true;\n\n  point.set(box.max.x, box.min.y, box.min.z); // 100\n  d2 = plane.distanceToPoint(point);\n  if (Math.sign(d2) !== s)\n  return true;\n\n  point.set(box.max.x, box.min.y, box.max.z); // 101\n  d2 = plane.distanceToPoint(point);\n  if (Math.sign(d2) !== s)\n  return true;\n\n  point.set(box.max.x, box.max.y, box.min.z); // 110\n  d2 = plane.distanceToPoint(point);\n  if (Math.sign(d2) !== s)\n  return true;\n\n  point.set(box.max.x, box.max.y, box.max.z); // 111\n  d2 = plane.distanceToPoint(point);\n  if (Math.sign(d2) !== s)\n  return true;\n\n  return false;\n}","\nvar INSIDE = 0; // 0000\nvar LEFT = 1; // 0001\nvar RIGHT = 2; // 0010\nvar BOTTOM = 4; // 0100\nvar TOP = 8; // 1000\n\n// Compute the bit code for a point (x, y) using the clip rectangle\n// bounded diagonally by (xmin, ymin), and (xmax, ymax)\n\nfunction ComputeOutCode(x, y, xmin, ymin, xmax, ymax)\n{\n  var code;\n\n  code = INSIDE; // initialised as being inside of [[clip window]]\n\n  if (x < xmin) // to the left of clip window\n    code |= LEFT;else\n  if (x > xmax) // to the right of clip window\n    code |= RIGHT;\n  if (y < ymin) // below the clip window\n    code |= BOTTOM;else\n  if (y > ymax) // above the clip window\n    code |= TOP;\n\n  return code;\n}\n\n// Cohen–Sutherland clipping algorithm clips a line from\n// P0 = (x0, y0) to P1 = (x1, y1) against a rectangle with\n// diagonal from (xmin, ymin) to (xmax, ymax).\nexport function xLineBox(x0, y0, x1, y1, xmin, ymin, xmax, ymax)\n{\n  // compute outcodes for P0, P1, and whatever point lies outside the clip rectangle\n  var outcode0 = ComputeOutCode(x0, y0, xmin, ymin, xmax, ymax);\n  var outcode1 = ComputeOutCode(x1, y1, xmin, ymin, xmax, ymax);\n  var accept = false;\n\n  while (true) {\n    if (!(outcode0 | outcode1)) {\n      // bitwise OR is 0: both points inside window; trivially accept and exit loop\n      accept = true;\n      break;\n    } else if (outcode0 & outcode1) {\n      // bitwise AND is not 0: both points share an outside zone (LEFT, RIGHT, TOP,\n      // or BOTTOM), so both must be outside window; exit loop (accept is false)\n      break;\n    } else {\n      // failed both tests, so calculate the line segment to clip\n      // from an outside point to an intersection with clip edge\n      var x = void 0,y = void 0;\n\n      // At least one endpoint is outside the clip rectangle; pick it.\n      var outcodeOut = outcode0 ? outcode0 : outcode1;\n\n      // Now find the intersection point;\n      // use formulas:\n      //   slope = (y1 - y0) / (x1 - x0)\n      //   x = x0 + (1 / slope) * (ym - y0), where ym is ymin or ymax\n      //   y = y0 + slope * (xm - x0), where xm is xmin or xmax\n      // No need to worry about divide-by-zero because, in each case, the\n      // outcode bit being tested guarantees the denominator is non-zero\n      if (outcodeOut & TOP) {// point is above the clip window\n        x = x0 + (x1 - x0) * (ymax - y0) / (y1 - y0);\n        y = ymax;\n      } else if (outcodeOut & BOTTOM) {// point is below the clip window\n        x = x0 + (x1 - x0) * (ymin - y0) / (y1 - y0);\n        y = ymin;\n      } else if (outcodeOut & RIGHT) {// point is to the right of clip window\n        y = y0 + (y1 - y0) * (xmax - x0) / (x1 - x0);\n        x = xmax;\n      } else if (outcodeOut & LEFT) {// point is to the left of clip window\n        y = y0 + (y1 - y0) * (xmin - x0) / (x1 - x0);\n        x = xmin;\n      }\n\n      // Now we move outside point to intersection point to clip\n      // and get ready for next pass.\n      if (outcodeOut === outcode0) {\n        x0 = x;\n        y0 = y;\n        outcode0 = ComputeOutCode(x0, y0, xmin, ymin, xmax, ymax);\n      } else {\n        x1 = x;\n        y1 = y;\n        outcode1 = ComputeOutCode(x1, y1, xmin, ymin, xmax, ymax);\n      }\n    }\n  }\n\n  return accept;\n}","\nimport { TOL } from \"./fuzzy-math\";\n\nfunction ABS(x) {\n  return Math.abs(x);\n}\n\nvar EPS = TOL;\n\nexport var ONE_INTERSECTION = 4;\nexport var OVERLAP = 5;\n\n\n//Returns true if the given point lies on and inside the given line segment\nexport function pointOnLine(x, y, e, checkInsideSegment, precisionDistance, outPt) {\n\n  if (e.length < EPS) {\n    return false;\n  }\n\n  var dot = (x - e.v1.x) * e.dx + (y - e.v1.y) * e.dy;\n\n  if (!precisionDistance)\n  precisionDistance = EPS * e.length;\n\n  var u = dot / e.length2;\n\n  if (checkInsideSegment) {\n    if (u * e.length < -precisionDistance || u * e.length > e.length + precisionDistance)\n    return false;\n  }\n\n  var lx = e.v1.x + u * e.dx;\n  var ly = e.v1.y + u * e.dy;\n\n  var len2 = (lx - x) * (lx - x) + (ly - y) * (ly - y);\n\n  if (outPt) {\n    outPt.x = lx;\n    outPt.y = ly;\n    outPt.d = Math.sqrt(len2);\n    outPt.u = u;\n  }\n\n  if (len2 < precisionDistance * precisionDistance)\n  return true;\n\n  return false;\n}\n\n\nfunction parallelLinesOverlap(e1, e2, precisionDistance) {\n\n  //Check of the segments are parallel but not on the same infinite line\n  if (!pointOnLine(e2.v1.x, e2.v1.y, e1, false, precisionDistance)) {\n    return null;\n  }\n\n  var res = {\n    status: OVERLAP,\n    e1: [],\n    e2: [] };\n\n\n  //They are on the same line. Find overlap points.\n  //TODO: There is probably a more efficient way to do this\n  var p3_seg1 = pointOnLine(e2.v1.x, e2.v1.y, e1, true, precisionDistance);\n  var p4_seg1 = pointOnLine(e2.v2.x, e2.v2.y, e1, true, precisionDistance);\n\n  //If both points of the second segment are inside the first\n  //then the reverse cannot be true...\n  if (p3_seg1 && p4_seg1) {\n    res.e1.push(e2.v1.x, e2.v1.y, e2.v2.x, e2.v2.y);\n    return res;\n  }\n\n  var p1_seg2 = pointOnLine(e1.v1.x, e1.v1.y, e2, true, precisionDistance);\n  var p2_seg2 = pointOnLine(e1.v2.x, e1.v2.y, e2, true, precisionDistance);\n\n  if (p3_seg1)\n  res.e1.push(e2.v1.x, e2.v1.y);\n  if (p4_seg1)\n  res.e1.push(e2.v2.x, e2.v2.y);\n  if (p1_seg2)\n  res.e2.push(e1.v1.x, e1.v1.y);\n  if (p2_seg2)\n  res.e2.push(e1.v2.x, e1.v2.y);\n\n  return res;\n}\n\n\n/*\r\n     Determine the intersection point of two line segments\r\n     Modified source from here:\r\n     http://www.paulbourke.net/geometry/pointlineplane/\r\n  */\nexport function segmentsIntersect(e1, e2, precisionDistance)\n{\n  var denom = e2.dy * e1.dx - e2.dx * e1.dy;\n  var numera = e2.dx * (e1.v1.y - e2.v1.y) - e2.dy * (e1.v1.x - e2.v1.x);\n  var numerb = e1.dx * (e1.v1.y - e2.v1.y) - e1.dy * (e1.v1.x - e2.v1.x);\n\n  /* Are the lines coincident? */\n  if (ABS(numera) < EPS && ABS(numerb) < EPS && ABS(denom) < EPS) {\n    return null;\n  }\n\n  /* Are the lines parallel */\n  if (ABS(denom) < EPS) {\n    /* check for overlap */\n    return parallelLinesOverlap(e1, e2, precisionDistance);\n  }\n\n  /* Is the intersection along the segments */\n  var mua = numera / denom;\n  var da = mua * e1.length;\n  if (da < -precisionDistance || da > e1.length + precisionDistance) {\n    return null;\n  }\n\n  var mub = numerb / denom;\n  var db = mub * e2.length;\n  if (db < -precisionDistance || db > e2.length + precisionDistance) {\n    return null;\n  }\n\n  var x = e1.v1.x + mua * e1.dx;\n  var y = e1.v1.y + mua * e1.dy;\n\n  return {\n    status: ONE_INTERSECTION,\n    e1: [x, y],\n    e2: [x, y] };\n\n}","\n\"use strict\";\n\n//const THREE = THREE;\nvar avp = Autodesk.Viewing.Private;\nvar VertexEnumerator = avp.VertexEnumerator;\n\nimport { isZero } from \"./fuzzy-math\";\nimport { xTrianglePlane } from \"./x-triangle-plane\";\n\n\nvar mi = new THREE.Matrix4();\nvar pi = new THREE.Plane();\n\nexport function xMeshPlane(plane, mesh, intersects) {\n\n  var geometry = mesh.geometry;\n\n  if (!geometry)\n  return;\n\n  var baseIndex = intersects.length;\n\n  var matrixWorld = mesh.matrixWorld;\n  mi.getInverse(matrixWorld);\n  pi.copy(plane).applyMatrix4(mi);\n\n  VertexEnumerator.enumMeshTriangles(geometry, function (vA, vB, vC, a, b, c) {\n\n    xTrianglePlane(pi, vA, vB, vC, a, b, c, intersects, mesh.fragId);\n\n  });\n\n  //Put the points into world space. It should actually be possible to do\n  //the entire math in object space -- but we have to check if all fragments\n  //that belong to the same dbId have the same world transform.\n  for (var i = baseIndex, iEnd = intersects.length; i < iEnd; i++) {\n    intersects[i].v1.applyMatrix4(matrixWorld);\n    intersects[i].v2.applyMatrix4(matrixWorld);\n  }\n\n}\n\n\nfunction makeRotationAxis(axis, cosa, m) {\n\n  // Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n  var c = cosa;\n  var s = Math.sqrt(1.0 - c * c);\n  var t = 1 - c;\n  var x = axis.x,y = axis.y,z = axis.z;\n  var tx = t * x,ty = t * y;\n\n  m.set(\n\n  tx * x + c, tx * y - s * z, tx * z + s * y, 0,\n  tx * y + s * z, ty * y + c, ty * z - s * x, 0,\n  tx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n  0, 0, 0, 1);\n\n\n\n}\n\n\nexport function makePlaneBasis(plane) {\n\n  //var origin = plane.coplanarPoint();\n\n  var sceneUp = new THREE.Vector3(0, 0, 1);\n  var cross = plane.normal.clone().cross(sceneUp);\n  cross = cross.normalize();\n  var dot = sceneUp.dot(plane.normal);\n\n  //We are ignoring the translation here, since\n  //we will drop the Z coord for the 2D processing steps anyway.\n  var planeBasis = new THREE.Matrix4();\n\n  if (!(isZero(cross.x) && isZero(cross.y) && isZero(cross.z))) {\n    makeRotationAxis(cross, dot, planeBasis);\n    planeBasis.elements[14] = plane.constant;\n  } else {\n    planeBasis.elements[14] = dot * plane.constant;\n  }\n\n  return planeBasis;\n}\n\n\nexport function convertToPlaneCoords(planeBasis, edges3d, bbox) {\n\n  for (var i = 0; i < edges3d.length; i++) {\n    var e = edges3d[i];\n\n    e.v1.applyMatrix4(planeBasis);\n    e.v2.applyMatrix4(planeBasis);\n\n    bbox.expandByPoint(e.v1);\n    bbox.expandByPoint(e.v2);\n  }\n}","\nimport { isZero, TOL } from \"./fuzzy-math\";\n\nvar v1 = new THREE.Vector3();\n\nexport function xPlaneSegment(plane, pt0, pt1, res1, res2) {\n\n  var direction = v1.subVectors(pt1, pt0);\n\n  var denominator = plane.normal.dot(direction);\n\n  if (isZero(denominator)) {\n\n    res1.copy(pt0);\n    res2.copy(pt1);\n\n    // line is coplanar\n    return 2;\n  }\n\n  denominator = 1.0 / denominator;\n\n  var t = -(pt0.dot(plane.normal) * denominator + plane.constant * denominator);\n\n  if (t < -TOL || t > 1 + TOL) {\n\n    return 0;\n\n  }\n\n  var pt = direction.multiplyScalar(t).add(pt0);\n\n  res1.copy(pt);\n\n  return 1;\n}","import { TOL } from \"./fuzzy-math\";\nimport { xPlaneSegment } from \"./x-plane-segment\";\n\nvar avp = Autodesk.Viewing.Private;\nvar logger = avp.logger;\n\nfunction Edge(pt1, pt2, id1From, id1To, id2From, id2To, meshId) {\n\n  this.v1 = pt1.clone();\n  this.v2 = pt2.clone();\n\n}\n\n\n\nvar res1 = new THREE.Vector3();\nvar res2 = new THREE.Vector3();\n\n// res is array containing result segments.\n// returns number of intersection point on the plane (0, 1, or 2) with the values of the points stored in the res array\nexport function xTrianglePlane(plane, pt0, pt1, pt2, i0, i1, i2, res, meshId) {\n\n  var d0 = plane.distanceToPoint(pt0);\n  var d1 = plane.distanceToPoint(pt1);\n  var d2 = plane.distanceToPoint(pt2);\n\n  // Check if all points are to one side of the plane\n  if (d0 < -TOL && d1 < -TOL && d2 < -TOL) {\n    return null;\n  }\n  if (d0 > TOL && d1 > TOL && d2 > TOL) {\n    return null;\n  }\n\n  var s0 = Math.sign(d0);\n  var s1 = Math.sign(d1);\n  var s2 = Math.sign(d2);\n\n  // Skip coplanar triangles (leave it to the neighbouring triangles to contribute their edges)\n  if (s0 === 0 && s1 === 0 && s2 === 0) {\n    return null;\n  }\n\n  var tmp1, tmp2;\n  var i1From, i1To, i2From, i2To;\n\n  //There is intersection, compute it\n  if (s0 !== s1) {\n    var numInts = xPlaneSegment(plane, pt0, pt1, res1, res2);\n    if (numInts === 2) {\n      res.push(new Edge(pt0, pt1, i0, i0, i1, i1, meshId));\n      return;\n    } else if (numInts === 1) {\n      i1From = i0;\n      i1To = i1;\n      tmp1 = res1.clone();\n    } else {\n      logger.warn(\"Unexpected zero intersections where at least one was expected\");\n    }\n  }\n\n  if (s1 !== s2) {\n    var _numInts = xPlaneSegment(plane, pt1, pt2, res1, res2);\n    if (_numInts === 2) {\n      res.push(new Edge(pt1, pt2, i1, i1, i2, i2, meshId));\n      return;\n    } else if (_numInts === 1) {\n      if (tmp1) {\n        // Avoid the singular scenario where the signs are 0, -1 and +1\n        if (res1.distanceTo(tmp1) > TOL) {\n          i2From = i1;\n          i2To = i2;\n          tmp2 = res1.clone();\n        }\n      } else\n      {\n        i1From = i1;\n        i1To = i2;\n        tmp1 = res1.clone();\n      }\n    } else {\n      logger.warn(\"Unexpected zero intersections where at least one was expected\");\n    }\n  }\n\n  if (s2 !== s0) {\n    var _numInts2 = xPlaneSegment(plane, pt2, pt0, res1, res2);\n    if (_numInts2 === 2) {\n      res.push(new Edge(pt2, pt0, i2, i2, i0, i0, meshId));\n      return;\n    } else if (_numInts2 === 1) {\n      if (tmp1) {\n        // Avoid the singular scenario where the signs are 0, -1 and +1\n        if (res1.distanceTo(tmp1) > TOL) {\n          i2From = i2;\n          i2To = i0;\n          tmp2 = res1.clone();\n        }\n      } else {\n        logger.warn(\"Unexpected single intersection point\");\n      }\n    } else {\n      logger.warn(\"Unexpected zero intersections where at least one was expected\");\n    }\n  }\n\n\n  if (tmp1 && tmp2) {\n    res.push(new Edge(tmp1, tmp2, i1From, i1To, i2From, i2To, meshId));\n  } else {\n    //logger.warn(\"Unexpected one intersection where two were expected\");\n  }\n\n}","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACllwvhlxzVA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACrjxzhxvrGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnjHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}