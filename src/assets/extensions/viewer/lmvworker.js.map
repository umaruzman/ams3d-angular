{"version":3,"file":"lmvworker.js","sources":["webpack://LMV/webpack/bootstrap","webpack://LMV/./node_modules/isomorphic-ws/browser.js","webpack://LMV/./node_modules/pako/index.js","webpack://LMV/./node_modules/pako/lib/deflate.js","webpack://LMV/./node_modules/pako/lib/inflate.js","webpack://LMV/./node_modules/pako/lib/utils/common.js","webpack://LMV/./node_modules/pako/lib/utils/strings.js","webpack://LMV/./node_modules/pako/lib/zlib/adler32.js","webpack://LMV/./node_modules/pako/lib/zlib/constants.js","webpack://LMV/./node_modules/pako/lib/zlib/crc32.js","webpack://LMV/./node_modules/pako/lib/zlib/deflate.js","webpack://LMV/./node_modules/pako/lib/zlib/gzheader.js","webpack://LMV/./node_modules/pako/lib/zlib/inffast.js","webpack://LMV/./node_modules/pako/lib/zlib/inflate.js","webpack://LMV/./node_modules/pako/lib/zlib/inftrees.js","webpack://LMV/./node_modules/pako/lib/zlib/messages.js","webpack://LMV/./node_modules/pako/lib/zlib/trees.js","webpack://LMV/./node_modules/pako/lib/zlib/zstream.js","webpack://LMV/./node_modules/pend/index.js","webpack://LMV/(webpack)/buildin/amd-options.js","webpack://LMV/(webpack)/buildin/global.js","webpack://LMV/(webpack)/buildin/module.js","webpack://LMV/./src/compat.js","webpack://LMV/./src/file-loaders/lmvtk/common/InputStream.js","webpack://LMV/./src/file-loaders/lmvtk/common/Propdb.js","webpack://LMV/./src/file-loaders/lmvtk/common/SearchUtils.js","webpack://LMV/./src/file-loaders/lmvtk/common/StringUtils.js","webpack://LMV/./src/file-loaders/lmvtk/common/SvfPlacementUtils.js","webpack://LMV/./src/file-loaders/lmvtk/common/VbUtils.js","webpack://LMV/./src/file-loaders/lmvtk/common/VertexBufferBuilder.js","webpack://LMV/./src/file-loaders/lmvtk/f2d/CheckedInputStream.js","webpack://LMV/./src/file-loaders/lmvtk/f2d/F2d.js","webpack://LMV/./src/file-loaders/lmvtk/f2d/F2dGeometry.js","webpack://LMV/./src/file-loaders/lmvtk/f2d/F2dProbe.js","webpack://LMV/./src/file-loaders/lmvtk/f2d/GeometryBuilder.js","webpack://LMV/./src/file-loaders/lmvtk/fusion/base64.js","webpack://LMV/./src/file-loaders/lmvtk/gltf/Gltf.js","webpack://LMV/./src/file-loaders/lmvtk/otg/HashStrings.js","webpack://LMV/./src/file-loaders/lmvtk/otg/LocalDbCache.js","webpack://LMV/./src/file-loaders/lmvtk/otg/OtgFragInfo.js","webpack://LMV/./src/file-loaders/lmvtk/otg/OtgGeomCodec.js","webpack://LMV/./src/file-loaders/lmvtk/otg/OtgWebSocket.js","webpack://LMV/./src/file-loaders/lmvtk/svf/Cameras.js","webpack://LMV/./src/file-loaders/lmvtk/svf/Fragments.js","webpack://LMV/./src/file-loaders/lmvtk/svf/Geoms.js","webpack://LMV/./src/file-loaders/lmvtk/svf/Instances.js","webpack://LMV/./src/file-loaders/lmvtk/svf/Lights.js","webpack://LMV/./src/file-loaders/lmvtk/svf/PackReader.js","webpack://LMV/./src/file-loaders/lmvtk/svf/Package.js","webpack://LMV/./src/file-loaders/net/ErrorCodes.js","webpack://LMV/./src/file-loaders/net/Xhr.js","webpack://LMV/./src/file-loaders/net/endpoints.js","webpack://LMV/./src/file-loaders/workers/ConsolidationWorker.js","webpack://LMV/./src/file-loaders/workers/DecompressWorker.js","webpack://LMV/./src/file-loaders/workers/F2dParseWorker.js","webpack://LMV/./src/file-loaders/workers/F2dStreamWorker.js","webpack://LMV/./src/file-loaders/workers/GeomWorker.js","webpack://LMV/./src/file-loaders/workers/MainWorker-web.js","webpack://LMV/./src/file-loaders/workers/MainWorker.js","webpack://LMV/./src/file-loaders/workers/OtgBvhWorker.js","webpack://LMV/./src/file-loaders/workers/OtgLoadWorker.js","webpack://LMV/./src/file-loaders/workers/PropWorker.js","webpack://LMV/./src/file-loaders/workers/SvfWorker.js","webpack://LMV/./src/globals.js","webpack://LMV/./src/logger/Logger.js","webpack://LMV/./src/wgs/scene/BVHBuilder.js","webpack://LMV/./src/wgs/scene/DeriveTopology.js","webpack://LMV/./src/wgs/scene/InstanceTreeStorage.js","webpack://LMV/./src/wgs/scene/LmvBox3.js","webpack://LMV/./src/wgs/scene/LmvMatrix4.js","webpack://LMV/./src/wgs/scene/LmvVector3.js","webpack://LMV/./src/wgs/scene/MeshFlags.js","webpack://LMV/./src/wgs/scene/VertexEnumerator.js","webpack://LMV/./src/wgs/scene/consolidation/GeomMergeTask.js","webpack://LMV/./thirdparty/zlib/unzip.min.js"],"sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/file-loaders/workers/MainWorker-web.js\");\n","// https://github.com/maxogden/websocket-stream/blob/48dc3ddf943e5ada668c31ccd94e9186f02fafbd/ws-fallback.js\n\nvar ws = null\n\nif (typeof WebSocket !== 'undefined') {\n  ws = WebSocket\n} else if (typeof MozWebSocket !== 'undefined') {\n  ws = MozWebSocket\n} else if (typeof global !== 'undefined') {\n  ws = global.WebSocket || global.MozWebSocket\n} else if (typeof window !== 'undefined') {\n  ws = window.WebSocket || window.MozWebSocket\n} else if (typeof self !== 'undefined') {\n  ws = self.WebSocket || self.MozWebSocket\n}\n\nmodule.exports = ws\n","// Top level file is just a mixin of submodules & constants\n'use strict';\n\nvar assign    = require('./lib/utils/common').assign;\n\nvar deflate   = require('./lib/deflate');\nvar inflate   = require('./lib/inflate');\nvar constants = require('./lib/zlib/constants');\n\nvar pako = {};\n\nassign(pako, deflate, inflate, constants);\n\nmodule.exports = pako;\n","'use strict';\n\n\nvar zlib_deflate = require('./zlib/deflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\n\nvar toString = Object.prototype.toString;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\nvar Z_NO_FLUSH      = 0;\nvar Z_FINISH        = 4;\n\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_SYNC_FLUSH    = 2;\n\nvar Z_DEFAULT_COMPRESSION = -1;\n\nvar Z_DEFAULT_STRATEGY    = 0;\n\nvar Z_DEFLATED  = 8;\n\n/* ===========================================================================*/\n\n\n/**\n * class Deflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[deflate]],\n * [[deflateRaw]] and [[gzip]].\n **/\n\n/* internal\n * Deflate.chunks -> Array\n *\n * Chunks of output data, if [[Deflate#onData]] not overridden.\n **/\n\n/**\n * Deflate.result -> Uint8Array|Array\n *\n * Compressed result, generated by default [[Deflate#onData]]\n * and [[Deflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Deflate#push]] with `Z_FINISH` / `true` param)  or if you\n * push a chunk with explicit flush (call [[Deflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Deflate.err -> Number\n *\n * Error code after deflate finished. 0 (Z_OK) on success.\n * You will not need it in real life, because deflate errors\n * are possible only on wrong options or bad `onData` / `onEnd`\n * custom handlers.\n **/\n\n/**\n * Deflate.msg -> String\n *\n * Error message, if [[Deflate.err]] != 0\n **/\n\n\n/**\n * new Deflate(options)\n * - options (Object): zlib deflate options.\n *\n * Creates new deflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `level`\n * - `windowBits`\n * - `memLevel`\n * - `strategy`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw deflate\n * - `gzip` (Boolean) - create gzip wrapper\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n * - `header` (Object) - custom header for gzip\n *   - `text` (Boolean) - true if compressed data believed to be text\n *   - `time` (Number) - modification time, unix timestamp\n *   - `os` (Number) - operation system code\n *   - `extra` (Array) - array of bytes with extra data (max 65536)\n *   - `name` (String) - file name (binary string)\n *   - `comment` (String) - comment (binary string)\n *   - `hcrc` (Boolean) - true if header crc should be added\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var deflate = new pako.Deflate({ level: 3});\n *\n * deflate.push(chunk1, false);\n * deflate.push(chunk2, true);  // true -> last chunk\n *\n * if (deflate.err) { throw new Error(deflate.err); }\n *\n * console.log(deflate.result);\n * ```\n **/\nfunction Deflate(options) {\n  if (!(this instanceof Deflate)) return new Deflate(options);\n\n  this.options = utils.assign({\n    level: Z_DEFAULT_COMPRESSION,\n    method: Z_DEFLATED,\n    chunkSize: 16384,\n    windowBits: 15,\n    memLevel: 8,\n    strategy: Z_DEFAULT_STRATEGY,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  if (opt.raw && (opt.windowBits > 0)) {\n    opt.windowBits = -opt.windowBits;\n  }\n\n  else if (opt.gzip && (opt.windowBits > 0) && (opt.windowBits < 16)) {\n    opt.windowBits += 16;\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status = zlib_deflate.deflateInit2(\n    this.strm,\n    opt.level,\n    opt.method,\n    opt.windowBits,\n    opt.memLevel,\n    opt.strategy\n  );\n\n  if (status !== Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  if (opt.header) {\n    zlib_deflate.deflateSetHeader(this.strm, opt.header);\n  }\n\n  if (opt.dictionary) {\n    var dict;\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      // If we need to compress text, change encoding to utf8.\n      dict = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      dict = new Uint8Array(opt.dictionary);\n    } else {\n      dict = opt.dictionary;\n    }\n\n    status = zlib_deflate.deflateSetDictionary(this.strm, dict);\n\n    if (status !== Z_OK) {\n      throw new Error(msg[status]);\n    }\n\n    this._dict_set = true;\n  }\n}\n\n/**\n * Deflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data. Strings will be\n *   converted to utf8 byte sequence.\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to deflate pipe, generating [[Deflate#onData]] calls with\n * new compressed chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Deflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the compression context.\n *\n * On fail call [[Deflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * array format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nDeflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var status, _mode;\n\n  if (this.ended) { return false; }\n\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? Z_FINISH : Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // If we need to compress text, change encoding to utf8.\n    strm.input = strings.string2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n    status = zlib_deflate.deflate(strm, _mode);    /* no bad return value */\n\n    if (status !== Z_STREAM_END && status !== Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n    if (strm.avail_out === 0 || (strm.avail_in === 0 && (_mode === Z_FINISH || _mode === Z_SYNC_FLUSH))) {\n      if (this.options.to === 'string') {\n        this.onData(strings.buf2binstring(utils.shrinkBuf(strm.output, strm.next_out)));\n      } else {\n        this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n      }\n    }\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== Z_STREAM_END);\n\n  // Finalize on the last chunk.\n  if (_mode === Z_FINISH) {\n    status = zlib_deflate.deflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === Z_SYNC_FLUSH) {\n    this.onEnd(Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Deflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nDeflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Deflate#onEnd(status) -> Void\n * - status (Number): deflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called once after you tell deflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nDeflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === Z_OK) {\n    if (this.options.to === 'string') {\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * deflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * Compress `data` with deflate algorithm and `options`.\n *\n * Supported options are:\n *\n * - level\n * - windowBits\n * - memLevel\n * - strategy\n * - dictionary\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be \"binary string\"\n *    (each char code [0..255])\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , data = Uint8Array([1,2,3,4,5,6,7,8,9]);\n *\n * console.log(pako.deflate(data));\n * ```\n **/\nfunction deflate(input, options) {\n  var deflator = new Deflate(options);\n\n  deflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (deflator.err) { throw deflator.msg || msg[deflator.err]; }\n\n  return deflator.result;\n}\n\n\n/**\n * deflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction deflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return deflate(input, options);\n}\n\n\n/**\n * gzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to compress.\n * - options (Object): zlib deflate options.\n *\n * The same as [[deflate]], but create gzip wrapper instead of\n * deflate one.\n **/\nfunction gzip(input, options) {\n  options = options || {};\n  options.gzip = true;\n  return deflate(input, options);\n}\n\n\nexports.Deflate = Deflate;\nexports.deflate = deflate;\nexports.deflateRaw = deflateRaw;\nexports.gzip = gzip;\n","'use strict';\n\n\nvar zlib_inflate = require('./zlib/inflate');\nvar utils        = require('./utils/common');\nvar strings      = require('./utils/strings');\nvar c            = require('./zlib/constants');\nvar msg          = require('./zlib/messages');\nvar ZStream      = require('./zlib/zstream');\nvar GZheader     = require('./zlib/gzheader');\n\nvar toString = Object.prototype.toString;\n\n/**\n * class Inflate\n *\n * Generic JS-style wrapper for zlib calls. If you don't need\n * streaming behaviour - use more simple functions: [[inflate]]\n * and [[inflateRaw]].\n **/\n\n/* internal\n * inflate.chunks -> Array\n *\n * Chunks of output data, if [[Inflate#onData]] not overridden.\n **/\n\n/**\n * Inflate.result -> Uint8Array|Array|String\n *\n * Uncompressed result, generated by default [[Inflate#onData]]\n * and [[Inflate#onEnd]] handlers. Filled after you push last chunk\n * (call [[Inflate#push]] with `Z_FINISH` / `true` param) or if you\n * push a chunk with explicit flush (call [[Inflate#push]] with\n * `Z_SYNC_FLUSH` param).\n **/\n\n/**\n * Inflate.err -> Number\n *\n * Error code after inflate finished. 0 (Z_OK) on success.\n * Should be checked if broken data possible.\n **/\n\n/**\n * Inflate.msg -> String\n *\n * Error message, if [[Inflate.err]] != 0\n **/\n\n\n/**\n * new Inflate(options)\n * - options (Object): zlib inflate options.\n *\n * Creates new inflator instance with specified params. Throws exception\n * on bad params. Supported options:\n *\n * - `windowBits`\n * - `dictionary`\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information on these.\n *\n * Additional options, for internal needs:\n *\n * - `chunkSize` - size of generated data chunks (16K by default)\n * - `raw` (Boolean) - do raw inflate\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n * By default, when no options set, autodetect deflate/gzip data format via\n * wrapper header.\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , chunk1 = Uint8Array([1,2,3,4,5,6,7,8,9])\n *   , chunk2 = Uint8Array([10,11,12,13,14,15,16,17,18,19]);\n *\n * var inflate = new pako.Inflate({ level: 3});\n *\n * inflate.push(chunk1, false);\n * inflate.push(chunk2, true);  // true -> last chunk\n *\n * if (inflate.err) { throw new Error(inflate.err); }\n *\n * console.log(inflate.result);\n * ```\n **/\nfunction Inflate(options) {\n  if (!(this instanceof Inflate)) return new Inflate(options);\n\n  this.options = utils.assign({\n    chunkSize: 16384,\n    windowBits: 0,\n    to: ''\n  }, options || {});\n\n  var opt = this.options;\n\n  // Force window size for `raw` data, if not set directly,\n  // because we have no header for autodetect.\n  if (opt.raw && (opt.windowBits >= 0) && (opt.windowBits < 16)) {\n    opt.windowBits = -opt.windowBits;\n    if (opt.windowBits === 0) { opt.windowBits = -15; }\n  }\n\n  // If `windowBits` not defined (and mode not raw) - set autodetect flag for gzip/deflate\n  if ((opt.windowBits >= 0) && (opt.windowBits < 16) &&\n      !(options && options.windowBits)) {\n    opt.windowBits += 32;\n  }\n\n  // Gzip header has no info about windows size, we can do autodetect only\n  // for deflate. So, if window size not set, force it to max when gzip possible\n  if ((opt.windowBits > 15) && (opt.windowBits < 48)) {\n    // bit 3 (16) -> gzipped data\n    // bit 4 (32) -> autodetect gzip/deflate\n    if ((opt.windowBits & 15) === 0) {\n      opt.windowBits |= 15;\n    }\n  }\n\n  this.err    = 0;      // error code, if happens (0 = Z_OK)\n  this.msg    = '';     // error message\n  this.ended  = false;  // used to avoid multiple onEnd() calls\n  this.chunks = [];     // chunks of compressed data\n\n  this.strm   = new ZStream();\n  this.strm.avail_out = 0;\n\n  var status  = zlib_inflate.inflateInit2(\n    this.strm,\n    opt.windowBits\n  );\n\n  if (status !== c.Z_OK) {\n    throw new Error(msg[status]);\n  }\n\n  this.header = new GZheader();\n\n  zlib_inflate.inflateGetHeader(this.strm, this.header);\n\n  // Setup dictionary\n  if (opt.dictionary) {\n    // Convert data if needed\n    if (typeof opt.dictionary === 'string') {\n      opt.dictionary = strings.string2buf(opt.dictionary);\n    } else if (toString.call(opt.dictionary) === '[object ArrayBuffer]') {\n      opt.dictionary = new Uint8Array(opt.dictionary);\n    }\n    if (opt.raw) { //In raw mode we need to set the dictionary early\n      status = zlib_inflate.inflateSetDictionary(this.strm, opt.dictionary);\n      if (status !== c.Z_OK) {\n        throw new Error(msg[status]);\n      }\n    }\n  }\n}\n\n/**\n * Inflate#push(data[, mode]) -> Boolean\n * - data (Uint8Array|Array|ArrayBuffer|String): input data\n * - mode (Number|Boolean): 0..6 for corresponding Z_NO_FLUSH..Z_TREE modes.\n *   See constants. Skipped or `false` means Z_NO_FLUSH, `true` means Z_FINISH.\n *\n * Sends input data to inflate pipe, generating [[Inflate#onData]] calls with\n * new output chunks. Returns `true` on success. The last data block must have\n * mode Z_FINISH (or `true`). That will flush internal pending buffers and call\n * [[Inflate#onEnd]]. For interim explicit flushes (without ending the stream) you\n * can use mode Z_SYNC_FLUSH, keeping the decompression context.\n *\n * On fail call [[Inflate#onEnd]] with error code and return false.\n *\n * We strongly recommend to use `Uint8Array` on input for best speed (output\n * format is detected automatically). Also, don't skip last param and always\n * use the same type in your code (boolean or number). That will improve JS speed.\n *\n * For regular `Array`-s make sure all elements are [0..255].\n *\n * ##### Example\n *\n * ```javascript\n * push(chunk, false); // push one of data chunks\n * ...\n * push(chunk, true);  // push last chunk\n * ```\n **/\nInflate.prototype.push = function (data, mode) {\n  var strm = this.strm;\n  var chunkSize = this.options.chunkSize;\n  var dictionary = this.options.dictionary;\n  var status, _mode;\n  var next_out_utf8, tail, utf8str;\n\n  // Flag to properly process Z_BUF_ERROR on testing inflate call\n  // when we check that all output data was flushed.\n  var allowBufError = false;\n\n  if (this.ended) { return false; }\n  _mode = (mode === ~~mode) ? mode : ((mode === true) ? c.Z_FINISH : c.Z_NO_FLUSH);\n\n  // Convert data if needed\n  if (typeof data === 'string') {\n    // Only binary strings can be decompressed on practice\n    strm.input = strings.binstring2buf(data);\n  } else if (toString.call(data) === '[object ArrayBuffer]') {\n    strm.input = new Uint8Array(data);\n  } else {\n    strm.input = data;\n  }\n\n  strm.next_in = 0;\n  strm.avail_in = strm.input.length;\n\n  do {\n    if (strm.avail_out === 0) {\n      strm.output = new utils.Buf8(chunkSize);\n      strm.next_out = 0;\n      strm.avail_out = chunkSize;\n    }\n\n    status = zlib_inflate.inflate(strm, c.Z_NO_FLUSH);    /* no bad return value */\n\n    if (status === c.Z_NEED_DICT && dictionary) {\n      status = zlib_inflate.inflateSetDictionary(this.strm, dictionary);\n    }\n\n    if (status === c.Z_BUF_ERROR && allowBufError === true) {\n      status = c.Z_OK;\n      allowBufError = false;\n    }\n\n    if (status !== c.Z_STREAM_END && status !== c.Z_OK) {\n      this.onEnd(status);\n      this.ended = true;\n      return false;\n    }\n\n    if (strm.next_out) {\n      if (strm.avail_out === 0 || status === c.Z_STREAM_END || (strm.avail_in === 0 && (_mode === c.Z_FINISH || _mode === c.Z_SYNC_FLUSH))) {\n\n        if (this.options.to === 'string') {\n\n          next_out_utf8 = strings.utf8border(strm.output, strm.next_out);\n\n          tail = strm.next_out - next_out_utf8;\n          utf8str = strings.buf2string(strm.output, next_out_utf8);\n\n          // move tail\n          strm.next_out = tail;\n          strm.avail_out = chunkSize - tail;\n          if (tail) { utils.arraySet(strm.output, strm.output, next_out_utf8, tail, 0); }\n\n          this.onData(utf8str);\n\n        } else {\n          this.onData(utils.shrinkBuf(strm.output, strm.next_out));\n        }\n      }\n    }\n\n    // When no more input data, we should check that internal inflate buffers\n    // are flushed. The only way to do it when avail_out = 0 - run one more\n    // inflate pass. But if output data not exists, inflate return Z_BUF_ERROR.\n    // Here we set flag to process this error properly.\n    //\n    // NOTE. Deflate does not return error in this case and does not needs such\n    // logic.\n    if (strm.avail_in === 0 && strm.avail_out === 0) {\n      allowBufError = true;\n    }\n\n  } while ((strm.avail_in > 0 || strm.avail_out === 0) && status !== c.Z_STREAM_END);\n\n  if (status === c.Z_STREAM_END) {\n    _mode = c.Z_FINISH;\n  }\n\n  // Finalize on the last chunk.\n  if (_mode === c.Z_FINISH) {\n    status = zlib_inflate.inflateEnd(this.strm);\n    this.onEnd(status);\n    this.ended = true;\n    return status === c.Z_OK;\n  }\n\n  // callback interim results if Z_SYNC_FLUSH.\n  if (_mode === c.Z_SYNC_FLUSH) {\n    this.onEnd(c.Z_OK);\n    strm.avail_out = 0;\n    return true;\n  }\n\n  return true;\n};\n\n\n/**\n * Inflate#onData(chunk) -> Void\n * - chunk (Uint8Array|Array|String): output data. Type of array depends\n *   on js engine support. When string output requested, each chunk\n *   will be string.\n *\n * By default, stores data blocks in `chunks[]` property and glue\n * those in `onEnd`. Override this handler, if you need another behaviour.\n **/\nInflate.prototype.onData = function (chunk) {\n  this.chunks.push(chunk);\n};\n\n\n/**\n * Inflate#onEnd(status) -> Void\n * - status (Number): inflate status. 0 (Z_OK) on success,\n *   other if not.\n *\n * Called either after you tell inflate that the input stream is\n * complete (Z_FINISH) or should be flushed (Z_SYNC_FLUSH)\n * or if an error happened. By default - join collected chunks,\n * free memory and fill `results` / `err` properties.\n **/\nInflate.prototype.onEnd = function (status) {\n  // On success - join\n  if (status === c.Z_OK) {\n    if (this.options.to === 'string') {\n      // Glue & convert here, until we teach pako to send\n      // utf8 aligned strings to onData\n      this.result = this.chunks.join('');\n    } else {\n      this.result = utils.flattenChunks(this.chunks);\n    }\n  }\n  this.chunks = [];\n  this.err = status;\n  this.msg = this.strm.msg;\n};\n\n\n/**\n * inflate(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Decompress `data` with inflate/ungzip and `options`. Autodetect\n * format via wrapper header by default. That's why we don't provide\n * separate `ungzip` method.\n *\n * Supported options are:\n *\n * - windowBits\n *\n * [http://zlib.net/manual.html#Advanced](http://zlib.net/manual.html#Advanced)\n * for more information.\n *\n * Sugar (options):\n *\n * - `raw` (Boolean) - say that we work with raw stream, if you don't wish to specify\n *   negative windowBits implicitly.\n * - `to` (String) - if equal to 'string', then result will be converted\n *   from utf8 to utf16 (javascript) string. When string output requested,\n *   chunk length can differ from `chunkSize`, depending on content.\n *\n *\n * ##### Example:\n *\n * ```javascript\n * var pako = require('pako')\n *   , input = pako.deflate([1,2,3,4,5,6,7,8,9])\n *   , output;\n *\n * try {\n *   output = pako.inflate(input);\n * } catch (err)\n *   console.log(err);\n * }\n * ```\n **/\nfunction inflate(input, options) {\n  var inflator = new Inflate(options);\n\n  inflator.push(input, true);\n\n  // That will never happens, if you don't cheat with options :)\n  if (inflator.err) { throw inflator.msg || msg[inflator.err]; }\n\n  return inflator.result;\n}\n\n\n/**\n * inflateRaw(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * The same as [[inflate]], but creates raw data, without wrapper\n * (header and adler32 crc).\n **/\nfunction inflateRaw(input, options) {\n  options = options || {};\n  options.raw = true;\n  return inflate(input, options);\n}\n\n\n/**\n * ungzip(data[, options]) -> Uint8Array|Array|String\n * - data (Uint8Array|Array|String): input data to decompress.\n * - options (Object): zlib inflate options.\n *\n * Just shortcut to [[inflate]], because it autodetects format\n * by header.content. Done for convenience.\n **/\n\n\nexports.Inflate = Inflate;\nexports.inflate = inflate;\nexports.inflateRaw = inflateRaw;\nexports.ungzip  = inflate;\n","'use strict';\n\n\nvar TYPED_OK =  (typeof Uint8Array !== 'undefined') &&\n                (typeof Uint16Array !== 'undefined') &&\n                (typeof Int32Array !== 'undefined');\n\nfunction _has(obj, key) {\n  return Object.prototype.hasOwnProperty.call(obj, key);\n}\n\nexports.assign = function (obj /*from1, from2, from3, ...*/) {\n  var sources = Array.prototype.slice.call(arguments, 1);\n  while (sources.length) {\n    var source = sources.shift();\n    if (!source) { continue; }\n\n    if (typeof source !== 'object') {\n      throw new TypeError(source + 'must be non-object');\n    }\n\n    for (var p in source) {\n      if (_has(source, p)) {\n        obj[p] = source[p];\n      }\n    }\n  }\n\n  return obj;\n};\n\n\n// reduce buffer size, avoiding mem copy\nexports.shrinkBuf = function (buf, size) {\n  if (buf.length === size) { return buf; }\n  if (buf.subarray) { return buf.subarray(0, size); }\n  buf.length = size;\n  return buf;\n};\n\n\nvar fnTyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    if (src.subarray && dest.subarray) {\n      dest.set(src.subarray(src_offs, src_offs + len), dest_offs);\n      return;\n    }\n    // Fallback to ordinary array\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    var i, l, len, pos, chunk, result;\n\n    // calculate data length\n    len = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      len += chunks[i].length;\n    }\n\n    // join chunks\n    result = new Uint8Array(len);\n    pos = 0;\n    for (i = 0, l = chunks.length; i < l; i++) {\n      chunk = chunks[i];\n      result.set(chunk, pos);\n      pos += chunk.length;\n    }\n\n    return result;\n  }\n};\n\nvar fnUntyped = {\n  arraySet: function (dest, src, src_offs, len, dest_offs) {\n    for (var i = 0; i < len; i++) {\n      dest[dest_offs + i] = src[src_offs + i];\n    }\n  },\n  // Join array of chunks to single array.\n  flattenChunks: function (chunks) {\n    return [].concat.apply([], chunks);\n  }\n};\n\n\n// Enable/Disable typed arrays use, for testing\n//\nexports.setTyped = function (on) {\n  if (on) {\n    exports.Buf8  = Uint8Array;\n    exports.Buf16 = Uint16Array;\n    exports.Buf32 = Int32Array;\n    exports.assign(exports, fnTyped);\n  } else {\n    exports.Buf8  = Array;\n    exports.Buf16 = Array;\n    exports.Buf32 = Array;\n    exports.assign(exports, fnUntyped);\n  }\n};\n\nexports.setTyped(TYPED_OK);\n","// String encode/decode helpers\n'use strict';\n\n\nvar utils = require('./common');\n\n\n// Quick check if we can use fast array to bin string conversion\n//\n// - apply(Array) can fail on Android 2.2\n// - apply(Uint8Array) can fail on iOS 5.1 Safari\n//\nvar STR_APPLY_OK = true;\nvar STR_APPLY_UIA_OK = true;\n\ntry { String.fromCharCode.apply(null, [ 0 ]); } catch (__) { STR_APPLY_OK = false; }\ntry { String.fromCharCode.apply(null, new Uint8Array(1)); } catch (__) { STR_APPLY_UIA_OK = false; }\n\n\n// Table with utf8 lengths (calculated by first byte of sequence)\n// Note, that 5 & 6-byte values and some 4-byte values can not be represented in JS,\n// because max possible codepoint is 0x10ffff\nvar _utf8len = new utils.Buf8(256);\nfor (var q = 0; q < 256; q++) {\n  _utf8len[q] = (q >= 252 ? 6 : q >= 248 ? 5 : q >= 240 ? 4 : q >= 224 ? 3 : q >= 192 ? 2 : 1);\n}\n_utf8len[254] = _utf8len[254] = 1; // Invalid sequence start\n\n\n// convert string to array (typed, when possible)\nexports.string2buf = function (str) {\n  var buf, c, c2, m_pos, i, str_len = str.length, buf_len = 0;\n\n  // count binary size\n  for (m_pos = 0; m_pos < str_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    buf_len += c < 0x80 ? 1 : c < 0x800 ? 2 : c < 0x10000 ? 3 : 4;\n  }\n\n  // allocate buffer\n  buf = new utils.Buf8(buf_len);\n\n  // convert\n  for (i = 0, m_pos = 0; i < buf_len; m_pos++) {\n    c = str.charCodeAt(m_pos);\n    if ((c & 0xfc00) === 0xd800 && (m_pos + 1 < str_len)) {\n      c2 = str.charCodeAt(m_pos + 1);\n      if ((c2 & 0xfc00) === 0xdc00) {\n        c = 0x10000 + ((c - 0xd800) << 10) + (c2 - 0xdc00);\n        m_pos++;\n      }\n    }\n    if (c < 0x80) {\n      /* one byte */\n      buf[i++] = c;\n    } else if (c < 0x800) {\n      /* two bytes */\n      buf[i++] = 0xC0 | (c >>> 6);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else if (c < 0x10000) {\n      /* three bytes */\n      buf[i++] = 0xE0 | (c >>> 12);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    } else {\n      /* four bytes */\n      buf[i++] = 0xf0 | (c >>> 18);\n      buf[i++] = 0x80 | (c >>> 12 & 0x3f);\n      buf[i++] = 0x80 | (c >>> 6 & 0x3f);\n      buf[i++] = 0x80 | (c & 0x3f);\n    }\n  }\n\n  return buf;\n};\n\n// Helper (used in 2 places)\nfunction buf2binstring(buf, len) {\n  // On Chrome, the arguments in a function call that are allowed is `65534`.\n  // If the length of the buffer is smaller than that, we can use this optimization,\n  // otherwise we will take a slower path.\n  if (len < 65534) {\n    if ((buf.subarray && STR_APPLY_UIA_OK) || (!buf.subarray && STR_APPLY_OK)) {\n      return String.fromCharCode.apply(null, utils.shrinkBuf(buf, len));\n    }\n  }\n\n  var result = '';\n  for (var i = 0; i < len; i++) {\n    result += String.fromCharCode(buf[i]);\n  }\n  return result;\n}\n\n\n// Convert byte array to binary string\nexports.buf2binstring = function (buf) {\n  return buf2binstring(buf, buf.length);\n};\n\n\n// Convert binary string (typed, when possible)\nexports.binstring2buf = function (str) {\n  var buf = new utils.Buf8(str.length);\n  for (var i = 0, len = buf.length; i < len; i++) {\n    buf[i] = str.charCodeAt(i);\n  }\n  return buf;\n};\n\n\n// convert array to string\nexports.buf2string = function (buf, max) {\n  var i, out, c, c_len;\n  var len = max || buf.length;\n\n  // Reserve max possible length (2 words per char)\n  // NB: by unknown reasons, Array is significantly faster for\n  //     String.fromCharCode.apply than Uint16Array.\n  var utf16buf = new Array(len * 2);\n\n  for (out = 0, i = 0; i < len;) {\n    c = buf[i++];\n    // quick process ascii\n    if (c < 0x80) { utf16buf[out++] = c; continue; }\n\n    c_len = _utf8len[c];\n    // skip 5 & 6 byte codes\n    if (c_len > 4) { utf16buf[out++] = 0xfffd; i += c_len - 1; continue; }\n\n    // apply mask on first byte\n    c &= c_len === 2 ? 0x1f : c_len === 3 ? 0x0f : 0x07;\n    // join the rest\n    while (c_len > 1 && i < len) {\n      c = (c << 6) | (buf[i++] & 0x3f);\n      c_len--;\n    }\n\n    // terminated by end of string?\n    if (c_len > 1) { utf16buf[out++] = 0xfffd; continue; }\n\n    if (c < 0x10000) {\n      utf16buf[out++] = c;\n    } else {\n      c -= 0x10000;\n      utf16buf[out++] = 0xd800 | ((c >> 10) & 0x3ff);\n      utf16buf[out++] = 0xdc00 | (c & 0x3ff);\n    }\n  }\n\n  return buf2binstring(utf16buf, out);\n};\n\n\n// Calculate max possible position in utf8 buffer,\n// that will not break sequence. If that's not possible\n// - (very small limits) return max size as is.\n//\n// buf[] - utf8 bytes array\n// max   - length limit (mandatory);\nexports.utf8border = function (buf, max) {\n  var pos;\n\n  max = max || buf.length;\n  if (max > buf.length) { max = buf.length; }\n\n  // go back from last position, until start of sequence found\n  pos = max - 1;\n  while (pos >= 0 && (buf[pos] & 0xC0) === 0x80) { pos--; }\n\n  // Very small and broken sequence,\n  // return max, because we should return something anyway.\n  if (pos < 0) { return max; }\n\n  // If we came to start of buffer - that means buffer is too small,\n  // return max too.\n  if (pos === 0) { return max; }\n\n  return (pos + _utf8len[buf[pos]] > max) ? pos : max;\n};\n","'use strict';\n\n// Note: adler32 takes 12% for level 0 and 2% for level 6.\n// It isn't worth it to make additional optimizations as in original.\n// Small size is preferable.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction adler32(adler, buf, len, pos) {\n  var s1 = (adler & 0xffff) |0,\n      s2 = ((adler >>> 16) & 0xffff) |0,\n      n = 0;\n\n  while (len !== 0) {\n    // Set limit ~ twice less than 5552, to keep\n    // s2 in 31-bits, because we force signed ints.\n    // in other case %= will fail.\n    n = len > 2000 ? 2000 : len;\n    len -= n;\n\n    do {\n      s1 = (s1 + buf[pos++]) |0;\n      s2 = (s2 + s1) |0;\n    } while (--n);\n\n    s1 %= 65521;\n    s2 %= 65521;\n  }\n\n  return (s1 | (s2 << 16)) |0;\n}\n\n\nmodule.exports = adler32;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n\n  /* Allowed flush values; see deflate() and inflate() below for details */\n  Z_NO_FLUSH:         0,\n  Z_PARTIAL_FLUSH:    1,\n  Z_SYNC_FLUSH:       2,\n  Z_FULL_FLUSH:       3,\n  Z_FINISH:           4,\n  Z_BLOCK:            5,\n  Z_TREES:            6,\n\n  /* Return codes for the compression/decompression functions. Negative values\n  * are errors, positive values are used for special but normal events.\n  */\n  Z_OK:               0,\n  Z_STREAM_END:       1,\n  Z_NEED_DICT:        2,\n  Z_ERRNO:           -1,\n  Z_STREAM_ERROR:    -2,\n  Z_DATA_ERROR:      -3,\n  //Z_MEM_ERROR:     -4,\n  Z_BUF_ERROR:       -5,\n  //Z_VERSION_ERROR: -6,\n\n  /* compression levels */\n  Z_NO_COMPRESSION:         0,\n  Z_BEST_SPEED:             1,\n  Z_BEST_COMPRESSION:       9,\n  Z_DEFAULT_COMPRESSION:   -1,\n\n\n  Z_FILTERED:               1,\n  Z_HUFFMAN_ONLY:           2,\n  Z_RLE:                    3,\n  Z_FIXED:                  4,\n  Z_DEFAULT_STRATEGY:       0,\n\n  /* Possible values of the data_type field (though see inflate()) */\n  Z_BINARY:                 0,\n  Z_TEXT:                   1,\n  //Z_ASCII:                1, // = Z_TEXT (deprecated)\n  Z_UNKNOWN:                2,\n\n  /* The deflate compression method */\n  Z_DEFLATED:               8\n  //Z_NULL:                 null // Use -1 or null inline, depending on var type\n};\n","'use strict';\n\n// Note: we can't get significant speed boost here.\n// So write code to minimize size - no pregenerated tables\n// and array tools dependencies.\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// Use ordinary array, since untyped makes no boost here\nfunction makeTable() {\n  var c, table = [];\n\n  for (var n = 0; n < 256; n++) {\n    c = n;\n    for (var k = 0; k < 8; k++) {\n      c = ((c & 1) ? (0xEDB88320 ^ (c >>> 1)) : (c >>> 1));\n    }\n    table[n] = c;\n  }\n\n  return table;\n}\n\n// Create table on load. Just 255 signed longs. Not a problem.\nvar crcTable = makeTable();\n\n\nfunction crc32(crc, buf, len, pos) {\n  var t = crcTable,\n      end = pos + len;\n\n  crc ^= -1;\n\n  for (var i = pos; i < end; i++) {\n    crc = (crc >>> 8) ^ t[(crc ^ buf[i]) & 0xFF];\n  }\n\n  return (crc ^ (-1)); // >>> 0;\n}\n\n\nmodule.exports = crc32;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils   = require('../utils/common');\nvar trees   = require('./trees');\nvar adler32 = require('./adler32');\nvar crc32   = require('./crc32');\nvar msg     = require('./messages');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\nvar Z_NO_FLUSH      = 0;\nvar Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\nvar Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\n//var Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\n//var Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\n//var Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n\n/* compression levels */\n//var Z_NO_COMPRESSION      = 0;\n//var Z_BEST_SPEED          = 1;\n//var Z_BEST_COMPRESSION    = 9;\nvar Z_DEFAULT_COMPRESSION = -1;\n\n\nvar Z_FILTERED            = 1;\nvar Z_HUFFMAN_ONLY        = 2;\nvar Z_RLE                 = 3;\nvar Z_FIXED               = 4;\nvar Z_DEFAULT_STRATEGY    = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\n//var Z_BINARY              = 0;\n//var Z_TEXT                = 1;\n//var Z_ASCII               = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n/*============================================================================*/\n\n\nvar MAX_MEM_LEVEL = 9;\n/* Maximum value for memLevel in deflateInit2 */\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_MEM_LEVEL = 8;\n\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\nvar D_CODES       = 30;\n/* number of distance codes */\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\nvar MAX_BITS  = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar MIN_MATCH = 3;\nvar MAX_MATCH = 258;\nvar MIN_LOOKAHEAD = (MAX_MATCH + MIN_MATCH + 1);\n\nvar PRESET_DICT = 0x20;\n\nvar INIT_STATE = 42;\nvar EXTRA_STATE = 69;\nvar NAME_STATE = 73;\nvar COMMENT_STATE = 91;\nvar HCRC_STATE = 103;\nvar BUSY_STATE = 113;\nvar FINISH_STATE = 666;\n\nvar BS_NEED_MORE      = 1; /* block not completed, need more input or more output */\nvar BS_BLOCK_DONE     = 2; /* block flush performed */\nvar BS_FINISH_STARTED = 3; /* finish started, need only more output at next deflate */\nvar BS_FINISH_DONE    = 4; /* finish done, accept no more input or output */\n\nvar OS_CODE = 0x03; // Unix :) . Don't detect, use this default.\n\nfunction err(strm, errorCode) {\n  strm.msg = msg[errorCode];\n  return errorCode;\n}\n\nfunction rank(f) {\n  return ((f) << 1) - ((f) > 4 ? 9 : 0);\n}\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n\n/* =========================================================================\n * Flush as much pending output as possible. All deflate() output goes\n * through this function so some applications may wish to modify it\n * to avoid allocating a large strm->output buffer and copying into it.\n * (See also read_buf()).\n */\nfunction flush_pending(strm) {\n  var s = strm.state;\n\n  //_tr_flush_bits(s);\n  var len = s.pending;\n  if (len > strm.avail_out) {\n    len = strm.avail_out;\n  }\n  if (len === 0) { return; }\n\n  utils.arraySet(strm.output, s.pending_buf, s.pending_out, len, strm.next_out);\n  strm.next_out += len;\n  s.pending_out += len;\n  strm.total_out += len;\n  strm.avail_out -= len;\n  s.pending -= len;\n  if (s.pending === 0) {\n    s.pending_out = 0;\n  }\n}\n\n\nfunction flush_block_only(s, last) {\n  trees._tr_flush_block(s, (s.block_start >= 0 ? s.block_start : -1), s.strstart - s.block_start, last);\n  s.block_start = s.strstart;\n  flush_pending(s.strm);\n}\n\n\nfunction put_byte(s, b) {\n  s.pending_buf[s.pending++] = b;\n}\n\n\n/* =========================================================================\n * Put a short in the pending buffer. The 16-bit value is put in MSB order.\n * IN assertion: the stream state is correct and there is enough room in\n * pending_buf.\n */\nfunction putShortMSB(s, b) {\n//  put_byte(s, (Byte)(b >> 8));\n//  put_byte(s, (Byte)(b & 0xff));\n  s.pending_buf[s.pending++] = (b >>> 8) & 0xff;\n  s.pending_buf[s.pending++] = b & 0xff;\n}\n\n\n/* ===========================================================================\n * Read a new buffer from the current input stream, update the adler32\n * and total number of bytes read.  All deflate() input goes through\n * this function so some applications may wish to modify it to avoid\n * allocating a large strm->input buffer and copying from it.\n * (See also flush_pending()).\n */\nfunction read_buf(strm, buf, start, size) {\n  var len = strm.avail_in;\n\n  if (len > size) { len = size; }\n  if (len === 0) { return 0; }\n\n  strm.avail_in -= len;\n\n  // zmemcpy(buf, strm->next_in, len);\n  utils.arraySet(buf, strm.input, strm.next_in, len, start);\n  if (strm.state.wrap === 1) {\n    strm.adler = adler32(strm.adler, buf, len, start);\n  }\n\n  else if (strm.state.wrap === 2) {\n    strm.adler = crc32(strm.adler, buf, len, start);\n  }\n\n  strm.next_in += len;\n  strm.total_in += len;\n\n  return len;\n}\n\n\n/* ===========================================================================\n * Set match_start to the longest match starting at the given string and\n * return its length. Matches shorter or equal to prev_length are discarded,\n * in which case the result is equal to prev_length and match_start is\n * garbage.\n * IN assertions: cur_match is the head of the hash chain for the current\n *   string (strstart) and its distance is <= MAX_DIST, and prev_length >= 1\n * OUT assertion: the match length is not greater than s->lookahead.\n */\nfunction longest_match(s, cur_match) {\n  var chain_length = s.max_chain_length;      /* max hash chain length */\n  var scan = s.strstart; /* current string */\n  var match;                       /* matched string */\n  var len;                           /* length of current match */\n  var best_len = s.prev_length;              /* best match length so far */\n  var nice_match = s.nice_match;             /* stop if match long enough */\n  var limit = (s.strstart > (s.w_size - MIN_LOOKAHEAD)) ?\n      s.strstart - (s.w_size - MIN_LOOKAHEAD) : 0/*NIL*/;\n\n  var _win = s.window; // shortcut\n\n  var wmask = s.w_mask;\n  var prev  = s.prev;\n\n  /* Stop when cur_match becomes <= limit. To simplify the code,\n   * we prevent matches with the string of window index 0.\n   */\n\n  var strend = s.strstart + MAX_MATCH;\n  var scan_end1  = _win[scan + best_len - 1];\n  var scan_end   = _win[scan + best_len];\n\n  /* The code is optimized for HASH_BITS >= 8 and MAX_MATCH-2 multiple of 16.\n   * It is easy to get rid of this optimization if necessary.\n   */\n  // Assert(s->hash_bits >= 8 && MAX_MATCH == 258, \"Code too clever\");\n\n  /* Do not waste too much time if we already have a good match: */\n  if (s.prev_length >= s.good_match) {\n    chain_length >>= 2;\n  }\n  /* Do not look for matches beyond the end of the input. This is necessary\n   * to make deflate deterministic.\n   */\n  if (nice_match > s.lookahead) { nice_match = s.lookahead; }\n\n  // Assert((ulg)s->strstart <= s->window_size-MIN_LOOKAHEAD, \"need lookahead\");\n\n  do {\n    // Assert(cur_match < s->strstart, \"no future\");\n    match = cur_match;\n\n    /* Skip to next match if the match length cannot increase\n     * or if the match length is less than 2.  Note that the checks below\n     * for insufficient lookahead only occur occasionally for performance\n     * reasons.  Therefore uninitialized memory will be accessed, and\n     * conditional jumps will be made that depend on those values.\n     * However the length of the match is limited to the lookahead, so\n     * the output of deflate is not affected by the uninitialized values.\n     */\n\n    if (_win[match + best_len]     !== scan_end  ||\n        _win[match + best_len - 1] !== scan_end1 ||\n        _win[match]                !== _win[scan] ||\n        _win[++match]              !== _win[scan + 1]) {\n      continue;\n    }\n\n    /* The check at best_len-1 can be removed because it will be made\n     * again later. (This heuristic is not always a win.)\n     * It is not necessary to compare scan[2] and match[2] since they\n     * are always equal when the other bytes match, given that\n     * the hash keys are equal and that HASH_BITS >= 8.\n     */\n    scan += 2;\n    match++;\n    // Assert(*scan == *match, \"match[2]?\");\n\n    /* We check for insufficient lookahead only every 8th comparison;\n     * the 256th check will be made at strstart+258.\n     */\n    do {\n      /*jshint noempty:false*/\n    } while (_win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             _win[++scan] === _win[++match] && _win[++scan] === _win[++match] &&\n             scan < strend);\n\n    // Assert(scan <= s->window+(unsigned)(s->window_size-1), \"wild scan\");\n\n    len = MAX_MATCH - (strend - scan);\n    scan = strend - MAX_MATCH;\n\n    if (len > best_len) {\n      s.match_start = cur_match;\n      best_len = len;\n      if (len >= nice_match) {\n        break;\n      }\n      scan_end1  = _win[scan + best_len - 1];\n      scan_end   = _win[scan + best_len];\n    }\n  } while ((cur_match = prev[cur_match & wmask]) > limit && --chain_length !== 0);\n\n  if (best_len <= s.lookahead) {\n    return best_len;\n  }\n  return s.lookahead;\n}\n\n\n/* ===========================================================================\n * Fill the window when the lookahead becomes insufficient.\n * Updates strstart and lookahead.\n *\n * IN assertion: lookahead < MIN_LOOKAHEAD\n * OUT assertions: strstart <= window_size-MIN_LOOKAHEAD\n *    At least one byte has been read, or avail_in == 0; reads are\n *    performed for at least two bytes (required for the zip translate_eol\n *    option -- not supported here).\n */\nfunction fill_window(s) {\n  var _w_size = s.w_size;\n  var p, n, m, more, str;\n\n  //Assert(s->lookahead < MIN_LOOKAHEAD, \"already enough lookahead\");\n\n  do {\n    more = s.window_size - s.lookahead - s.strstart;\n\n    // JS ints have 32 bit, block below not needed\n    /* Deal with !@#$% 64K limit: */\n    //if (sizeof(int) <= 2) {\n    //    if (more == 0 && s->strstart == 0 && s->lookahead == 0) {\n    //        more = wsize;\n    //\n    //  } else if (more == (unsigned)(-1)) {\n    //        /* Very unlikely, but possible on 16 bit machine if\n    //         * strstart == 0 && lookahead == 1 (input done a byte at time)\n    //         */\n    //        more--;\n    //    }\n    //}\n\n\n    /* If the window is almost full and there is insufficient lookahead,\n     * move the upper half to the lower one to make room in the upper half.\n     */\n    if (s.strstart >= _w_size + (_w_size - MIN_LOOKAHEAD)) {\n\n      utils.arraySet(s.window, s.window, _w_size, _w_size, 0);\n      s.match_start -= _w_size;\n      s.strstart -= _w_size;\n      /* we now have strstart >= MAX_DIST */\n      s.block_start -= _w_size;\n\n      /* Slide the hash table (could be avoided with 32 bit values\n       at the expense of memory usage). We slide even when level == 0\n       to keep the hash table consistent if we switch back to level > 0\n       later. (Using level 0 permanently is not an optimal usage of\n       zlib, so we don't care about this pathological case.)\n       */\n\n      n = s.hash_size;\n      p = n;\n      do {\n        m = s.head[--p];\n        s.head[p] = (m >= _w_size ? m - _w_size : 0);\n      } while (--n);\n\n      n = _w_size;\n      p = n;\n      do {\n        m = s.prev[--p];\n        s.prev[p] = (m >= _w_size ? m - _w_size : 0);\n        /* If n is not on any hash chain, prev[n] is garbage but\n         * its value will never be used.\n         */\n      } while (--n);\n\n      more += _w_size;\n    }\n    if (s.strm.avail_in === 0) {\n      break;\n    }\n\n    /* If there was no sliding:\n     *    strstart <= WSIZE+MAX_DIST-1 && lookahead <= MIN_LOOKAHEAD - 1 &&\n     *    more == window_size - lookahead - strstart\n     * => more >= window_size - (MIN_LOOKAHEAD-1 + WSIZE + MAX_DIST-1)\n     * => more >= window_size - 2*WSIZE + 2\n     * In the BIG_MEM or MMAP case (not yet supported),\n     *   window_size == input_size + MIN_LOOKAHEAD  &&\n     *   strstart + s->lookahead <= input_size => more >= MIN_LOOKAHEAD.\n     * Otherwise, window_size == 2*WSIZE so more >= 2.\n     * If there was sliding, more >= WSIZE. So in all cases, more >= 2.\n     */\n    //Assert(more >= 2, \"more < 2\");\n    n = read_buf(s.strm, s.window, s.strstart + s.lookahead, more);\n    s.lookahead += n;\n\n    /* Initialize the hash value now that we have some input: */\n    if (s.lookahead + s.insert >= MIN_MATCH) {\n      str = s.strstart - s.insert;\n      s.ins_h = s.window[str];\n\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + 1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + 1]) & s.hash_mask;\n//#if MIN_MATCH != 3\n//        Call update_hash() MIN_MATCH-3 more times\n//#endif\n      while (s.insert) {\n        /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n        s.prev[str & s.w_mask] = s.head[s.ins_h];\n        s.head[s.ins_h] = str;\n        str++;\n        s.insert--;\n        if (s.lookahead + s.insert < MIN_MATCH) {\n          break;\n        }\n      }\n    }\n    /* If the whole input has less than MIN_MATCH bytes, ins_h is garbage,\n     * but this is not important since only literal bytes will be emitted.\n     */\n\n  } while (s.lookahead < MIN_LOOKAHEAD && s.strm.avail_in !== 0);\n\n  /* If the WIN_INIT bytes after the end of the current data have never been\n   * written, then zero those bytes in order to avoid memory check reports of\n   * the use of uninitialized (or uninitialised as Julian writes) bytes by\n   * the longest match routines.  Update the high water mark for the next\n   * time through here.  WIN_INIT is set to MAX_MATCH since the longest match\n   * routines allow scanning to strstart + MAX_MATCH, ignoring lookahead.\n   */\n//  if (s.high_water < s.window_size) {\n//    var curr = s.strstart + s.lookahead;\n//    var init = 0;\n//\n//    if (s.high_water < curr) {\n//      /* Previous high water mark below current data -- zero WIN_INIT\n//       * bytes or up to end of window, whichever is less.\n//       */\n//      init = s.window_size - curr;\n//      if (init > WIN_INIT)\n//        init = WIN_INIT;\n//      zmemzero(s->window + curr, (unsigned)init);\n//      s->high_water = curr + init;\n//    }\n//    else if (s->high_water < (ulg)curr + WIN_INIT) {\n//      /* High water mark at or above current data, but below current data\n//       * plus WIN_INIT -- zero out to current data plus WIN_INIT, or up\n//       * to end of window, whichever is less.\n//       */\n//      init = (ulg)curr + WIN_INIT - s->high_water;\n//      if (init > s->window_size - s->high_water)\n//        init = s->window_size - s->high_water;\n//      zmemzero(s->window + s->high_water, (unsigned)init);\n//      s->high_water += init;\n//    }\n//  }\n//\n//  Assert((ulg)s->strstart <= s->window_size - MIN_LOOKAHEAD,\n//    \"not enough room for search\");\n}\n\n/* ===========================================================================\n * Copy without compression as much as possible from the input stream, return\n * the current block state.\n * This function does not insert new strings in the dictionary since\n * uncompressible data is probably not useful. This function is used\n * only for the level=0 compression option.\n * NOTE: this function should be optimized to avoid extra copying from\n * window to pending_buf.\n */\nfunction deflate_stored(s, flush) {\n  /* Stored blocks are limited to 0xffff bytes, pending_buf is limited\n   * to pending_buf_size, and each stored block has a 5 byte header:\n   */\n  var max_block_size = 0xffff;\n\n  if (max_block_size > s.pending_buf_size - 5) {\n    max_block_size = s.pending_buf_size - 5;\n  }\n\n  /* Copy as much as possible from input to output: */\n  for (;;) {\n    /* Fill the window as much as possible: */\n    if (s.lookahead <= 1) {\n\n      //Assert(s->strstart < s->w_size+MAX_DIST(s) ||\n      //  s->block_start >= (long)s->w_size, \"slide too late\");\n//      if (!(s.strstart < s.w_size + (s.w_size - MIN_LOOKAHEAD) ||\n//        s.block_start >= s.w_size)) {\n//        throw  new Error(\"slide too late\");\n//      }\n\n      fill_window(s);\n      if (s.lookahead === 0 && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n\n      if (s.lookahead === 0) {\n        break;\n      }\n      /* flush the current block */\n    }\n    //Assert(s->block_start >= 0L, \"block gone\");\n//    if (s.block_start < 0) throw new Error(\"block gone\");\n\n    s.strstart += s.lookahead;\n    s.lookahead = 0;\n\n    /* Emit a stored block if pending_buf will be full: */\n    var max_start = s.block_start + max_block_size;\n\n    if (s.strstart === 0 || s.strstart >= max_start) {\n      /* strstart == 0 is possible when wraparound on 16-bit machine */\n      s.lookahead = s.strstart - max_start;\n      s.strstart = max_start;\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n\n\n    }\n    /* Flush if we may have to slide, otherwise block_start may become\n     * negative and the data will be gone:\n     */\n    if (s.strstart - s.block_start >= (s.w_size - MIN_LOOKAHEAD)) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n\n  s.insert = 0;\n\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n\n  if (s.strstart > s.block_start) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_NEED_MORE;\n}\n\n/* ===========================================================================\n * Compress as much as possible from the input stream, return the current\n * block state.\n * This function does not perform lazy evaluation of matches and inserts\n * new strings in the dictionary only for unmatched strings or for short\n * matches. It is used only for the fast compression options.\n */\nfunction deflate_fast(s, flush) {\n  var hash_head;        /* head of the hash chain */\n  var bflush;           /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) {\n        break; /* flush the current block */\n      }\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     * At this point we have always match_length < MIN_MATCH\n     */\n    if (hash_head !== 0/*NIL*/ && ((s.strstart - hash_head) <= (s.w_size - MIN_LOOKAHEAD))) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n    }\n    if (s.match_length >= MIN_MATCH) {\n      // check_match(s, s.strstart, s.match_start, s.match_length); // for debug only\n\n      /*** _tr_tally_dist(s, s.strstart - s.match_start,\n                     s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, s.strstart - s.match_start, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n\n      /* Insert new strings in the hash table only if the match length\n       * is not too large. This saves time but degrades compression.\n       */\n      if (s.match_length <= s.max_lazy_match/*max_insert_length*/ && s.lookahead >= MIN_MATCH) {\n        s.match_length--; /* string at strstart already in table */\n        do {\n          s.strstart++;\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n          /* strstart never exceeds WSIZE-MAX_MATCH, so there are\n           * always MIN_MATCH bytes ahead.\n           */\n        } while (--s.match_length !== 0);\n        s.strstart++;\n      } else\n      {\n        s.strstart += s.match_length;\n        s.match_length = 0;\n        s.ins_h = s.window[s.strstart];\n        /* UPDATE_HASH(s, s.ins_h, s.window[s.strstart+1]); */\n        s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + 1]) & s.hash_mask;\n\n//#if MIN_MATCH != 3\n//                Call UPDATE_HASH() MIN_MATCH-3 more times\n//#endif\n        /* If lookahead < MIN_MATCH, ins_h is garbage, but it does not\n         * matter since it will be recomputed at next deflate call.\n         */\n      }\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s.window[s.strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = ((s.strstart < (MIN_MATCH - 1)) ? s.strstart : MIN_MATCH - 1);\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * Same as above, but achieves better compression. We use a lazy\n * evaluation for matches: a match is finally adopted only if there is\n * no better match at the next window position.\n */\nfunction deflate_slow(s, flush) {\n  var hash_head;          /* head of hash chain */\n  var bflush;              /* set if current block must be flushed */\n\n  var max_insert;\n\n  /* Process the input block. */\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the next match, plus MIN_MATCH bytes to insert the\n     * string following the next match.\n     */\n    if (s.lookahead < MIN_LOOKAHEAD) {\n      fill_window(s);\n      if (s.lookahead < MIN_LOOKAHEAD && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* Insert the string window[strstart .. strstart+2] in the\n     * dictionary, and set hash_head to the head of the hash chain:\n     */\n    hash_head = 0/*NIL*/;\n    if (s.lookahead >= MIN_MATCH) {\n      /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n      hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n      s.head[s.ins_h] = s.strstart;\n      /***/\n    }\n\n    /* Find the longest match, discarding those <= prev_length.\n     */\n    s.prev_length = s.match_length;\n    s.prev_match = s.match_start;\n    s.match_length = MIN_MATCH - 1;\n\n    if (hash_head !== 0/*NIL*/ && s.prev_length < s.max_lazy_match &&\n        s.strstart - hash_head <= (s.w_size - MIN_LOOKAHEAD)/*MAX_DIST(s)*/) {\n      /* To simplify the code, we prevent matches with the string\n       * of window index 0 (in particular we have to avoid a match\n       * of the string with itself at the start of the input file).\n       */\n      s.match_length = longest_match(s, hash_head);\n      /* longest_match() sets match_start */\n\n      if (s.match_length <= 5 &&\n         (s.strategy === Z_FILTERED || (s.match_length === MIN_MATCH && s.strstart - s.match_start > 4096/*TOO_FAR*/))) {\n\n        /* If prev_match is also MIN_MATCH, match_start is garbage\n         * but we will ignore the current match anyway.\n         */\n        s.match_length = MIN_MATCH - 1;\n      }\n    }\n    /* If there was a match at the previous step and the current\n     * match is not better, output the previous match:\n     */\n    if (s.prev_length >= MIN_MATCH && s.match_length <= s.prev_length) {\n      max_insert = s.strstart + s.lookahead - MIN_MATCH;\n      /* Do not insert strings in hash table beyond this. */\n\n      //check_match(s, s.strstart-1, s.prev_match, s.prev_length);\n\n      /***_tr_tally_dist(s, s.strstart - 1 - s.prev_match,\n                     s.prev_length - MIN_MATCH, bflush);***/\n      bflush = trees._tr_tally(s, s.strstart - 1 - s.prev_match, s.prev_length - MIN_MATCH);\n      /* Insert in hash table all strings up to the end of the match.\n       * strstart-1 and strstart are already inserted. If there is not\n       * enough lookahead, the last two strings are not inserted in\n       * the hash table.\n       */\n      s.lookahead -= s.prev_length - 1;\n      s.prev_length -= 2;\n      do {\n        if (++s.strstart <= max_insert) {\n          /*** INSERT_STRING(s, s.strstart, hash_head); ***/\n          s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[s.strstart + MIN_MATCH - 1]) & s.hash_mask;\n          hash_head = s.prev[s.strstart & s.w_mask] = s.head[s.ins_h];\n          s.head[s.ins_h] = s.strstart;\n          /***/\n        }\n      } while (--s.prev_length !== 0);\n      s.match_available = 0;\n      s.match_length = MIN_MATCH - 1;\n      s.strstart++;\n\n      if (bflush) {\n        /*** FLUSH_BLOCK(s, 0); ***/\n        flush_block_only(s, false);\n        if (s.strm.avail_out === 0) {\n          return BS_NEED_MORE;\n        }\n        /***/\n      }\n\n    } else if (s.match_available) {\n      /* If there was no match at the previous position, output a\n       * single literal. If there was a match but the current match\n       * is longer, truncate the previous match to a single literal.\n       */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n      /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n      if (bflush) {\n        /*** FLUSH_BLOCK_ONLY(s, 0) ***/\n        flush_block_only(s, false);\n        /***/\n      }\n      s.strstart++;\n      s.lookahead--;\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n    } else {\n      /* There is no previous match to compare with, wait for\n       * the next step to decide.\n       */\n      s.match_available = 1;\n      s.strstart++;\n      s.lookahead--;\n    }\n  }\n  //Assert (flush != Z_NO_FLUSH, \"no flush?\");\n  if (s.match_available) {\n    //Tracevv((stderr,\"%c\", s->window[s->strstart-1]));\n    /*** _tr_tally_lit(s, s.window[s.strstart-1], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart - 1]);\n\n    s.match_available = 0;\n  }\n  s.insert = s.strstart < MIN_MATCH - 1 ? s.strstart : MIN_MATCH - 1;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n\n  return BS_BLOCK_DONE;\n}\n\n\n/* ===========================================================================\n * For Z_RLE, simply look for runs of bytes, generate matches only of distance\n * one.  Do not maintain a hash table.  (It will be regenerated if this run of\n * deflate switches away from Z_RLE.)\n */\nfunction deflate_rle(s, flush) {\n  var bflush;            /* set if current block must be flushed */\n  var prev;              /* byte at distance one to match */\n  var scan, strend;      /* scan goes up to strend for length of run */\n\n  var _win = s.window;\n\n  for (;;) {\n    /* Make sure that we always have enough lookahead, except\n     * at the end of the input file. We need MAX_MATCH bytes\n     * for the longest run, plus one for the unrolled loop.\n     */\n    if (s.lookahead <= MAX_MATCH) {\n      fill_window(s);\n      if (s.lookahead <= MAX_MATCH && flush === Z_NO_FLUSH) {\n        return BS_NEED_MORE;\n      }\n      if (s.lookahead === 0) { break; } /* flush the current block */\n    }\n\n    /* See how many times the previous byte repeats */\n    s.match_length = 0;\n    if (s.lookahead >= MIN_MATCH && s.strstart > 0) {\n      scan = s.strstart - 1;\n      prev = _win[scan];\n      if (prev === _win[++scan] && prev === _win[++scan] && prev === _win[++scan]) {\n        strend = s.strstart + MAX_MATCH;\n        do {\n          /*jshint noempty:false*/\n        } while (prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 prev === _win[++scan] && prev === _win[++scan] &&\n                 scan < strend);\n        s.match_length = MAX_MATCH - (strend - scan);\n        if (s.match_length > s.lookahead) {\n          s.match_length = s.lookahead;\n        }\n      }\n      //Assert(scan <= s->window+(uInt)(s->window_size-1), \"wild scan\");\n    }\n\n    /* Emit match if have run of MIN_MATCH or longer, else emit literal */\n    if (s.match_length >= MIN_MATCH) {\n      //check_match(s, s.strstart, s.strstart - 1, s.match_length);\n\n      /*** _tr_tally_dist(s, 1, s.match_length - MIN_MATCH, bflush); ***/\n      bflush = trees._tr_tally(s, 1, s.match_length - MIN_MATCH);\n\n      s.lookahead -= s.match_length;\n      s.strstart += s.match_length;\n      s.match_length = 0;\n    } else {\n      /* No match, output a literal byte */\n      //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n      /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n      bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n\n      s.lookahead--;\n      s.strstart++;\n    }\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* ===========================================================================\n * For Z_HUFFMAN_ONLY, do not look for matches.  Do not maintain a hash table.\n * (It will be regenerated if this run of deflate switches away from Huffman.)\n */\nfunction deflate_huff(s, flush) {\n  var bflush;             /* set if current block must be flushed */\n\n  for (;;) {\n    /* Make sure that we have a literal to write. */\n    if (s.lookahead === 0) {\n      fill_window(s);\n      if (s.lookahead === 0) {\n        if (flush === Z_NO_FLUSH) {\n          return BS_NEED_MORE;\n        }\n        break;      /* flush the current block */\n      }\n    }\n\n    /* Output a literal byte */\n    s.match_length = 0;\n    //Tracevv((stderr,\"%c\", s->window[s->strstart]));\n    /*** _tr_tally_lit(s, s.window[s.strstart], bflush); ***/\n    bflush = trees._tr_tally(s, 0, s.window[s.strstart]);\n    s.lookahead--;\n    s.strstart++;\n    if (bflush) {\n      /*** FLUSH_BLOCK(s, 0); ***/\n      flush_block_only(s, false);\n      if (s.strm.avail_out === 0) {\n        return BS_NEED_MORE;\n      }\n      /***/\n    }\n  }\n  s.insert = 0;\n  if (flush === Z_FINISH) {\n    /*** FLUSH_BLOCK(s, 1); ***/\n    flush_block_only(s, true);\n    if (s.strm.avail_out === 0) {\n      return BS_FINISH_STARTED;\n    }\n    /***/\n    return BS_FINISH_DONE;\n  }\n  if (s.last_lit) {\n    /*** FLUSH_BLOCK(s, 0); ***/\n    flush_block_only(s, false);\n    if (s.strm.avail_out === 0) {\n      return BS_NEED_MORE;\n    }\n    /***/\n  }\n  return BS_BLOCK_DONE;\n}\n\n/* Values for max_lazy_match, good_match and max_chain_length, depending on\n * the desired pack level (0..9). The values given below have been tuned to\n * exclude worst case performance for pathological files. Better values may be\n * found for specific files.\n */\nfunction Config(good_length, max_lazy, nice_length, max_chain, func) {\n  this.good_length = good_length;\n  this.max_lazy = max_lazy;\n  this.nice_length = nice_length;\n  this.max_chain = max_chain;\n  this.func = func;\n}\n\nvar configuration_table;\n\nconfiguration_table = [\n  /*      good lazy nice chain */\n  new Config(0, 0, 0, 0, deflate_stored),          /* 0 store only */\n  new Config(4, 4, 8, 4, deflate_fast),            /* 1 max speed, no lazy matches */\n  new Config(4, 5, 16, 8, deflate_fast),           /* 2 */\n  new Config(4, 6, 32, 32, deflate_fast),          /* 3 */\n\n  new Config(4, 4, 16, 16, deflate_slow),          /* 4 lazy matches */\n  new Config(8, 16, 32, 32, deflate_slow),         /* 5 */\n  new Config(8, 16, 128, 128, deflate_slow),       /* 6 */\n  new Config(8, 32, 128, 256, deflate_slow),       /* 7 */\n  new Config(32, 128, 258, 1024, deflate_slow),    /* 8 */\n  new Config(32, 258, 258, 4096, deflate_slow)     /* 9 max compression */\n];\n\n\n/* ===========================================================================\n * Initialize the \"longest match\" routines for a new zlib stream\n */\nfunction lm_init(s) {\n  s.window_size = 2 * s.w_size;\n\n  /*** CLEAR_HASH(s); ***/\n  zero(s.head); // Fill with NIL (= 0);\n\n  /* Set the default configuration parameters:\n   */\n  s.max_lazy_match = configuration_table[s.level].max_lazy;\n  s.good_match = configuration_table[s.level].good_length;\n  s.nice_match = configuration_table[s.level].nice_length;\n  s.max_chain_length = configuration_table[s.level].max_chain;\n\n  s.strstart = 0;\n  s.block_start = 0;\n  s.lookahead = 0;\n  s.insert = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  s.ins_h = 0;\n}\n\n\nfunction DeflateState() {\n  this.strm = null;            /* pointer back to this zlib stream */\n  this.status = 0;            /* as the name implies */\n  this.pending_buf = null;      /* output still pending */\n  this.pending_buf_size = 0;  /* size of pending_buf */\n  this.pending_out = 0;       /* next pending byte to output to the stream */\n  this.pending = 0;           /* nb of bytes in the pending buffer */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.gzhead = null;         /* gzip header information to write */\n  this.gzindex = 0;           /* where in extra, name, or comment */\n  this.method = Z_DEFLATED; /* can only be DEFLATED */\n  this.last_flush = -1;   /* value of flush param for previous deflate call */\n\n  this.w_size = 0;  /* LZ77 window size (32K by default) */\n  this.w_bits = 0;  /* log2(w_size)  (8..16) */\n  this.w_mask = 0;  /* w_size - 1 */\n\n  this.window = null;\n  /* Sliding window. Input bytes are read into the second half of the window,\n   * and move to the first half later to keep a dictionary of at least wSize\n   * bytes. With this organization, matches are limited to a distance of\n   * wSize-MAX_MATCH bytes, but this ensures that IO is always\n   * performed with a length multiple of the block size.\n   */\n\n  this.window_size = 0;\n  /* Actual size of window: 2*wSize, except when the user input buffer\n   * is directly used as sliding window.\n   */\n\n  this.prev = null;\n  /* Link to older string with same hash index. To limit the size of this\n   * array to 64K, this link is maintained only for the last 32K strings.\n   * An index in this array is thus a window index modulo 32K.\n   */\n\n  this.head = null;   /* Heads of the hash chains or NIL. */\n\n  this.ins_h = 0;       /* hash index of string to be inserted */\n  this.hash_size = 0;   /* number of elements in hash table */\n  this.hash_bits = 0;   /* log2(hash_size) */\n  this.hash_mask = 0;   /* hash_size-1 */\n\n  this.hash_shift = 0;\n  /* Number of bits by which ins_h must be shifted at each input\n   * step. It must be such that after MIN_MATCH steps, the oldest\n   * byte no longer takes part in the hash key, that is:\n   *   hash_shift * MIN_MATCH >= hash_bits\n   */\n\n  this.block_start = 0;\n  /* Window position at the beginning of the current output block. Gets\n   * negative when the window is moved backwards.\n   */\n\n  this.match_length = 0;      /* length of best match */\n  this.prev_match = 0;        /* previous match */\n  this.match_available = 0;   /* set if previous match exists */\n  this.strstart = 0;          /* start of string to insert */\n  this.match_start = 0;       /* start of matching string */\n  this.lookahead = 0;         /* number of valid bytes ahead in window */\n\n  this.prev_length = 0;\n  /* Length of the best match at previous step. Matches not greater than this\n   * are discarded. This is used in the lazy match evaluation.\n   */\n\n  this.max_chain_length = 0;\n  /* To speed up deflation, hash chains are never searched beyond this\n   * length.  A higher limit improves compression ratio but degrades the\n   * speed.\n   */\n\n  this.max_lazy_match = 0;\n  /* Attempt to find a better match only when the current match is strictly\n   * smaller than this value. This mechanism is used only for compression\n   * levels >= 4.\n   */\n  // That's alias to max_lazy_match, don't use directly\n  //this.max_insert_length = 0;\n  /* Insert new strings in the hash table only if the match length is not\n   * greater than this length. This saves time but degrades compression.\n   * max_insert_length is used only for compression levels <= 3.\n   */\n\n  this.level = 0;     /* compression level (1..9) */\n  this.strategy = 0;  /* favor or force Huffman coding*/\n\n  this.good_match = 0;\n  /* Use a faster search when the previous match is longer than this */\n\n  this.nice_match = 0; /* Stop searching when current match exceeds this */\n\n              /* used by trees.c: */\n\n  /* Didn't use ct_data typedef below to suppress compiler warning */\n\n  // struct ct_data_s dyn_ltree[HEAP_SIZE];   /* literal and length tree */\n  // struct ct_data_s dyn_dtree[2*D_CODES+1]; /* distance tree */\n  // struct ct_data_s bl_tree[2*BL_CODES+1];  /* Huffman tree for bit lengths */\n\n  // Use flat array of DOUBLE size, with interleaved fata,\n  // because JS does not support effective\n  this.dyn_ltree  = new utils.Buf16(HEAP_SIZE * 2);\n  this.dyn_dtree  = new utils.Buf16((2 * D_CODES + 1) * 2);\n  this.bl_tree    = new utils.Buf16((2 * BL_CODES + 1) * 2);\n  zero(this.dyn_ltree);\n  zero(this.dyn_dtree);\n  zero(this.bl_tree);\n\n  this.l_desc   = null;         /* desc. for literal tree */\n  this.d_desc   = null;         /* desc. for distance tree */\n  this.bl_desc  = null;         /* desc. for bit length tree */\n\n  //ush bl_count[MAX_BITS+1];\n  this.bl_count = new utils.Buf16(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  //int heap[2*L_CODES+1];      /* heap used to build the Huffman trees */\n  this.heap = new utils.Buf16(2 * L_CODES + 1);  /* heap used to build the Huffman trees */\n  zero(this.heap);\n\n  this.heap_len = 0;               /* number of elements in the heap */\n  this.heap_max = 0;               /* element of largest frequency */\n  /* The sons of heap[n] are heap[2*n] and heap[2*n+1]. heap[0] is not used.\n   * The same heap array is used to build all trees.\n   */\n\n  this.depth = new utils.Buf16(2 * L_CODES + 1); //uch depth[2*L_CODES+1];\n  zero(this.depth);\n  /* Depth of each subtree used as tie breaker for trees of equal frequency\n   */\n\n  this.l_buf = 0;          /* buffer index for literals or lengths */\n\n  this.lit_bufsize = 0;\n  /* Size of match buffer for literals/lengths.  There are 4 reasons for\n   * limiting lit_bufsize to 64K:\n   *   - frequencies can be kept in 16 bit counters\n   *   - if compression is not successful for the first block, all input\n   *     data is still in the window so we can still emit a stored block even\n   *     when input comes from standard input.  (This can also be done for\n   *     all blocks if lit_bufsize is not greater than 32K.)\n   *   - if compression is not successful for a file smaller than 64K, we can\n   *     even emit a stored file instead of a stored block (saving 5 bytes).\n   *     This is applicable only for zip (not gzip or zlib).\n   *   - creating new Huffman trees less frequently may not provide fast\n   *     adaptation to changes in the input data statistics. (Take for\n   *     example a binary file with poorly compressible code followed by\n   *     a highly compressible string table.) Smaller buffer sizes give\n   *     fast adaptation but have of course the overhead of transmitting\n   *     trees more frequently.\n   *   - I can't count above 4\n   */\n\n  this.last_lit = 0;      /* running index in l_buf */\n\n  this.d_buf = 0;\n  /* Buffer index for distances. To simplify the code, d_buf and l_buf have\n   * the same number of elements. To use different lengths, an extra flag\n   * array would be necessary.\n   */\n\n  this.opt_len = 0;       /* bit length of current block with optimal trees */\n  this.static_len = 0;    /* bit length of current block with static trees */\n  this.matches = 0;       /* number of string matches in current block */\n  this.insert = 0;        /* bytes at end of window left to insert */\n\n\n  this.bi_buf = 0;\n  /* Output buffer. bits are inserted starting at the bottom (least\n   * significant bits).\n   */\n  this.bi_valid = 0;\n  /* Number of valid bits in bi_buf.  All bits above the last valid bit\n   * are always zero.\n   */\n\n  // Used for window memory init. We safely ignore it for JS. That makes\n  // sense only for pointers and memory check tools.\n  //this.high_water = 0;\n  /* High water mark offset in window for initialized bytes -- bytes above\n   * this are set to zero in order to avoid memory check warnings when\n   * longest match routines access bytes past the input.  This is then\n   * updated to the new high water mark.\n   */\n}\n\n\nfunction deflateResetKeep(strm) {\n  var s;\n\n  if (!strm || !strm.state) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.total_in = strm.total_out = 0;\n  strm.data_type = Z_UNKNOWN;\n\n  s = strm.state;\n  s.pending = 0;\n  s.pending_out = 0;\n\n  if (s.wrap < 0) {\n    s.wrap = -s.wrap;\n    /* was made negative by deflate(..., Z_FINISH); */\n  }\n  s.status = (s.wrap ? INIT_STATE : BUSY_STATE);\n  strm.adler = (s.wrap === 2) ?\n    0  // crc32(0, Z_NULL, 0)\n  :\n    1; // adler32(0, Z_NULL, 0)\n  s.last_flush = Z_NO_FLUSH;\n  trees._tr_init(s);\n  return Z_OK;\n}\n\n\nfunction deflateReset(strm) {\n  var ret = deflateResetKeep(strm);\n  if (ret === Z_OK) {\n    lm_init(strm.state);\n  }\n  return ret;\n}\n\n\nfunction deflateSetHeader(strm, head) {\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  if (strm.state.wrap !== 2) { return Z_STREAM_ERROR; }\n  strm.state.gzhead = head;\n  return Z_OK;\n}\n\n\nfunction deflateInit2(strm, level, method, windowBits, memLevel, strategy) {\n  if (!strm) { // === Z_NULL\n    return Z_STREAM_ERROR;\n  }\n  var wrap = 1;\n\n  if (level === Z_DEFAULT_COMPRESSION) {\n    level = 6;\n  }\n\n  if (windowBits < 0) { /* suppress zlib wrapper */\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n\n  else if (windowBits > 15) {\n    wrap = 2;           /* write gzip wrapper instead */\n    windowBits -= 16;\n  }\n\n\n  if (memLevel < 1 || memLevel > MAX_MEM_LEVEL || method !== Z_DEFLATED ||\n    windowBits < 8 || windowBits > 15 || level < 0 || level > 9 ||\n    strategy < 0 || strategy > Z_FIXED) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n\n  if (windowBits === 8) {\n    windowBits = 9;\n  }\n  /* until 256-byte window bug fixed */\n\n  var s = new DeflateState();\n\n  strm.state = s;\n  s.strm = strm;\n\n  s.wrap = wrap;\n  s.gzhead = null;\n  s.w_bits = windowBits;\n  s.w_size = 1 << s.w_bits;\n  s.w_mask = s.w_size - 1;\n\n  s.hash_bits = memLevel + 7;\n  s.hash_size = 1 << s.hash_bits;\n  s.hash_mask = s.hash_size - 1;\n  s.hash_shift = ~~((s.hash_bits + MIN_MATCH - 1) / MIN_MATCH);\n\n  s.window = new utils.Buf8(s.w_size * 2);\n  s.head = new utils.Buf16(s.hash_size);\n  s.prev = new utils.Buf16(s.w_size);\n\n  // Don't need mem init magic for JS.\n  //s.high_water = 0;  /* nothing written to s->window yet */\n\n  s.lit_bufsize = 1 << (memLevel + 6); /* 16K elements by default */\n\n  s.pending_buf_size = s.lit_bufsize * 4;\n\n  //overlay = (ushf *) ZALLOC(strm, s->lit_bufsize, sizeof(ush)+2);\n  //s->pending_buf = (uchf *) overlay;\n  s.pending_buf = new utils.Buf8(s.pending_buf_size);\n\n  // It is offset from `s.pending_buf` (size is `s.lit_bufsize * 2`)\n  //s->d_buf = overlay + s->lit_bufsize/sizeof(ush);\n  s.d_buf = 1 * s.lit_bufsize;\n\n  //s->l_buf = s->pending_buf + (1+sizeof(ush))*s->lit_bufsize;\n  s.l_buf = (1 + 2) * s.lit_bufsize;\n\n  s.level = level;\n  s.strategy = strategy;\n  s.method = method;\n\n  return deflateReset(strm);\n}\n\nfunction deflateInit(strm, level) {\n  return deflateInit2(strm, level, Z_DEFLATED, MAX_WBITS, DEF_MEM_LEVEL, Z_DEFAULT_STRATEGY);\n}\n\n\nfunction deflate(strm, flush) {\n  var old_flush, s;\n  var beg, val; // for gzip header write only\n\n  if (!strm || !strm.state ||\n    flush > Z_BLOCK || flush < 0) {\n    return strm ? err(strm, Z_STREAM_ERROR) : Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n\n  if (!strm.output ||\n      (!strm.input && strm.avail_in !== 0) ||\n      (s.status === FINISH_STATE && flush !== Z_FINISH)) {\n    return err(strm, (strm.avail_out === 0) ? Z_BUF_ERROR : Z_STREAM_ERROR);\n  }\n\n  s.strm = strm; /* just in case */\n  old_flush = s.last_flush;\n  s.last_flush = flush;\n\n  /* Write the header */\n  if (s.status === INIT_STATE) {\n\n    if (s.wrap === 2) { // GZIP header\n      strm.adler = 0;  //crc32(0L, Z_NULL, 0);\n      put_byte(s, 31);\n      put_byte(s, 139);\n      put_byte(s, 8);\n      if (!s.gzhead) { // s->gzhead == Z_NULL\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, 0);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, OS_CODE);\n        s.status = BUSY_STATE;\n      }\n      else {\n        put_byte(s, (s.gzhead.text ? 1 : 0) +\n                    (s.gzhead.hcrc ? 2 : 0) +\n                    (!s.gzhead.extra ? 0 : 4) +\n                    (!s.gzhead.name ? 0 : 8) +\n                    (!s.gzhead.comment ? 0 : 16)\n        );\n        put_byte(s, s.gzhead.time & 0xff);\n        put_byte(s, (s.gzhead.time >> 8) & 0xff);\n        put_byte(s, (s.gzhead.time >> 16) & 0xff);\n        put_byte(s, (s.gzhead.time >> 24) & 0xff);\n        put_byte(s, s.level === 9 ? 2 :\n                    (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2 ?\n                     4 : 0));\n        put_byte(s, s.gzhead.os & 0xff);\n        if (s.gzhead.extra && s.gzhead.extra.length) {\n          put_byte(s, s.gzhead.extra.length & 0xff);\n          put_byte(s, (s.gzhead.extra.length >> 8) & 0xff);\n        }\n        if (s.gzhead.hcrc) {\n          strm.adler = crc32(strm.adler, s.pending_buf, s.pending, 0);\n        }\n        s.gzindex = 0;\n        s.status = EXTRA_STATE;\n      }\n    }\n    else // DEFLATE header\n    {\n      var header = (Z_DEFLATED + ((s.w_bits - 8) << 4)) << 8;\n      var level_flags = -1;\n\n      if (s.strategy >= Z_HUFFMAN_ONLY || s.level < 2) {\n        level_flags = 0;\n      } else if (s.level < 6) {\n        level_flags = 1;\n      } else if (s.level === 6) {\n        level_flags = 2;\n      } else {\n        level_flags = 3;\n      }\n      header |= (level_flags << 6);\n      if (s.strstart !== 0) { header |= PRESET_DICT; }\n      header += 31 - (header % 31);\n\n      s.status = BUSY_STATE;\n      putShortMSB(s, header);\n\n      /* Save the adler32 of the preset dictionary: */\n      if (s.strstart !== 0) {\n        putShortMSB(s, strm.adler >>> 16);\n        putShortMSB(s, strm.adler & 0xffff);\n      }\n      strm.adler = 1; // adler32(0L, Z_NULL, 0);\n    }\n  }\n\n//#ifdef GZIP\n  if (s.status === EXTRA_STATE) {\n    if (s.gzhead.extra/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n\n      while (s.gzindex < (s.gzhead.extra.length & 0xffff)) {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            break;\n          }\n        }\n        put_byte(s, s.gzhead.extra[s.gzindex] & 0xff);\n        s.gzindex++;\n      }\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (s.gzindex === s.gzhead.extra.length) {\n        s.gzindex = 0;\n        s.status = NAME_STATE;\n      }\n    }\n    else {\n      s.status = NAME_STATE;\n    }\n  }\n  if (s.status === NAME_STATE) {\n    if (s.gzhead.name/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.name.length) {\n          val = s.gzhead.name.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.gzindex = 0;\n        s.status = COMMENT_STATE;\n      }\n    }\n    else {\n      s.status = COMMENT_STATE;\n    }\n  }\n  if (s.status === COMMENT_STATE) {\n    if (s.gzhead.comment/* != Z_NULL*/) {\n      beg = s.pending;  /* start of bytes to update crc */\n      //int val;\n\n      do {\n        if (s.pending === s.pending_buf_size) {\n          if (s.gzhead.hcrc && s.pending > beg) {\n            strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n          }\n          flush_pending(strm);\n          beg = s.pending;\n          if (s.pending === s.pending_buf_size) {\n            val = 1;\n            break;\n          }\n        }\n        // JS specific: little magic to add zero terminator to end of string\n        if (s.gzindex < s.gzhead.comment.length) {\n          val = s.gzhead.comment.charCodeAt(s.gzindex++) & 0xff;\n        } else {\n          val = 0;\n        }\n        put_byte(s, val);\n      } while (val !== 0);\n\n      if (s.gzhead.hcrc && s.pending > beg) {\n        strm.adler = crc32(strm.adler, s.pending_buf, s.pending - beg, beg);\n      }\n      if (val === 0) {\n        s.status = HCRC_STATE;\n      }\n    }\n    else {\n      s.status = HCRC_STATE;\n    }\n  }\n  if (s.status === HCRC_STATE) {\n    if (s.gzhead.hcrc) {\n      if (s.pending + 2 > s.pending_buf_size) {\n        flush_pending(strm);\n      }\n      if (s.pending + 2 <= s.pending_buf_size) {\n        put_byte(s, strm.adler & 0xff);\n        put_byte(s, (strm.adler >> 8) & 0xff);\n        strm.adler = 0; //crc32(0L, Z_NULL, 0);\n        s.status = BUSY_STATE;\n      }\n    }\n    else {\n      s.status = BUSY_STATE;\n    }\n  }\n//#endif\n\n  /* Flush as much pending output as possible */\n  if (s.pending !== 0) {\n    flush_pending(strm);\n    if (strm.avail_out === 0) {\n      /* Since avail_out is 0, deflate will be called again with\n       * more output space, but possibly with both pending and\n       * avail_in equal to zero. There won't be anything to do,\n       * but this is not an error situation so make sure we\n       * return OK instead of BUF_ERROR at next call of deflate:\n       */\n      s.last_flush = -1;\n      return Z_OK;\n    }\n\n    /* Make sure there is something to do and avoid duplicate consecutive\n     * flushes. For repeated and useless calls with Z_FINISH, we keep\n     * returning Z_STREAM_END instead of Z_BUF_ERROR.\n     */\n  } else if (strm.avail_in === 0 && rank(flush) <= rank(old_flush) &&\n    flush !== Z_FINISH) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* User must not provide more input after the first FINISH: */\n  if (s.status === FINISH_STATE && strm.avail_in !== 0) {\n    return err(strm, Z_BUF_ERROR);\n  }\n\n  /* Start a new block or continue the current one.\n   */\n  if (strm.avail_in !== 0 || s.lookahead !== 0 ||\n    (flush !== Z_NO_FLUSH && s.status !== FINISH_STATE)) {\n    var bstate = (s.strategy === Z_HUFFMAN_ONLY) ? deflate_huff(s, flush) :\n      (s.strategy === Z_RLE ? deflate_rle(s, flush) :\n        configuration_table[s.level].func(s, flush));\n\n    if (bstate === BS_FINISH_STARTED || bstate === BS_FINISH_DONE) {\n      s.status = FINISH_STATE;\n    }\n    if (bstate === BS_NEED_MORE || bstate === BS_FINISH_STARTED) {\n      if (strm.avail_out === 0) {\n        s.last_flush = -1;\n        /* avoid BUF_ERROR next call, see above */\n      }\n      return Z_OK;\n      /* If flush != Z_NO_FLUSH && avail_out == 0, the next call\n       * of deflate should use the same flush parameter to make sure\n       * that the flush is complete. So we don't have to output an\n       * empty block here, this will be done at next call. This also\n       * ensures that for a very small output buffer, we emit at most\n       * one empty block.\n       */\n    }\n    if (bstate === BS_BLOCK_DONE) {\n      if (flush === Z_PARTIAL_FLUSH) {\n        trees._tr_align(s);\n      }\n      else if (flush !== Z_BLOCK) { /* FULL_FLUSH or SYNC_FLUSH */\n\n        trees._tr_stored_block(s, 0, 0, false);\n        /* For a full flush, this empty block will be recognized\n         * as a special marker by inflate_sync().\n         */\n        if (flush === Z_FULL_FLUSH) {\n          /*** CLEAR_HASH(s); ***/             /* forget history */\n          zero(s.head); // Fill with NIL (= 0);\n\n          if (s.lookahead === 0) {\n            s.strstart = 0;\n            s.block_start = 0;\n            s.insert = 0;\n          }\n        }\n      }\n      flush_pending(strm);\n      if (strm.avail_out === 0) {\n        s.last_flush = -1; /* avoid BUF_ERROR at next call, see above */\n        return Z_OK;\n      }\n    }\n  }\n  //Assert(strm->avail_out > 0, \"bug2\");\n  //if (strm.avail_out <= 0) { throw new Error(\"bug2\");}\n\n  if (flush !== Z_FINISH) { return Z_OK; }\n  if (s.wrap <= 0) { return Z_STREAM_END; }\n\n  /* Write the trailer */\n  if (s.wrap === 2) {\n    put_byte(s, strm.adler & 0xff);\n    put_byte(s, (strm.adler >> 8) & 0xff);\n    put_byte(s, (strm.adler >> 16) & 0xff);\n    put_byte(s, (strm.adler >> 24) & 0xff);\n    put_byte(s, strm.total_in & 0xff);\n    put_byte(s, (strm.total_in >> 8) & 0xff);\n    put_byte(s, (strm.total_in >> 16) & 0xff);\n    put_byte(s, (strm.total_in >> 24) & 0xff);\n  }\n  else\n  {\n    putShortMSB(s, strm.adler >>> 16);\n    putShortMSB(s, strm.adler & 0xffff);\n  }\n\n  flush_pending(strm);\n  /* If avail_out is zero, the application will call deflate again\n   * to flush the rest.\n   */\n  if (s.wrap > 0) { s.wrap = -s.wrap; }\n  /* write the trailer only once! */\n  return s.pending !== 0 ? Z_OK : Z_STREAM_END;\n}\n\nfunction deflateEnd(strm) {\n  var status;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  status = strm.state.status;\n  if (status !== INIT_STATE &&\n    status !== EXTRA_STATE &&\n    status !== NAME_STATE &&\n    status !== COMMENT_STATE &&\n    status !== HCRC_STATE &&\n    status !== BUSY_STATE &&\n    status !== FINISH_STATE\n  ) {\n    return err(strm, Z_STREAM_ERROR);\n  }\n\n  strm.state = null;\n\n  return status === BUSY_STATE ? err(strm, Z_DATA_ERROR) : Z_OK;\n}\n\n\n/* =========================================================================\n * Initializes the compression dictionary from the given byte\n * sequence without producing any compressed output.\n */\nfunction deflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var s;\n  var str, n;\n  var wrap;\n  var avail;\n  var next;\n  var input;\n  var tmpDict;\n\n  if (!strm/*== Z_NULL*/ || !strm.state/*== Z_NULL*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  s = strm.state;\n  wrap = s.wrap;\n\n  if (wrap === 2 || (wrap === 1 && s.status !== INIT_STATE) || s.lookahead) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* when using zlib wrappers, compute Adler-32 for provided dictionary */\n  if (wrap === 1) {\n    /* adler32(strm->adler, dictionary, dictLength); */\n    strm.adler = adler32(strm.adler, dictionary, dictLength, 0);\n  }\n\n  s.wrap = 0;   /* avoid computing Adler-32 in read_buf */\n\n  /* if dictionary would fill window, just replace the history */\n  if (dictLength >= s.w_size) {\n    if (wrap === 0) {            /* already empty otherwise */\n      /*** CLEAR_HASH(s); ***/\n      zero(s.head); // Fill with NIL (= 0);\n      s.strstart = 0;\n      s.block_start = 0;\n      s.insert = 0;\n    }\n    /* use the tail */\n    // dictionary = dictionary.slice(dictLength - s.w_size);\n    tmpDict = new utils.Buf8(s.w_size);\n    utils.arraySet(tmpDict, dictionary, dictLength - s.w_size, s.w_size, 0);\n    dictionary = tmpDict;\n    dictLength = s.w_size;\n  }\n  /* insert dictionary into window and hash */\n  avail = strm.avail_in;\n  next = strm.next_in;\n  input = strm.input;\n  strm.avail_in = dictLength;\n  strm.next_in = 0;\n  strm.input = dictionary;\n  fill_window(s);\n  while (s.lookahead >= MIN_MATCH) {\n    str = s.strstart;\n    n = s.lookahead - (MIN_MATCH - 1);\n    do {\n      /* UPDATE_HASH(s, s->ins_h, s->window[str + MIN_MATCH-1]); */\n      s.ins_h = ((s.ins_h << s.hash_shift) ^ s.window[str + MIN_MATCH - 1]) & s.hash_mask;\n\n      s.prev[str & s.w_mask] = s.head[s.ins_h];\n\n      s.head[s.ins_h] = str;\n      str++;\n    } while (--n);\n    s.strstart = str;\n    s.lookahead = MIN_MATCH - 1;\n    fill_window(s);\n  }\n  s.strstart += s.lookahead;\n  s.block_start = s.strstart;\n  s.insert = s.lookahead;\n  s.lookahead = 0;\n  s.match_length = s.prev_length = MIN_MATCH - 1;\n  s.match_available = 0;\n  strm.next_in = next;\n  strm.input = input;\n  strm.avail_in = avail;\n  s.wrap = wrap;\n  return Z_OK;\n}\n\n\nexports.deflateInit = deflateInit;\nexports.deflateInit2 = deflateInit2;\nexports.deflateReset = deflateReset;\nexports.deflateResetKeep = deflateResetKeep;\nexports.deflateSetHeader = deflateSetHeader;\nexports.deflate = deflate;\nexports.deflateEnd = deflateEnd;\nexports.deflateSetDictionary = deflateSetDictionary;\nexports.deflateInfo = 'pako deflate (from Nodeca project)';\n\n/* Not implemented\nexports.deflateBound = deflateBound;\nexports.deflateCopy = deflateCopy;\nexports.deflateParams = deflateParams;\nexports.deflatePending = deflatePending;\nexports.deflatePrime = deflatePrime;\nexports.deflateTune = deflateTune;\n*/\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction GZheader() {\n  /* true if compressed data believed to be text */\n  this.text       = 0;\n  /* modification time */\n  this.time       = 0;\n  /* extra flags (not used when writing a gzip file) */\n  this.xflags     = 0;\n  /* operating system */\n  this.os         = 0;\n  /* pointer to extra field or Z_NULL if none */\n  this.extra      = null;\n  /* extra field length (valid if extra != Z_NULL) */\n  this.extra_len  = 0; // Actually, we don't need it in JS,\n                       // but leave for few code modifications\n\n  //\n  // Setup limits is not necessary because in js we should not preallocate memory\n  // for inflate use constant limit in 65536 bytes\n  //\n\n  /* space at extra (only when reading header) */\n  // this.extra_max  = 0;\n  /* pointer to zero-terminated file name or Z_NULL */\n  this.name       = '';\n  /* space at name (only when reading header) */\n  // this.name_max   = 0;\n  /* pointer to zero-terminated comment or Z_NULL */\n  this.comment    = '';\n  /* space at comment (only when reading header) */\n  // this.comm_max   = 0;\n  /* true if there was or will be a header crc */\n  this.hcrc       = 0;\n  /* true when done reading gzip header (not used when writing a gzip file) */\n  this.done       = false;\n}\n\nmodule.exports = GZheader;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n// See state defs from inflate.js\nvar BAD = 30;       /* got a data error -- remain here until reset */\nvar TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\n\n/*\n   Decode literal, length, and distance codes and write out the resulting\n   literal and match bytes until either not enough input or output is\n   available, an end-of-block is encountered, or a data error is encountered.\n   When large enough input and output buffers are supplied to inflate(), for\n   example, a 16K input buffer and a 64K output buffer, more than 95% of the\n   inflate execution time is spent in this routine.\n\n   Entry assumptions:\n\n        state.mode === LEN\n        strm.avail_in >= 6\n        strm.avail_out >= 258\n        start >= strm.avail_out\n        state.bits < 8\n\n   On return, state.mode is one of:\n\n        LEN -- ran out of enough output space or enough available input\n        TYPE -- reached end of block code, inflate() to interpret next block\n        BAD -- error in block data\n\n   Notes:\n\n    - The maximum input bits used by a length/distance pair is 15 bits for the\n      length code, 5 bits for the length extra, 15 bits for the distance code,\n      and 13 bits for the distance extra.  This totals 48 bits, or six bytes.\n      Therefore if strm.avail_in >= 6, then there is enough input to avoid\n      checking for available input while decoding.\n\n    - The maximum bytes that a single length/distance pair can output is 258\n      bytes, which is the maximum length that can be coded.  inflate_fast()\n      requires strm.avail_out >= 258 for each loop to avoid checking for\n      output space.\n */\nmodule.exports = function inflate_fast(strm, start) {\n  var state;\n  var _in;                    /* local strm.input */\n  var last;                   /* have enough input while in < last */\n  var _out;                   /* local strm.output */\n  var beg;                    /* inflate()'s initial strm.output */\n  var end;                    /* while out < end, enough space available */\n//#ifdef INFLATE_STRICT\n  var dmax;                   /* maximum distance from zlib header */\n//#endif\n  var wsize;                  /* window size or zero if not using window */\n  var whave;                  /* valid bytes in the window */\n  var wnext;                  /* window write index */\n  // Use `s_window` instead `window`, avoid conflict with instrumentation tools\n  var s_window;               /* allocated sliding window, if wsize != 0 */\n  var hold;                   /* local strm.hold */\n  var bits;                   /* local strm.bits */\n  var lcode;                  /* local strm.lencode */\n  var dcode;                  /* local strm.distcode */\n  var lmask;                  /* mask for first level of length codes */\n  var dmask;                  /* mask for first level of distance codes */\n  var here;                   /* retrieved table entry */\n  var op;                     /* code bits, operation, extra bits, or */\n                              /*  window position, window bytes to copy */\n  var len;                    /* match length, unused bytes */\n  var dist;                   /* match distance */\n  var from;                   /* where to copy match from */\n  var from_source;\n\n\n  var input, output; // JS specific, because we have no pointers\n\n  /* copy state to local variables */\n  state = strm.state;\n  //here = state.here;\n  _in = strm.next_in;\n  input = strm.input;\n  last = _in + (strm.avail_in - 5);\n  _out = strm.next_out;\n  output = strm.output;\n  beg = _out - (start - strm.avail_out);\n  end = _out + (strm.avail_out - 257);\n//#ifdef INFLATE_STRICT\n  dmax = state.dmax;\n//#endif\n  wsize = state.wsize;\n  whave = state.whave;\n  wnext = state.wnext;\n  s_window = state.window;\n  hold = state.hold;\n  bits = state.bits;\n  lcode = state.lencode;\n  dcode = state.distcode;\n  lmask = (1 << state.lenbits) - 1;\n  dmask = (1 << state.distbits) - 1;\n\n\n  /* decode literals and length/distances until end-of-block or not enough\n     input data or output space */\n\n  top:\n  do {\n    if (bits < 15) {\n      hold += input[_in++] << bits;\n      bits += 8;\n      hold += input[_in++] << bits;\n      bits += 8;\n    }\n\n    here = lcode[hold & lmask];\n\n    dolen:\n    for (;;) { // Goto emulation\n      op = here >>> 24/*here.bits*/;\n      hold >>>= op;\n      bits -= op;\n      op = (here >>> 16) & 0xff/*here.op*/;\n      if (op === 0) {                          /* literal */\n        //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n        //        \"inflate:         literal '%c'\\n\" :\n        //        \"inflate:         literal 0x%02x\\n\", here.val));\n        output[_out++] = here & 0xffff/*here.val*/;\n      }\n      else if (op & 16) {                     /* length base */\n        len = here & 0xffff/*here.val*/;\n        op &= 15;                           /* number of extra bits */\n        if (op) {\n          if (bits < op) {\n            hold += input[_in++] << bits;\n            bits += 8;\n          }\n          len += hold & ((1 << op) - 1);\n          hold >>>= op;\n          bits -= op;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", len));\n        if (bits < 15) {\n          hold += input[_in++] << bits;\n          bits += 8;\n          hold += input[_in++] << bits;\n          bits += 8;\n        }\n        here = dcode[hold & dmask];\n\n        dodist:\n        for (;;) { // goto emulation\n          op = here >>> 24/*here.bits*/;\n          hold >>>= op;\n          bits -= op;\n          op = (here >>> 16) & 0xff/*here.op*/;\n\n          if (op & 16) {                      /* distance base */\n            dist = here & 0xffff/*here.val*/;\n            op &= 15;                       /* number of extra bits */\n            if (bits < op) {\n              hold += input[_in++] << bits;\n              bits += 8;\n              if (bits < op) {\n                hold += input[_in++] << bits;\n                bits += 8;\n              }\n            }\n            dist += hold & ((1 << op) - 1);\n//#ifdef INFLATE_STRICT\n            if (dist > dmax) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break top;\n            }\n//#endif\n            hold >>>= op;\n            bits -= op;\n            //Tracevv((stderr, \"inflate:         distance %u\\n\", dist));\n            op = _out - beg;                /* max distance in output */\n            if (dist > op) {                /* see if copy from window */\n              op = dist - op;               /* distance back in window */\n              if (op > whave) {\n                if (state.sane) {\n                  strm.msg = 'invalid distance too far back';\n                  state.mode = BAD;\n                  break top;\n                }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//                if (len <= op - whave) {\n//                  do {\n//                    output[_out++] = 0;\n//                  } while (--len);\n//                  continue top;\n//                }\n//                len -= op - whave;\n//                do {\n//                  output[_out++] = 0;\n//                } while (--op > whave);\n//                if (op === 0) {\n//                  from = _out - dist;\n//                  do {\n//                    output[_out++] = output[from++];\n//                  } while (--len);\n//                  continue top;\n//                }\n//#endif\n              }\n              from = 0; // window index\n              from_source = s_window;\n              if (wnext === 0) {           /* very common case */\n                from += wsize - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              else if (wnext < op) {      /* wrap around window */\n                from += wsize + wnext - op;\n                op -= wnext;\n                if (op < len) {         /* some from end of window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = 0;\n                  if (wnext < len) {  /* some from start of window */\n                    op = wnext;\n                    len -= op;\n                    do {\n                      output[_out++] = s_window[from++];\n                    } while (--op);\n                    from = _out - dist;      /* rest from output */\n                    from_source = output;\n                  }\n                }\n              }\n              else {                      /* contiguous in window */\n                from += wnext - op;\n                if (op < len) {         /* some from window */\n                  len -= op;\n                  do {\n                    output[_out++] = s_window[from++];\n                  } while (--op);\n                  from = _out - dist;  /* rest from output */\n                  from_source = output;\n                }\n              }\n              while (len > 2) {\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                output[_out++] = from_source[from++];\n                len -= 3;\n              }\n              if (len) {\n                output[_out++] = from_source[from++];\n                if (len > 1) {\n                  output[_out++] = from_source[from++];\n                }\n              }\n            }\n            else {\n              from = _out - dist;          /* copy direct from output */\n              do {                        /* minimum length is three */\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                output[_out++] = output[from++];\n                len -= 3;\n              } while (len > 2);\n              if (len) {\n                output[_out++] = output[from++];\n                if (len > 1) {\n                  output[_out++] = output[from++];\n                }\n              }\n            }\n          }\n          else if ((op & 64) === 0) {          /* 2nd level distance code */\n            here = dcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n            continue dodist;\n          }\n          else {\n            strm.msg = 'invalid distance code';\n            state.mode = BAD;\n            break top;\n          }\n\n          break; // need to emulate goto via \"continue\"\n        }\n      }\n      else if ((op & 64) === 0) {              /* 2nd level length code */\n        here = lcode[(here & 0xffff)/*here.val*/ + (hold & ((1 << op) - 1))];\n        continue dolen;\n      }\n      else if (op & 32) {                     /* end-of-block */\n        //Tracevv((stderr, \"inflate:         end of block\\n\"));\n        state.mode = TYPE;\n        break top;\n      }\n      else {\n        strm.msg = 'invalid literal/length code';\n        state.mode = BAD;\n        break top;\n      }\n\n      break; // need to emulate goto via \"continue\"\n    }\n  } while (_in < last && _out < end);\n\n  /* return unused bytes (on entry, bits < 8, so in won't go too far back) */\n  len = bits >> 3;\n  _in -= len;\n  bits -= len << 3;\n  hold &= (1 << bits) - 1;\n\n  /* update state and return */\n  strm.next_in = _in;\n  strm.next_out = _out;\n  strm.avail_in = (_in < last ? 5 + (last - _in) : 5 - (_in - last));\n  strm.avail_out = (_out < end ? 257 + (end - _out) : 257 - (_out - end));\n  state.hold = hold;\n  state.bits = bits;\n  return;\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils         = require('../utils/common');\nvar adler32       = require('./adler32');\nvar crc32         = require('./crc32');\nvar inflate_fast  = require('./inffast');\nvar inflate_table = require('./inftrees');\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n/* Allowed flush values; see deflate() and inflate() below for details */\n//var Z_NO_FLUSH      = 0;\n//var Z_PARTIAL_FLUSH = 1;\n//var Z_SYNC_FLUSH    = 2;\n//var Z_FULL_FLUSH    = 3;\nvar Z_FINISH        = 4;\nvar Z_BLOCK         = 5;\nvar Z_TREES         = 6;\n\n\n/* Return codes for the compression/decompression functions. Negative values\n * are errors, positive values are used for special but normal events.\n */\nvar Z_OK            = 0;\nvar Z_STREAM_END    = 1;\nvar Z_NEED_DICT     = 2;\n//var Z_ERRNO         = -1;\nvar Z_STREAM_ERROR  = -2;\nvar Z_DATA_ERROR    = -3;\nvar Z_MEM_ERROR     = -4;\nvar Z_BUF_ERROR     = -5;\n//var Z_VERSION_ERROR = -6;\n\n/* The deflate compression method */\nvar Z_DEFLATED  = 8;\n\n\n/* STATES ====================================================================*/\n/* ===========================================================================*/\n\n\nvar    HEAD = 1;       /* i: waiting for magic header */\nvar    FLAGS = 2;      /* i: waiting for method and flags (gzip) */\nvar    TIME = 3;       /* i: waiting for modification time (gzip) */\nvar    OS = 4;         /* i: waiting for extra flags and operating system (gzip) */\nvar    EXLEN = 5;      /* i: waiting for extra length (gzip) */\nvar    EXTRA = 6;      /* i: waiting for extra bytes (gzip) */\nvar    NAME = 7;       /* i: waiting for end of file name (gzip) */\nvar    COMMENT = 8;    /* i: waiting for end of comment (gzip) */\nvar    HCRC = 9;       /* i: waiting for header crc (gzip) */\nvar    DICTID = 10;    /* i: waiting for dictionary check value */\nvar    DICT = 11;      /* waiting for inflateSetDictionary() call */\nvar        TYPE = 12;      /* i: waiting for type bits, including last-flag bit */\nvar        TYPEDO = 13;    /* i: same, but skip check to exit inflate on new block */\nvar        STORED = 14;    /* i: waiting for stored size (length and complement) */\nvar        COPY_ = 15;     /* i/o: same as COPY below, but only first time in */\nvar        COPY = 16;      /* i/o: waiting for input or output to copy stored block */\nvar        TABLE = 17;     /* i: waiting for dynamic block table lengths */\nvar        LENLENS = 18;   /* i: waiting for code length code lengths */\nvar        CODELENS = 19;  /* i: waiting for length/lit and distance code lengths */\nvar            LEN_ = 20;      /* i: same as LEN below, but only first time in */\nvar            LEN = 21;       /* i: waiting for length/lit/eob code */\nvar            LENEXT = 22;    /* i: waiting for length extra bits */\nvar            DIST = 23;      /* i: waiting for distance code */\nvar            DISTEXT = 24;   /* i: waiting for distance extra bits */\nvar            MATCH = 25;     /* o: waiting for output space to copy string */\nvar            LIT = 26;       /* o: waiting for output space to write literal */\nvar    CHECK = 27;     /* i: waiting for 32-bit check value */\nvar    LENGTH = 28;    /* i: waiting for 32-bit length (gzip) */\nvar    DONE = 29;      /* finished check, done -- remain here until reset */\nvar    BAD = 30;       /* got a data error -- remain here until reset */\nvar    MEM = 31;       /* got an inflate() memory error -- remain here until reset */\nvar    SYNC = 32;      /* looking for synchronization bytes to restart inflate() */\n\n/* ===========================================================================*/\n\n\n\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH =  (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar MAX_WBITS = 15;\n/* 32K LZ77 window */\nvar DEF_WBITS = MAX_WBITS;\n\n\nfunction zswap32(q) {\n  return  (((q >>> 24) & 0xff) +\n          ((q >>> 8) & 0xff00) +\n          ((q & 0xff00) << 8) +\n          ((q & 0xff) << 24));\n}\n\n\nfunction InflateState() {\n  this.mode = 0;             /* current inflate mode */\n  this.last = false;          /* true if processing last block */\n  this.wrap = 0;              /* bit 0 true for zlib, bit 1 true for gzip */\n  this.havedict = false;      /* true if dictionary provided */\n  this.flags = 0;             /* gzip header method and flags (0 if zlib) */\n  this.dmax = 0;              /* zlib header max distance (INFLATE_STRICT) */\n  this.check = 0;             /* protected copy of check value */\n  this.total = 0;             /* protected copy of output count */\n  // TODO: may be {}\n  this.head = null;           /* where to save gzip header information */\n\n  /* sliding window */\n  this.wbits = 0;             /* log base 2 of requested window size */\n  this.wsize = 0;             /* window size or zero if not using window */\n  this.whave = 0;             /* valid bytes in the window */\n  this.wnext = 0;             /* window write index */\n  this.window = null;         /* allocated sliding window, if needed */\n\n  /* bit accumulator */\n  this.hold = 0;              /* input bit accumulator */\n  this.bits = 0;              /* number of bits in \"in\" */\n\n  /* for string and stored block copying */\n  this.length = 0;            /* literal or length of data to copy */\n  this.offset = 0;            /* distance back to copy string from */\n\n  /* for table and code decoding */\n  this.extra = 0;             /* extra bits needed */\n\n  /* fixed and dynamic code tables */\n  this.lencode = null;          /* starting table for length/literal codes */\n  this.distcode = null;         /* starting table for distance codes */\n  this.lenbits = 0;           /* index bits for lencode */\n  this.distbits = 0;          /* index bits for distcode */\n\n  /* dynamic table building */\n  this.ncode = 0;             /* number of code length code lengths */\n  this.nlen = 0;              /* number of length code lengths */\n  this.ndist = 0;             /* number of distance code lengths */\n  this.have = 0;              /* number of code lengths in lens[] */\n  this.next = null;              /* next available space in codes[] */\n\n  this.lens = new utils.Buf16(320); /* temporary storage for code lengths */\n  this.work = new utils.Buf16(288); /* work area for code table building */\n\n  /*\n   because we don't have pointers in js, we use lencode and distcode directly\n   as buffers so we don't need codes\n  */\n  //this.codes = new utils.Buf32(ENOUGH);       /* space for code tables */\n  this.lendyn = null;              /* dynamic table for length/literal codes (JS specific) */\n  this.distdyn = null;             /* dynamic table for distance codes (JS specific) */\n  this.sane = 0;                   /* if false, allow invalid distance too far */\n  this.back = 0;                   /* bits back of last unprocessed length/lit */\n  this.was = 0;                    /* initial length of match */\n}\n\nfunction inflateResetKeep(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  strm.total_in = strm.total_out = state.total = 0;\n  strm.msg = ''; /*Z_NULL*/\n  if (state.wrap) {       /* to support ill-conceived Java test suite */\n    strm.adler = state.wrap & 1;\n  }\n  state.mode = HEAD;\n  state.last = 0;\n  state.havedict = 0;\n  state.dmax = 32768;\n  state.head = null/*Z_NULL*/;\n  state.hold = 0;\n  state.bits = 0;\n  //state.lencode = state.distcode = state.next = state.codes;\n  state.lencode = state.lendyn = new utils.Buf32(ENOUGH_LENS);\n  state.distcode = state.distdyn = new utils.Buf32(ENOUGH_DISTS);\n\n  state.sane = 1;\n  state.back = -1;\n  //Tracev((stderr, \"inflate: reset\\n\"));\n  return Z_OK;\n}\n\nfunction inflateReset(strm) {\n  var state;\n\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  state.wsize = 0;\n  state.whave = 0;\n  state.wnext = 0;\n  return inflateResetKeep(strm);\n\n}\n\nfunction inflateReset2(strm, windowBits) {\n  var wrap;\n  var state;\n\n  /* get the state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  /* extract wrap request from windowBits parameter */\n  if (windowBits < 0) {\n    wrap = 0;\n    windowBits = -windowBits;\n  }\n  else {\n    wrap = (windowBits >> 4) + 1;\n    if (windowBits < 48) {\n      windowBits &= 15;\n    }\n  }\n\n  /* set number of window bits, free window if different */\n  if (windowBits && (windowBits < 8 || windowBits > 15)) {\n    return Z_STREAM_ERROR;\n  }\n  if (state.window !== null && state.wbits !== windowBits) {\n    state.window = null;\n  }\n\n  /* update state and reset the rest of it */\n  state.wrap = wrap;\n  state.wbits = windowBits;\n  return inflateReset(strm);\n}\n\nfunction inflateInit2(strm, windowBits) {\n  var ret;\n  var state;\n\n  if (!strm) { return Z_STREAM_ERROR; }\n  //strm.msg = Z_NULL;                 /* in case we return an error */\n\n  state = new InflateState();\n\n  //if (state === Z_NULL) return Z_MEM_ERROR;\n  //Tracev((stderr, \"inflate: allocated\\n\"));\n  strm.state = state;\n  state.window = null/*Z_NULL*/;\n  ret = inflateReset2(strm, windowBits);\n  if (ret !== Z_OK) {\n    strm.state = null/*Z_NULL*/;\n  }\n  return ret;\n}\n\nfunction inflateInit(strm) {\n  return inflateInit2(strm, DEF_WBITS);\n}\n\n\n/*\n Return state with length and distance decoding tables and index sizes set to\n fixed code decoding.  Normally this returns fixed tables from inffixed.h.\n If BUILDFIXED is defined, then instead this routine builds the tables the\n first time it's called, and returns those tables the first time and\n thereafter.  This reduces the size of the code by about 2K bytes, in\n exchange for a little execution time.  However, BUILDFIXED should not be\n used for threaded applications, since the rewriting of the tables and virgin\n may not be thread-safe.\n */\nvar virgin = true;\n\nvar lenfix, distfix; // We have no pointers in JS, so keep tables separate\n\nfunction fixedtables(state) {\n  /* build fixed huffman tables if first call (may not be thread safe) */\n  if (virgin) {\n    var sym;\n\n    lenfix = new utils.Buf32(512);\n    distfix = new utils.Buf32(32);\n\n    /* literal/length table */\n    sym = 0;\n    while (sym < 144) { state.lens[sym++] = 8; }\n    while (sym < 256) { state.lens[sym++] = 9; }\n    while (sym < 280) { state.lens[sym++] = 7; }\n    while (sym < 288) { state.lens[sym++] = 8; }\n\n    inflate_table(LENS,  state.lens, 0, 288, lenfix,   0, state.work, { bits: 9 });\n\n    /* distance table */\n    sym = 0;\n    while (sym < 32) { state.lens[sym++] = 5; }\n\n    inflate_table(DISTS, state.lens, 0, 32,   distfix, 0, state.work, { bits: 5 });\n\n    /* do this just once */\n    virgin = false;\n  }\n\n  state.lencode = lenfix;\n  state.lenbits = 9;\n  state.distcode = distfix;\n  state.distbits = 5;\n}\n\n\n/*\n Update the window with the last wsize (normally 32K) bytes written before\n returning.  If window does not exist yet, create it.  This is only called\n when a window is already in use, or when output has been written during this\n inflate call, but the end of the deflate stream has not been reached yet.\n It is also called to create a window for dictionary data when a dictionary\n is loaded.\n\n Providing output buffers larger than 32K to inflate() should provide a speed\n advantage, since only the last 32K of output is copied to the sliding window\n upon return from inflate(), and since all distances after the first 32K of\n output will fall in the output data, making match copies simpler and faster.\n The advantage may be dependent on the size of the processor's data caches.\n */\nfunction updatewindow(strm, src, end, copy) {\n  var dist;\n  var state = strm.state;\n\n  /* if it hasn't been done already, allocate space for the window */\n  if (state.window === null) {\n    state.wsize = 1 << state.wbits;\n    state.wnext = 0;\n    state.whave = 0;\n\n    state.window = new utils.Buf8(state.wsize);\n  }\n\n  /* copy state->wsize or less output bytes into the circular window */\n  if (copy >= state.wsize) {\n    utils.arraySet(state.window, src, end - state.wsize, state.wsize, 0);\n    state.wnext = 0;\n    state.whave = state.wsize;\n  }\n  else {\n    dist = state.wsize - state.wnext;\n    if (dist > copy) {\n      dist = copy;\n    }\n    //zmemcpy(state->window + state->wnext, end - copy, dist);\n    utils.arraySet(state.window, src, end - copy, dist, state.wnext);\n    copy -= dist;\n    if (copy) {\n      //zmemcpy(state->window, end - copy, copy);\n      utils.arraySet(state.window, src, end - copy, copy, 0);\n      state.wnext = copy;\n      state.whave = state.wsize;\n    }\n    else {\n      state.wnext += dist;\n      if (state.wnext === state.wsize) { state.wnext = 0; }\n      if (state.whave < state.wsize) { state.whave += dist; }\n    }\n  }\n  return 0;\n}\n\nfunction inflate(strm, flush) {\n  var state;\n  var input, output;          // input/output buffers\n  var next;                   /* next input INDEX */\n  var put;                    /* next output INDEX */\n  var have, left;             /* available input and output */\n  var hold;                   /* bit buffer */\n  var bits;                   /* bits in bit buffer */\n  var _in, _out;              /* save starting available input and output */\n  var copy;                   /* number of stored or match bytes to copy */\n  var from;                   /* where to copy match bytes from */\n  var from_source;\n  var here = 0;               /* current decoding table entry */\n  var here_bits, here_op, here_val; // paked \"here\" denormalized (JS specific)\n  //var last;                   /* parent table entry */\n  var last_bits, last_op, last_val; // paked \"last\" denormalized (JS specific)\n  var len;                    /* length to copy for repeats, bits to drop */\n  var ret;                    /* return code */\n  var hbuf = new utils.Buf8(4);    /* buffer for gzip header crc calculation */\n  var opts;\n\n  var n; // temporary var for NEED_BITS\n\n  var order = /* permutation of code lengths */\n    [ 16, 17, 18, 0, 8, 7, 9, 6, 10, 5, 11, 4, 12, 3, 13, 2, 14, 1, 15 ];\n\n\n  if (!strm || !strm.state || !strm.output ||\n      (!strm.input && strm.avail_in !== 0)) {\n    return Z_STREAM_ERROR;\n  }\n\n  state = strm.state;\n  if (state.mode === TYPE) { state.mode = TYPEDO; }    /* skip check */\n\n\n  //--- LOAD() ---\n  put = strm.next_out;\n  output = strm.output;\n  left = strm.avail_out;\n  next = strm.next_in;\n  input = strm.input;\n  have = strm.avail_in;\n  hold = state.hold;\n  bits = state.bits;\n  //---\n\n  _in = have;\n  _out = left;\n  ret = Z_OK;\n\n  inf_leave: // goto emulation\n  for (;;) {\n    switch (state.mode) {\n      case HEAD:\n        if (state.wrap === 0) {\n          state.mode = TYPEDO;\n          break;\n        }\n        //=== NEEDBITS(16);\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((state.wrap & 2) && hold === 0x8b1f) {  /* gzip header */\n          state.check = 0/*crc32(0L, Z_NULL, 0)*/;\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          state.mode = FLAGS;\n          break;\n        }\n        state.flags = 0;           /* expect zlib header */\n        if (state.head) {\n          state.head.done = false;\n        }\n        if (!(state.wrap & 1) ||   /* check if zlib header allowed */\n          (((hold & 0xff)/*BITS(8)*/ << 8) + (hold >> 8)) % 31) {\n          strm.msg = 'incorrect header check';\n          state.mode = BAD;\n          break;\n        }\n        if ((hold & 0x0f)/*BITS(4)*/ !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n        len = (hold & 0x0f)/*BITS(4)*/ + 8;\n        if (state.wbits === 0) {\n          state.wbits = len;\n        }\n        else if (len > state.wbits) {\n          strm.msg = 'invalid window size';\n          state.mode = BAD;\n          break;\n        }\n        state.dmax = 1 << len;\n        //Tracev((stderr, \"inflate:   zlib header ok\\n\"));\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = hold & 0x200 ? DICTID : TYPE;\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        break;\n      case FLAGS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.flags = hold;\n        if ((state.flags & 0xff) !== Z_DEFLATED) {\n          strm.msg = 'unknown compression method';\n          state.mode = BAD;\n          break;\n        }\n        if (state.flags & 0xe000) {\n          strm.msg = 'unknown header flags set';\n          state.mode = BAD;\n          break;\n        }\n        if (state.head) {\n          state.head.text = ((hold >> 8) & 1);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = TIME;\n        /* falls through */\n      case TIME:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.time = hold;\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC4(state.check, hold)\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          hbuf[2] = (hold >>> 16) & 0xff;\n          hbuf[3] = (hold >>> 24) & 0xff;\n          state.check = crc32(state.check, hbuf, 4, 0);\n          //===\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = OS;\n        /* falls through */\n      case OS:\n        //=== NEEDBITS(16); */\n        while (bits < 16) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if (state.head) {\n          state.head.xflags = (hold & 0xff);\n          state.head.os = (hold >> 8);\n        }\n        if (state.flags & 0x0200) {\n          //=== CRC2(state.check, hold);\n          hbuf[0] = hold & 0xff;\n          hbuf[1] = (hold >>> 8) & 0xff;\n          state.check = crc32(state.check, hbuf, 2, 0);\n          //===//\n        }\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = EXLEN;\n        /* falls through */\n      case EXLEN:\n        if (state.flags & 0x0400) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length = hold;\n          if (state.head) {\n            state.head.extra_len = hold;\n          }\n          if (state.flags & 0x0200) {\n            //=== CRC2(state.check, hold);\n            hbuf[0] = hold & 0xff;\n            hbuf[1] = (hold >>> 8) & 0xff;\n            state.check = crc32(state.check, hbuf, 2, 0);\n            //===//\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        else if (state.head) {\n          state.head.extra = null/*Z_NULL*/;\n        }\n        state.mode = EXTRA;\n        /* falls through */\n      case EXTRA:\n        if (state.flags & 0x0400) {\n          copy = state.length;\n          if (copy > have) { copy = have; }\n          if (copy) {\n            if (state.head) {\n              len = state.head.extra_len - state.length;\n              if (!state.head.extra) {\n                // Use untyped array for more convenient processing later\n                state.head.extra = new Array(state.head.extra_len);\n              }\n              utils.arraySet(\n                state.head.extra,\n                input,\n                next,\n                // extra field is limited to 65536 bytes\n                // - no need for additional size check\n                copy,\n                /*len + copy > state.head.extra_max - len ? state.head.extra_max : copy,*/\n                len\n              );\n              //zmemcpy(state.head.extra + len, next,\n              //        len + copy > state.head.extra_max ?\n              //        state.head.extra_max - len : copy);\n            }\n            if (state.flags & 0x0200) {\n              state.check = crc32(state.check, input, copy, next);\n            }\n            have -= copy;\n            next += copy;\n            state.length -= copy;\n          }\n          if (state.length) { break inf_leave; }\n        }\n        state.length = 0;\n        state.mode = NAME;\n        /* falls through */\n      case NAME:\n        if (state.flags & 0x0800) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            // TODO: 2 or 1 bytes?\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.name_max*/)) {\n              state.head.name += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.name = null;\n        }\n        state.length = 0;\n        state.mode = COMMENT;\n        /* falls through */\n      case COMMENT:\n        if (state.flags & 0x1000) {\n          if (have === 0) { break inf_leave; }\n          copy = 0;\n          do {\n            len = input[next + copy++];\n            /* use constant limit because in js we should not preallocate memory */\n            if (state.head && len &&\n                (state.length < 65536 /*state.head.comm_max*/)) {\n              state.head.comment += String.fromCharCode(len);\n            }\n          } while (len && copy < have);\n          if (state.flags & 0x0200) {\n            state.check = crc32(state.check, input, copy, next);\n          }\n          have -= copy;\n          next += copy;\n          if (len) { break inf_leave; }\n        }\n        else if (state.head) {\n          state.head.comment = null;\n        }\n        state.mode = HCRC;\n        /* falls through */\n      case HCRC:\n        if (state.flags & 0x0200) {\n          //=== NEEDBITS(16); */\n          while (bits < 16) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.check & 0xffff)) {\n            strm.msg = 'header crc mismatch';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n        }\n        if (state.head) {\n          state.head.hcrc = ((state.flags >> 9) & 1);\n          state.head.done = true;\n        }\n        strm.adler = state.check = 0;\n        state.mode = TYPE;\n        break;\n      case DICTID:\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        strm.adler = state.check = zswap32(hold);\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = DICT;\n        /* falls through */\n      case DICT:\n        if (state.havedict === 0) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          return Z_NEED_DICT;\n        }\n        strm.adler = state.check = 1/*adler32(0L, Z_NULL, 0)*/;\n        state.mode = TYPE;\n        /* falls through */\n      case TYPE:\n        if (flush === Z_BLOCK || flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case TYPEDO:\n        if (state.last) {\n          //--- BYTEBITS() ---//\n          hold >>>= bits & 7;\n          bits -= bits & 7;\n          //---//\n          state.mode = CHECK;\n          break;\n        }\n        //=== NEEDBITS(3); */\n        while (bits < 3) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.last = (hold & 0x01)/*BITS(1)*/;\n        //--- DROPBITS(1) ---//\n        hold >>>= 1;\n        bits -= 1;\n        //---//\n\n        switch ((hold & 0x03)/*BITS(2)*/) {\n          case 0:                             /* stored block */\n            //Tracev((stderr, \"inflate:     stored block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = STORED;\n            break;\n          case 1:                             /* fixed block */\n            fixedtables(state);\n            //Tracev((stderr, \"inflate:     fixed codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = LEN_;             /* decode codes */\n            if (flush === Z_TREES) {\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n              break inf_leave;\n            }\n            break;\n          case 2:                             /* dynamic block */\n            //Tracev((stderr, \"inflate:     dynamic codes block%s\\n\",\n            //        state.last ? \" (last)\" : \"\"));\n            state.mode = TABLE;\n            break;\n          case 3:\n            strm.msg = 'invalid block type';\n            state.mode = BAD;\n        }\n        //--- DROPBITS(2) ---//\n        hold >>>= 2;\n        bits -= 2;\n        //---//\n        break;\n      case STORED:\n        //--- BYTEBITS() ---// /* go to byte boundary */\n        hold >>>= bits & 7;\n        bits -= bits & 7;\n        //---//\n        //=== NEEDBITS(32); */\n        while (bits < 32) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        if ((hold & 0xffff) !== ((hold >>> 16) ^ 0xffff)) {\n          strm.msg = 'invalid stored block lengths';\n          state.mode = BAD;\n          break;\n        }\n        state.length = hold & 0xffff;\n        //Tracev((stderr, \"inflate:       stored length %u\\n\",\n        //        state.length));\n        //=== INITBITS();\n        hold = 0;\n        bits = 0;\n        //===//\n        state.mode = COPY_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case COPY_:\n        state.mode = COPY;\n        /* falls through */\n      case COPY:\n        copy = state.length;\n        if (copy) {\n          if (copy > have) { copy = have; }\n          if (copy > left) { copy = left; }\n          if (copy === 0) { break inf_leave; }\n          //--- zmemcpy(put, next, copy); ---\n          utils.arraySet(output, input, next, copy, put);\n          //---//\n          have -= copy;\n          next += copy;\n          left -= copy;\n          put += copy;\n          state.length -= copy;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       stored end\\n\"));\n        state.mode = TYPE;\n        break;\n      case TABLE:\n        //=== NEEDBITS(14); */\n        while (bits < 14) {\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n        }\n        //===//\n        state.nlen = (hold & 0x1f)/*BITS(5)*/ + 257;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ndist = (hold & 0x1f)/*BITS(5)*/ + 1;\n        //--- DROPBITS(5) ---//\n        hold >>>= 5;\n        bits -= 5;\n        //---//\n        state.ncode = (hold & 0x0f)/*BITS(4)*/ + 4;\n        //--- DROPBITS(4) ---//\n        hold >>>= 4;\n        bits -= 4;\n        //---//\n//#ifndef PKZIP_BUG_WORKAROUND\n        if (state.nlen > 286 || state.ndist > 30) {\n          strm.msg = 'too many length or distance symbols';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracev((stderr, \"inflate:       table sizes ok\\n\"));\n        state.have = 0;\n        state.mode = LENLENS;\n        /* falls through */\n      case LENLENS:\n        while (state.have < state.ncode) {\n          //=== NEEDBITS(3);\n          while (bits < 3) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.lens[order[state.have++]] = (hold & 0x07);//BITS(3);\n          //--- DROPBITS(3) ---//\n          hold >>>= 3;\n          bits -= 3;\n          //---//\n        }\n        while (state.have < 19) {\n          state.lens[order[state.have++]] = 0;\n        }\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        //state.next = state.codes;\n        //state.lencode = state.next;\n        // Switch to use dynamic table\n        state.lencode = state.lendyn;\n        state.lenbits = 7;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(CODES, state.lens, 0, 19, state.lencode, 0, state.work, opts);\n        state.lenbits = opts.bits;\n\n        if (ret) {\n          strm.msg = 'invalid code lengths set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, \"inflate:       code lengths ok\\n\"));\n        state.have = 0;\n        state.mode = CODELENS;\n        /* falls through */\n      case CODELENS:\n        while (state.have < state.nlen + state.ndist) {\n          for (;;) {\n            here = state.lencode[hold & ((1 << state.lenbits) - 1)];/*BITS(state.lenbits)*/\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          if (here_val < 16) {\n            //--- DROPBITS(here.bits) ---//\n            hold >>>= here_bits;\n            bits -= here_bits;\n            //---//\n            state.lens[state.have++] = here_val;\n          }\n          else {\n            if (here_val === 16) {\n              //=== NEEDBITS(here.bits + 2);\n              n = here_bits + 2;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              if (state.have === 0) {\n                strm.msg = 'invalid bit length repeat';\n                state.mode = BAD;\n                break;\n              }\n              len = state.lens[state.have - 1];\n              copy = 3 + (hold & 0x03);//BITS(2);\n              //--- DROPBITS(2) ---//\n              hold >>>= 2;\n              bits -= 2;\n              //---//\n            }\n            else if (here_val === 17) {\n              //=== NEEDBITS(here.bits + 3);\n              n = here_bits + 3;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 3 + (hold & 0x07);//BITS(3);\n              //--- DROPBITS(3) ---//\n              hold >>>= 3;\n              bits -= 3;\n              //---//\n            }\n            else {\n              //=== NEEDBITS(here.bits + 7);\n              n = here_bits + 7;\n              while (bits < n) {\n                if (have === 0) { break inf_leave; }\n                have--;\n                hold += input[next++] << bits;\n                bits += 8;\n              }\n              //===//\n              //--- DROPBITS(here.bits) ---//\n              hold >>>= here_bits;\n              bits -= here_bits;\n              //---//\n              len = 0;\n              copy = 11 + (hold & 0x7f);//BITS(7);\n              //--- DROPBITS(7) ---//\n              hold >>>= 7;\n              bits -= 7;\n              //---//\n            }\n            if (state.have + copy > state.nlen + state.ndist) {\n              strm.msg = 'invalid bit length repeat';\n              state.mode = BAD;\n              break;\n            }\n            while (copy--) {\n              state.lens[state.have++] = len;\n            }\n          }\n        }\n\n        /* handle error breaks in while */\n        if (state.mode === BAD) { break; }\n\n        /* check for end-of-block code (better have one) */\n        if (state.lens[256] === 0) {\n          strm.msg = 'invalid code -- missing end-of-block';\n          state.mode = BAD;\n          break;\n        }\n\n        /* build code tables -- note: do not change the lenbits or distbits\n           values here (9 and 6) without reading the comments in inftrees.h\n           concerning the ENOUGH constants, which depend on those values */\n        state.lenbits = 9;\n\n        opts = { bits: state.lenbits };\n        ret = inflate_table(LENS, state.lens, 0, state.nlen, state.lencode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.lenbits = opts.bits;\n        // state.lencode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid literal/lengths set';\n          state.mode = BAD;\n          break;\n        }\n\n        state.distbits = 6;\n        //state.distcode.copy(state.codes);\n        // Switch to use dynamic table\n        state.distcode = state.distdyn;\n        opts = { bits: state.distbits };\n        ret = inflate_table(DISTS, state.lens, state.nlen, state.ndist, state.distcode, 0, state.work, opts);\n        // We have separate tables & no pointers. 2 commented lines below not needed.\n        // state.next_index = opts.table_index;\n        state.distbits = opts.bits;\n        // state.distcode = state.next;\n\n        if (ret) {\n          strm.msg = 'invalid distances set';\n          state.mode = BAD;\n          break;\n        }\n        //Tracev((stderr, 'inflate:       codes ok\\n'));\n        state.mode = LEN_;\n        if (flush === Z_TREES) { break inf_leave; }\n        /* falls through */\n      case LEN_:\n        state.mode = LEN;\n        /* falls through */\n      case LEN:\n        if (have >= 6 && left >= 258) {\n          //--- RESTORE() ---\n          strm.next_out = put;\n          strm.avail_out = left;\n          strm.next_in = next;\n          strm.avail_in = have;\n          state.hold = hold;\n          state.bits = bits;\n          //---\n          inflate_fast(strm, _out);\n          //--- LOAD() ---\n          put = strm.next_out;\n          output = strm.output;\n          left = strm.avail_out;\n          next = strm.next_in;\n          input = strm.input;\n          have = strm.avail_in;\n          hold = state.hold;\n          bits = state.bits;\n          //---\n\n          if (state.mode === TYPE) {\n            state.back = -1;\n          }\n          break;\n        }\n        state.back = 0;\n        for (;;) {\n          here = state.lencode[hold & ((1 << state.lenbits) - 1)];  /*BITS(state.lenbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if (here_bits <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if (here_op && (here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.lencode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        state.length = here_val;\n        if (here_op === 0) {\n          //Tracevv((stderr, here.val >= 0x20 && here.val < 0x7f ?\n          //        \"inflate:         literal '%c'\\n\" :\n          //        \"inflate:         literal 0x%02x\\n\", here.val));\n          state.mode = LIT;\n          break;\n        }\n        if (here_op & 32) {\n          //Tracevv((stderr, \"inflate:         end of block\\n\"));\n          state.back = -1;\n          state.mode = TYPE;\n          break;\n        }\n        if (here_op & 64) {\n          strm.msg = 'invalid literal/length code';\n          state.mode = BAD;\n          break;\n        }\n        state.extra = here_op & 15;\n        state.mode = LENEXT;\n        /* falls through */\n      case LENEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.length += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n        //Tracevv((stderr, \"inflate:         length %u\\n\", state.length));\n        state.was = state.length;\n        state.mode = DIST;\n        /* falls through */\n      case DIST:\n        for (;;) {\n          here = state.distcode[hold & ((1 << state.distbits) - 1)];/*BITS(state.distbits)*/\n          here_bits = here >>> 24;\n          here_op = (here >>> 16) & 0xff;\n          here_val = here & 0xffff;\n\n          if ((here_bits) <= bits) { break; }\n          //--- PULLBYTE() ---//\n          if (have === 0) { break inf_leave; }\n          have--;\n          hold += input[next++] << bits;\n          bits += 8;\n          //---//\n        }\n        if ((here_op & 0xf0) === 0) {\n          last_bits = here_bits;\n          last_op = here_op;\n          last_val = here_val;\n          for (;;) {\n            here = state.distcode[last_val +\n                    ((hold & ((1 << (last_bits + last_op)) - 1))/*BITS(last.bits + last.op)*/ >> last_bits)];\n            here_bits = here >>> 24;\n            here_op = (here >>> 16) & 0xff;\n            here_val = here & 0xffff;\n\n            if ((last_bits + here_bits) <= bits) { break; }\n            //--- PULLBYTE() ---//\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n            //---//\n          }\n          //--- DROPBITS(last.bits) ---//\n          hold >>>= last_bits;\n          bits -= last_bits;\n          //---//\n          state.back += last_bits;\n        }\n        //--- DROPBITS(here.bits) ---//\n        hold >>>= here_bits;\n        bits -= here_bits;\n        //---//\n        state.back += here_bits;\n        if (here_op & 64) {\n          strm.msg = 'invalid distance code';\n          state.mode = BAD;\n          break;\n        }\n        state.offset = here_val;\n        state.extra = (here_op) & 15;\n        state.mode = DISTEXT;\n        /* falls through */\n      case DISTEXT:\n        if (state.extra) {\n          //=== NEEDBITS(state.extra);\n          n = state.extra;\n          while (bits < n) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          state.offset += hold & ((1 << state.extra) - 1)/*BITS(state.extra)*/;\n          //--- DROPBITS(state.extra) ---//\n          hold >>>= state.extra;\n          bits -= state.extra;\n          //---//\n          state.back += state.extra;\n        }\n//#ifdef INFLATE_STRICT\n        if (state.offset > state.dmax) {\n          strm.msg = 'invalid distance too far back';\n          state.mode = BAD;\n          break;\n        }\n//#endif\n        //Tracevv((stderr, \"inflate:         distance %u\\n\", state.offset));\n        state.mode = MATCH;\n        /* falls through */\n      case MATCH:\n        if (left === 0) { break inf_leave; }\n        copy = _out - left;\n        if (state.offset > copy) {         /* copy from window */\n          copy = state.offset - copy;\n          if (copy > state.whave) {\n            if (state.sane) {\n              strm.msg = 'invalid distance too far back';\n              state.mode = BAD;\n              break;\n            }\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n//#ifdef INFLATE_ALLOW_INVALID_DISTANCE_TOOFAR_ARRR\n//          Trace((stderr, \"inflate.c too far\\n\"));\n//          copy -= state.whave;\n//          if (copy > state.length) { copy = state.length; }\n//          if (copy > left) { copy = left; }\n//          left -= copy;\n//          state.length -= copy;\n//          do {\n//            output[put++] = 0;\n//          } while (--copy);\n//          if (state.length === 0) { state.mode = LEN; }\n//          break;\n//#endif\n          }\n          if (copy > state.wnext) {\n            copy -= state.wnext;\n            from = state.wsize - copy;\n          }\n          else {\n            from = state.wnext - copy;\n          }\n          if (copy > state.length) { copy = state.length; }\n          from_source = state.window;\n        }\n        else {                              /* copy from output */\n          from_source = output;\n          from = put - state.offset;\n          copy = state.length;\n        }\n        if (copy > left) { copy = left; }\n        left -= copy;\n        state.length -= copy;\n        do {\n          output[put++] = from_source[from++];\n        } while (--copy);\n        if (state.length === 0) { state.mode = LEN; }\n        break;\n      case LIT:\n        if (left === 0) { break inf_leave; }\n        output[put++] = state.length;\n        left--;\n        state.mode = LEN;\n        break;\n      case CHECK:\n        if (state.wrap) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            // Use '|' instead of '+' to make sure that result is signed\n            hold |= input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          _out -= left;\n          strm.total_out += _out;\n          state.total += _out;\n          if (_out) {\n            strm.adler = state.check =\n                /*UPDATE(state.check, put - _out, _out);*/\n                (state.flags ? crc32(state.check, output, _out, put - _out) : adler32(state.check, output, _out, put - _out));\n\n          }\n          _out = left;\n          // NB: crc32 stored as signed 32-bit int, zswap32 returns signed too\n          if ((state.flags ? hold : zswap32(hold)) !== state.check) {\n            strm.msg = 'incorrect data check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   check matches trailer\\n\"));\n        }\n        state.mode = LENGTH;\n        /* falls through */\n      case LENGTH:\n        if (state.wrap && state.flags) {\n          //=== NEEDBITS(32);\n          while (bits < 32) {\n            if (have === 0) { break inf_leave; }\n            have--;\n            hold += input[next++] << bits;\n            bits += 8;\n          }\n          //===//\n          if (hold !== (state.total & 0xffffffff)) {\n            strm.msg = 'incorrect length check';\n            state.mode = BAD;\n            break;\n          }\n          //=== INITBITS();\n          hold = 0;\n          bits = 0;\n          //===//\n          //Tracev((stderr, \"inflate:   length matches trailer\\n\"));\n        }\n        state.mode = DONE;\n        /* falls through */\n      case DONE:\n        ret = Z_STREAM_END;\n        break inf_leave;\n      case BAD:\n        ret = Z_DATA_ERROR;\n        break inf_leave;\n      case MEM:\n        return Z_MEM_ERROR;\n      case SYNC:\n        /* falls through */\n      default:\n        return Z_STREAM_ERROR;\n    }\n  }\n\n  // inf_leave <- here is real place for \"goto inf_leave\", emulated via \"break inf_leave\"\n\n  /*\n     Return from inflate(), updating the total counts and the check value.\n     If there was no progress during the inflate() call, return a buffer\n     error.  Call updatewindow() to create and/or update the window state.\n     Note: a memory error from inflate() is non-recoverable.\n   */\n\n  //--- RESTORE() ---\n  strm.next_out = put;\n  strm.avail_out = left;\n  strm.next_in = next;\n  strm.avail_in = have;\n  state.hold = hold;\n  state.bits = bits;\n  //---\n\n  if (state.wsize || (_out !== strm.avail_out && state.mode < BAD &&\n                      (state.mode < CHECK || flush !== Z_FINISH))) {\n    if (updatewindow(strm, strm.output, strm.next_out, _out - strm.avail_out)) {\n      state.mode = MEM;\n      return Z_MEM_ERROR;\n    }\n  }\n  _in -= strm.avail_in;\n  _out -= strm.avail_out;\n  strm.total_in += _in;\n  strm.total_out += _out;\n  state.total += _out;\n  if (state.wrap && _out) {\n    strm.adler = state.check = /*UPDATE(state.check, strm.next_out - _out, _out);*/\n      (state.flags ? crc32(state.check, output, _out, strm.next_out - _out) : adler32(state.check, output, _out, strm.next_out - _out));\n  }\n  strm.data_type = state.bits + (state.last ? 64 : 0) +\n                    (state.mode === TYPE ? 128 : 0) +\n                    (state.mode === LEN_ || state.mode === COPY_ ? 256 : 0);\n  if (((_in === 0 && _out === 0) || flush === Z_FINISH) && ret === Z_OK) {\n    ret = Z_BUF_ERROR;\n  }\n  return ret;\n}\n\nfunction inflateEnd(strm) {\n\n  if (!strm || !strm.state /*|| strm->zfree == (free_func)0*/) {\n    return Z_STREAM_ERROR;\n  }\n\n  var state = strm.state;\n  if (state.window) {\n    state.window = null;\n  }\n  strm.state = null;\n  return Z_OK;\n}\n\nfunction inflateGetHeader(strm, head) {\n  var state;\n\n  /* check state */\n  if (!strm || !strm.state) { return Z_STREAM_ERROR; }\n  state = strm.state;\n  if ((state.wrap & 2) === 0) { return Z_STREAM_ERROR; }\n\n  /* save header structure */\n  state.head = head;\n  head.done = false;\n  return Z_OK;\n}\n\nfunction inflateSetDictionary(strm, dictionary) {\n  var dictLength = dictionary.length;\n\n  var state;\n  var dictid;\n  var ret;\n\n  /* check state */\n  if (!strm /* == Z_NULL */ || !strm.state /* == Z_NULL */) { return Z_STREAM_ERROR; }\n  state = strm.state;\n\n  if (state.wrap !== 0 && state.mode !== DICT) {\n    return Z_STREAM_ERROR;\n  }\n\n  /* check for correct dictionary identifier */\n  if (state.mode === DICT) {\n    dictid = 1; /* adler32(0, null, 0)*/\n    /* dictid = adler32(dictid, dictionary, dictLength); */\n    dictid = adler32(dictid, dictionary, dictLength, 0);\n    if (dictid !== state.check) {\n      return Z_DATA_ERROR;\n    }\n  }\n  /* copy dictionary to window using updatewindow(), which will amend the\n   existing dictionary if appropriate */\n  ret = updatewindow(strm, dictionary, dictLength, dictLength);\n  if (ret) {\n    state.mode = MEM;\n    return Z_MEM_ERROR;\n  }\n  state.havedict = 1;\n  // Tracev((stderr, \"inflate:   dictionary set\\n\"));\n  return Z_OK;\n}\n\nexports.inflateReset = inflateReset;\nexports.inflateReset2 = inflateReset2;\nexports.inflateResetKeep = inflateResetKeep;\nexports.inflateInit = inflateInit;\nexports.inflateInit2 = inflateInit2;\nexports.inflate = inflate;\nexports.inflateEnd = inflateEnd;\nexports.inflateGetHeader = inflateGetHeader;\nexports.inflateSetDictionary = inflateSetDictionary;\nexports.inflateInfo = 'pako inflate (from Nodeca project)';\n\n/* Not implemented\nexports.inflateCopy = inflateCopy;\nexports.inflateGetDictionary = inflateGetDictionary;\nexports.inflateMark = inflateMark;\nexports.inflatePrime = inflatePrime;\nexports.inflateSync = inflateSync;\nexports.inflateSyncPoint = inflateSyncPoint;\nexports.inflateUndermine = inflateUndermine;\n*/\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nvar utils = require('../utils/common');\n\nvar MAXBITS = 15;\nvar ENOUGH_LENS = 852;\nvar ENOUGH_DISTS = 592;\n//var ENOUGH = (ENOUGH_LENS+ENOUGH_DISTS);\n\nvar CODES = 0;\nvar LENS = 1;\nvar DISTS = 2;\n\nvar lbase = [ /* Length codes 257..285 base */\n  3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 15, 17, 19, 23, 27, 31,\n  35, 43, 51, 59, 67, 83, 99, 115, 131, 163, 195, 227, 258, 0, 0\n];\n\nvar lext = [ /* Length codes 257..285 extra */\n  16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 18, 18, 18, 18,\n  19, 19, 19, 19, 20, 20, 20, 20, 21, 21, 21, 21, 16, 72, 78\n];\n\nvar dbase = [ /* Distance codes 0..29 base */\n  1, 2, 3, 4, 5, 7, 9, 13, 17, 25, 33, 49, 65, 97, 129, 193,\n  257, 385, 513, 769, 1025, 1537, 2049, 3073, 4097, 6145,\n  8193, 12289, 16385, 24577, 0, 0\n];\n\nvar dext = [ /* Distance codes 0..29 extra */\n  16, 16, 16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22,\n  23, 23, 24, 24, 25, 25, 26, 26, 27, 27,\n  28, 28, 29, 29, 64, 64\n];\n\nmodule.exports = function inflate_table(type, lens, lens_index, codes, table, table_index, work, opts)\n{\n  var bits = opts.bits;\n      //here = opts.here; /* table entry for duplication */\n\n  var len = 0;               /* a code's length in bits */\n  var sym = 0;               /* index of code symbols */\n  var min = 0, max = 0;          /* minimum and maximum code lengths */\n  var root = 0;              /* number of index bits for root table */\n  var curr = 0;              /* number of index bits for current table */\n  var drop = 0;              /* code bits to drop for sub-table */\n  var left = 0;                   /* number of prefix codes available */\n  var used = 0;              /* code entries in table used */\n  var huff = 0;              /* Huffman code */\n  var incr;              /* for incrementing code, index */\n  var fill;              /* index for replicating entries */\n  var low;               /* low bits for current root entry */\n  var mask;              /* mask for low root bits */\n  var next;             /* next available space in table */\n  var base = null;     /* base value table to use */\n  var base_index = 0;\n//  var shoextra;    /* extra bits table to use */\n  var end;                    /* use base and extra for symbol > end */\n  var count = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];    /* number of codes of each length */\n  var offs = new utils.Buf16(MAXBITS + 1); //[MAXBITS+1];     /* offsets in table for each length */\n  var extra = null;\n  var extra_index = 0;\n\n  var here_bits, here_op, here_val;\n\n  /*\n   Process a set of code lengths to create a canonical Huffman code.  The\n   code lengths are lens[0..codes-1].  Each length corresponds to the\n   symbols 0..codes-1.  The Huffman code is generated by first sorting the\n   symbols by length from short to long, and retaining the symbol order\n   for codes with equal lengths.  Then the code starts with all zero bits\n   for the first code of the shortest length, and the codes are integer\n   increments for the same length, and zeros are appended as the length\n   increases.  For the deflate format, these bits are stored backwards\n   from their more natural integer increment ordering, and so when the\n   decoding tables are built in the large loop below, the integer codes\n   are incremented backwards.\n\n   This routine assumes, but does not check, that all of the entries in\n   lens[] are in the range 0..MAXBITS.  The caller must assure this.\n   1..MAXBITS is interpreted as that code length.  zero means that that\n   symbol does not occur in this code.\n\n   The codes are sorted by computing a count of codes for each length,\n   creating from that a table of starting indices for each length in the\n   sorted table, and then entering the symbols in order in the sorted\n   table.  The sorted table is work[], with that space being provided by\n   the caller.\n\n   The length counts are used for other purposes as well, i.e. finding\n   the minimum and maximum length codes, determining if there are any\n   codes at all, checking for a valid set of lengths, and looking ahead\n   at length counts to determine sub-table sizes when building the\n   decoding tables.\n   */\n\n  /* accumulate lengths for codes (assumes lens[] all in 0..MAXBITS) */\n  for (len = 0; len <= MAXBITS; len++) {\n    count[len] = 0;\n  }\n  for (sym = 0; sym < codes; sym++) {\n    count[lens[lens_index + sym]]++;\n  }\n\n  /* bound code lengths, force root to be within code lengths */\n  root = bits;\n  for (max = MAXBITS; max >= 1; max--) {\n    if (count[max] !== 0) { break; }\n  }\n  if (root > max) {\n    root = max;\n  }\n  if (max === 0) {                     /* no symbols to code at all */\n    //table.op[opts.table_index] = 64;  //here.op = (var char)64;    /* invalid code marker */\n    //table.bits[opts.table_index] = 1;   //here.bits = (var char)1;\n    //table.val[opts.table_index++] = 0;   //here.val = (var short)0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n\n    //table.op[opts.table_index] = 64;\n    //table.bits[opts.table_index] = 1;\n    //table.val[opts.table_index++] = 0;\n    table[table_index++] = (1 << 24) | (64 << 16) | 0;\n\n    opts.bits = 1;\n    return 0;     /* no symbols, but wait for decoding to report error */\n  }\n  for (min = 1; min < max; min++) {\n    if (count[min] !== 0) { break; }\n  }\n  if (root < min) {\n    root = min;\n  }\n\n  /* check for an over-subscribed or incomplete set of lengths */\n  left = 1;\n  for (len = 1; len <= MAXBITS; len++) {\n    left <<= 1;\n    left -= count[len];\n    if (left < 0) {\n      return -1;\n    }        /* over-subscribed */\n  }\n  if (left > 0 && (type === CODES || max !== 1)) {\n    return -1;                      /* incomplete set */\n  }\n\n  /* generate offsets into symbol table for each length for sorting */\n  offs[1] = 0;\n  for (len = 1; len < MAXBITS; len++) {\n    offs[len + 1] = offs[len] + count[len];\n  }\n\n  /* sort symbols by length, by symbol order within each length */\n  for (sym = 0; sym < codes; sym++) {\n    if (lens[lens_index + sym] !== 0) {\n      work[offs[lens[lens_index + sym]]++] = sym;\n    }\n  }\n\n  /*\n   Create and fill in decoding tables.  In this loop, the table being\n   filled is at next and has curr index bits.  The code being used is huff\n   with length len.  That code is converted to an index by dropping drop\n   bits off of the bottom.  For codes where len is less than drop + curr,\n   those top drop + curr - len bits are incremented through all values to\n   fill the table with replicated entries.\n\n   root is the number of index bits for the root table.  When len exceeds\n   root, sub-tables are created pointed to by the root entry with an index\n   of the low root bits of huff.  This is saved in low to check for when a\n   new sub-table should be started.  drop is zero when the root table is\n   being filled, and drop is root when sub-tables are being filled.\n\n   When a new sub-table is needed, it is necessary to look ahead in the\n   code lengths to determine what size sub-table is needed.  The length\n   counts are used for this, and so count[] is decremented as codes are\n   entered in the tables.\n\n   used keeps track of how many table entries have been allocated from the\n   provided *table space.  It is checked for LENS and DIST tables against\n   the constants ENOUGH_LENS and ENOUGH_DISTS to guard against changes in\n   the initial root table size constants.  See the comments in inftrees.h\n   for more information.\n\n   sym increments through all symbols, and the loop terminates when\n   all codes of length max, i.e. all codes, have been processed.  This\n   routine permits incomplete codes, so another loop after this one fills\n   in the rest of the decoding tables with invalid code markers.\n   */\n\n  /* set up for code type */\n  // poor man optimization - use if-else instead of switch,\n  // to avoid deopts in old v8\n  if (type === CODES) {\n    base = extra = work;    /* dummy value--not used */\n    end = 19;\n\n  } else if (type === LENS) {\n    base = lbase;\n    base_index -= 257;\n    extra = lext;\n    extra_index -= 257;\n    end = 256;\n\n  } else {                    /* DISTS */\n    base = dbase;\n    extra = dext;\n    end = -1;\n  }\n\n  /* initialize opts for loop */\n  huff = 0;                   /* starting code */\n  sym = 0;                    /* starting code symbol */\n  len = min;                  /* starting code length */\n  next = table_index;              /* current table to fill in */\n  curr = root;                /* current table index bits */\n  drop = 0;                   /* current bits to drop from code for index */\n  low = -1;                   /* trigger new sub-table when len > root */\n  used = 1 << root;          /* use root table entries */\n  mask = used - 1;            /* mask for comparing low */\n\n  /* check available table space */\n  if ((type === LENS && used > ENOUGH_LENS) ||\n    (type === DISTS && used > ENOUGH_DISTS)) {\n    return 1;\n  }\n\n  /* process all codes and make table entries */\n  for (;;) {\n    /* create table entry */\n    here_bits = len - drop;\n    if (work[sym] < end) {\n      here_op = 0;\n      here_val = work[sym];\n    }\n    else if (work[sym] > end) {\n      here_op = extra[extra_index + work[sym]];\n      here_val = base[base_index + work[sym]];\n    }\n    else {\n      here_op = 32 + 64;         /* end of block */\n      here_val = 0;\n    }\n\n    /* replicate for those indices with low len bits equal to huff */\n    incr = 1 << (len - drop);\n    fill = 1 << curr;\n    min = fill;                 /* save offset to next table */\n    do {\n      fill -= incr;\n      table[next + (huff >> drop) + fill] = (here_bits << 24) | (here_op << 16) | here_val |0;\n    } while (fill !== 0);\n\n    /* backwards increment the len-bit code huff */\n    incr = 1 << (len - 1);\n    while (huff & incr) {\n      incr >>= 1;\n    }\n    if (incr !== 0) {\n      huff &= incr - 1;\n      huff += incr;\n    } else {\n      huff = 0;\n    }\n\n    /* go to next symbol, update count, len */\n    sym++;\n    if (--count[len] === 0) {\n      if (len === max) { break; }\n      len = lens[lens_index + work[sym]];\n    }\n\n    /* create new sub-table if needed */\n    if (len > root && (huff & mask) !== low) {\n      /* if first time, transition to sub-tables */\n      if (drop === 0) {\n        drop = root;\n      }\n\n      /* increment past last table */\n      next += min;            /* here min is 1 << curr */\n\n      /* determine length of next table */\n      curr = len - drop;\n      left = 1 << curr;\n      while (curr + drop < max) {\n        left -= count[curr + drop];\n        if (left <= 0) { break; }\n        curr++;\n        left <<= 1;\n      }\n\n      /* check for enough space */\n      used += 1 << curr;\n      if ((type === LENS && used > ENOUGH_LENS) ||\n        (type === DISTS && used > ENOUGH_DISTS)) {\n        return 1;\n      }\n\n      /* point entry in root table to sub-table */\n      low = huff & mask;\n      /*table.op[low] = curr;\n      table.bits[low] = root;\n      table.val[low] = next - opts.table_index;*/\n      table[low] = (root << 24) | (curr << 16) | (next - table_index) |0;\n    }\n  }\n\n  /* fill in remaining table entry if code is incomplete (guaranteed to have\n   at most one remaining entry, since if the code is incomplete, the\n   maximum code length that was allowed to get this far is one bit) */\n  if (huff !== 0) {\n    //table.op[next + huff] = 64;            /* invalid code marker */\n    //table.bits[next + huff] = len - drop;\n    //table.val[next + huff] = 0;\n    table[next + huff] = ((len - drop) << 24) | (64 << 16) |0;\n  }\n\n  /* set return parameters */\n  //opts.table_index += used;\n  opts.bits = root;\n  return 0;\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nmodule.exports = {\n  2:      'need dictionary',     /* Z_NEED_DICT       2  */\n  1:      'stream end',          /* Z_STREAM_END      1  */\n  0:      '',                    /* Z_OK              0  */\n  '-1':   'file error',          /* Z_ERRNO         (-1) */\n  '-2':   'stream error',        /* Z_STREAM_ERROR  (-2) */\n  '-3':   'data error',          /* Z_DATA_ERROR    (-3) */\n  '-4':   'insufficient memory', /* Z_MEM_ERROR     (-4) */\n  '-5':   'buffer error',        /* Z_BUF_ERROR     (-5) */\n  '-6':   'incompatible version' /* Z_VERSION_ERROR (-6) */\n};\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\n/* eslint-disable space-unary-ops */\n\nvar utils = require('../utils/common');\n\n/* Public constants ==========================================================*/\n/* ===========================================================================*/\n\n\n//var Z_FILTERED          = 1;\n//var Z_HUFFMAN_ONLY      = 2;\n//var Z_RLE               = 3;\nvar Z_FIXED               = 4;\n//var Z_DEFAULT_STRATEGY  = 0;\n\n/* Possible values of the data_type field (though see inflate()) */\nvar Z_BINARY              = 0;\nvar Z_TEXT                = 1;\n//var Z_ASCII             = 1; // = Z_TEXT\nvar Z_UNKNOWN             = 2;\n\n/*============================================================================*/\n\n\nfunction zero(buf) { var len = buf.length; while (--len >= 0) { buf[len] = 0; } }\n\n// From zutil.h\n\nvar STORED_BLOCK = 0;\nvar STATIC_TREES = 1;\nvar DYN_TREES    = 2;\n/* The three kinds of block type */\n\nvar MIN_MATCH    = 3;\nvar MAX_MATCH    = 258;\n/* The minimum and maximum match lengths */\n\n// From deflate.h\n/* ===========================================================================\n * Internal compression state.\n */\n\nvar LENGTH_CODES  = 29;\n/* number of length codes, not counting the special END_BLOCK code */\n\nvar LITERALS      = 256;\n/* number of literal bytes 0..255 */\n\nvar L_CODES       = LITERALS + 1 + LENGTH_CODES;\n/* number of Literal or Length codes, including the END_BLOCK code */\n\nvar D_CODES       = 30;\n/* number of distance codes */\n\nvar BL_CODES      = 19;\n/* number of codes used to transfer the bit lengths */\n\nvar HEAP_SIZE     = 2 * L_CODES + 1;\n/* maximum heap size */\n\nvar MAX_BITS      = 15;\n/* All codes must not exceed MAX_BITS bits */\n\nvar Buf_size      = 16;\n/* size of bit buffer in bi_buf */\n\n\n/* ===========================================================================\n * Constants\n */\n\nvar MAX_BL_BITS = 7;\n/* Bit length codes must not exceed MAX_BL_BITS bits */\n\nvar END_BLOCK   = 256;\n/* end of block literal code */\n\nvar REP_3_6     = 16;\n/* repeat previous bit length 3-6 times (2 bits of repeat count) */\n\nvar REPZ_3_10   = 17;\n/* repeat a zero length 3-10 times  (3 bits of repeat count) */\n\nvar REPZ_11_138 = 18;\n/* repeat a zero length 11-138 times  (7 bits of repeat count) */\n\n/* eslint-disable comma-spacing,array-bracket-spacing */\nvar extra_lbits =   /* extra bits for each length code */\n  [0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0];\n\nvar extra_dbits =   /* extra bits for each distance code */\n  [0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,12,12,13,13];\n\nvar extra_blbits =  /* extra bits for each bit length code */\n  [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,3,7];\n\nvar bl_order =\n  [16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15];\n/* eslint-enable comma-spacing,array-bracket-spacing */\n\n/* The lengths of the bit length codes are sent in order of decreasing\n * probability, to avoid transmitting the lengths for unused bit length codes.\n */\n\n/* ===========================================================================\n * Local data. These are initialized only once.\n */\n\n// We pre-fill arrays with 0 to avoid uninitialized gaps\n\nvar DIST_CODE_LEN = 512; /* see definition of array dist_code below */\n\n// !!!! Use flat array instead of structure, Freq = i*2, Len = i*2+1\nvar static_ltree  = new Array((L_CODES + 2) * 2);\nzero(static_ltree);\n/* The static literal tree. Since the bit lengths are imposed, there is no\n * need for the L_CODES extra codes used during heap construction. However\n * The codes 286 and 287 are needed to build a canonical tree (see _tr_init\n * below).\n */\n\nvar static_dtree  = new Array(D_CODES * 2);\nzero(static_dtree);\n/* The static distance tree. (Actually a trivial tree since all codes use\n * 5 bits.)\n */\n\nvar _dist_code    = new Array(DIST_CODE_LEN);\nzero(_dist_code);\n/* Distance codes. The first 256 values correspond to the distances\n * 3 .. 258, the last 256 values correspond to the top 8 bits of\n * the 15 bit distances.\n */\n\nvar _length_code  = new Array(MAX_MATCH - MIN_MATCH + 1);\nzero(_length_code);\n/* length code for each normalized match length (0 == MIN_MATCH) */\n\nvar base_length   = new Array(LENGTH_CODES);\nzero(base_length);\n/* First normalized length for each code (0 = MIN_MATCH) */\n\nvar base_dist     = new Array(D_CODES);\nzero(base_dist);\n/* First normalized distance for each code (0 = distance of 1) */\n\n\nfunction StaticTreeDesc(static_tree, extra_bits, extra_base, elems, max_length) {\n\n  this.static_tree  = static_tree;  /* static tree or NULL */\n  this.extra_bits   = extra_bits;   /* extra bits for each code or NULL */\n  this.extra_base   = extra_base;   /* base index for extra_bits */\n  this.elems        = elems;        /* max number of elements in the tree */\n  this.max_length   = max_length;   /* max bit length for the codes */\n\n  // show if `static_tree` has data or dummy - needed for monomorphic objects\n  this.has_stree    = static_tree && static_tree.length;\n}\n\n\nvar static_l_desc;\nvar static_d_desc;\nvar static_bl_desc;\n\n\nfunction TreeDesc(dyn_tree, stat_desc) {\n  this.dyn_tree = dyn_tree;     /* the dynamic tree */\n  this.max_code = 0;            /* largest code with non zero frequency */\n  this.stat_desc = stat_desc;   /* the corresponding static tree */\n}\n\n\n\nfunction d_code(dist) {\n  return dist < 256 ? _dist_code[dist] : _dist_code[256 + (dist >>> 7)];\n}\n\n\n/* ===========================================================================\n * Output a short LSB first on the stream.\n * IN assertion: there is enough room in pendingBuf.\n */\nfunction put_short(s, w) {\n//    put_byte(s, (uch)((w) & 0xff));\n//    put_byte(s, (uch)((ush)(w) >> 8));\n  s.pending_buf[s.pending++] = (w) & 0xff;\n  s.pending_buf[s.pending++] = (w >>> 8) & 0xff;\n}\n\n\n/* ===========================================================================\n * Send a value on a given number of bits.\n * IN assertion: length <= 16 and value fits in length bits.\n */\nfunction send_bits(s, value, length) {\n  if (s.bi_valid > (Buf_size - length)) {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    put_short(s, s.bi_buf);\n    s.bi_buf = value >> (Buf_size - s.bi_valid);\n    s.bi_valid += length - Buf_size;\n  } else {\n    s.bi_buf |= (value << s.bi_valid) & 0xffff;\n    s.bi_valid += length;\n  }\n}\n\n\nfunction send_code(s, c, tree) {\n  send_bits(s, tree[c * 2]/*.Code*/, tree[c * 2 + 1]/*.Len*/);\n}\n\n\n/* ===========================================================================\n * Reverse the first len bits of a code, using straightforward code (a faster\n * method would use a table)\n * IN assertion: 1 <= len <= 15\n */\nfunction bi_reverse(code, len) {\n  var res = 0;\n  do {\n    res |= code & 1;\n    code >>>= 1;\n    res <<= 1;\n  } while (--len > 0);\n  return res >>> 1;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer, keeping at most 7 bits in it.\n */\nfunction bi_flush(s) {\n  if (s.bi_valid === 16) {\n    put_short(s, s.bi_buf);\n    s.bi_buf = 0;\n    s.bi_valid = 0;\n\n  } else if (s.bi_valid >= 8) {\n    s.pending_buf[s.pending++] = s.bi_buf & 0xff;\n    s.bi_buf >>= 8;\n    s.bi_valid -= 8;\n  }\n}\n\n\n/* ===========================================================================\n * Compute the optimal bit lengths for a tree and update the total bit length\n * for the current block.\n * IN assertion: the fields freq and dad are set, heap[heap_max] and\n *    above are the tree nodes sorted by increasing frequency.\n * OUT assertions: the field len is set to the optimal bit length, the\n *     array bl_count contains the frequencies for each bit length.\n *     The length opt_len is updated; static_len is also updated if stree is\n *     not null.\n */\nfunction gen_bitlen(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc;    /* the tree descriptor */\n{\n  var tree            = desc.dyn_tree;\n  var max_code        = desc.max_code;\n  var stree           = desc.stat_desc.static_tree;\n  var has_stree       = desc.stat_desc.has_stree;\n  var extra           = desc.stat_desc.extra_bits;\n  var base            = desc.stat_desc.extra_base;\n  var max_length      = desc.stat_desc.max_length;\n  var h;              /* heap index */\n  var n, m;           /* iterate over the tree elements */\n  var bits;           /* bit length */\n  var xbits;          /* extra bits */\n  var f;              /* frequency */\n  var overflow = 0;   /* number of elements with bit length too large */\n\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    s.bl_count[bits] = 0;\n  }\n\n  /* In a first pass, compute the optimal bit lengths (which may\n   * overflow in the case of the bit length tree).\n   */\n  tree[s.heap[s.heap_max] * 2 + 1]/*.Len*/ = 0; /* root of the heap */\n\n  for (h = s.heap_max + 1; h < HEAP_SIZE; h++) {\n    n = s.heap[h];\n    bits = tree[tree[n * 2 + 1]/*.Dad*/ * 2 + 1]/*.Len*/ + 1;\n    if (bits > max_length) {\n      bits = max_length;\n      overflow++;\n    }\n    tree[n * 2 + 1]/*.Len*/ = bits;\n    /* We overwrite tree[n].Dad which is no longer needed */\n\n    if (n > max_code) { continue; } /* not a leaf node */\n\n    s.bl_count[bits]++;\n    xbits = 0;\n    if (n >= base) {\n      xbits = extra[n - base];\n    }\n    f = tree[n * 2]/*.Freq*/;\n    s.opt_len += f * (bits + xbits);\n    if (has_stree) {\n      s.static_len += f * (stree[n * 2 + 1]/*.Len*/ + xbits);\n    }\n  }\n  if (overflow === 0) { return; }\n\n  // Trace((stderr,\"\\nbit length overflow\\n\"));\n  /* This happens for example on obj2 and pic of the Calgary corpus */\n\n  /* Find the first bit length which could increase: */\n  do {\n    bits = max_length - 1;\n    while (s.bl_count[bits] === 0) { bits--; }\n    s.bl_count[bits]--;      /* move one leaf down the tree */\n    s.bl_count[bits + 1] += 2; /* move one overflow item as its brother */\n    s.bl_count[max_length]--;\n    /* The brother of the overflow item also moves one step up,\n     * but this does not affect bl_count[max_length]\n     */\n    overflow -= 2;\n  } while (overflow > 0);\n\n  /* Now recompute all bit lengths, scanning in increasing frequency.\n   * h is still equal to HEAP_SIZE. (It is simpler to reconstruct all\n   * lengths instead of fixing only the wrong ones. This idea is taken\n   * from 'ar' written by Haruhiko Okumura.)\n   */\n  for (bits = max_length; bits !== 0; bits--) {\n    n = s.bl_count[bits];\n    while (n !== 0) {\n      m = s.heap[--h];\n      if (m > max_code) { continue; }\n      if (tree[m * 2 + 1]/*.Len*/ !== bits) {\n        // Trace((stderr,\"code %d bits %d->%d\\n\", m, tree[m].Len, bits));\n        s.opt_len += (bits - tree[m * 2 + 1]/*.Len*/) * tree[m * 2]/*.Freq*/;\n        tree[m * 2 + 1]/*.Len*/ = bits;\n      }\n      n--;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Generate the codes for a given tree and bit counts (which need not be\n * optimal).\n * IN assertion: the array bl_count contains the bit length statistics for\n * the given tree and the field len is set for all tree elements.\n * OUT assertion: the field code is set for all tree elements of non\n *     zero code length.\n */\nfunction gen_codes(tree, max_code, bl_count)\n//    ct_data *tree;             /* the tree to decorate */\n//    int max_code;              /* largest code with non zero frequency */\n//    ushf *bl_count;            /* number of codes at each bit length */\n{\n  var next_code = new Array(MAX_BITS + 1); /* next code value for each bit length */\n  var code = 0;              /* running code value */\n  var bits;                  /* bit index */\n  var n;                     /* code index */\n\n  /* The distribution counts are first used to generate the code values\n   * without bit reversal.\n   */\n  for (bits = 1; bits <= MAX_BITS; bits++) {\n    next_code[bits] = code = (code + bl_count[bits - 1]) << 1;\n  }\n  /* Check that the bit counts in bl_count are consistent. The last code\n   * must be all ones.\n   */\n  //Assert (code + bl_count[MAX_BITS]-1 == (1<<MAX_BITS)-1,\n  //        \"inconsistent bit counts\");\n  //Tracev((stderr,\"\\ngen_codes: max_code %d \", max_code));\n\n  for (n = 0;  n <= max_code; n++) {\n    var len = tree[n * 2 + 1]/*.Len*/;\n    if (len === 0) { continue; }\n    /* Now reverse the bits */\n    tree[n * 2]/*.Code*/ = bi_reverse(next_code[len]++, len);\n\n    //Tracecv(tree != static_ltree, (stderr,\"\\nn %3d %c l %2d c %4x (%x) \",\n    //     n, (isgraph(n) ? n : ' '), len, tree[n].Code, next_code[len]-1));\n  }\n}\n\n\n/* ===========================================================================\n * Initialize the various 'constant' tables.\n */\nfunction tr_static_init() {\n  var n;        /* iterates over tree elements */\n  var bits;     /* bit counter */\n  var length;   /* length value */\n  var code;     /* code value */\n  var dist;     /* distance index */\n  var bl_count = new Array(MAX_BITS + 1);\n  /* number of codes at each bit length for an optimal tree */\n\n  // do check in _tr_init()\n  //if (static_init_done) return;\n\n  /* For some embedded targets, global variables are not initialized: */\n/*#ifdef NO_INIT_GLOBAL_POINTERS\n  static_l_desc.static_tree = static_ltree;\n  static_l_desc.extra_bits = extra_lbits;\n  static_d_desc.static_tree = static_dtree;\n  static_d_desc.extra_bits = extra_dbits;\n  static_bl_desc.extra_bits = extra_blbits;\n#endif*/\n\n  /* Initialize the mapping length (0..255) -> length code (0..28) */\n  length = 0;\n  for (code = 0; code < LENGTH_CODES - 1; code++) {\n    base_length[code] = length;\n    for (n = 0; n < (1 << extra_lbits[code]); n++) {\n      _length_code[length++] = code;\n    }\n  }\n  //Assert (length == 256, \"tr_static_init: length != 256\");\n  /* Note that the length 255 (match length 258) can be represented\n   * in two different ways: code 284 + 5 bits or code 285, so we\n   * overwrite length_code[255] to use the best encoding:\n   */\n  _length_code[length - 1] = code;\n\n  /* Initialize the mapping dist (0..32K) -> dist code (0..29) */\n  dist = 0;\n  for (code = 0; code < 16; code++) {\n    base_dist[code] = dist;\n    for (n = 0; n < (1 << extra_dbits[code]); n++) {\n      _dist_code[dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: dist != 256\");\n  dist >>= 7; /* from now on, all distances are divided by 128 */\n  for (; code < D_CODES; code++) {\n    base_dist[code] = dist << 7;\n    for (n = 0; n < (1 << (extra_dbits[code] - 7)); n++) {\n      _dist_code[256 + dist++] = code;\n    }\n  }\n  //Assert (dist == 256, \"tr_static_init: 256+dist != 512\");\n\n  /* Construct the codes of the static literal tree */\n  for (bits = 0; bits <= MAX_BITS; bits++) {\n    bl_count[bits] = 0;\n  }\n\n  n = 0;\n  while (n <= 143) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  while (n <= 255) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 9;\n    n++;\n    bl_count[9]++;\n  }\n  while (n <= 279) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 7;\n    n++;\n    bl_count[7]++;\n  }\n  while (n <= 287) {\n    static_ltree[n * 2 + 1]/*.Len*/ = 8;\n    n++;\n    bl_count[8]++;\n  }\n  /* Codes 286 and 287 do not exist, but we must include them in the\n   * tree construction to get a canonical Huffman tree (longest code\n   * all ones)\n   */\n  gen_codes(static_ltree, L_CODES + 1, bl_count);\n\n  /* The static distance tree is trivial: */\n  for (n = 0; n < D_CODES; n++) {\n    static_dtree[n * 2 + 1]/*.Len*/ = 5;\n    static_dtree[n * 2]/*.Code*/ = bi_reverse(n, 5);\n  }\n\n  // Now data ready and we can init static trees\n  static_l_desc = new StaticTreeDesc(static_ltree, extra_lbits, LITERALS + 1, L_CODES, MAX_BITS);\n  static_d_desc = new StaticTreeDesc(static_dtree, extra_dbits, 0,          D_CODES, MAX_BITS);\n  static_bl_desc = new StaticTreeDesc(new Array(0), extra_blbits, 0,         BL_CODES, MAX_BL_BITS);\n\n  //static_init_done = true;\n}\n\n\n/* ===========================================================================\n * Initialize a new block.\n */\nfunction init_block(s) {\n  var n; /* iterates over tree elements */\n\n  /* Initialize the trees. */\n  for (n = 0; n < L_CODES;  n++) { s.dyn_ltree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < D_CODES;  n++) { s.dyn_dtree[n * 2]/*.Freq*/ = 0; }\n  for (n = 0; n < BL_CODES; n++) { s.bl_tree[n * 2]/*.Freq*/ = 0; }\n\n  s.dyn_ltree[END_BLOCK * 2]/*.Freq*/ = 1;\n  s.opt_len = s.static_len = 0;\n  s.last_lit = s.matches = 0;\n}\n\n\n/* ===========================================================================\n * Flush the bit buffer and align the output on a byte boundary\n */\nfunction bi_windup(s)\n{\n  if (s.bi_valid > 8) {\n    put_short(s, s.bi_buf);\n  } else if (s.bi_valid > 0) {\n    //put_byte(s, (Byte)s->bi_buf);\n    s.pending_buf[s.pending++] = s.bi_buf;\n  }\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n}\n\n/* ===========================================================================\n * Copy a stored block, storing first the length and its\n * one's complement if requested.\n */\nfunction copy_block(s, buf, len, header)\n//DeflateState *s;\n//charf    *buf;    /* the input data */\n//unsigned len;     /* its length */\n//int      header;  /* true if block header must be written */\n{\n  bi_windup(s);        /* align on byte boundary */\n\n  if (header) {\n    put_short(s, len);\n    put_short(s, ~len);\n  }\n//  while (len--) {\n//    put_byte(s, *buf++);\n//  }\n  utils.arraySet(s.pending_buf, s.window, buf, len, s.pending);\n  s.pending += len;\n}\n\n/* ===========================================================================\n * Compares to subtrees, using the tree depth as tie breaker when\n * the subtrees have equal frequency. This minimizes the worst case length.\n */\nfunction smaller(tree, n, m, depth) {\n  var _n2 = n * 2;\n  var _m2 = m * 2;\n  return (tree[_n2]/*.Freq*/ < tree[_m2]/*.Freq*/ ||\n         (tree[_n2]/*.Freq*/ === tree[_m2]/*.Freq*/ && depth[n] <= depth[m]));\n}\n\n/* ===========================================================================\n * Restore the heap property by moving down the tree starting at node k,\n * exchanging a node with the smallest of its two sons if necessary, stopping\n * when the heap property is re-established (each father smaller than its\n * two sons).\n */\nfunction pqdownheap(s, tree, k)\n//    deflate_state *s;\n//    ct_data *tree;  /* the tree to restore */\n//    int k;               /* node to move down */\n{\n  var v = s.heap[k];\n  var j = k << 1;  /* left son of k */\n  while (j <= s.heap_len) {\n    /* Set j to the smallest of the two sons: */\n    if (j < s.heap_len &&\n      smaller(tree, s.heap[j + 1], s.heap[j], s.depth)) {\n      j++;\n    }\n    /* Exit if v is smaller than both sons */\n    if (smaller(tree, v, s.heap[j], s.depth)) { break; }\n\n    /* Exchange v with the smallest son */\n    s.heap[k] = s.heap[j];\n    k = j;\n\n    /* And continue down the tree, setting j to the left son of k */\n    j <<= 1;\n  }\n  s.heap[k] = v;\n}\n\n\n// inlined manually\n// var SMALLEST = 1;\n\n/* ===========================================================================\n * Send the block data compressed using the given Huffman trees\n */\nfunction compress_block(s, ltree, dtree)\n//    deflate_state *s;\n//    const ct_data *ltree; /* literal tree */\n//    const ct_data *dtree; /* distance tree */\n{\n  var dist;           /* distance of matched string */\n  var lc;             /* match length or unmatched char (if dist == 0) */\n  var lx = 0;         /* running index in l_buf */\n  var code;           /* the code to send */\n  var extra;          /* number of extra bits to send */\n\n  if (s.last_lit !== 0) {\n    do {\n      dist = (s.pending_buf[s.d_buf + lx * 2] << 8) | (s.pending_buf[s.d_buf + lx * 2 + 1]);\n      lc = s.pending_buf[s.l_buf + lx];\n      lx++;\n\n      if (dist === 0) {\n        send_code(s, lc, ltree); /* send a literal byte */\n        //Tracecv(isgraph(lc), (stderr,\" '%c' \", lc));\n      } else {\n        /* Here, lc is the match length - MIN_MATCH */\n        code = _length_code[lc];\n        send_code(s, code + LITERALS + 1, ltree); /* send the length code */\n        extra = extra_lbits[code];\n        if (extra !== 0) {\n          lc -= base_length[code];\n          send_bits(s, lc, extra);       /* send the extra length bits */\n        }\n        dist--; /* dist is now the match distance - 1 */\n        code = d_code(dist);\n        //Assert (code < D_CODES, \"bad d_code\");\n\n        send_code(s, code, dtree);       /* send the distance code */\n        extra = extra_dbits[code];\n        if (extra !== 0) {\n          dist -= base_dist[code];\n          send_bits(s, dist, extra);   /* send the extra distance bits */\n        }\n      } /* literal or match pair ? */\n\n      /* Check that the overlay between pending_buf and d_buf+l_buf is ok: */\n      //Assert((uInt)(s->pending) < s->lit_bufsize + 2*lx,\n      //       \"pendingBuf overflow\");\n\n    } while (lx < s.last_lit);\n  }\n\n  send_code(s, END_BLOCK, ltree);\n}\n\n\n/* ===========================================================================\n * Construct one Huffman tree and assigns the code bit strings and lengths.\n * Update the total bit length for the current block.\n * IN assertion: the field freq is set for all tree elements.\n * OUT assertions: the fields len and code are set to the optimal bit length\n *     and corresponding code. The length opt_len is updated; static_len is\n *     also updated if stree is not null. The field max_code is set.\n */\nfunction build_tree(s, desc)\n//    deflate_state *s;\n//    tree_desc *desc; /* the tree descriptor */\n{\n  var tree     = desc.dyn_tree;\n  var stree    = desc.stat_desc.static_tree;\n  var has_stree = desc.stat_desc.has_stree;\n  var elems    = desc.stat_desc.elems;\n  var n, m;          /* iterate over heap elements */\n  var max_code = -1; /* largest code with non zero frequency */\n  var node;          /* new node being created */\n\n  /* Construct the initial heap, with least frequent element in\n   * heap[SMALLEST]. The sons of heap[n] are heap[2*n] and heap[2*n+1].\n   * heap[0] is not used.\n   */\n  s.heap_len = 0;\n  s.heap_max = HEAP_SIZE;\n\n  for (n = 0; n < elems; n++) {\n    if (tree[n * 2]/*.Freq*/ !== 0) {\n      s.heap[++s.heap_len] = max_code = n;\n      s.depth[n] = 0;\n\n    } else {\n      tree[n * 2 + 1]/*.Len*/ = 0;\n    }\n  }\n\n  /* The pkzip format requires that at least one distance code exists,\n   * and that at least one bit should be sent even if there is only one\n   * possible code. So to avoid special checks later on we force at least\n   * two codes of non zero frequency.\n   */\n  while (s.heap_len < 2) {\n    node = s.heap[++s.heap_len] = (max_code < 2 ? ++max_code : 0);\n    tree[node * 2]/*.Freq*/ = 1;\n    s.depth[node] = 0;\n    s.opt_len--;\n\n    if (has_stree) {\n      s.static_len -= stree[node * 2 + 1]/*.Len*/;\n    }\n    /* node is 0 or 1 so it does not have extra bits */\n  }\n  desc.max_code = max_code;\n\n  /* The elements heap[heap_len/2+1 .. heap_len] are leaves of the tree,\n   * establish sub-heaps of increasing lengths:\n   */\n  for (n = (s.heap_len >> 1/*int /2*/); n >= 1; n--) { pqdownheap(s, tree, n); }\n\n  /* Construct the Huffman tree by repeatedly combining the least two\n   * frequent nodes.\n   */\n  node = elems;              /* next internal node of the tree */\n  do {\n    //pqremove(s, tree, n);  /* n = node of least frequency */\n    /*** pqremove ***/\n    n = s.heap[1/*SMALLEST*/];\n    s.heap[1/*SMALLEST*/] = s.heap[s.heap_len--];\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n    /***/\n\n    m = s.heap[1/*SMALLEST*/]; /* m = node of next least frequency */\n\n    s.heap[--s.heap_max] = n; /* keep the nodes sorted by frequency */\n    s.heap[--s.heap_max] = m;\n\n    /* Create a new node father of n and m */\n    tree[node * 2]/*.Freq*/ = tree[n * 2]/*.Freq*/ + tree[m * 2]/*.Freq*/;\n    s.depth[node] = (s.depth[n] >= s.depth[m] ? s.depth[n] : s.depth[m]) + 1;\n    tree[n * 2 + 1]/*.Dad*/ = tree[m * 2 + 1]/*.Dad*/ = node;\n\n    /* and insert the new node in the heap */\n    s.heap[1/*SMALLEST*/] = node++;\n    pqdownheap(s, tree, 1/*SMALLEST*/);\n\n  } while (s.heap_len >= 2);\n\n  s.heap[--s.heap_max] = s.heap[1/*SMALLEST*/];\n\n  /* At this point, the fields freq and dad are set. We can now\n   * generate the bit lengths.\n   */\n  gen_bitlen(s, desc);\n\n  /* The field len is now set, we can generate the bit codes */\n  gen_codes(tree, max_code, s.bl_count);\n}\n\n\n/* ===========================================================================\n * Scan a literal or distance tree to determine the frequencies of the codes\n * in the bit length tree.\n */\nfunction scan_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree;   /* the tree to be scanned */\n//    int max_code;    /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n  tree[(max_code + 1) * 2 + 1]/*.Len*/ = 0xffff; /* guard */\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      s.bl_tree[curlen * 2]/*.Freq*/ += count;\n\n    } else if (curlen !== 0) {\n\n      if (curlen !== prevlen) { s.bl_tree[curlen * 2]/*.Freq*/++; }\n      s.bl_tree[REP_3_6 * 2]/*.Freq*/++;\n\n    } else if (count <= 10) {\n      s.bl_tree[REPZ_3_10 * 2]/*.Freq*/++;\n\n    } else {\n      s.bl_tree[REPZ_11_138 * 2]/*.Freq*/++;\n    }\n\n    count = 0;\n    prevlen = curlen;\n\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Send a literal or distance tree in compressed form, using the codes in\n * bl_tree.\n */\nfunction send_tree(s, tree, max_code)\n//    deflate_state *s;\n//    ct_data *tree; /* the tree to be scanned */\n//    int max_code;       /* and its largest code of non zero frequency */\n{\n  var n;                     /* iterates over all tree elements */\n  var prevlen = -1;          /* last emitted length */\n  var curlen;                /* length of current code */\n\n  var nextlen = tree[0 * 2 + 1]/*.Len*/; /* length of next code */\n\n  var count = 0;             /* repeat count of the current code */\n  var max_count = 7;         /* max repeat count */\n  var min_count = 4;         /* min repeat count */\n\n  /* tree[max_code+1].Len = -1; */  /* guard already set */\n  if (nextlen === 0) {\n    max_count = 138;\n    min_count = 3;\n  }\n\n  for (n = 0; n <= max_code; n++) {\n    curlen = nextlen;\n    nextlen = tree[(n + 1) * 2 + 1]/*.Len*/;\n\n    if (++count < max_count && curlen === nextlen) {\n      continue;\n\n    } else if (count < min_count) {\n      do { send_code(s, curlen, s.bl_tree); } while (--count !== 0);\n\n    } else if (curlen !== 0) {\n      if (curlen !== prevlen) {\n        send_code(s, curlen, s.bl_tree);\n        count--;\n      }\n      //Assert(count >= 3 && count <= 6, \" 3_6?\");\n      send_code(s, REP_3_6, s.bl_tree);\n      send_bits(s, count - 3, 2);\n\n    } else if (count <= 10) {\n      send_code(s, REPZ_3_10, s.bl_tree);\n      send_bits(s, count - 3, 3);\n\n    } else {\n      send_code(s, REPZ_11_138, s.bl_tree);\n      send_bits(s, count - 11, 7);\n    }\n\n    count = 0;\n    prevlen = curlen;\n    if (nextlen === 0) {\n      max_count = 138;\n      min_count = 3;\n\n    } else if (curlen === nextlen) {\n      max_count = 6;\n      min_count = 3;\n\n    } else {\n      max_count = 7;\n      min_count = 4;\n    }\n  }\n}\n\n\n/* ===========================================================================\n * Construct the Huffman tree for the bit lengths and return the index in\n * bl_order of the last bit length code to send.\n */\nfunction build_bl_tree(s) {\n  var max_blindex;  /* index of last bit length code of non zero freq */\n\n  /* Determine the bit length frequencies for literal and distance trees */\n  scan_tree(s, s.dyn_ltree, s.l_desc.max_code);\n  scan_tree(s, s.dyn_dtree, s.d_desc.max_code);\n\n  /* Build the bit length tree: */\n  build_tree(s, s.bl_desc);\n  /* opt_len now includes the length of the tree representations, except\n   * the lengths of the bit lengths codes and the 5+5+4 bits for the counts.\n   */\n\n  /* Determine the number of bit length codes to send. The pkzip format\n   * requires that at least 4 bit length codes be sent. (appnote.txt says\n   * 3 but the actual value used is 4.)\n   */\n  for (max_blindex = BL_CODES - 1; max_blindex >= 3; max_blindex--) {\n    if (s.bl_tree[bl_order[max_blindex] * 2 + 1]/*.Len*/ !== 0) {\n      break;\n    }\n  }\n  /* Update opt_len to include the bit length tree and counts */\n  s.opt_len += 3 * (max_blindex + 1) + 5 + 5 + 4;\n  //Tracev((stderr, \"\\ndyn trees: dyn %ld, stat %ld\",\n  //        s->opt_len, s->static_len));\n\n  return max_blindex;\n}\n\n\n/* ===========================================================================\n * Send the header for a block using dynamic Huffman trees: the counts, the\n * lengths of the bit length codes, the literal tree and the distance tree.\n * IN assertion: lcodes >= 257, dcodes >= 1, blcodes >= 4.\n */\nfunction send_all_trees(s, lcodes, dcodes, blcodes)\n//    deflate_state *s;\n//    int lcodes, dcodes, blcodes; /* number of codes for each tree */\n{\n  var rank;                    /* index in bl_order */\n\n  //Assert (lcodes >= 257 && dcodes >= 1 && blcodes >= 4, \"not enough codes\");\n  //Assert (lcodes <= L_CODES && dcodes <= D_CODES && blcodes <= BL_CODES,\n  //        \"too many codes\");\n  //Tracev((stderr, \"\\nbl counts: \"));\n  send_bits(s, lcodes - 257, 5); /* not +255 as stated in appnote.txt */\n  send_bits(s, dcodes - 1,   5);\n  send_bits(s, blcodes - 4,  4); /* not -3 as stated in appnote.txt */\n  for (rank = 0; rank < blcodes; rank++) {\n    //Tracev((stderr, \"\\nbl code %2d \", bl_order[rank]));\n    send_bits(s, s.bl_tree[bl_order[rank] * 2 + 1]/*.Len*/, 3);\n  }\n  //Tracev((stderr, \"\\nbl tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_ltree, lcodes - 1); /* literal tree */\n  //Tracev((stderr, \"\\nlit tree: sent %ld\", s->bits_sent));\n\n  send_tree(s, s.dyn_dtree, dcodes - 1); /* distance tree */\n  //Tracev((stderr, \"\\ndist tree: sent %ld\", s->bits_sent));\n}\n\n\n/* ===========================================================================\n * Check if the data type is TEXT or BINARY, using the following algorithm:\n * - TEXT if the two conditions below are satisfied:\n *    a) There are no non-portable control characters belonging to the\n *       \"black list\" (0..6, 14..25, 28..31).\n *    b) There is at least one printable character belonging to the\n *       \"white list\" (9 {TAB}, 10 {LF}, 13 {CR}, 32..255).\n * - BINARY otherwise.\n * - The following partially-portable control characters form a\n *   \"gray list\" that is ignored in this detection algorithm:\n *   (7 {BEL}, 8 {BS}, 11 {VT}, 12 {FF}, 26 {SUB}, 27 {ESC}).\n * IN assertion: the fields Freq of dyn_ltree are set.\n */\nfunction detect_data_type(s) {\n  /* black_mask is the bit mask of black-listed bytes\n   * set bits 0..6, 14..25, and 28..31\n   * 0xf3ffc07f = binary 11110011111111111100000001111111\n   */\n  var black_mask = 0xf3ffc07f;\n  var n;\n\n  /* Check for non-textual (\"black-listed\") bytes. */\n  for (n = 0; n <= 31; n++, black_mask >>>= 1) {\n    if ((black_mask & 1) && (s.dyn_ltree[n * 2]/*.Freq*/ !== 0)) {\n      return Z_BINARY;\n    }\n  }\n\n  /* Check for textual (\"white-listed\") bytes. */\n  if (s.dyn_ltree[9 * 2]/*.Freq*/ !== 0 || s.dyn_ltree[10 * 2]/*.Freq*/ !== 0 ||\n      s.dyn_ltree[13 * 2]/*.Freq*/ !== 0) {\n    return Z_TEXT;\n  }\n  for (n = 32; n < LITERALS; n++) {\n    if (s.dyn_ltree[n * 2]/*.Freq*/ !== 0) {\n      return Z_TEXT;\n    }\n  }\n\n  /* There are no \"black-listed\" or \"white-listed\" bytes:\n   * this stream either is empty or has tolerated (\"gray-listed\") bytes only.\n   */\n  return Z_BINARY;\n}\n\n\nvar static_init_done = false;\n\n/* ===========================================================================\n * Initialize the tree data structures for a new zlib stream.\n */\nfunction _tr_init(s)\n{\n\n  if (!static_init_done) {\n    tr_static_init();\n    static_init_done = true;\n  }\n\n  s.l_desc  = new TreeDesc(s.dyn_ltree, static_l_desc);\n  s.d_desc  = new TreeDesc(s.dyn_dtree, static_d_desc);\n  s.bl_desc = new TreeDesc(s.bl_tree, static_bl_desc);\n\n  s.bi_buf = 0;\n  s.bi_valid = 0;\n\n  /* Initialize the first block of the first file: */\n  init_block(s);\n}\n\n\n/* ===========================================================================\n * Send a stored block\n */\nfunction _tr_stored_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  send_bits(s, (STORED_BLOCK << 1) + (last ? 1 : 0), 3);    /* send block type */\n  copy_block(s, buf, stored_len, true); /* with header */\n}\n\n\n/* ===========================================================================\n * Send one empty static block to give enough lookahead for inflate.\n * This takes 10 bits, of which 7 may remain in the bit buffer.\n */\nfunction _tr_align(s) {\n  send_bits(s, STATIC_TREES << 1, 3);\n  send_code(s, END_BLOCK, static_ltree);\n  bi_flush(s);\n}\n\n\n/* ===========================================================================\n * Determine the best encoding for the current block: dynamic trees, static\n * trees or store, and output the encoded block to the zip file.\n */\nfunction _tr_flush_block(s, buf, stored_len, last)\n//DeflateState *s;\n//charf *buf;       /* input block, or NULL if too old */\n//ulg stored_len;   /* length of input block */\n//int last;         /* one if this is the last block for a file */\n{\n  var opt_lenb, static_lenb;  /* opt_len and static_len in bytes */\n  var max_blindex = 0;        /* index of last bit length code of non zero freq */\n\n  /* Build the Huffman trees unless a stored block is forced */\n  if (s.level > 0) {\n\n    /* Check if the file is binary or text */\n    if (s.strm.data_type === Z_UNKNOWN) {\n      s.strm.data_type = detect_data_type(s);\n    }\n\n    /* Construct the literal and distance trees */\n    build_tree(s, s.l_desc);\n    // Tracev((stderr, \"\\nlit data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n\n    build_tree(s, s.d_desc);\n    // Tracev((stderr, \"\\ndist data: dyn %ld, stat %ld\", s->opt_len,\n    //        s->static_len));\n    /* At this point, opt_len and static_len are the total bit lengths of\n     * the compressed block data, excluding the tree representations.\n     */\n\n    /* Build the bit length tree for the above two trees, and get the index\n     * in bl_order of the last bit length code to send.\n     */\n    max_blindex = build_bl_tree(s);\n\n    /* Determine the best encoding. Compute the block lengths in bytes. */\n    opt_lenb = (s.opt_len + 3 + 7) >>> 3;\n    static_lenb = (s.static_len + 3 + 7) >>> 3;\n\n    // Tracev((stderr, \"\\nopt %lu(%lu) stat %lu(%lu) stored %lu lit %u \",\n    //        opt_lenb, s->opt_len, static_lenb, s->static_len, stored_len,\n    //        s->last_lit));\n\n    if (static_lenb <= opt_lenb) { opt_lenb = static_lenb; }\n\n  } else {\n    // Assert(buf != (char*)0, \"lost buf\");\n    opt_lenb = static_lenb = stored_len + 5; /* force a stored block */\n  }\n\n  if ((stored_len + 4 <= opt_lenb) && (buf !== -1)) {\n    /* 4: two words for the lengths */\n\n    /* The test buf != NULL is only necessary if LIT_BUFSIZE > WSIZE.\n     * Otherwise we can't have processed more than WSIZE input bytes since\n     * the last block flush, because compression would have been\n     * successful. If LIT_BUFSIZE <= WSIZE, it is never too late to\n     * transform a block into a stored block.\n     */\n    _tr_stored_block(s, buf, stored_len, last);\n\n  } else if (s.strategy === Z_FIXED || static_lenb === opt_lenb) {\n\n    send_bits(s, (STATIC_TREES << 1) + (last ? 1 : 0), 3);\n    compress_block(s, static_ltree, static_dtree);\n\n  } else {\n    send_bits(s, (DYN_TREES << 1) + (last ? 1 : 0), 3);\n    send_all_trees(s, s.l_desc.max_code + 1, s.d_desc.max_code + 1, max_blindex + 1);\n    compress_block(s, s.dyn_ltree, s.dyn_dtree);\n  }\n  // Assert (s->compressed_len == s->bits_sent, \"bad compressed size\");\n  /* The above check is made mod 2^32, for files larger than 512 MB\n   * and uLong implemented on 32 bits.\n   */\n  init_block(s);\n\n  if (last) {\n    bi_windup(s);\n  }\n  // Tracev((stderr,\"\\ncomprlen %lu(%lu) \", s->compressed_len>>3,\n  //       s->compressed_len-7*last));\n}\n\n/* ===========================================================================\n * Save the match info and tally the frequency counts. Return true if\n * the current block must be flushed.\n */\nfunction _tr_tally(s, dist, lc)\n//    deflate_state *s;\n//    unsigned dist;  /* distance of matched string */\n//    unsigned lc;    /* match length-MIN_MATCH or unmatched char (if dist==0) */\n{\n  //var out_length, in_length, dcode;\n\n  s.pending_buf[s.d_buf + s.last_lit * 2]     = (dist >>> 8) & 0xff;\n  s.pending_buf[s.d_buf + s.last_lit * 2 + 1] = dist & 0xff;\n\n  s.pending_buf[s.l_buf + s.last_lit] = lc & 0xff;\n  s.last_lit++;\n\n  if (dist === 0) {\n    /* lc is the unmatched char */\n    s.dyn_ltree[lc * 2]/*.Freq*/++;\n  } else {\n    s.matches++;\n    /* Here, lc is the match length - MIN_MATCH */\n    dist--;             /* dist = match distance - 1 */\n    //Assert((ush)dist < (ush)MAX_DIST(s) &&\n    //       (ush)lc <= (ush)(MAX_MATCH-MIN_MATCH) &&\n    //       (ush)d_code(dist) < (ush)D_CODES,  \"_tr_tally: bad match\");\n\n    s.dyn_ltree[(_length_code[lc] + LITERALS + 1) * 2]/*.Freq*/++;\n    s.dyn_dtree[d_code(dist) * 2]/*.Freq*/++;\n  }\n\n// (!) This block is disabled in zlib defaults,\n// don't enable it for binary compatibility\n\n//#ifdef TRUNCATE_BLOCK\n//  /* Try to guess if it is profitable to stop the current block here */\n//  if ((s.last_lit & 0x1fff) === 0 && s.level > 2) {\n//    /* Compute an upper bound for the compressed length */\n//    out_length = s.last_lit*8;\n//    in_length = s.strstart - s.block_start;\n//\n//    for (dcode = 0; dcode < D_CODES; dcode++) {\n//      out_length += s.dyn_dtree[dcode*2]/*.Freq*/ * (5 + extra_dbits[dcode]);\n//    }\n//    out_length >>>= 3;\n//    //Tracev((stderr,\"\\nlast_lit %u, in %ld, out ~%ld(%ld%%) \",\n//    //       s->last_lit, in_length, out_length,\n//    //       100L - out_length*100L/in_length));\n//    if (s.matches < (s.last_lit>>1)/*int /2*/ && out_length < (in_length>>1)/*int /2*/) {\n//      return true;\n//    }\n//  }\n//#endif\n\n  return (s.last_lit === s.lit_bufsize - 1);\n  /* We avoid equality with lit_bufsize because of wraparound at 64K\n   * on 16 bit machines and because stored blocks are restricted to\n   * 64K-1 bytes.\n   */\n}\n\nexports._tr_init  = _tr_init;\nexports._tr_stored_block = _tr_stored_block;\nexports._tr_flush_block  = _tr_flush_block;\nexports._tr_tally = _tr_tally;\nexports._tr_align = _tr_align;\n","'use strict';\n\n// (C) 1995-2013 Jean-loup Gailly and Mark Adler\n// (C) 2014-2017 Vitaly Puzrin and Andrey Tupitsin\n//\n// This software is provided 'as-is', without any express or implied\n// warranty. In no event will the authors be held liable for any damages\n// arising from the use of this software.\n//\n// Permission is granted to anyone to use this software for any purpose,\n// including commercial applications, and to alter it and redistribute it\n// freely, subject to the following restrictions:\n//\n// 1. The origin of this software must not be misrepresented; you must not\n//   claim that you wrote the original software. If you use this software\n//   in a product, an acknowledgment in the product documentation would be\n//   appreciated but is not required.\n// 2. Altered source versions must be plainly marked as such, and must not be\n//   misrepresented as being the original software.\n// 3. This notice may not be removed or altered from any source distribution.\n\nfunction ZStream() {\n  /* next input byte */\n  this.input = null; // JS specific, because we have no pointers\n  this.next_in = 0;\n  /* number of bytes available at input */\n  this.avail_in = 0;\n  /* total number of input bytes read so far */\n  this.total_in = 0;\n  /* next output byte should be put there */\n  this.output = null; // JS specific, because we have no pointers\n  this.next_out = 0;\n  /* remaining free space at output */\n  this.avail_out = 0;\n  /* total number of bytes output so far */\n  this.total_out = 0;\n  /* last error message, NULL if no error */\n  this.msg = ''/*Z_NULL*/;\n  /* not visible by applications */\n  this.state = null;\n  /* best guess about the data type: binary or text */\n  this.data_type = 2/*Z_UNKNOWN*/;\n  /* adler32 value of the uncompressed data */\n  this.adler = 0;\n}\n\nmodule.exports = ZStream;\n","module.exports = Pend;\n\nfunction Pend() {\n  this.pending = 0;\n  this.max = Infinity;\n  this.listeners = [];\n  this.waiting = [];\n  this.error = null;\n}\n\nPend.prototype.go = function(fn) {\n  if (this.pending < this.max) {\n    pendGo(this, fn);\n  } else {\n    this.waiting.push(fn);\n  }\n};\n\nPend.prototype.wait = function(cb) {\n  if (this.pending === 0) {\n    cb(this.error);\n  } else {\n    this.listeners.push(cb);\n  }\n};\n\nPend.prototype.hold = function() {\n  return pendHold(this);\n};\n\nfunction pendHold(self) {\n  self.pending += 1;\n  var called = false;\n  return onCb;\n  function onCb(err) {\n    if (called) throw new Error(\"callback called twice\");\n    called = true;\n    self.error = self.error || err;\n    self.pending -= 1;\n    if (self.waiting.length > 0 && self.pending < self.max) {\n      pendGo(self, self.waiting.shift());\n    } else if (self.pending === 0) {\n      var listeners = self.listeners;\n      self.listeners = [];\n      listeners.forEach(cbListener);\n    }\n  }\n  function cbListener(listener) {\n    listener(self.error);\n  }\n}\n\nfunction pendGo(self, fn) {\n  fn(pendHold(self));\n}\n","/* globals __webpack_amd_options__ */\nmodule.exports = __webpack_amd_options__;\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","\nexport function getGlobal() {\n  return typeof window !== \"undefined\" && window !== null ?\n  window :\n  typeof self !== \"undefined\" && self !== null ?\n  self :\n  global;\n}\n\nvar _window = getGlobal();\nvar _document = _window && _window.document;\n\nexport var isBrowser = typeof navigator !== \"undefined\";\n\nexport var isNodeJS = function isNodeJS() {\n  return !isBrowser;\n};\n\nexport var isIE11 = isBrowser && !!navigator.userAgent.match(/Edge|Trident\\/7\\./);\n\n// Although the naming is misleading, isIE11 contains Edge too for some legacy reason.\n// For backward compatibility, instead of renaming `isIE11` to `isIEOrEdge`, I just added `isIE11Only`.\nexport var isIE11Only = isBrowser && !!navigator.userAgent.match(/Trident\\/7\\./);\n\n// fix IE events\nif (typeof window !== \"undefined\" && isIE11) {\n  (function () {\n    function CustomEvent(event, params) {\n      params = params || { bubbles: false, cancelable: false, detail: undefined };\n      var evt = _document.createEvent('CustomEvent');\n      evt.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);\n      return evt;\n    }\n\n    CustomEvent.prototype = _window.CustomEvent.prototype;\n\n    _window.CustomEvent = CustomEvent;\n  })();\n}\n\n// IE does not implement ArrayBuffer slice. Handy!\nif (!ArrayBuffer.prototype.slice) {\n  ArrayBuffer.prototype.slice = function (start, end) {\n    // Normalize start/end values\n    if (!end || end > this.byteLength) {\n      end = this.byteLength;\n    } else\n    if (end < 0) {\n      end = this.byteLength + end;\n      if (end < 0) end = 0;\n    }\n    if (start < 0) {\n      start = this.byteLength + start;\n      if (start < 0) start = 0;\n    }\n\n    if (end <= start) {\n      return new ArrayBuffer();\n    }\n\n    // Bytewise copy- this will not be fast, but what choice do we have?\n    var len = end - start;\n    var view = new Uint8Array(this, start, len);\n    var out = new Uint8Array(len);\n    for (var i = 0; i < len; i++) {\n      out[i] = view[i];\n    }\n    return out.buffer;\n  };\n}\n\n// IE doesn't implement Math.log2\n(function () {\n  Math.log2 = Math.log2 || function (x) {\n    return Math.log(x) / Math.LN2;\n  };\n})();\n\n//The BlobBuilder object\nif (typeof window !== \"undefined\")\n_window.BlobBuilder = _window.BlobBuilder || _window.WebKitBlobBuilder || _window.MozBlobBuilder || _window.MSBlobBuilder;\n\n\n// Launch full screen on the given element with the available method\nexport function launchFullscreen(element, options) {\n  if (element.requestFullscreen) {\n    element.requestFullscreen(options);\n  } else if (element.mozRequestFullScreen) {\n    element.mozRequestFullScreen(options);\n  } else if (element.webkitRequestFullscreen) {\n    element.webkitRequestFullscreen(options);\n  } else if (element.msRequestFullscreen) {\n    element.msRequestFullscreen(options);\n  }\n};\n\n// Exit full screen with the available method\nexport function exitFullscreen(_document) {\n  if (!inFullscreen(_document)) {\n    return;\n  }\n  if (_document.exitFullscreen) {\n    _document.exitFullscreen();\n  } else if (_document.mozCancelFullScreen) {\n    _document.mozCancelFullScreen();\n  } else if (_document.webkitExitFullscreen) {\n    _document.webkitExitFullscreen();\n  } else if (_document.msExitFullscreen) {\n    _document.msExitFullscreen();\n  }\n};\n\n// Determines if the browser is in full screen\nexport function inFullscreen(_document) {\n\n  // Special case for Ms-Edge that has webkitIsFullScreen with correct value\n  // and fullscreenEnabled with wrong value (thanks MS)\n\n  if (\"webkitIsFullScreen\" in _document) return !!_document.webkitIsFullScreen;\n  if (\"fullscreenElement\" in _document) return !!_document.fullscreenElement;\n  if (\"mozFullScreenElement\" in _document) return !!_document.mozFullScreenElement;\n  if (\"msFullscreenElement\" in _document) return !!_document.msFullscreenElement;\n\n  return !!_document.querySelector(\".viewer-fill-browser\"); // Fallback for iPad\n};\n\nexport function fullscreenElement(_document) {\n  return _document.fullscreenElement || _document.mozFullScreenElement || _document.webkitFullscreenElement || _document.msFullscreenElement;\n};\n\nexport function isFullscreenAvailable(element) {\n  return element.requestFullscreen || element.mozRequestFullScreen || element.webkitRequestFullscreen || element.msRequestFullscreen;\n};\n\n/**\n    * Returns true if full screen mode is enabled. \n    * @param {Document} _document\n    * @return {Boolean} - true if full screen mode is enabled false otherwise.\n    */\nexport function isFullscreenEnabled(_document) {\n  return (\n    _document.fullscreenEnabled ||\n    _document.webkitFullscreenEnabled ||\n    _document.mozFullScreenEnabled ||\n    _document.msFullscreenEnabled);\n\n}\n\n// Get the version of the android device through user agent.\n// Return the version string of android device, e.g. 4.4, 5.0...\nexport function getAndroidVersion(ua) {\n  ua = ua || navigator.userAgent;\n  var match = ua.match(/Android\\s([0-9\\.]*)/);\n  return match ? match[1] : false;\n};\n\n// Determine if this is a touch or notouch device.\nexport function isTouchDevice() {\n  /*\n                                 // Temporarily disable touch support through hammer on Android 5, to debug\n                                 // some specific gesture issue with Chromium WebView when loading viewer3D.js.\n                                 if (parseInt(getAndroidVersion()) == 5) {\n                                     return false;\n                                 }\n                                 */\n\n  return typeof window !== 'undefined' && ('ontouchstart' in window || navigator.maxTouchPoints > 0);\n};\n\n// Since iOS 13, the iPad identifies itself as a desktop, so the only way to reliably detect is to search for multitouch capabilities\n// (insofar as no other Apple device implements it)\nvar _isIOSDevice = isBrowser && (/ip(ad|hone|od)/.test(navigator.userAgent.toLowerCase()) || navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);\nexport function isIOSDevice() {\n  return _isIOSDevice;\n}\n\nvar _isAndroidDevice = isBrowser && navigator.userAgent.toLowerCase().indexOf('android') !== -1;\nexport function isAndroidDevice() {\n  return _isAndroidDevice;\n}\n\nexport function isMobileDevice() {\n  if (!isBrowser) return false;\n  return isIOSDevice() || isAndroidDevice();\n};\n\nexport function isPhoneFormFactor() {\n  return (\n    isMobileDevice() && (\n    _window.matchMedia('(max-width: 750px)').matches || _window.matchMedia('(max-height: 750px)').matches));\n\n}\n\nexport function isSafari() {\n  if (!isBrowser) return false;\n  var _ua = navigator.userAgent.toLowerCase();\n  return _ua.indexOf(\"safari\") !== -1 && _ua.indexOf(\"chrome\") === -1;\n};\n\nexport function isFirefox() {\n  if (!isBrowser) return false;\n  var _ua = navigator.userAgent.toLowerCase();\n  return _ua.indexOf(\"firefox\") !== -1;\n};\n\nexport function isChrome() {\n  if (!isBrowser) return false;\n  var _ua = navigator.userAgent.toLowerCase();\n  return _ua.indexOf(\"chrome\") !== -1;\n};\n\nexport function isMac() {\n  if (!isBrowser) return false;\n  var _ua = navigator.userAgent.toLowerCase();\n  return _ua.indexOf(\"mac os\") !== -1;\n};\n\nexport function isWindows() {\n  if (!isBrowser) return false;\n  var _ua = navigator.userAgent.toLowerCase();\n  return _ua.indexOf(\"win32\") !== -1 || _ua.indexOf(\"windows\") !== -1;\n};\n\nexport function ObjectAssign(des, src) {\n  for (var key in src) {\n    if (src.hasOwnProperty(key))\n    des[key] = src[key];\n  }\n  return des;\n};\n\n// Hack to work around Safari's use of pinch and pan inside the viewer canvas.\nfunction disableTouchSafari(event) {\n  var xOff = _window.hasOwnProperty(\"pageXOffset\") ? _window.pageXOffset : _document.documentElement.scrollLeft;\n  var yOff = _window.hasOwnProperty(\"pageYOffset\") ? _window.pageYOffset : _document.documentElement.scrollTop;\n\n  // event.pageX and event.pageY returned undefined through Chrome console device mode\n  var pageX = typeof event.pageX === \"undefined\" ? event.changedTouches[0].pageX : event.pageX;\n  var pageY = typeof event.pageY === \"undefined\" ? event.changedTouches[0].pageY : event.pageY;\n\n  // If we aren't inside the canvas, then allow default propagation of the event\n  var element = _document.elementFromPoint(pageX - xOff, pageY - yOff);\n  if (!element || element.nodeName !== 'CANVAS')\n  return true;\n  // If it's a CANVAS, check that it's owned by us\n  if (element.getAttribute('data-viewer-canvas') !== 'true')\n  return true;\n  // Inside the canvas, prevent the event from propagating to Safari'safely\n  // standard handlers, which will pan and zoom the page.\n  event.preventDefault();\n  return false;\n}\n\n// Hack to work around Safari's use of pinch and pan inside the viewer canvas.\nexport function disableDocumentTouchSafari() {\n  if (isMobileDevice() && isSafari()) {\n    // Safari mobile disable default touch handling inside viewer canvas\n    // Use capture to make sure Safari doesn't capture the touches and prevent\n    // us from disabling them.\n    _document.documentElement.addEventListener('touchstart', disableTouchSafari, true);\n    _document.documentElement.addEventListener('touchmove', disableTouchSafari, true);\n    _document.documentElement.addEventListener('touchcanceled', disableTouchSafari, true);\n    _document.documentElement.addEventListener('touchend', disableTouchSafari, true);\n  }\n};\n\n// Hack to work around Safari's use of pinch and pan inside the viewer canvas.\n// This method is not being invoked explicitly.\nexport function enableDocumentTouchSafari() {\n  if (isMobileDevice() && isSafari()) {\n    // Safari mobile disable default touch handling inside viewer canvas\n    // Use capture to make sure Safari doesn't capture the touches and prevent\n    // us from disabling them.\n    _document.documentElement.removeEventListener('touchstart', disableTouchSafari, true);\n    _document.documentElement.removeEventListener('touchmove', disableTouchSafari, true);\n    _document.documentElement.removeEventListener('touchcanceled', disableTouchSafari, true);\n    _document.documentElement.removeEventListener('touchend', disableTouchSafari, true);\n  }\n};\n\n\n// Convert touchstart event to click to remove the delay between the touch and\n// the click event which is sent after touchstart with about 300ms deley.\n// Should be used in UI elements on touch devices.\nexport function touchStartToClick(e) {\n  // Buttons that activate fullscreen are a special case. The HTML5 fullscreen spec\n  // requires the original user gesture signal to avoid a security issue.  See LMV-2396 and LMV-2326\n  if (e.target.className && (e.target.className.indexOf(\"fullscreen\") > -1 || e.target.className.indexOf(\"webvr\") > -1))\n  return;\n  e.preventDefault(); // Stops the firing of delayed click event.\n  e.stopPropagation();\n  e.target.click(); // Maps to immediate click.\n}\n\n//Safari doesn't have the Performance object\n//We only need the now() function, so that's easy to emulate.\n(function () {\n  var global = getGlobal();\n  if (!global.performance)\n  global.performance = Date;\n})();\n\n// Polyfill for IE and Safari\n// https://developer.mozilla.org/de/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger\nNumber.isInteger = Number.isInteger || function (value) {\n  return typeof value === \"number\" &&\n  isFinite(value) &&\n  Math.floor(value) === value;\n};\n\n// Polyfill for IE\nString.prototype.repeat = String.prototype.repeat || function (count) {\n  if (count < 1) return '';\n  var result = '',pattern = this.valueOf();\n  while (count > 1) {\n    if (count & 1) result += pattern;\n    count >>= 1, pattern += pattern;\n  }\n  return result + pattern;\n};\n\n// Polyfill for IE\n// https://github.com/jonathantneal/array-flat-polyfill/blob/master/src/polyfill-flat.js\nif (!Array.prototype.flat) {\n  Object.defineProperty(Array.prototype, 'flat', {\n    value: function flat() {\n      var depth = isNaN(arguments[0]) ? 1 : Number(arguments[0]);\n\n      return depth ? Array.prototype.reduce.call(this, function (acc, cur) {\n        if (Array.isArray(cur)) {\n          acc.push.apply(acc, flat.call(cur, depth - 1));\n        } else {\n          acc.push(cur);\n        }\n\n        return acc;\n      }, []) : Array.prototype.slice.call(this);\n    } });\n\n}\n\n// Polyfill for IE\n// It doesn't support negative values for start and end; it complicates the code using this function.\nif (!Array.prototype.fill) {\n  Object.defineProperty(Array.prototype, \"fill\", {\n    enumerable: false,\n    value: function value(_value, start, end) {\n      start = start === undefined ? 0 : start;\n      end = end === undefined ? this.length : end;\n      for (var i = start; i < end; ++i) {\n        this[i] = _value;}\n    } });\n\n}\n// Polyfill for IE\nInt32Array.prototype.lastIndexOf = Int32Array.prototype.lastIndexOf || function (searchElement, fromIndex) {\n  return Array.prototype.lastIndexOf.call(this, searchElement, fromIndex);\n};\n\n// Polyfill for IE\n// It doesn't support negative values for start and end; it complicates the code using this function.\nif (!Array.prototype.find) {\n  Object.defineProperty(Array.prototype, \"find\", {\n    enumerable: false,\n    value: function value(callback, _this) {\n      var len = this.length;\n      for (var i = 0; i < len; ++i) {\n        var item = this[i];\n        if (callback.call(_this, item, i, this))\n        return item;\n      }\n      return undefined;\n    } });\n\n}\n\n// Polyfill for IE\nif (typeof Object.assign != 'function') {\n  // Must be writable: true, enumerable: false, configurable: true\n  Object.defineProperty(Object, \"assign\", {\n    value: function assign(target, varArgs) {// .length of function is 2\n      'use strict';\n      if (target == null) {// TypeError if undefined or null\n        throw new TypeError('Cannot convert undefined or null to object');\n      }\n\n      var to = Object(target);\n\n      for (var index = 1; index < arguments.length; index++) {\n        var nextSource = arguments[index];\n\n        if (nextSource != null) {// Skip over if undefined or null\n          for (var nextKey in nextSource) {\n            // Avoid bugs when hasOwnProperty is shadowed\n            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {\n              to[nextKey] = nextSource[nextKey];\n            }\n          }\n        }\n      }\n      return to;\n    },\n    writable: true,\n    configurable: true });\n\n}\n\n// Polyfill for IE and iOS devices\nif (typeof window !== \"undefined\" && (isIE11 || isIOSDevice()) && !HTMLCanvasElement.prototype.toBlob) {\n  Object.defineProperty(HTMLCanvasElement.prototype, 'toBlob', {\n    value: function value(callback, type, quality) {\n      var canvas = this;\n      setTimeout(function () {\n\n        var binStr = atob(canvas.toDataURL(type, quality).split(',')[1]),\n        len = binStr.length,\n        arr = new Uint8Array(len);\n\n        for (var i = 0; i < len; i++) {\n          arr[i] = binStr.charCodeAt(i);\n        }\n\n        callback(new Blob([arr], { type: type || 'image/png' }));\n\n      });\n    } });\n\n}\n\n// Polyfill for IE (LMV-3823)\nif (!Uint8Array.prototype.slice) {\n\n  // This will work for genuine arrays, array-like objects, \n  // NamedNodeMap (attributes, entities, notations),\n  // NodeList (e.g., getElementsByTagName), HTMLCollection (e.g., childNodes),\n  // and will not fail on other DOM objects (as do DOM elements in IE < 9)\n  Uint8Array.prototype.slice = function (begin, end) {\n    // IE < 9 gets unhappy with an undefined end argument\n    end = typeof end !== 'undefined' ? end : this.length;\n\n    // For native Array objects, we use the native slice function\n    if (Object.prototype.toString.call(this) === '[object Array]') {\n      return _slice.call(this, begin, end);\n    }\n\n    // For array like object we handle it ourselves.\n    var i,cloned = [],\n    size,len = this.length;\n\n    // Handle negative value for \"begin\"\n    var start = begin || 0;\n    start = start >= 0 ? start : Math.max(0, len + start);\n\n    // Handle negative value for \"end\"\n    var upTo = typeof end == 'number' ? Math.min(end, len) : len;\n    if (end < 0) {\n      upTo = len + end;\n    }\n\n    // Actual expected size of the slice\n    size = upTo - start;\n\n    if (size > 0) {\n      cloned = new Array(size);\n      if (this.charAt) {\n        for (i = 0; i < size; i++) {\n          cloned[i] = this.charAt(start + i);\n        }\n      } else {\n        for (i = 0; i < size; i++) {\n          cloned[i] = this[start + i];\n        }\n      }\n    }\n\n    return cloned;\n  };\n}","import { utf8ArrayToString } from './StringUtils';\n\n\"use strict\";\n\n//We will use these shared memory arrays to\n//convert from bytes to the desired data type.\nvar convBuf = new ArrayBuffer(8);\nvar convUint8 = new Uint8Array(convBuf);\nvar convUint16 = new Uint16Array(convBuf);\nvar convInt32 = new Int32Array(convBuf);\nvar convUint32 = new Uint32Array(convBuf);\nvar convFloat32 = new Float32Array(convBuf);\nvar convFloat64 = new Float64Array(convBuf);\n\n\n/** @constructor */\nexport function InputStream(buf) {\n  this.buffer = buf;\n  this.offset = 0;\n  this.byteLength = buf.length;\n}\n\n\nInputStream.prototype.seek = function (off) {\n  this.offset = off;\n};\n\nInputStream.prototype.getBytes = function (len) {\n  var ret = new Uint8Array(this.buffer.buffer, this.offset, len);\n  this.offset += len;\n  return ret;\n};\n\nInputStream.prototype.getVarints = function () {\n  var b;\n  var value = 0;\n  var shiftBy = 0;\n  do {\n    b = this.buffer[this.offset++];\n    value |= (b & 0x7f) << shiftBy;\n    shiftBy += 7;\n  } while (b & 0x80);\n  return value;\n};\n\nInputStream.prototype.getUint8 = function () {\n  return this.buffer[this.offset++];\n};\n\nInputStream.prototype.getUint16 = function () {\n  convUint8[0] = this.buffer[this.offset++];\n  convUint8[1] = this.buffer[this.offset++];\n  return convUint16[0];\n};\n\nInputStream.prototype.getInt16 = function () {\n  var tmp = this.getUint16();\n  //make negative integer if the ushort is negative\n  if (tmp > 0x7fff)\n  tmp = tmp | 0xffff0000;\n  return tmp;\n};\n\nInputStream.prototype.getInt32 = function () {\n  var src = this.buffer;\n  var dst = convUint8;\n  var off = this.offset;\n  dst[0] = src[off];\n  dst[1] = src[off + 1];\n  dst[2] = src[off + 2];\n  dst[3] = src[off + 3];\n  this.offset += 4;\n  return convInt32[0];\n};\n\nInputStream.prototype.getUint32 = function () {\n  var src = this.buffer;\n  var dst = convUint8;\n  var off = this.offset;\n  dst[0] = src[off];\n  dst[1] = src[off + 1];\n  dst[2] = src[off + 2];\n  dst[3] = src[off + 3];\n  this.offset += 4;\n  return convUint32[0];\n};\n\nInputStream.prototype.getFloat32 = function () {\n  var src = this.buffer;\n  var dst = convUint8;\n  var off = this.offset;\n  dst[0] = src[off];\n  dst[1] = src[off + 1];\n  dst[2] = src[off + 2];\n  dst[3] = src[off + 3];\n  this.offset += 4;\n  return convFloat32[0];\n};\n\n//Specialized copy which copies 4 byte integers into 2-byte target.\n//Used for downcasting OCTM int32 index buffers to int16 index buffers,\n//in cases we know we don't need more (LMVTK guarantees 2 byte indices).\nInputStream.prototype.getIndicesArray = function (buffer, offset, numItems) {\n\n  var src = this.buffer;\n  var dst = new Uint8Array(buffer, offset, numItems * 2);\n  var off = this.offset;\n\n  for (var i = 0, iEnd = numItems * 2; i < iEnd; i += 2) {\n    dst[i] = src[off];\n    dst[i + 1] = src[off + 1];\n    off += 4;\n  }\n\n  this.offset = off;\n};\n\nInputStream.prototype.getVector3Array = function (arr, numItems, startOffset, stride) {\n  var src = this.buffer;\n  var off = this.offset;\n\n  //We cannot use Float32Array copying here because the\n  //source stream is out of alignment\n  var dst = new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n\n  if (stride === 3 && startOffset === 0) {\n    var len = numItems * 12;\n    dst.set(src.subarray(off, off + len));\n    this.offset += len;\n  } else {\n\n    stride *= 4;\n    var aoff = startOffset * 4;\n    for (var i = 0; i < numItems; i++) {\n      for (var j = 0; j < 12; j++) {\n        dst[aoff + j] = src[off++];\n      }\n      aoff += stride;\n    }\n\n    this.offset = off;\n  }\n};\n\nInputStream.prototype.getVector2Array = function (arr, numItems, startOffset, stride) {\n  var src = this.buffer;\n  var dst = new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n  var off = this.offset;\n\n  stride *= 4;\n  var aoff = startOffset * 4;\n  for (var i = 0; i < numItems; i++) {\n    for (var j = 0; j < 8; j++) {\n      dst[aoff + j] = src[off++];\n    }\n    aoff += stride;\n  }\n\n  this.offset = off;\n};\n\nInputStream.prototype.getVector4 = function (arr, offset) {\n  var src = this.buffer;\n  var dst = convUint8;\n  var off = this.offset;\n  var conv = convFloat32;\n\n  for (var j = 0; j < 4; j++) {\n    dst[0] = src[off];\n    dst[1] = src[off + 1];\n    dst[2] = src[off + 2];\n    dst[3] = src[off + 3];\n    arr[offset + j] = conv[0];\n    off += 4;\n  }\n\n  this.offset = off;\n};\n\nInputStream.prototype.getFloat64 = function () {\n  var src = this.buffer;\n  var dst = convUint8;\n  var off = this.offset;\n  for (var i = 0; i < 8; i++) {\n    dst[i] = src[off + i];}\n  this.offset += 8;\n  return convFloat64[0];\n};\n\n\n\nInputStream.prototype.getString = function (len) {\n  var res = utf8ArrayToString(this.buffer, this.offset, len);\n  this.offset += len;\n  return res;\n};\n\nInputStream.prototype.reset = function (buf) {\n  this.buffer = buf;\n  this.offset = 0;\n  this.byteLength = buf.length;\n};","\nimport { blobToJson, parseIntArray, findValueOffsets, subBlobToJson, subBlobToJsonInt } from '../common/StringUtils';\nimport { binarySearch } from '../common/SearchUtils';\n\n/**\n                                                       * Numeric values and their meanings associated to {@link PropertyResult|PropertyResult.type}.\n                                                       *\n                                                       * @readonly\n                                                       * @alias AttributeType\n                                                       * @default\n                                                       */\nvar AttributeType =\n{\n  //Numeric types\n  Unknown: 0,\n  Boolean: 1,\n  Integer: 2,\n  Double: 3,\n  Float: 4,\n\n  //Special types\n  BLOB: 10,\n  DbKey: 11, /* represents a link to another object in the database, using database internal ID */\n\n  //String types \n  String: 20,\n  LocalizableString: 21,\n  DateTime: 22, /* ISO 8601 date */\n  GeoLocation: 23, /* LatLonHeight - ISO6709 Annex H string, e.g: \"+27.5916+086.5640+8850/\" for Mount Everest */\n  Position: 24 /* \"x y z w\" space separated string representing vector with 2,3 or 4 elements*/\n\n  //TODO: Do we need explicit logical types for any others?\n};\n\n//Bitmask values for boolean attribute options\nvar AttributeFlags =\n{\n  afHidden: 1 << 0, /* Attribute will not be displayed in default GUI property views. */\n  afDontIndex: 1 << 1, /* Attribute will not be indexed by the search service. */\n  afDirectStorage: 1 << 2, /* Attribute is not worth de-duplicating (e.g. vertex data or dbId reference) */\n  afReadOnly: 1 << 3 /* Attribute is read-only (used when writing back to the design model, in e.g. Revit) */ };\n\n\n//Used by property diff\nvar RVT_DIM_PROPS = [\n\"Perimeter\",\n\"Volume\",\n\"Area\",\n\"Length\",\n\"Width\",\n\"Height\"];\n\n\n//Inlined into enumObjectProperties below\n/*\nfunction readVarint(buf, offset) {\n    var b;\n    var value = 0;\n    var shiftBy = 0;\n    do {\n        b = buf[offset[0]++];\n        value |= (b & 0x7f) << shiftBy;\n        shiftBy += 7;\n    } while (b & 0x80);\n    return value;\n}\n*/\n\n/**\n    * The Property Database contains property information for each part of a model.\n    * The data is read-only, since it has been packed to optimize memory footprint.\n    * It's implemented as an Entity-Atribute-Value (EAV) set of tables.\n    * LMV keeps the PropertyDatabase in a browser worker thread to prevent compute-intensive\n    * methods to block the main browser UI thread.\n    * Words \"Attribute\" and \"Property\" are use interchangeably.\n    *\n    * @param dbjsons\n    * @class\n    * @class\n    */\nexport function PropertyDatabase(dbjsons) {\n\n  \"use strict\";\n\n  var _this = this;\n\n  var _isV2 = false;\n  var _isVarint = false;\n\n  //The property db json arrays.\n  //Some of them are held unparsed in blob form\n  //with helper arrays containing offsets into the blobs for each value to be parsed on demand\n  var _attrs; // Array of arrays. Inner array is in the form [attrName(0), category(1), dataType(2), dataTypeContext(3), description(4), displayName(5), flags(6), precision(7) ] \n  // See struct AttributeDef in https://git.autodesk.com/A360/platform-translation-propertydb/blob/master/propertydb/PropertyDatabase.h \n  var _offsets;\n  var _avs;\n  var _valuesBlob;\n  var _valuesOffsets;\n  var _idsBlob;\n  var _idsOffsets;\n\n  //Cached ids of commonly used well known attributes (child, parent, name)\n  var _childAttrId;\n  var _parentAttrId;\n  var _nameAttrId;\n  var _instanceOfAttrId;\n  var _viewableInAttrId;\n  var _externalRefAttrId;\n  var _nodeFlagsAttrId;\n  var _layersAttrId;\n\n  //Transient structures for detecting invalid cycles in buildObjectTree()\n  var _processedIds;\n  var _cyclesCount;\n\n  //dbjsons is expected to be of the form\n  //{ attrs: {filename1:x, filename2:y}, ids: {filename1:x... }, values: {... }, offsets: {... }, avs: {... } }\n  //where each of the elements of each array is a pair of the original name and the unzipped *raw* byte\n  //array buffer corresponding to the respective property database constituent. In the current implementation\n  //each array is expected to only have one name-value element.\n\n\n  //=========================================================================\n\n  //The attribute definitions blob is considered small enough\n  //to parse using regular APIs\n  for (var p in dbjsons.attrs) {\n    _attrs = blobToJson(dbjsons.attrs[p]);\n\n    if (_attrs[0] === \"pdb version 2\")\n    _isV2 = true;\n\n    for (var i = 1; i < _attrs.length; i++) {\n\n      var attrName = _attrs[i][0];\n      switch (attrName) {\n        case \"Layer\":_layersAttrId = i;break;\n        default:break;}\n\n\n      var category = _attrs[i][1];\n\n      switch (category) {\n        case \"__parent__\":_parentAttrId = i;break;\n        case \"__child__\":_childAttrId = i;break;\n        case \"__name__\":_nameAttrId = i;break;\n        case \"__instanceof__\":_instanceOfAttrId = i;break;\n        case \"__viewable_in__\":_viewableInAttrId = i;break;\n        case \"__externalref__\":_externalRefAttrId = i;break;\n        case \"__node_flags__\":_nodeFlagsAttrId = i;break;\n        default:break;}\n\n\n      //As of V2, DbKey attribute values are stored directly into the AV array\n      if (_isV2 && _attrs[i][2] === AttributeType.DbKey) {\n        _attrs[i][6] = _attrs[i][6] | AttributeFlags.afDirectStorage;\n      }\n    }\n\n    break; //currently we can only handle single property file (no chunking)\n  }\n\n  //manual parse of the attribute-value index pairs array\n  for (var p in dbjsons.avs) {\n\n    var buf = dbjsons.avs[p];\n\n    if (buf[0] === \"[\".charCodeAt(0)) {\n      _avs = parseIntArray(dbjsons.avs[p], 0);\n    } else {\n      _avs = buf;\n      _isVarint = true;\n    }\n\n    delete dbjsons.avs; //don't need this blob anymore\n\n    break; //currently we can only handle single property file (no chunking)\n\n  }\n\n\n  //manual parse of the offsets array\n  for (var p in dbjsons.offsets) {\n\n    var buf = dbjsons.offsets[p];\n\n    if (buf[0] === \"[\".charCodeAt(0)) {\n      _offsets = parseIntArray(buf, 1); //passing in 1 to reserve a spot for the sentinel value\n\n      //just a sentinel value to make lookups for the last item easier\n      _offsets[_offsets.length - 1] = _avs.length / 2;\n    } else {\n      _offsets = new Int32Array(buf.buffer, buf.byteOffset, buf.byteLength / 4);\n    }\n\n    delete dbjsons.offsets; //don't need this\n\n    break; //currently we can only handle single property file (no chunking)\n\n  }\n\n  //Instead of parsing the values and ids arrays, find the\n  //offset of each json item in the blob, and then we can\n  //pick and parse specific items later on demand, without\n  //parsing the potentially large json blob up front.\n  for (var p in dbjsons.values) {\n    _valuesBlob = dbjsons.values[p];\n    _valuesOffsets = findValueOffsets(_valuesBlob);\n\n    break; //currently we can only handle single property file (no chunking)\n\n  }\n\n  // Get externalIds from data blob. Unlike the other data, this one is optional\n  // and may be loaded later or not at all to save memory.\n  this.setIdsBlob = function (data) {\n    // Just like for _valuesBlob: Find the offset to each value \n    //  but skip the full parse.\n    _idsBlob = data;\n    _idsOffsets = findValueOffsets(data);\n  };\n\n  //Set ids array (if available). Note that the ids array is\n  //optional and LMV does not require them. (Just some extensions might do - like PushPins)\n  for (var p in dbjsons.ids) {\n    this.setIdsBlob(dbjsons.ids[p]);\n    break; //currently we can only handle single property file (no chunking)\n  }\n\n  //=========================================================================\n\n  /**\n   * Obtains the number of database ids (dbIds) available. \n   * These ids range betwee 1 (inclusive) up to getObjectCount() (exclusive).\n   *\n   * @returns {number}\n   */\n  this.getObjectCount = function () {\n    return _offsets.length - 1;\n  };\n\n  this.getValueAt = function (valId) {\n    return subBlobToJson(_valuesBlob, _valuesOffsets[valId]);\n  };\n\n  //faster variant used for traversing the object hierarchy where\n  //we know the data type of the value to be an integer\n  this.getIntValueAt = function (valId) {\n    return subBlobToJsonInt(_valuesBlob, _valuesOffsets[valId]);\n  };\n\n\n  this.getIdAt = function (entId) {\n    return subBlobToJson(_idsBlob, _idsOffsets[entId]);\n  };\n\n  // Loading the (large) externalIDs can be skipped to save memory.\n  this.externalIdsLoaded = function () {\n    return Boolean(_idsBlob);\n  };\n\n  /**\n      * Obtains the actual value of a property.\n      *\n      * @param {number} attrId - The attribute id\n      * @param {number} valId - The value id\n      * @param {boolean} [integerHint] - If true the return value will be casted to integer.\n      *\n      * @returns {*} \n      */\n  this.getAttrValue = function (attrId, valId, integerHint) {\n    var attr = _attrs[attrId];\n    if (attr[6] & AttributeFlags.afDirectStorage) {\n      if (attr[2] === AttributeType.DbKey) {\n        //db keys are stored directly in the EAV triplet\n        return valId;\n      } /* else if (attr.dataType === AttributeType.Integer) {\n           return this.ints.get(this.ints.indexToPointer(valId));\n        } else if (attr.dataType === AttributeType.Float) {\n           return this.floats.getf(this.floats.indexToPointer(valId));\n        }*/\n    }\n\n    return integerHint ? this.getIntValueAt(valId) : this.getValueAt(valId);\n  };\n\n  this._getObjectProperty = function (attrId, valId) {\n\n    var attr = _attrs[attrId];\n    var displayName = attr[5] ? attr[5] : attr[0];\n    var hidden = this.attributeHidden(attrId);\n\n    // type values match those in PropertyDatabase.h\n    // See: https://git.autodesk.com/A360/platform-translation-propertydb/blob/master/propertydb/PropertyDatabase.h#L67\n    return {\n      displayName: displayName,\n      displayValue: _this.getAttrValue(attrId, valId),\n      displayCategory: attr[1],\n      attributeName: attr[0],\n      type: attr[2],\n      units: attr[3],\n      hidden: hidden,\n      precision: attr[7] || 0 };\n\n  };\n\n  /**\n      * Obtains all properties for a given database id.\n      *\n      * @param {number} dbId - The database id\n      * @param {string[]} [propFilter=null] - Array of property names to return values for. Use null for no filtering.\n      * @param {boolean} [ignoreHidden=false] - true to ignore hidden properties.\n      * @param {string[]} [propIgnored=null] - Array of property names to not include in the return value.\n      *\n      * @returns {object} consisting of attributes `name`, `dbId`, `properties` and `externalId`.\n      */\n  this.getObjectProperties = function (dbId, propFilter, ignoreHidden, propIgnored) {\n    var result = {\n      \"dbId\": dbId,\n      \"properties\": [] };\n\n\n    var needName = false;\n\n    // Check if externalIds are wanted and available\n    var filterContainsId = propFilter && propFilter.indexOf(\"externalId\") !== -1;\n    var idsLoaded = this.externalIdsLoaded();\n\n    // If externalIds are explicitly addressed in the filter, we can assume that the caller expects\n    // to have them in the result. So we should report an error if they are not loaded.\n    if (filterContainsId && !idsLoaded) {\n      console.error('Requesting externalID requires loading of the externalID table');\n    }\n\n    // We add externalIds to the result if...\n    //  1. externalIds are in memory\n    //  2. Either the filter includes externalIds or there is no filter\n    var addExternalId = idsLoaded && (!propFilter || filterContainsId);\n    if (addExternalId) {\n      result.externalId = this.getIdAt(dbId);\n\n      // If there are no other properties required, then just return.\n      // Useful when we only care about fetching externalId-only data.\n      if (propFilter && propFilter.length === 1) {\n        return result;\n      }\n    }\n\n    var parentProps = null;\n\n    //Loop over the attribute index - value index pairs for the objects\n    //and for each one look up the attribute and the value in their\n    //respective arrays.\n    this.enumObjectProperties(dbId, function (attrId, valId) {\n      if (attrId == _instanceOfAttrId) {\n        //Recursively resolve any common properties from the parent of this instance\n        //NOTE: Here we explicitly ignore hidden properties, because we don't \n        //want the parent instance to override parent/child nodes and other structural \n        //attributes. Specifically, Revit extraction has a bug where the model tree parent is \n        //also instance prototype for its children, so we need to prevent the child\n        //from gaining all its siblings as children of its own due to this inheritance.\n        var res = _this.getObjectProperties(_this.getAttrValue(attrId, valId), propFilter, true /*ignoreHidden*/, propIgnored);\n        if (res && res.properties) {\n          parentProps = res;\n        }\n        return;\n      }\n\n      var attr = _attrs[attrId];\n\n      if (propFilter && propFilter.indexOf(attr[0]) === -1 && propFilter.indexOf(attr[5]) === -1)\n      return;\n\n      if (propIgnored && (propIgnored.indexOf(attr[0]) > -1 || propIgnored.indexOf(attr[5]) > -1))\n      return;\n\n      if (attrId == _nameAttrId) {\n        var val = _this.getAttrValue(attrId, valId);\n        needName = true;\n        result.name = val;\n      } else\n      {\n\n        //skip structural attributes, we don't want those to display\n        //NOTE: The list of structural attributes that we check explicitly is not marked\n        //as hidden in older versions of the property database, so if we ever want to\n        //add them to the result list, we have to explicitly set the hidden flag for those.\n        var hidden = _this.attributeHidden(attrId);\n        if (ignoreHidden && hidden) {\n          return;\n        }\n\n        var prop = _this._getObjectProperty(attrId, valId);\n        result.properties.push(prop);\n      }\n    });\n\n    //Combine instance properties with any parent object properties\n    if (parentProps) {\n      var myProps = {};\n      var rp = result.properties;\n      for (var i = 0; i < rp.length; i++) {\n        myProps[rp[i].displayName] = 1;\n      }\n\n      if (!result.name)\n      result.name = parentProps.name;\n\n      var pp = parentProps.properties;\n      for (var i = 0; i < pp.length; i++) {\n        if (!myProps.hasOwnProperty(pp[i].displayName)) {\n          rp.push(pp[i]);\n        }\n      }\n    }\n\n    if (propFilter && !result.properties.length && !addExternalId && !needName)\n    return null;\n\n    return result;\n  };\n\n  /**\n      * Obtains a map between each database id (dbId) and their corresponding external-id.\n      * The external-id is the identifier used by the source file. \n      * Example: A translated Revit file has a wall with dbId=1, but in Revit (desktop application) the identifier of that wall is \"Wall-06-some-guid-here\".\n      *\n      * @param {number[]} [extIdFilter] - Limits the result to only contain the ids in this array.\n      *\n      * @returns {object} map from dbId into external-id.\n      */\n  this.getExternalIdMapping = function (extIdFilter) {\n    var mapping = {};\n    if (_idsOffsets && 'length' in _idsOffsets) {// Check that it's an indexable type\n      for (var dbId = 1, len = _idsOffsets.length; dbId < len; ++dbId) {\n        var externalId = this.getIdAt(dbId);\n        if (!extIdFilter || extIdFilter[externalId] === true) {\n          mapping[externalId] = dbId;\n        }\n      }\n    }\n    return mapping;\n  };\n\n  //Heuristically find the root node(s) of a scene\n  //A root is a node that has children, has no (or null) parent and has a name.\n  //There can be multiple nodes at the top level (e.g. Revit DWF), which is why\n  //we should get the scene root with absolute certainty from the SVF instance tree,\n  //but we would have to uncompress and parse that in -- something that is\n  //not currently done. This is good enough for now (if pretty slow).\n  this.findRootNodes = function () {\n\n    var idroots = [];\n    var idDetachedNodes = []; // These are nodes without a parent or child\n\n    this.enumObjects(function (id) {\n      var hasChild = false;\n      var hasParent = false;\n      var hasName = false;\n\n      _this.enumObjectProperties(id, function (attrId, valId) {\n        if (attrId == _parentAttrId) {\n          if (_this.getAttrValue(attrId, valId, true)) //checks for null or zero parent id, in which case it's considered non-parent\n            hasParent = true;\n        } else if (attrId == _childAttrId) {\n          hasChild = true;\n        } else\n        if (attrId == _nameAttrId) {\n          hasName = true;\n        }\n      });\n\n      if (hasName && !hasParent) {\n        hasChild ? idroots.push(id) : idDetachedNodes.push(id);\n      }\n    });\n\n    // Some dwfx files can have only detached nodes, in which case, we treat them as roots\n    return idroots.length > 0 ? idroots : idDetachedNodes;\n  };\n\n  // Does the node have atleast one child?\n  this.nodeHasChild = function (dbId) {\n    var hasChild = false;\n\n    this.enumObjectProperties(dbId, function (attrId) {\n      if (attrId === _childAttrId) {\n        hasChild = true;\n        return true; // break from enumerating\n      }\n    });\n\n    return hasChild;\n  };\n\n\n  //Gets the immediate children of a node with the given dbId\n  this.getNodeNameAndChildren = function (node /* {dbId:X, name:\"\"} */, skipChildren) {\n\n    var id = node.dbId;\n\n    var children;\n    var instanceOfValId;\n\n    this.enumObjectProperties(id, function (attrId, valId) {\n      var val;\n\n      if (attrId === _parentAttrId) {\n        //node.parent = this.getAttrValue(attrId, valId, true); //eventually we will needs this instead of setting parent pointer when creating children below.\n      } else if (attrId == _childAttrId && !skipChildren) {\n        val = _this.getAttrValue(attrId, valId, true);\n\n        // avoid parent->child links to the same dbId\n        if (val !== node.dbId) {\n          var child = { dbId: val, parent: node.dbId };\n          if (!children)\n          children = [child];else\n\n          children.push(child);\n        }\n\n      } else if (attrId === _nameAttrId) {\n        node.name = _this.getAttrValue(attrId, valId); //name is necessary for GUI purposes, so add it to the node object explicitly\n      } else if (attrId === _nodeFlagsAttrId) {\n        node.flags = _this.getAttrValue(attrId, valId, true); //flags are necessary for GUI/selection purposes, so add them to the node object\n      } else if (attrId === _instanceOfAttrId) {\n        instanceOfValId = valId;\n      }\n    });\n\n    //If this is an instance of another object,\n    //try to get the object name from there.\n    //This is not done in the main loop above for performance reasons,\n    //we only want to do the expensive thing of going up the object hierarchy\n    //if the node does not actually have a name attribute.\n    //TODO: Navisworks will likely inherit the node flags from the prototype object also.\n    //However, I did not enable this yet, because it makes everything very slow for Revit (due to almost\n    //always having to get the instance parent instead of almost never) and the node flags are not used by the LMV tree\n    //view at the moment. If the node flag inheritance is enabled, we will have to also use an instsance prototype cache,\n    //like is done by the Diff function below.\n    if (!node.name /*|| !node.flags*/ && instanceOfValId) {\n      var tmp = { dbId: _this.getAttrValue(_instanceOfAttrId, instanceOfValId, true), name: null, flags: null };\n      _this.getNodeNameAndChildren(tmp, true);\n\n      //Take the name from the prototype object if the instance doesn't have it\n      if (tmp.name && !node.name)\n      node.name = tmp.name;\n      /*\n                                        //Take the node flags from the prototype object if the instance doesn't have it\n                                        if (typeof node.flags !== \"number\" && typeof tmp.flags === \"number\")\n                                            node.flags = tmp.flags;\n                                            */\n    }\n\n    return children;\n  };\n\n\n  /**\n      * @param fragToDbId\n      * @private\n      */\n  function buildDbIdToFragMap(fragToDbId) {\n    var ret = {};\n    for (var i = 0, iEnd = fragToDbId.length; i < iEnd; i++) {\n\n      var dbIds = fragToDbId[i];\n\n      //In 2D drawings, a single fragment (consolidation mesh)\n      //can contain multiple objects with different dbIds.\n      if (!Array.isArray(dbIds)) {\n        dbIds = [dbIds];\n      }\n\n      for (var j = 0; j < dbIds.length; j++) {\n        var dbId = dbIds[j];\n        var frags = ret[dbId];\n        if (frags === undefined) {\n          //If it's the first fragments for this dbid,\n          //store the index directly -- most common case.\n          ret[dbId] = i;\n        } else\n        if (!Array.isArray(frags)) {\n          //otherwise put the fragments that\n          //reference the dbid into an array\n          ret[dbId] = [frags, i];\n        } else\n        {\n          //already is an array\n          frags.push(i);\n        }\n      }\n    }\n\n    return ret;\n  }\n\n\n  //Duplicated from InstanceTree.js\n  var NODE_TYPE_ASSEMBLY = 0x0, // Real world object as assembly of sub-objects\n  NODE_TYPE_GEOMETRY = 0x6; // Leaf geometry node\n\n  //Builds a tree of nodes according to the parent/child hierarchy\n  //stored in the property database, starting at the node with the given dbId\n  this.buildObjectTree = function (rootId, //current node dbId\n  fragToDbId, //array of fragId->dbId lookup\n  maxDepth, /* returns max tree depth */\n  nodeStorage)\n  {\n\n    //Build reverse lookup for dbId->fragId\n    var dbToFragId;\n    if (fragToDbId) {\n      dbToFragId = buildDbIdToFragMap(fragToDbId);\n    }\n\n    _processedIds = {};\n    _cyclesCount = 0;\n\n    //Call recursive implementation\n    var ret = this.buildObjectTreeRec(rootId, 0, dbToFragId, 0, maxDepth, nodeStorage);\n    if (_cyclesCount > 0) {\n      console.warn('Property database integrity not guaranteed (' + _cyclesCount + ').');\n    }\n\n    _processedIds = null;\n    return ret;\n  };\n\n  //Recursive helper for buildObjectTree\n  this.buildObjectTreeRec = function (dbId, //current node dbId\n  parent, //parent dbId\n  dbToFrag, //map of dbId to fragmentIds\n  depth, /* start at 0 */\n  maxDepth, /* returns max tree depth */\n  nodeStorage)\n  {\n\n    // Check for cycles in the tree.\n    // There shouldn't be any cycles in the tree...\n    if (_processedIds[dbId]) {\n      _cyclesCount++;\n      return 0;\n    }\n\n    _processedIds[dbId] = parent || dbId;\n\n    if (depth > maxDepth[0])\n    maxDepth[0] = depth;\n\n    var node = { dbId: dbId };\n    var children = this.getNodeNameAndChildren(node);\n\n    var childrenIds = [];\n\n    if (children) {\n      for (var j = 0; j < children.length; j++) {\n        var childHasChildren = this.buildObjectTreeRec(children[j].dbId, dbId, dbToFrag, depth + 1, maxDepth, nodeStorage);\n\n        //For display purposes, prune children that are leafs without graphics\n        //and add the rest to the node\n        if (childHasChildren)\n        childrenIds.push(children[j].dbId);\n      }\n    }\n\n    var fragIds;\n\n    //leaf node\n    if (dbToFrag) {\n      var frags = dbToFrag[dbId];\n      if (frags !== undefined) {\n\n        //if (childrenIds.length)\n        //    console.error(\"Node that has both node children and fragment children!\", node.name, children, childrenIds, frags);\n\n        if (!Array.isArray(frags))\n        fragIds = [frags];else\n\n        fragIds = frags;\n      }\n    }\n\n    //Use default node flags in case none are set\n    //This is not the best place to do this, but it's\n    //the last place where we can differentiate between \"not set\" and zero.\n    var flags = node.flags || 0;\n    if (flags === undefined) {\n      if (fragIds && fragIds.length)\n      flags = NODE_TYPE_GEOMETRY;else\n      if (childrenIds.length)\n      flags = NODE_TYPE_ASSEMBLY;else\n\n      flags = 0; //??? Should not happen (those nodes are pruned above)\n    }\n\n    // Get child count (nodes + fragments)\n    var childCount = childrenIds.length + (fragIds ? fragIds.length : 0);\n\n    // Skip nodes that contain neither children nor any fragments\n    if (childCount) {\n      nodeStorage.setNode(dbId, parent, node.name, flags, childrenIds, fragIds);\n    }\n\n    return childCount;\n  };\n\n  /**\n      * Given a text string, returns an array of individual words separated by\n      * white spaces.\n      * Will preserve white spacing within double quotes.\n      *\n      * @param {string} searchText - Text to search\n      */\n  this.getSearchTerms = function (searchText) {\n    searchText = searchText.toLowerCase();\n    //regex preserves double-quote delimited strings as phrases\n    var searchTerms = searchText.match(/\"[^\"]+\"|[^\\s]+/g) || [];\n    var i = searchTerms.length;\n    while (i--) {\n      searchTerms[i] = searchTerms[i].replace(/\"/g, \"\");\n    }\n    var searchList = [];\n    for (var i = 0; i < searchTerms.length; i++) {\n\n      if (searchTerms[i].length > 1)\n      searchList.push(searchTerms[i]);\n    }\n    return searchList;\n  };\n\n  /**\n      * Searches the property database for a string.\n      *\n      * @param searchText\n      * @param attributeNames\n      * @param searchOptions\n      * @returns Array of ids.\n      * @private\n      */\n  this.bruteForceSearch = function (searchText, attributeNames, searchOptions) {\n\n    var searchList = this.getSearchTerms(searchText);\n    if (searchList.length === 0)\n    return [];\n\n    //For each search word, find matching IDs\n    var results = [];\n\n    var searchHidden = searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.searchHidden;\n    var includeInherited = searchOptions === null || searchOptions === void 0 ? void 0 : searchOptions.includeInherited;\n    // { x: [ a, b, c ]}, a,b,c are instances of x\n    var inheritanceMap = {};\n\n    for (var k = 0; k < searchList.length; k++) {\n      var result = [];\n\n      //Find all values that match the search text\n      var matching_vals = [];\n      for (var i = 0, iEnd = _valuesOffsets.length; i < iEnd; i++) {\n        var val = this.getValueAt(i);\n        if (val === null)\n        continue;\n        if (val.toString().toLowerCase().indexOf(searchList[k]) !== -1)\n        matching_vals.push(i);\n      }\n\n      if (matching_vals.length === 0) {\n        results.push(result);\n        continue;\n      }\n\n      // values should be sorted at this point, but it doesn't hurt making sure they are.\n      matching_vals.sort(function (a, b) {\n        return a - b;\n      });\n\n      this.enumObjects(function (id) {\n\n        _this.enumObjectProperties(id, function (attrId, valId) {\n\n          if (includeInherited && attrId === _instanceOfAttrId) {\n            var pid = parseInt(_this.getAttrValue(attrId, valId));\n            inheritanceMap[pid] = inheritanceMap[pid] || [];\n            inheritanceMap[pid].push(id);\n          }\n\n          if (!searchHidden) {\n            // skip hidden attributes\n            var isHidden = _this.attributeHidden(attrId);\n            if (isHidden) {\n              return;\n            }\n          }\n\n          var iFound = binarySearch(matching_vals, valId);\n          if (iFound !== -1) {\n            //Check attribute name in case a restriction is passed in\n            if (attributeNames && attributeNames.length && attributeNames.indexOf(_attrs[attrId][0]) === -1)\n            return;\n\n            result.push(id);\n            return true;\n          }\n        });\n\n      });\n\n      results.push(result);\n    }\n\n    var addInheritedIds = function addInheritedIds(ids, inheritanceMap) {\n      // traverse inheritance and add to ids list\n      var seen = new Set(ids);\n      for (var _i = 0; _i < ids.length; ++_i) {\n        var id = ids[_i];\n        if (!(id in inheritanceMap)) continue;\n        var cids = inheritanceMap[id];\n        for (var _j = 0; _j < cids.length; ++_j) {\n          var cid = cids[_j];\n          if (!seen.has(cid)) {\n            ids.push(cid);\n            seen.add(cid);\n          }\n        }\n      }\n    };\n\n    if (results.length === 1) {\n      if (includeInherited) {\n        addInheritedIds(results[0], inheritanceMap);\n      }\n      return results[0];\n    }\n\n    //If each search term resulted in hits, compute the intersection of the sets\n    var map = {};\n    var hits = results[0];\n    for (var i = 0; i < hits.length; i++) {\n      map[hits[i]] = 1;}\n\n\n    for (var j = 1; j < results.length; j++) {\n      hits = results[j];\n      var mapint = {};\n\n      for (var i = 0; i < hits.length; i++) {\n        if (map[hits[i]] === 1)\n        mapint[hits[i]] = 1;\n      }\n\n      map = mapint;\n    }\n\n    var result = [];\n    for (var k in map) {\n      result.push(parseInt(k));\n    }\n\n    if (includeInherited) {\n      addInheritedIds(result, inheritanceMap);\n    }\n\n    return result;\n  };\n\n\n  /**\n      * Given a property name, it returns an array of ids that contain it.\n      *\n      * @param {string} propertyName - Property name\n      */\n  this.bruteForceFind = function (propertyName) {\n\n    var results = [];\n    this.enumObjects(function (id) {\n\n      var idContainsProperty = false;\n      _this.enumObjectProperties(id, function (attrId, valId) {\n\n        var attr = _attrs[attrId];\n        var propName = attr[0];\n        var displayName = attr[5];\n\n        if (propName === propertyName || displayName === propertyName) {\n          idContainsProperty = true;\n          return true;\n        }\n      });\n\n      if (idContainsProperty) {\n        results.push(id);\n      }\n\n    });\n\n    return results;\n  };\n\n  /**\n      * Specialized function that returns:\n      * {\n      *    'layer-name-1': [id1, id2, ..., idN],\n      *    'layer-name-2': [idX, idY, ..., idZ],\n      *    ...\n      * }\n      */\n  this.getLayerToNodeIdMapping = function () {\n\n    var results = {};\n    this.enumObjects(function (id) {\n\n      _this.enumObjectProperties(id, function (attrId, valId) {\n\n        if (attrId != _layersAttrId)\n        return;\n\n        var val = _this.getAttrValue(attrId, valId);\n        if (!Array.isArray(results[val])) {\n          results[val] = [];\n        }\n        results[val].push(id);\n        return true;\n      });\n\n    });\n\n    return results;\n  };\n\n  /**\n      * Unpacks an attribute value into all available components.\n      *\n      * @param {number} attrId - The attribute id.\n      *\n      * @returns {object} containing `name`, `category`, `dataType`, `dataTypeContext`, `description`, `displayName` and `flags`.\n      */\n  this.getAttributeDef = function (attrId) {\n    var _raw = _attrs[attrId];\n    return {\n      //attrName(0), category(1), dataType(2), dataTypeContext(3), description(4), displayName(5), flags(6), precision(7)\n      name: _raw[0],\n      category: _raw[1],\n      dataType: _raw[2],\n      dataTypeContext: _raw[3],\n      description: _raw[4],\n      displayName: _raw[5],\n      flags: _raw[6],\n      precision: _raw.length > 7 ? _raw[7] : 0 };\n\n  };\n\n  /**\n      * Invokes a callback function for each attribute-id in the model.\n      *\n      * @example\n      *      pdb.enumAttributes(function(attrId, attrDef) {\n      *           // attrDef is an object\n      *           if (attrDef.name === 'name') {\n      *               return true; // return true to stop iteration.\n      *           }\n      *      })\n      * \n      * @param {Function} cb - Callback invoked\n      */\n  this.enumAttributes = function (cb) {\n    for (var i = 1; i < _attrs.length; i++) {\n      if (cb(i, this.getAttributeDef(i), _attrs[i]))\n      break;\n    }\n  };\n\n\n  //See API doc for this.enumObjectProperties below\n  /**\n   * @param dbId\n   * @param cb\n   * @private\n   */\n  function enumObjectPropertiesV1(dbId, cb) {\n    //Start offset of this object's properties in the Attribute-Values table\n    var propStart = 2 * _offsets[dbId];\n\n    //End offset of this object's properties in the Attribute-Values table\n    var propEnd = 2 * _offsets[dbId + 1];\n\n    //Loop over the attribute index - value index pairs for the objects\n    //and for each one look up the attribute and the value in their\n    //respective arrays.\n    for (var _i2 = propStart; _i2 < propEnd; _i2 += 2) {\n      var attrId = _avs[_i2];\n      var valId = _avs[_i2 + 1];\n\n      if (cb(attrId, valId))\n      break;\n    }\n  }\n\n  //See API doc for this.enumObjectProperties below\n  /**\n   * @param dbId\n   * @param cb\n   * @private\n   */\n  function enumObjectPropertiesV2(dbId, cb) {\n    //v2 variable length encoding. Offsets point into delta+varint encoded a-v pairs per object\n    var offset = _offsets[dbId];\n    var propEnd = _offsets[dbId + 1];\n    var buf = _avs;\n\n    var a = 0;\n    while (offset < propEnd) {\n\n      //Inlined version of readVarint\n      var b = buf[offset++];\n      var value = b & 0x7f;\n      var shiftBy = 7;\n      while (b & 0x80) {\n        b = buf[offset++];\n        value |= (b & 0x7f) << shiftBy;\n        shiftBy += 7;\n      }\n\n      //attribute ID is delta encoded from the previously seen attribute ID, add that back in\n      a += value;\n\n      //Inlined version of readVarint\n      b = buf[offset++];\n      value = b & 0x7f;\n      shiftBy = 7;\n      while (b & 0x80) {\n        b = buf[offset++];\n        value |= (b & 0x7f) << shiftBy;\n        shiftBy += 7;\n      }\n\n      if (cb(a, value))\n      break;\n    }\n  }\n\n  /**\n     * Iterates over all properties for a given database id and invokes the supplied callback function.\n     *\n     * @param {number} dbId - The attribute id.\n     * @param {Function} cb - callback function, that receives 2 arguments: attribute-id (`attrId`) and value-id (`valId`). Have the function return `true` to abort iteration.\n     *\n     */\n  this.enumObjectProperties = _isVarint ? enumObjectPropertiesV2 : enumObjectPropertiesV1;\n\n\n  var _instanceOfCache = {};\n\n  //See API documentation in this.getPropertiesSubsetWithInheritance below\n  /**\n   * @param dbId\n   * @param desiredAttrIds\n   * @param dstValIds\n   * @private\n   */\n  function getPropertiesSubsetWithInheritanceV1(dbId, desiredAttrIds, dstValIds) {\n\n    //Start offset of this object's properties in the Attribute-Values table\n    var propStart = 2 * _offsets[dbId];\n\n    //End offset of this object's properties in the Attribute-Values table\n    var propEnd = 2 * _offsets[dbId + 1];\n\n    var res = [];\n    var instanceOfVals = [];\n    dstValIds = dstValIds || {};\n\n    //Loop over the attribute index - value index pairs for the objects\n    //and for each one look up the attribute and the value in their\n    //respective arrays.\n    for (var _i3 = propStart; _i3 < propEnd; _i3 += 2) {\n      var a = _avs[_i3];\n      var value = _avs[_i3 + 1];\n\n      if (a === _instanceOfAttrId) {\n        //remember instanceof inheritance for later\n        var iofDbId = _this.getAttrValue(a, value);\n        instanceOfVals.push(iofDbId);\n      } else {\n        if (!desiredAttrIds || desiredAttrIds[a]) {\n          dstValIds[a] = value;\n          res.push(a);\n          res.push(value);\n        }\n      }\n    }\n\n    //Really, we only expect one instanceof inheritance, but\n    //it's theoretically possible to have several\n    for (var _i4 = 0; _i4 < instanceOfVals.length; _i4++) {\n\n      var _iofDbId = instanceOfVals[_i4];\n\n      var cached = _instanceOfCache[_iofDbId];\n      if (!cached) {\n        _instanceOfCache[_iofDbId] = cached = getPropertiesSubsetWithInheritanceV2(_iofDbId);\n      }\n\n      for (var j = 0; j < cached.length; j += 2) {\n        var _a = cached[j];\n        var v = cached[j + 1];\n\n        if (desiredAttrIds && !desiredAttrIds[_a]) {\n          continue;\n        }\n\n        if (!dstValIds[_a] && !_this.attributeHidden(_a)) {\n          dstValIds[_a] = v;\n          res.push(_a);\n          res.push(v);\n        }\n      }\n    }\n\n    return res;\n  }\n\n  //See API documentation in this.getPropertiesSubsetWithInheritance below\n  /**\n   * @param dbId\n   * @param desiredAttrIds\n   * @param dstValIds\n   * @private\n   */\n  function getPropertiesSubsetWithInheritanceV2(dbId, desiredAttrIds, dstValIds) {\n\n    //v2 variable length encoding. Offsets point into delta+varint encoded a-v pairs per object\n    var offset = _offsets[dbId];\n    var propEnd = _offsets[dbId + 1];\n    var buf = _avs;\n\n    var res = [];\n    var instanceOfVals = [];\n    dstValIds = dstValIds || {};\n\n    var a = 0;\n    while (offset < propEnd) {\n\n      var b = buf[offset++];\n      var value = b & 0x7f;\n      var shiftBy = 7;\n      while (b & 0x80) {\n        b = buf[offset++];\n        value |= (b & 0x7f) << shiftBy;\n        shiftBy += 7;\n      }\n\n      //attribute ID is delta encoded from the previously seen attribute ID, add that back in\n      a += value;\n\n      b = buf[offset++];\n      value = b & 0x7f;\n      shiftBy = 7;\n      while (b & 0x80) {\n        b = buf[offset++];\n        value |= (b & 0x7f) << shiftBy;\n        shiftBy += 7;\n      }\n\n      if (a === _instanceOfAttrId) {\n        //remember instanceof inheritance for later\n        var iofDbId = _this.getAttrValue(a, value);\n        instanceOfVals.push(iofDbId);\n      } else {\n        if (!desiredAttrIds || desiredAttrIds[a]) {\n          dstValIds[a] = value;\n          res.push(a);\n          res.push(value);\n        }\n      }\n    }\n\n    //Really, we only expect one instanceof inheritance, but\n    //it's theoretically possible to have several\n    for (var _i5 = 0; _i5 < instanceOfVals.length; _i5++) {\n\n      var _iofDbId2 = instanceOfVals[_i5];\n\n      var cached = _instanceOfCache[_iofDbId2];\n      if (!cached) {\n        _instanceOfCache[_iofDbId2] = cached = getPropertiesSubsetWithInheritanceV2(_iofDbId2);\n      }\n\n      for (var j = 0; j < cached.length; j += 2) {\n        var _a2 = cached[j];\n        var v = cached[j + 1];\n\n        if (desiredAttrIds && !desiredAttrIds[_a2]) {\n          continue;\n        }\n\n        if (!dstValIds[_a2] && !_this.attributeHidden(_a2)) {\n          dstValIds[_a2] = v;\n          res.push(_a2);\n          res.push(v);\n        }\n      }\n    }\n\n    return res;\n  }\n\n  /**\n     * Given an object ID, returns the corresponding value IDs for the given list of attribute Ids.\n     * Takes into account instance_of inheritance of properties.\n     *\n     * @param {number} dbId - Integer input object ID\n     * @param {object} desiredAttrIds - An optional map of the requested attribute Ids, where desiredAttrIds[attrId] is \"truthy\".\n     *                                  If not provided, all properties will be returned.\n     * @param {object} dstValIds - A storage target map, such that dstValIds[attrId] will be the resulting value ID.\n     *                             It is the responsibility of the caller to zero initialize this map.\n     *\n     * @returns {number[]} - A flat list of integers attributeId - valueId pairs. This is in addition to the dstValIds, for cases\n     *                        where the object has mutliple properties of the same type, e.g. children, __viewable_in__, etc.\n     */\n  this.getPropertiesSubsetWithInheritance = _isVarint ? getPropertiesSubsetWithInheritanceV2 : getPropertiesSubsetWithInheritanceV1;\n\n  /**\n                                                                                                                                      * Iterates over the property database and finds all layers.\n                                                                                                                                      *\n                                                                                                                                      * @returns {object}\n                                                                                                                                      */\n  this.findLayers = function () {\n\n    // Same format as F2d.js::createLayerGroups()\n    var ret = { name: 'root', id: 1, index: 1, children: [], isLayer: false, childCount: 0 };\n\n    // Return early when no Layer attribute is present\n    if (_layersAttrId === undefined) {\n      return ret;\n    }\n\n    // Grab all Layer names\n    var layers = [];\n    var scope = this;\n    this.enumObjects(function (dbId) {\n      scope.enumObjectProperties(dbId, function (attrId, valId) {\n        if (attrId === _layersAttrId) {\n          var layerName = scope.getValueAt(valId);\n          if (layers.indexOf(layerName) === -1) {\n            layers.push(layerName);\n          }\n          // We found what we wanted => skip remaining attribs for this object\n          return true;\n        }\n      });\n    });\n\n    layers.sort(function (a, b) {\n      return a.localeCompare(b, undefined, { sensitivity: 'base', numeric: true });\n    });\n\n    // Format output to match F2d.js::createLayerGroups()\n    ret.childCount = layers.length;\n    ret.children = layers.map(function (layerName, index) {\n      return {\n        name: layerName,\n        index: index + 1,\n        id: index + 1,\n        isLayer: true };\n\n    });\n\n    return ret;\n  };\n\n  /**\n      * Iterates over all database ids and invokes a callback function.\n      *\n      * @param {Function} cb - callback function. Receives a single parameter: the database-id. Have the function return true to abort iteration.\n      * @param {number} fromId - starting id (inclusive)\n      * @param {number} toId - end id (exclusive)\n      *\n      */\n  this.enumObjects = function (cb, fromId, toId) {\n\n    // For a given id, the range in _avs is specified by [offsets[id], _offsets[id+1]].\n    // The last element in _offsets is just the range end of the final range.\n    var idCount = _offsets.length - 1; //== this.getObjectCount()\n\n    if (typeof fromId === \"number\") {\n      fromId = Math.max(fromId, 1);\n    } else {\n      fromId = 1;\n    }\n\n    if (typeof toId === \"number\") {\n      toId = Math.min(idCount, toId);\n    } else {\n      toId = idCount;\n    }\n\n    for (var id = fromId; id < toId; id++) {\n      if (cb(id))\n      break;\n    }\n  };\n\n  this.getAttrChild = function () {\n    return _childAttrId;\n  };\n\n  this.getAttrParent = function () {\n    return _parentAttrId;\n  };\n\n  this.getAttrName = function () {\n    return _nameAttrId;\n  };\n\n  this.getAttrLayers = function () {\n    return _layersAttrId;\n  };\n\n  this.getAttrInstanceOf = function () {\n    return _instanceOfAttrId;\n  };\n\n  this.getAttrViewableIn = function () {\n    return _viewableInAttrId;\n  };\n\n  this.getAttrXref = function () {\n    return _externalRefAttrId;\n  };\n\n  this.getAttrNodeFlags = function () {\n    return _nodeFlagsAttrId;\n  };\n\n  /**\n      * Checks whether an attirbute is hidden or not.\n      *\n      * @param {number} attrId - The attribute id.\n      *\n      * @returns {boolean} - true if the attribute is a hidden one.\n      */\n  this.attributeHidden = function (attrId) {\n    var _raw = _attrs[attrId];\n    var flags = _raw[6];\n\n    return flags & 1 /*afHidden*/ ||\n    attrId == _parentAttrId ||\n    attrId == _childAttrId ||\n    attrId == _viewableInAttrId ||\n    attrId == _externalRefAttrId;\n  };\n\n  this._attributeIsBlacklisted = function (attrId) {\n    var _raw = _attrs[attrId];\n    var name = _raw[0];\n    var category = _raw[1];\n\n    //Dimension properties were added at a later time, so\n    //some diffs will fail when comparing a file with vs. file without those.\n    //Anyway, it's beter to skip those for diff purposes, since they can have numeric\n    //noise and result in spurious diffs.\n    //See also: https://git.autodesk.com/fluent/modeldb/commit/584d39d5f85a8d2954da557859bb52c224c402af\n    if (category === \"Dimensions\" && RVT_DIM_PROPS.indexOf(name) !== -1)\n    return true;\n\n    return false;\n\n  };\n\n  // Helper function for _findDifferences.\n  // Finds all attributeIds and valueIds - including inherited ones.\n  // Results are pushed to 'result' array as objects { attrId, valId }.\n  // Hidden attributes are excluded.\n  this._getAttributeAndValueIds = function (dbId, result) {\n\n    var avList = this.getPropertiesSubsetWithInheritance(dbId);\n\n    //Convert result to array and sort by attrId so diff can work.\n    for (var _i6 = 0; _i6 < avList.length; _i6 += 2) {\n      var a = avList[_i6];\n\n      if (this._attributeIsBlacklisted(a) || this.attributeHidden(a))\n      continue;\n\n      result.push({\n        attrId: a,\n        valId: avList[_i6 + 1] });\n\n    }\n\n    result.sort(function byIncAtribId(a, b) {\n      return a.attrId - b.attrId;\n    });\n  };\n\n  /* Finds all common dbIds of this and another db for which the properties are not identical.\n      * Hidden attributes are excluded.\n      *  @param {PropertyDatabase} dbToCompare\n      *  @param {Object} [DiffOptions] diffOptions \n      *  @param {function(number)} [onProgress] gets progress values in percent\n      *  @returns {Object} \n      * See PropDbLoader.diffProperties for details about diffOptions and return value.\n      *\n      * NOTE: Current implementation only supports Otg models.\n      *\n      * @private\n      */\n  this.findDifferences = function (dbToCompare, diffOptions, onProgress) {\n\n    var result = {\n      changedIds: [] };\n\n\n    // Optional: Restrict search to the given ids\n    var dbIds = diffOptions && diffOptions.dbIds;\n\n    // Optional: Collect details about which props have changed\n    var listPropChanges = diffOptions && diffOptions.listPropChanges;\n    if (listPropChanges) {\n      result.propChanges = [];\n    }\n\n    var db1 = this;\n    var db2 = dbToCompare;\n\n    // Reused array of { attrId, valId } pairs.\n    var propIds1 = [];\n    var propIds2 = [];\n\n    // To support instanceOf attributes, we need to recursively check parent attributes/values too. (see getAttributesAndValues)\n    // Since the parent of subsequent dbId is often the same, we cache the parent attribs/values that we got from last call.\n    // This avoids to do the same check several times and can make diff significantly faster.\n    var cachedParentAttribs1 = { result: [], dbId: -1 };\n    var cachedParentAttribs2 = { result: [], dbId: -1 };\n\n    var diffObject = function diffObject(dbId) {\n\n      // get sorted array of {attrIds, valIds} pairs for both objects\n      var i1 = 0;\n      var i2 = 0;\n      propIds1.length = 0;\n      propIds2.length = 0;\n\n      db1._getAttributeAndValueIds(dbId, propIds1, true, cachedParentAttribs1);\n      db2._getAttributeAndValueIds(dbId, propIds2, true, cachedParentAttribs2);\n\n      if (!propIds1.length || !propIds2.length) {\n        // If an array is empty, this dbId does only exist\n        // in one of the two dbs, i.e, the whole object was added or removed.\n        // We are only interested in prop changes of matching objects.\n        return;\n      }\n\n      var changeFound = false;\n\n      // array of prop changes for current dbId\n      var propChanges = undefined;\n\n      while (i1 < propIds1.length && i2 < propIds2.length) {\n\n        // Note that some values may be undefined if one of the arrays ended.\n        var elem1 = propIds1[i1];\n        var elem2 = propIds2[i2];\n        var a1 = elem1 && elem1.attrId;\n        var v1 = elem1 && elem1.valId;\n        var a2 = elem2 && elem2.attrId;\n        var v2 = elem2 && elem2.valId;\n\n        // If everything is equal, we are done with this attribute\n        if (a1 === a2 && v1 === v2) {\n          i1++;\n          i2++;\n          continue;\n        }\n\n        // If we get here, the current attribute has changed\n        changeFound = true;\n\n        // If no details are requested, we are done with this dbId\n        if (!listPropChanges) {\n          break;\n        }\n\n        // We exploit here that attributeIds in OTG are always sorted in ascending order\n        // Therefore, if a1 > a2, we can safely assume that a1 does not exist in iterator2,\n        // but possibly vice versa.\n        var prop1Missing = a1 === undefined || a1 > a2;\n        var prop2Missing = a2 === undefined || a2 > a1;\n\n        var change = undefined;\n\n        // Handle case that property has been added or removed\n        if (prop1Missing) {\n\n          // property was added in db2\n          change = db2._getObjectProperty(a2, v2);\n          change.displayValueB = change.displayValue;\n          change.displayValue = undefined;\n\n          // a2 has been detected as added. Skip it and continue.\n          i2++;\n        } else if (prop2Missing) {\n\n          // property was removed in db2\n          change = db1._getObjectProperty(a1, v1);\n          change.displayValueB = undefined;\n\n          // a1 has been detected as removed. Skip it and continue.\n          i1++;\n        } else {\n          // attrib exists in both, but value has changed\n          change = db1._getObjectProperty(a1, v1);\n          change.displayValueB = _this.getAttrValue(a2, v2);\n\n          i1++;\n          i2++;\n        }\n\n        // If this is the first prop that change, alloc array for it\n        if (!propChanges) {\n          propChanges = [];\n        }\n\n        propChanges.push(change);\n      }\n\n      // Collect dbId of modified object\n      if (changeFound) {\n        result.changedIds.push(dbId);\n\n        // collect correspondign prop change details\n        if (listPropChanges) {\n          result.propChanges.push(propChanges);\n        }\n      }\n    };\n\n    // Track progress\n    var lastPercent = -1;\n    var trackProgress = function trackProgress(idsDone, idsTotal) {\n      // Limit calls to 100 - otherwise it would slow-down everything.\n      var percent = Math.floor(100 * idsDone / idsTotal);\n      if (percent != lastPercent) {\n        onProgress && onProgress(percent);\n        lastPercent = percent;\n      }\n    };\n\n    if (dbIds) {\n      // diff selected set of Ids\n      for (var i = 0; i < dbIds.length; i++) {\n        var dbId = dbIds[i];\n        diffObject(dbId);\n        trackProgress(i, dbIds.length);\n      }\n    } else {\n      // diff all objects\n      // Note: We are only searching for common objects that changed. Therefore, the loop\n      //       runs only over dbIds that are within the valid range for both.\n      var dbIdEnd = Math.min(db1.getObjectCount(), this.getObjectCount());\n      for (var dbId = 1; dbId < dbIdEnd; dbId++) {\n        diffObject(dbId);\n        trackProgress(dbId, dbIdEnd);\n      }\n    }\n\n    return result;\n  };\n\n  this.dtor = function () {\n    _attrs = null;\n    _offsets = null;\n    _avs = null;\n    _valuesBlob = null;\n    _valuesOffsets = null;\n    _idsBlob = null;\n    _idsOffsets = null;\n\n    _childAttrId = 0;\n    _parentAttrId = 0;\n    _nameAttrId = 0;\n    _instanceOfAttrId = 0;\n    _viewableInAttrId = 0;\n    _externalRefAttrId = 0;\n    _nodeFlagsAttrId = 0;\n  };\n}","\"use strict\";\n\n/**\n               * Finds the index of a number in a sorted Array or numbers. \n               * \n               * @param sortedArray Array of sorted numbers to search in.\n               * @param key number value to find.\n               * @returns index of the value in the array, or -1 if not found.  \n               */\nexport function binarySearch(sortedArray, key) {\n\n  var start = 0;\n  var end = sortedArray.length - 1;\n  var mid;\n\n  while (start <= end)\n  {\n    mid = (start + end) / 2 | 0;\n    if (key === sortedArray[mid])\n    return mid;else\n    if (key < sortedArray[mid])\n    end = mid - 1;else\n    start = mid + 1;\n  }\n  return -1;\n};","\"use strict\";\n\n// http://www.onicos.com/staff/iz/amuse/javascript/expert/utf.txt\n/* utf.js - UTF-8 <=> UTF-16 convertion\n *\n * Copyright (C) 1999 Masanao Izumo <iz@onicos.co.jp>\n * Version: 1.0\n * LastModified: Dec 25 1999\n * This library is free.  You can redistribute it and/or modify it.\n */\nexport function utf8BlobToStr(array, start, length) {\n  var out, i, len, c;\n  var char2, char3;\n\n  out = '';\n  len = length;\n  i = 0;\n  while (i < len) {\n    c = array[start + i++];\n    switch (c >> 4) {\n\n      case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:\n        // 0xxxxxxx\n        out += String.fromCharCode(c);\n        break;\n      case 12:case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[start + i++];\n        out += String.fromCharCode((c & 0x1F) << 6 | char2 & 0x3F);\n        break;\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[start + i++];\n        char3 = array[start + i++];\n        out += String.fromCharCode((c & 0x0F) << 12 |\n        (char2 & 0x3F) << 6 |\n        (char3 & 0x3F) << 0);\n        break;}\n\n  }\n\n  return out;\n}\n\n/**\n   * Safe version of utf8BlobToStr(), where Arrays are used to concatenate chars via join().\n   * This function exists because string::operator += crashes on Chrome with large inputs.\n   */\nexport function safeUtf8BlobToStr(array, start, length) {\n  var out, i, len, c, outArray, count;\n  var char2, char3;\n\n  var STR_CVT_LIMIT = 32 * 1024;\n  out = '';\n  outArray = [];\n  len = length;\n  count = 0;\n  i = 0;\n  while (i < len) {\n    c = array[start + i++];\n    switch (c >> 4) {\n\n      case 0:case 1:case 2:case 3:case 4:case 5:case 6:case 7:\n        // 0xxxxxxx\n        outArray.push(String.fromCharCode(c));\n        break;\n      case 12:case 13:\n        // 110x xxxx   10xx xxxx\n        char2 = array[start + i++];\n        outArray.push(String.fromCharCode((c & 0x1F) << 6 | char2 & 0x3F));\n        break;\n      case 14:\n        // 1110 xxxx  10xx xxxx  10xx xxxx\n        char2 = array[start + i++];\n        char3 = array[start + i++];\n        outArray.push(String.fromCharCode((c & 0x0F) << 12 |\n        (char2 & 0x3F) << 6 |\n        (char3 & 0x3F) << 0));\n        break;}\n\n    if (++count >= STR_CVT_LIMIT || i >= len) {\n      out += outArray.join(\"\");\n      outArray.length = 0;\n      count = 0;\n    }\n  }\n\n  return out;\n}\n\n\nexport function utf16to8(str, array, start) {\n  var i, len, c;\n\n  var j = start || 0;\n  len = str.length;\n\n  if (array) {\n    for (i = 0; i < len; i++) {\n      c = str.charCodeAt(i);\n      if (c >= 0x0001 && c <= 0x007F) {\n        array[j++] = c;\n      } else if (c > 0x07FF) {\n        array[j++] = 0xE0 | c >> 12 & 0x0F;\n        array[j++] = 0x80 | c >> 6 & 0x3F;\n        array[j++] = 0x80 | c >> 0 & 0x3F;\n      } else {\n        array[j++] = 0xC0 | c >> 6 & 0x1F;\n        array[j++] = 0x80 | c >> 0 & 0x3F;\n      }\n    }\n  } else {\n    //If no output buffer is passed in, estimate the required\n    //buffer size and return that.\n    for (i = 0; i < len; i++) {\n      c = str.charCodeAt(i);\n      if (c >= 0x0001 && c <= 0x007F) {\n        j++;\n      } else if (c > 0x07FF) {\n        j += 3;\n      } else {\n        j += 2;\n      }\n    }\n  }\n\n  return j - (start || 0);\n}\n\n\nvar USE_MANUAL_UTF8 = true;\nvar SAFE_UTF_LENGTH = 1024 * 1024;\n\nexport function utf8ArrayToString(array, start, length) {\n\n  if (start === undefined)\n  start = 0;\n  if (length === undefined)\n  length = array.length;\n\n  if (USE_MANUAL_UTF8) {\n    if (length > SAFE_UTF_LENGTH) {\n      return safeUtf8BlobToStr(array, start, length);\n    }\n    return utf8BlobToStr(array, start, length);\n  } else {\n    var encodedString = \"\";\n    for (var i = start, iEnd = start + length; i < iEnd; i++) {\n      encodedString += String.fromCharCode(array[i]);}\n\n    return decodeURIComponent(escape(encodedString));\n  }\n};\n\nexport function blobToJson(blob) {\n\n  var decodedString = utf8ArrayToString(blob, 0, blob.length);\n\n  return JSON.parse(decodedString);\n};\n\n//parses a piece of json from a given blob (representing an array of json values)\n//up to the next comma+newline combo (i.e. array delimiter).\nexport function subBlobToJson(blob, startIndex) {\n  if (startIndex === undefined) {\n    return '';\n  }\n\n  var i = startIndex;\n\n  while (i < blob.length - 1) {\n    var c = blob[i];\n    if (c == 44 && (blob[i + 1] == 10 || blob[i + 1] == 13)) //comma followed by newline?\n      break;\n    if (c == 10 || c == 13) //detect newline or line feed\n      break;\n    i++;\n  }\n\n  var decodedString = utf8ArrayToString(blob, startIndex, i - startIndex);\n  try {\n    return JSON.parse(decodedString);\n  } catch (e) {\n    console.error(\"Error parsing property blob to JSON : \" + decodedString);\n    return decodedString;\n  }\n};\n\nexport function subBlobToJsonInt(blob, startIndex) {\n  var val = 0;\n  var i = startIndex;\n\n  //Check for integers that were serialized as strings.\n  //This should not happen, ever, but hey, it does.\n  if (blob[i] == 34)\n  i++;\n\n  while (i < blob.length - 1) {\n    var c = blob[i];\n    if (c == 44 && (blob[i + 1] == 10 || blob[i + 1] == 13))\n    break;\n    if (c == 10 || c == 13 || c == 34)\n    break;\n    if (c >= 48 && c <= 57)\n    val = val * 10 + (c - 48);\n\n    i++;\n  }\n\n  return val;\n};\n\n//Simple integer array parse -- expects the array in property database\n//format, where the array is packed with possibly newline separator,\n//but no other white space. Does not do extensive error checking\nexport function parseIntArray(blob, wantSentinel) {\n\n  //find out how many items we have\n  var count = 0;\n  for (var i = 0, iEnd = blob.length; i < iEnd; i++) {\n    if (blob[i] == 44) //44 = ','\n      count++;}\n\n  count++; //last item has no comma after it\n\n  var items = new Uint32Array(count + (wantSentinel ? 1 : 0));\n\n  i = 0;\n  var end = blob.length;\n\n  while (blob[i] != 91 && i < end) {//91 = '['\n    i++;}\n\n  if (i == blob.length)\n  return null;\n\n  i++;\n\n  var seenDigit = false;\n  count = 0;\n  var curInt = 0;\n  while (i < end) {\n    var c = blob[i];\n    if (c >= 48 && c <= 57) {//digit\n      curInt = 10 * curInt + (c - 48);\n      seenDigit = true;\n    } else\n    if (c == 44 || c == 93) {//',' or ']'\n      if (seenDigit) {\n        items[count++] = curInt;\n        seenDigit = false;\n        curInt = 0;\n      }\n    } else {\n      seenDigit = false; //most likely a newline (the only other thing we have in our arrays\n      curInt = 0;\n    }\n    i++;\n  }\n\n  return items;\n};\n\n//Scans an array of json values (strings, integers, doubles) and finds the\n//offset of each value in the array, so that we can later pick off that\n//specific value, without parsing the whole (potentially huge) json array up front.\n//This expects the input blob to be in the form serialized by the property database\n//C++ component -- one value per line. A more sophisticated parser would be needed\n//in case the format changes and this assumption is not true anymore.\nexport function findValueOffsets(blob) {\n\n  //first, count how many items we have\n  var count = 0;\n  var end = blob.length - 1;\n\n  for (var i = 0; i < end; i++) {\n    if (blob[i] == 44 && (blob[i + 1] == 10 || blob[i + 1] == 13)) // ',' + newline is the item delimiter\n      count++;\n  }\n\n  if (!count)\n  return null;\n\n  count++; //one for the last item\n\n  var items = new Uint32Array(count);\n\n  i = 0;\n  count = 0;\n\n  //find opening [\n  while (blob[i] != 91 && i < end) {//91 = '['\n    i++;}\n\n  i++;\n\n  items[count++] = i;\n  var seenEol = false;\n  while (i < end) {\n    if (blob[i] == 10 || blob[i] == 13)\n    seenEol = true;else\n    if (seenEol) {\n      seenEol = false;\n      items[count++] = i;\n    }\n\n    i++;\n  }\n\n  return items;\n};","function _typeof(obj) {\"@babel/helpers - typeof\";if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}\nimport { LmvVector3 } from '../../../wgs/scene/LmvVector3';\nimport { LmvBox3 } from '../../../wgs/scene/LmvBox3';\nimport { LmvMatrix4 } from '../../../wgs/scene/LmvMatrix4';\n\nfunction getUnitScale(unit) {\n  //Why are translators not using standard strings for those?!?!?!?\n  switch (unit) {\n    case 'meter':\n    case 'meters':\n    case 'm':return 1.0;\n    case 'feet and inches':\n    case 'foot':\n    case 'feet':\n    case 'ft':return 0.3048;\n    case 'inch':\n    case 'inches':\n    case 'in':return 0.0254;\n    case 'centimeter':\n    case 'centimeters':\n    case 'cm':return 0.01;\n    case 'millimeter':\n    case 'millimeters':\n    case 'mm':return 0.001;\n    default:return 1.0;}\n\n}\n\n\nfunction isIdentity(mtx) {\n  var e = mtx.elements;\n  for (var i = 0; i < 4; i++) {\n    for (var j = 0; j < 4; j++) {\n      if (i === j) {\n        if (e[i * 4 + j] !== 1)\n        return false;\n      } else {\n        if (e[i * 4 + j] !== 0)\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n\nexport function derivePlacementTransform(svf, loadContext) {\n\n  // We now will apply overall model transforms, following the following logic:\n  //    1) placementTransform = options.placementTransform);\n  //    2) placementTransform = placementTransform.multiply(scalingTransform);\n  //    3) placementTransform = placementTransform.multiply(refPointTransform);\n  // This is for aggregation scenarios, where multiple models are loaded into the scene\n  // In such scenarios the client will most probably manually override the model units\n\n\n  //First, take the input placement transform as is (could be null).\n  svf.placementTransform = loadContext.placementTransform;\n\n  // If requested in the load options, apply scaling from optional 'from' to 'to' units.\n  // If unpecified, then units will be read from the models metadata.\n  // * usage overloads\n  //      options.appyScaling: { from: 'ft', to: 'm' }\n  //      options.appyScaling: 'm'   ( equivalent to { to: 'm' })\n  // * this is aimed at multiple 3D model situations where models potentialy have different units, but\n  //   one  doesn't up-front know what these units are.It also allows overriding of such units.\n  // * Model methods: getUnitString , getUnitScale &  getDisplayUnit will be automatically return corrected values\n  //   as long as there are no additional options.placementTransform scalings applied.\n  if (loadContext.applyScaling) {\n\n    // default 'from' & 'to'  units are from metadata, or 'm' not present\n    var scalingFromUnit = 'm';\n    if (svf.metadata[\"distance unit\"]) {\n      scalingFromUnit = svf.metadata[\"distance unit\"][\"value\"];\n    }\n    svf.scalingUnit = scalingFromUnit;\n\n    if ('object' === _typeof(loadContext.applyScaling)) {\n      if (loadContext.applyScaling.from) {\n        scalingFromUnit = loadContext.applyScaling.from;\n      }\n      if (loadContext.applyScaling.to) {\n        svf.scalingUnit = loadContext.applyScaling.to;\n      }\n    } else {\n      svf.scalingUnit = loadContext.applyScaling;\n    }\n\n\n    // Work out overall desired scaling factor.\n    var scalingFactor = getUnitScale(scalingFromUnit) / getUnitScale(svf.scalingUnit);\n\n    if (1 != scalingFactor) {\n\n      var placementS = new LmvMatrix4(true);\n\n      var scalingTransform = new LmvMatrix4(true);\n      scalingTransform.elements[0] = scalingFactor;\n      scalingTransform.elements[5] = scalingFactor;\n      scalingTransform.elements[10] = scalingFactor;\n\n      if (loadContext.placementTransform) {\n        // There may well already be a placementTransform from previous options/operations.\n        placementS.copy(loadContext.placementTransform);\n\n      }\n\n      // Combine (optional) placementTransform with scaling\n      if (loadContext.applyPlacementInModelUnits) {\n        // Apply placementMatrix first, then scale to viewer world units. In this way,\n        // the placementMatrix is handled in the same way as a refPointTransform.\n        loadContext.placementTransform = scalingTransform.multiply(placementS);\n      } else {\n        // Apply unitScaling first, then placementTransform\n        loadContext.placementTransform = placementS.multiply(scalingTransform);\n      }\n      svf.placementTransform = loadContext.placementTransform;\n\n      // Store scalingFactor, so that we know which unitScaling was applied to this model.\n      // Multiplying with this factor converts model file units to viewer world units.\n      svf.scalingFactor = scalingFactor;\n    }\n  }\n\n\n  var custom_values = svf.metadata[\"custom values\"];\n\n  if (custom_values && custom_values.refPointTransform) {\n\n    svf.refPointTransform = new LmvMatrix4(true);\n    var e = svf.refPointTransform.elements;\n    var src = custom_values.refPointTransform;\n\n    e[0] = src[0];\n    e[1] = src[1];\n    e[2] = src[2];\n\n    e[4] = src[3];\n    e[5] = src[4];\n    e[6] = src[5];\n\n    e[8] = src[6];\n    e[9] = src[7];\n    e[10] = src[8];\n\n    e[12] = src[9];\n    e[13] = src[10];\n    e[14] = src[11];\n\n  } else {\n    //Is there an extra offset specified in the georeference?\n    //This is important when aggregating Revit models from the same Revit\n    //project into the same scene, because Revit SVFs use RVT internal coordinates, which\n    //need extra offset to get into the world space.\n    var georeference = svf.metadata[\"georeference\"];\n    var refPointLMV = georeference && georeference[\"refPointLMV\"];\n\n    var angle = 0;\n    if (custom_values && custom_values.hasOwnProperty(\"angleToTrueNorth\")) {\n      angle = Math.PI / 180.0 * custom_values[\"angleToTrueNorth\"];\n    }\n\n    if (refPointLMV || angle) {\n\n      var rotation = new LmvMatrix4(true);\n      var m = rotation.elements;\n      m[0] = m[5] = Math.cos(angle);\n      m[1] = -Math.sin(angle);\n      m[4] = Math.sin(angle);\n\n      //refPointLMV is given in model local coordinates, hence the negation needed\n      //to make the translation go from local to shared coordinates.\n      var offset = new LmvMatrix4(true);\n      m = offset.elements;\n      if (refPointLMV) {\n        m[12] = -refPointLMV[0];\n        m[13] = -refPointLMV[1];\n        m[14] = -refPointLMV[2];\n      }\n\n      //Compose the rotation and offset.\n      svf.refPointTransform = rotation.multiply(offset);\n    }\n  }\n\n  //If request in the load options, apply the reference point transform when loading the model\n  if (loadContext.applyRefPoint && svf.refPointTransform) {\n\n    var placement = new LmvMatrix4(true);\n\n    //Normally we expect the input placement transform to come in as identity in case\n    //we have it specified in the georef here, but, whatever, let's be thorough for once.\n    if (loadContext.placementTransform)\n    placement.copy(loadContext.placementTransform);\n\n    placement.multiply(svf.refPointTransform);\n\n    svf.placementTransform = loadContext.placementTransform = placement;\n\n  } else if (!loadContext.applyRefPoint && loadContext.placementTransform) {\n\n    //In case we are given a placement transform that overrides the icoming refPointTransform\n\n    svf.placementTransform = new LmvMatrix4(true).copy(loadContext.placementTransform);\n\n  }\n\n  if (svf.placementTransform && isIdentity(svf.placementTransform))\n  svf.placementTransform = null;\n\n  return svf.placementTransform;\n}\n\nexport function calculatePlacementWithOffset(svf, pt) {\n  var go = svf.globalOffset;\n  if (go.x || go.y || go.z) {\n    if (!pt) {\n      pt = new LmvMatrix4(true);\n      pt.makeTranslation(-go.x, -go.y, -go.z);\n    } else {\n      var pt2 = new LmvMatrix4(true);\n      pt2.copy(pt);\n      pt = pt2;\n      pt.elements[12] -= go.x;\n      pt.elements[13] -= go.y;\n      pt.elements[14] -= go.z;\n    }\n\n    svf.placementWithOffset = pt;\n  } else {\n    svf.placementWithOffset = pt;\n  }\n}\n\nexport function initPlacement(svf, loadContext) {\n\n  if (!svf.metadata)\n  return;\n\n  //Retrieve world bounding box\n  var bbox = svf.metadata[\"world bounding box\"];\n  var min = new LmvVector3(bbox.minXYZ[0], bbox.minXYZ[1], bbox.minXYZ[2]);\n  var max = new LmvVector3(bbox.maxXYZ[0], bbox.maxXYZ[1], bbox.maxXYZ[2]);\n  svf.bbox = new LmvBox3(min, max);\n  svf.modelSpaceBBox = svf.bbox.clone();\n\n  var pt = derivePlacementTransform(svf, loadContext);\n  if (pt && !svf.bbox.empty()) {\n    svf.bbox.applyMatrix4(pt);\n  }\n\n  //Global offset is used to avoid floating point precision issues for models\n  //located enormous distances from the origin. The default is to move the model to the origin\n  //but it can be overridden in case of model aggregation scenarios, where multiple\n  //models are loaded into the scene and a common offset is needed for all.\n  if (loadContext.globalOffset) {\n    // Apply user-defined globalOffset\n    svf.globalOffset = loadContext.globalOffset;\n  } else {\n    // Choose global offset automatically at the center of the placmenent transformed model. \n    svf.globalOffset = svf.bbox.center();\n  }\n\n  calculatePlacementWithOffset(svf, pt);\n\n  // The model boundingBox must finally be in viewer-coords, just like everything else. I.e. with subtracted offset.\n  // Therefore, we have to subtract the globaloffset from bbox as well.\n  if (!svf.bbox.empty()) {\n    svf.bbox.min.sub(svf.globalOffset);\n    svf.bbox.max.sub(svf.globalOffset);\n  }\n\n  if (svf.metadata.hasOwnProperty(\"double sided geometry\") &&\n  svf.metadata[\"double sided geometry\"][\"value\"]) //TODO: do we want to check the global flag or drop that and rely on material only?\n    {\n      svf.doubleSided = true;\n    }\n\n}\n\nfunction applyOffset(a, offset) {\n  a[0] -= offset.x;\n  a[1] -= offset.y;\n  a[2] -= offset.z;\n}\n\n\nexport function transformAnimations(svf) {\n\n  if (!svf.animations)\n  return;\n\n  // apply global offset to animations\n  var animations = svf.animations[\"animations\"];\n  if (animations) {\n    var globalOffset = svf.globalOffset;\n    var t = new LmvMatrix4().makeTranslation(globalOffset.x, globalOffset.y, globalOffset.z);\n    var tinv = new LmvMatrix4().makeTranslation(-globalOffset.x, -globalOffset.y, -globalOffset.z);\n    var r = new LmvMatrix4();\n    var m = new LmvMatrix4();\n    for (var a = 0; a < animations.length; a++) {\n      var anim = animations[a];\n      if (anim.hierarchy) {\n        for (var h = 0; h < anim.hierarchy.length; h++) {\n          var keys = anim.hierarchy[h].keys;\n          if (keys) {\n            for (var k = 0; k < keys.length; k++) {\n              var pos = keys[k].pos;\n              if (pos) {\n                var offset = globalOffset;\n                var rot = keys[k].rot;\n                if (rot) {\n                  r.makeRotationFromQuaternion({ x: rot[0], y: rot[1], z: rot[2], w: rot[3] });\n                  m.multiplyMatrices(t, r).multiply(tinv);\n                  offset = { x: m.elements[12], y: m.elements[13], z: m.elements[14] };\n                }\n                applyOffset(pos, offset);\n              }\n              var target = keys[k].target;\n              if (target) {\n                applyOffset(target, globalOffset);\n              }\n              var points = keys[k].points;\n              if (points) {\n                for (var p = 0; p < points.length; p++) {\n                  applyOffset(points[p], globalOffset);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n\n}","\"use strict\";\n\n\nexport var VBUtils = {\n\n\n  deduceUVRepetition: function deduceUVRepetition(mesh) {\n\n    for (var p in mesh.vblayout) {\n\n      if (p.indexOf(\"uv\") != 0 || p.indexOf(\"uvw\") == 0)\n      continue;\n\n      var baseOffset = mesh.vblayout[p].offset;\n      var floatStride = mesh.vbstride;\n      var vbf = mesh.vb;\n      var vcount = mesh.vb.length / floatStride;\n\n      for (var i = 0, offset = baseOffset; i < vcount; i++, offset += floatStride)\n      {\n        var u = vbf[offset];\n        var v = vbf[offset + 1];\n        if (u > 2 || u < 0 || v > 2 || v < 0) {\n          mesh.vblayout[p].isPattern = true;\n          break;\n        }\n      }\n    }\n  },\n\n\n  //Calculate the 3D bounding box and bounding sphere\n  //of a mesh containing an interleaved vertex buffer\n  computeBounds3D: function computeBounds3D(mesh) {\n\n    var minx = Infinity,miny = Infinity,minz = Infinity;\n    var maxx = -Infinity,maxy = -Infinity,maxz = -Infinity;\n    var i, offset, x, y, z;\n\n    var floatStride = mesh.vbstride;\n    var baseOffset = mesh.vblayout.position.offset;\n    var vbf = mesh.vb;\n    var vcount = mesh.vb.length / floatStride;\n\n    for (i = 0, offset = baseOffset; i < vcount; i++, offset += floatStride)\n    {\n      x = vbf[offset];\n      y = vbf[offset + 1];\n      z = vbf[offset + 2];\n\n      if (minx > x) minx = x;\n      if (miny > y) miny = y;\n      if (minz > z) minz = z;\n\n      if (maxx < x) maxx = x;\n      if (maxy < y) maxy = y;\n      if (maxz < z) maxz = z;\n    }\n\n    var bb = mesh.boundingBox = {\n      min: { x: minx, y: miny, z: minz },\n      max: { x: maxx, y: maxy, z: maxz } };\n\n\n    var cx = 0.5 * (minx + maxx),cy = 0.5 * (miny + maxy),cz = 0.5 * (minz + maxz);\n\n    var bs = mesh.boundingSphere = {};\n    bs.center = { x: cx, y: cy, z: cz };\n\n    var maxRadiusSq = 0;\n    for (i = 0, offset = baseOffset; i < vcount; i++, offset += floatStride) {\n\n      x = vbf[offset];\n      y = vbf[offset + 1];\n      z = vbf[offset + 2];\n\n      var dx = x - cx;\n      var dy = y - cy;\n      var dz = z - cz;\n      var distsq = dx * dx + dy * dy + dz * dz;\n      if (distsq > maxRadiusSq)\n      maxRadiusSq = distsq;\n    }\n\n    bs.radius = Math.sqrt(maxRadiusSq);\n\n  },\n\n  bboxUnion: function bboxUnion(bdst, bsrc) {\n    if (bsrc.min.x < bdst.min.x)\n    bdst.min.x = bsrc.min.x;\n    if (bsrc.min.y < bdst.min.y)\n    bdst.min.y = bsrc.min.y;\n    if (bsrc.min.z < bdst.min.z)\n    bdst.min.z = bsrc.min.z;\n\n    if (bsrc.max.x > bdst.max.x)\n    bdst.max.x = bsrc.max.x;\n    if (bsrc.max.y > bdst.max.y)\n    bdst.max.y = bsrc.max.y;\n    if (bsrc.max.z > bdst.max.z)\n    bdst.max.z = bsrc.max.z;\n  } };","\n\"use strict\";\n\nvar TAU = Math.PI * 2;\n\nvar VBB_GT_TRIANGLE_INDEXED = 0,\nVBB_GT_LINE_SEGMENT = 1,\nVBB_GT_ARC_CIRCULAR = 2,\nVBB_GT_ARC_ELLIPTICAL = 3,\nVBB_GT_TEX_QUAD = 4,\nVBB_GT_ONE_TRIANGLE = 5,\nVBB_GT_MSDF_TRIANGLE_INDEXED = 6,\nVBB_GT_TEX_TRIANGLE_INDEXED = 7;\n\nvar VBB_INSTANCED_FLAG = 0, // this is intentionally 0 for the instancing case!\nVBB_SEG_START_RIGHT = 0, // this starts intentionally at 0!\nVBB_SEG_START_LEFT = 1,\nVBB_SEG_END_RIGHT = 2,\nVBB_SEG_END_LEFT = 3;\n\nvar VBB_COLOR_OFFSET = 6,\nVBB_DBID_OFFSET = 7,\nVBB_FLAGS_OFFSET = 8,\nVBB_LAYER_VP_OFFSET = 9;\n\nvar QUAD_TRIANGLE_INDICES = [0, 1, 3, 0, 3, 2];\n\nexport function VertexBufferBuilder(useInstancing, allocSize, fullCount, useCompactBuffers)\n{\n  var MAX_VCOUNT = allocSize || 65536;\n  this.FULL_COUNT = (fullCount || 32767) | 0;\n\n  this.useInstancing = useInstancing;\n  this.useCompactBuffers = useCompactBuffers;\n\n  this.stride = 10;\n  this.allocVcount = 4 * (this.useInstancing ? MAX_VCOUNT / 4 : MAX_VCOUNT);\n\n  this.vb = new ArrayBuffer(this.stride * this.allocVcount);\n  this.vbf = new Float32Array(this.vb);\n  this.vbi = new Int32Array(this.vb);\n  this.ib = this.useInstancing ? null : new Uint16Array(MAX_VCOUNT);\n  this.minLineWidth = Number.MAX_VALUE;\n  this.reset(0);\n\n}\n\nVertexBufferBuilder.prototype.reset = function (vcount) {\n  // This is used to restore the vcount when restoring stream state as well as at init time.\n  this.vcount = vcount;\n\n  this.icount = 0;\n\n  this.minx = this.miny = Infinity;\n  this.maxx = this.maxy = -Infinity;\n\n  //Keeps track of objectIds referenced by geometry in the VB\n  this.dbIds = {};\n  this.lastDbId = null;\n\n  //Keep track of unique colors used by this VB\n  this.colors = {};\n\n  this.numEllipticals = 0;\n  this.numCirculars = 0;\n  this.numTriangleGeoms = 0;\n\n  // If false, all lines are of type 0 (solid), so that we don't need line-pattern support.\n  this.hasLineStyles = false;\n\n  //Certain fields can be invariant over large numbers of primitives.\n  //We keep track of those in order to optimize the vertex layout by\n  //pulling invariants into shader uniforms.\n  this.changeTracking = {};\n\n  this.stride = 10;\n};\n\nVertexBufferBuilder.prototype.expandStride = function ()\n{\n  //Currently hardcoded to expand by 4 floats.\n  var expandBy = 2;\n\n  var stride = this.stride;\n\n  if (stride >= 12)\n  return;\n\n  var nstride = this.stride + expandBy;\n\n  var nvb = new ArrayBuffer(nstride * this.allocVcount);\n\n  var src = new Uint8Array(this.vb);\n  var dst = new Uint8Array(nvb);\n\n  for (var i = 0, iEnd = this.vcount; i < iEnd; i++) {\n    var os = i * stride * 4;\n    var od = i * nstride * 4;\n\n    for (var j = 0; j < stride * 4; j++) {\n      dst[od + j] = src[os + j];}\n  }\n\n  this.vb = nvb;\n  this.vbf = new Float32Array(nvb);\n  this.vbi = new Int32Array(nvb);\n  this.stride = nstride;\n\n};\n\nVertexBufferBuilder.prototype.addToBounds = function (x, y)\n{\n  if (x < this.minx) this.minx = x;\n  if (x > this.maxx) this.maxx = x;\n  if (y < this.miny) this.miny = y;\n  if (y > this.maxy) this.maxy = y;\n};\n\nvar _toInt32 = new Int32Array(1);\nfunction toInt32(c) {\n  _toInt32[0] = c;\n  return _toInt32[0];\n}\n\nVertexBufferBuilder.prototype.trackChanges = function (geomType, color, dbId, layerId, vpId, linePattern) {\n\n  if (dbId !== this.lastDbId) {\n    this.dbIds[toInt32(dbId)] = 1;\n    this.lastDbId = dbId;\n  }\n\n  if (linePattern) {\n    this.hasLineStyles = true;\n  }\n\n  if (!this.useCompactBuffers)\n  return;\n\n  var ct = this.changeTracking;\n\n  function checkOne(whichAttr, val) {\n    if (ct[whichAttr] === undefined)\n    ct[whichAttr] = geomType;else\n    if (ct[whichAttr] === val)\n    ct[whichAttr + \"Varies\"] = true;\n  }\n\n  checkOne(\"geomType\", geomType);\n  checkOne(\"color\", color);\n  checkOne(\"dbId\", dbId);\n  checkOne(\"layerId\", layerId);\n  checkOne(\"viewportId\", vpId);\n  checkOne(\"linePattern\", linePattern);\n\n  this.colors[toInt32(color)] = 1;\n};\n\n\nVertexBufferBuilder.prototype.setCommonVertexAttribs = function (offset, vertexId, geomType, color, dbId, layerId, vpId, linePattern)\n{\n  this.trackChanges(geomType, color, dbId, layerId, vpId, linePattern);\n\n  // align changes here with the \"decodeCommonAttribs()\" function in LineShader.js and VertexBufferReader.js!!!\n  vertexId = vertexId & 0xff; //  8 bit\n  geomType = geomType & 0xff; //  8 bit\n  linePattern = linePattern & 0xff; //  8 bit\n  layerId = layerId & 0xffff; // 16 bit\n  vpId = vpId & 0xffff; // 16 bit\n\n  this.vbi[offset + VBB_FLAGS_OFFSET] = vertexId | geomType << 8 | linePattern << 16; // vertexId: int8; geomType: int8; linePattern: int8; ghostingFlag: int8\n  this.vbi[offset + VBB_COLOR_OFFSET] = color;\n  this.vbi[offset + VBB_DBID_OFFSET] = dbId;\n  this.vbi[offset + VBB_LAYER_VP_OFFSET] = layerId | vpId << 16; // layerId: int16; vpId: int16\n};\n\n//Creates a non-indexed triangle geometry vertex (triangle vertex coords stored in single vertex structure)\nVertexBufferBuilder.prototype.addVertexTriangleGeom = function (x1, y1, x2, y2, x3, y3, color, dbId, layerId, vpId)\n{\n  var vi = this.vcount;\n  var vbf = this.vbf;\n\n  var repeat = this.useInstancing ? 1 : 4;\n  for (var i = 0; i < repeat; i++) {\n    var offset = (vi + i) * this.stride;\n\n    // align changes here with the \"decodeTriangleData()\" function in LineShader.js!!!\n    vbf[offset] = x1;\n    vbf[offset + 1] = y1;\n    vbf[offset + 2] = x2;\n\n    vbf[offset + 3] = y2;\n    vbf[offset + 4] = x3;\n    vbf[offset + 5] = y3;\n\n    this.setCommonVertexAttribs(offset, VBB_SEG_START_RIGHT + i, VBB_GT_ONE_TRIANGLE, color, dbId, layerId, vpId, /*linePattern*/0);\n    this.vcount++;\n  }\n\n  return vi;\n};\n\n\nVertexBufferBuilder.prototype.addVertexLine = function (x, y, angle, distanceAlong, totalDistance, lineWidth, color, dbId, layerId, vpId, lineType)\n{\n  var vi = this.vcount;\n  var vbf = this.vbf;\n\n  if (dbId >= 0 && lineWidth > 0 && distanceAlong > 0) {\n    this.minLineWidth = Math.min(this.minLineWidth, lineWidth);\n  }\n\n  var repeat = this.useInstancing ? 1 : 4;\n  for (var i = 0; i < repeat; i++) {\n    var offset = (vi + i) * this.stride;\n\n    // align changes here with the \"decodeSegmentData()\" function in LineShader.js and VertexBufferReader!!!\n    vbf[offset] = x;\n    vbf[offset + 1] = y;\n    vbf[offset + 2] = (angle + Math.PI) / TAU;\n\n    vbf[offset + 3] = distanceAlong;\n    vbf[offset + 4] = lineWidth * 0.5; // we are storing only the half width (i.e., the radius)\n    vbf[offset + 5] = totalDistance;\n\n    this.setCommonVertexAttribs(offset, VBB_SEG_START_RIGHT + i, VBB_GT_LINE_SEGMENT, color, dbId, layerId, vpId, lineType);\n    this.vcount++;\n  }\n\n  return vi;\n};\n\nVertexBufferBuilder.prototype.addVertexTexQuad = function (centerX, centerY, width, height, rotation, color, dbId, layerId, vpId)\n{\n  var vi = this.vcount;\n  var vbf = this.vbf;\n\n  var repeat = this.useInstancing ? 1 : 4;\n  for (var i = 0; i < repeat; i++) {\n    var offset = (vi + i) * this.stride;\n\n    // align changes here with the \"decodeTexQuadData()\" function in LineShader.js!!!\n    vbf[offset] = centerX;\n    vbf[offset + 1] = centerY;\n    vbf[offset + 2] = rotation / TAU;\n\n    vbf[offset + 3] = width;\n    vbf[offset + 4] = height;\n\n    this.setCommonVertexAttribs(offset, VBB_SEG_START_RIGHT + i, VBB_GT_TEX_QUAD, color, dbId, layerId, vpId, /*linePattern*/0);\n    this.vcount++;\n  }\n\n  return vi;\n};\n\n\nVertexBufferBuilder.prototype.addVertexArc = function (x, y, startAngle, endAngle, major, minor, tilt, lineWidth, color, dbId, layerId, vpId)\n{\n  var vi = this.vcount;\n  var vbf = this.vbf;\n\n  var geomType = major == minor ? VBB_GT_ARC_CIRCULAR : VBB_GT_ARC_ELLIPTICAL;\n\n  var repeat = this.useInstancing ? 1 : 4;\n  for (var i = 0; i < repeat; i++) {\n    var offset = (vi + i) * this.stride;\n\n    // align changes here with the \"decodeArcData()\" function in LineShader.js!!!\n    vbf[offset] = x;\n    vbf[offset + 1] = y;\n    vbf[offset + 2] = startAngle / TAU;\n\n    vbf[offset + 3] = endAngle / TAU;\n    vbf[offset + 4] = lineWidth * 0.5; // we are storing only the half width (i.e., the radius)\n    vbf[offset + 5] = major; // = radius for circular arcs\n\n    if (geomType === VBB_GT_ARC_ELLIPTICAL) {\n      vbf[offset + 10] = minor;\n      vbf[offset + 11] = tilt;\n    }\n\n    this.setCommonVertexAttribs(offset, VBB_SEG_START_RIGHT + i, geomType, color, dbId, layerId, vpId, /*linePattern*/0);\n    this.vcount++;\n  }\n\n  return vi;\n};\n\n\n\n\n//====================================================================================================\n//====================================================================================================\n// Indexed triangle code path can only be used when hardware instancing is not in use.\n// Otherwise, the addTriangleGeom operation should be used to add simple triangles to the buffer.\n//====================================================================================================\n//====================================================================================================\n\nVertexBufferBuilder.prototype.addVertex = function (x, y, color, dbId, layerId, vpId)\n{var flag = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : VBB_GT_TRIANGLE_INDEXED;\n  if (this.useInstancing)\n  return; //not supported if instancing is used.\n\n  var vi = this.vcount;\n  var offset = this.stride * vi;\n  var vbf = this.vbf;\n\n  // align changes here with the \"decodeTriangleData()\" function in LineShader.js!!!\n  vbf[offset] = x;\n  vbf[offset + 1] = y;\n\n  this.setCommonVertexAttribs(offset, /*vertexId*/0, flag, color, dbId, layerId, vpId, /*linePattern*/0);\n  this.vcount++;\n\n  return vi;\n};\n\n\nVertexBufferBuilder.prototype.addVertexPolytriangle = function (x, y, color, dbId, layerId, vpId)\n{\n  if (this.useInstancing)\n  return; //not supported if instancing is used.\n\n  this.addVertex(x, y, color, dbId, layerId, vpId);\n\n  this.addToBounds(x, y);\n};\n\nVertexBufferBuilder.prototype.addVertexMSDFPolytriangle = function (x, y, u, v, color, dbId, layerId, vpId)\n{\n  this.addVertexTexPolytriangle(x, y, u, v, color, dbId, layerId, vpId, VBB_GT_MSDF_TRIANGLE_INDEXED);\n};\n\nVertexBufferBuilder.prototype.addIndices = function (indices, vindex) {\n\n  if (this.useInstancing)\n  return; //not supported if instancing is used.\n\n  var ib = this.ib;\n  var ii = this.icount;\n\n  if (ii + indices.length >= ib.length) {\n    var ibnew = new Uint16Array(Math.max(indices.length, ib.length) * 2);\n    for (var i = 0; i < ii; ++i) {\n      ibnew[i] = ib[i];\n    }\n    this.ib = ib = ibnew;\n  }\n\n  for (var i = 0; i < indices.length; ++i) {\n    ib[ii + i] = vindex + indices[i];\n  }\n\n  this.icount += indices.length;\n};\n\n//====================================================================================================\n//====================================================================================================\n// End indexed triangle code path.\n//====================================================================================================\n//====================================================================================================\n\n\nVertexBufferBuilder.prototype.finalizeQuad = function (vindex)\n{\n  if (!this.useInstancing) {\n    this.addIndices(QUAD_TRIANGLE_INDICES, vindex);\n  }\n};\n\n\nVertexBufferBuilder.prototype.addSegment = function (x1, y1, x2, y2, totalDistance, lineWidth, color, dbId, layerId, vpId, lineType)\n{\n  var dx = x2 - x1;\n  var dy = y2 - y1;\n  var angle = dx || dy ? Math.atan2(dy, dx) : 0.0;\n  var segLen = dx || dy ? Math.sqrt(dx * dx + dy * dy) : 0.0;\n\n  //Add four vertices for the bbox of this line segment\n  //This call sets the stuff that's common for all four\n  var v = this.addVertexLine(x1, y1, angle, segLen, totalDistance, lineWidth, color, dbId, layerId, vpId, lineType);\n\n  this.finalizeQuad(v);\n  this.addToBounds(x1, y1);\n  this.addToBounds(x2, y2);\n};\n\n\n//Creates a non-indexed triangle geometry (triangle vertex coords stored in single vertex structure)\nVertexBufferBuilder.prototype.addTriangleGeom = function (x1, y1, x2, y2, x3, y3, color, dbId, layerId, vpId)\n{\n  this.numTriangleGeoms++;\n\n  var v = this.addVertexTriangleGeom(x1, y1, x2, y2, x3, y3, color, dbId, layerId, vpId);\n\n  this.finalizeQuad(v);\n  this.addToBounds(x1, y1);\n  this.addToBounds(x2, y2);\n  this.addToBounds(x3, y3);\n};\n\nVertexBufferBuilder.prototype.addArc = function (cx, cy, start, end, major, minor, tilt, lineWidth, color, dbId, layerId, vpId)\n{\n  if (major == minor) {\n    this.numCirculars++;\n  } else {\n    this.numEllipticals++;\n\n    //Ellipticals need large vertex layout\n    this.expandStride();\n  }\n\n  // This is a workaround, when the circular arc has rotation, the extractor cannot handle it.\n  // After the fix is deployed in extractor, this can be removed.\n  var result = fixUglyArc(start, end);\n  start = result.start;\n  end = result.end;\n\n  //If both start and end angles are exactly 0, it's a complete ellipse/circle\n  //This is working around a bug in the F2D writer, where an fmod operation will potentially.\n  //convert 2pi to 0.\n  if (start == 0 && end == 0)\n  end = TAU;\n\n  //Add two zero length segments as round caps at the end points\n  {\n    //If it's a full ellipse, then we don't need caps\n    var range = Math.abs(start - end);\n    if (range > 0.0001 && Math.abs(range - TAU) > 0.0001)\n    {\n      var sx = cx + major * Math.cos(start);\n      var sy = cy + minor * Math.sin(start);\n      this.addSegment(sx, sy, sx, sy, 0, lineWidth, color, dbId, layerId, vpId);\n\n      var ex = cx + major * Math.cos(end);\n      var ey = cy + minor * Math.sin(end);\n      this.addSegment(ex, ey, ex, ey, 0, lineWidth, color, dbId, layerId, vpId);\n\n      //TODO: also must add all the vertices at all multiples of PI/2 in the start-end range to get exact bounds\n    } else\n\n    {\n      this.addToBounds(cx - major, cy - minor);\n      this.addToBounds(cx + major, cy + minor);\n    }\n\n    // Add the center of the circle / ellipse as a single transparent dot - So it wil be snappable.\n    var hiddenColor = 0x01ffffff; // Note that lineShader discards fully transparent fragments. Therefore, we use a white here with very small, but nonzero alpha.\n    var c = this.addVertexLine(cx, cy, 0, 0.0001, 0, 0, hiddenColor, dbId, layerId, vpId);\n    this.finalizeQuad(c);\n  }\n\n  var v = this.addVertexArc(cx, cy, start, end, major, minor, tilt, lineWidth, color, dbId, layerId, vpId);\n\n  this.finalizeQuad(v);\n\n  //Testing caps\n  if (false) {\n    //If it's a full ellipse, then we don't need caps\n    var range = Math.abs(start - end);\n    if (Math.abs(range - TAU) > 0.0001)\n    {\n      var sx = cx + major * Math.cos(start);\n      var sy = cy + minor * Math.sin(start);\n      this.addSegment(sx, sy, sx, sy, 0, lineWidth, 0xff00ffff, dbId, layerId, vpId);\n\n      var ex = cx + major * Math.cos(end);\n      var ey = cy + minor * Math.sin(end);\n      this.addSegment(ex, ey, ex, ey, 0, lineWidth, 0xff00ffff, dbId, layerId, vpId);\n    }\n  }\n};\n\n\nVertexBufferBuilder.prototype.addTexturedQuad = function (centerX, centerY, width, height, rotation, color, dbId, layerId, vpId)\n{\n  //Height is specified using the line weight field.\n  //This will result in height being clamped to at least one pixel\n  //but that's ok (zero height for an image would be rare).\n  var v = this.addVertexTexQuad(centerX, centerY, width, height, rotation, color, dbId, layerId, vpId);\n\n  this.finalizeQuad(v);\n\n  var cos = 0.5 * Math.cos(rotation);\n  var sin = 0.5 * Math.sin(rotation);\n  var w = Math.abs(width * cos) + Math.abs(height * sin);\n  var h = Math.abs(width * sin) + Math.abs(height * cos);\n  this.addToBounds(centerX - w, centerY - h);\n  this.addToBounds(centerX + w, centerY + h);\n};\n\nVertexBufferBuilder.prototype.addVertexImagePolytriangle = function (x, y, u, v, color, dbId, layerId, vpId) {\n  return this.addVertexTexPolytriangle(x, y, u, v, color, dbId, layerId, vpId, VBB_GT_TEX_TRIANGLE_INDEXED);\n};\n\nVertexBufferBuilder.prototype.addVertexTexPolytriangle = function (x, y, u, v, color, dbId, layerId, vpId, type) {\n  if (this.useInstancing)\n  return; //not supported if instancing is used.\n\n  var vi = this.vcount;\n  var vbf = this.vbf;\n  this.addVertex(x, y, color, dbId, layerId, vpId, type);\n\n  // put the UV data into the fields2 attribute\n  vbf[vi * this.stride + 2] = u;\n  vbf[vi * this.stride + 3] = v;\n\n  this.addToBounds(x, y);\n};\n\n\nVertexBufferBuilder.prototype.isFull = function (addCount)\n{\n  addCount = addCount || 3;\n  var mult = this.useInstancing ? 4 : 1;\n\n  return this.vcount * mult + addCount > this.FULL_COUNT;\n};\n\n//Determines if there are invariant memebers in the vertex layout,\n//which can be moved out to shader uniforms to save space.\n//Determines if uint16 can be used to store positions data\nVertexBufferBuilder.prototype.makeCompactVertexLayout = function () {\n\n  var colorKeys = Object.keys(this.colors);\n  var dbIdsKeys = Object.keys(this.dbIds);\n\n  // if (this.changeTracking.geomType === VBB_GT_LINE_SEGMENT && !this.changeTracking.geomTypeVaries) {\n  //   console.log(\"Vertex buffer only has lines\");\n  // }\n\n  // if (this.changeTracking.color === VBB_GT_LINE_SEGMENT && !this.changeTracking.colorVaries) {\n  //     console.log(\"Vertex buffer has invariant color\");\n  // } else {\n  //     console.log(\"Num colors:\", colorKeys.length);\n  // }\n\n  // if (!this.changeTracking.viewportIdVaries) {\n  //     console.log(\"Vertex buffer has invariant viewportId\");\n  // }\n\n  // if (!this.changeTracking.layerIdVaries) {\n  //     console.log(\"Vertex buffer has invariant layerId\");\n  // }\n\n  // if (!this.changeTracking.dbIdVaries) {\n  //     console.log(\"Vertex buffer has invariant dbId\");\n  // } else {\n  //     console.log(\"Num dbIds:\", dbIdsKeys.length);\n  // }\n\n  if (this.stride !== 10)\n  return null;\n\n  //create the color/dbId index texture\n  var texLen = colorKeys.length + dbIdsKeys.length;\n\n  if (colorKeys.length + dbIdsKeys.length > 65536)\n  return null;\n\n  var texData = new Int32Array(texLen + 1);\n  texData[0] = 0;\n  var count = 1;\n  for (var i = 0; i < colorKeys.length; i++, count++) {\n    texData[count] = parseInt(colorKeys[i]);\n    this.colors[colorKeys[i]] = count;\n  }\n  for (var i = 0; i < dbIdsKeys.length; i++, count++) {\n    texData[count] = parseInt(dbIdsKeys[i]);\n    this.dbIds[dbIdsKeys[i]] = count;\n  }\n\n  var compactStride = 6;\n\n  var vb = new ArrayBuffer(compactStride * 4 * this.vcount);\n  var vbi = new Int32Array(vb);\n  var vbs = new Uint16Array(vb);\n\n  var sx = this.maxx - this.minx || 1;\n  var sy = this.maxy - this.miny || 1;\n  var ox = this.minx;\n  var oy = this.miny;\n  var ss = Math.max(sx, sy);\n\n  function tx(x) {\n    return 0 | Math.round((x - ox) / sx * 65535);\n  }\n\n  function ty(y) {\n    return 0 | Math.round((y - oy) / sy * 65535);\n  }\n\n  function ts(x) {\n    return 0 | Math.round(x / ss * 65535);\n  }\n\n  function unit(x) {\n    return 0 | x * 65535;\n  }\n\n  function lineWeight(x) {\n    if (x < 0) {\n      return 32768 + Math.min(1.0, -x / 1024) * 32767;\n    } else {\n      // Don't allow non-zero line weights to become 0 because\n      // of the compact buffer format.\n      return x ? 0 | Math.round(x / ss * 32767) || 1 : x;\n    }\n  }\n\n  for (var i = 0; i < this.vcount; i++) {\n\n    var srcOffset = this.stride * i;\n    var dstOffset = compactStride * i;\n    var ushortOffset = dstOffset * 2;\n\n    var gt = this.vbi[srcOffset + VBB_FLAGS_OFFSET] >> 8 & 0xff;\n\n    //Handle data that varies per geometry type and needs scaling\n    //to uint16 packing, e.g. positions and angles\n    switch (gt) {\n      case VBB_GT_TRIANGLE_INDEXED:\n        vbs[ushortOffset] = tx(this.vbf[srcOffset]);\n        vbs[ushortOffset + 1] = ty(this.vbf[srcOffset + 1]);\n        break;\n\n      case VBB_GT_LINE_SEGMENT:\n        vbs[ushortOffset] = tx(this.vbf[srcOffset]);\n        vbs[ushortOffset + 1] = ty(this.vbf[srcOffset + 1]);\n        vbs[ushortOffset + 2] = unit(this.vbf[srcOffset + 2]);\n        vbs[ushortOffset + 3] = ts(this.vbf[srcOffset + 3]);\n        vbs[ushortOffset + 4] = lineWeight(this.vbf[srcOffset + 4]);\n        break;\n\n      case VBB_GT_ARC_CIRCULAR:\n        vbs[ushortOffset] = tx(this.vbf[srcOffset]);\n        vbs[ushortOffset + 1] = ty(this.vbf[srcOffset + 1]);\n        vbs[ushortOffset + 2] = unit(this.vbf[srcOffset + 2]);\n        vbs[ushortOffset + 3] = unit(this.vbf[srcOffset + 3]);\n        vbs[ushortOffset + 4] = lineWeight(this.vbf[srcOffset + 4]);\n        vbs[ushortOffset + 5] = ts(this.vbf[srcOffset + 5]);\n        break;\n\n      case VBB_GT_ARC_ELLIPTICAL:\n        //will not happen\n        break;\n\n      case VBB_GT_TEX_QUAD:\n        vbs[ushortOffset] = tx(this.vbf[srcOffset]);\n        vbs[ushortOffset + 1] = ty(this.vbf[srcOffset + 1]);\n        vbs[ushortOffset + 2] = unit(this.vbf[srcOffset + 2]);\n        vbs[ushortOffset + 3] = ts(this.vbf[srcOffset + 3]);\n        vbs[ushortOffset + 4] = ts(this.vbf[srcOffset + 4]);\n        break;\n\n      case VBB_GT_ONE_TRIANGLE:\n        vbs[ushortOffset] = tx(this.vbf[srcOffset]);\n        vbs[ushortOffset + 1] = ty(this.vbf[srcOffset + 1]);\n        vbs[ushortOffset + 2] = tx(this.vbf[srcOffset + 2]);\n        vbs[ushortOffset + 3] = ty(this.vbf[srcOffset + 3]);\n        vbs[ushortOffset + 4] = tx(this.vbf[srcOffset + 4]);\n        vbs[ushortOffset + 5] = ty(this.vbf[srcOffset + 5]);\n        break;\n\n      default:console.error(\"Unknown geometry type\");break;}\n\n\n    //Copy the common data to the new offset\n    vbs[ushortOffset + 6] = this.colors[this.vbi[srcOffset + VBB_COLOR_OFFSET]] || 0;\n    vbs[ushortOffset + 7] = this.dbIds[this.vbi[srcOffset + VBB_DBID_OFFSET]] || 0;\n\n    vbi[dstOffset + 4] = this.vbi[srcOffset + VBB_FLAGS_OFFSET];\n    vbi[dstOffset + 5] = this.vbi[srcOffset + VBB_LAYER_VP_OFFSET];\n  }\n\n  var mesh = {};\n\n  mesh.vb = new Float32Array(vb);\n  mesh.vbstride = compactStride;\n\n  var d = this.useInstancing ? 1 : 0;\n\n  mesh.vblayout = {\n    \"fields1\": { offset: 0, itemSize: 2, bytesPerItem: 2, divisor: d, normalize: true },\n    \"fields2\": { offset: 1, itemSize: 4, bytesPerItem: 2, divisor: d, normalize: true },\n    \"uvIdColor\": { offset: 3, itemSize: 2, bytesPerItem: 2, divisor: d, normalize: false },\n    \"flags4b\": { offset: 4, itemSize: 4, bytesPerItem: 1, divisor: d, normalize: false },\n    \"layerVp4b\": { offset: 5, itemSize: 4, bytesPerItem: 1, divisor: d, normalize: false } };\n\n\n  mesh.unpackXform = { x: sx, y: sy, z: ox, w: oy };\n  mesh.texData = texData;\n\n  return mesh;\n};\n\nVertexBufferBuilder.prototype.makeWideVertexLayout = function () {\n  var mesh = {};\n\n  mesh.vb = new Float32Array(this.vb.slice(0, this.vcount * this.stride * 4));\n  mesh.vbstride = this.stride;\n\n  var d = this.useInstancing ? 1 : 0;\n\n  mesh.vblayout = {\n    \"fields1\": { offset: 0, itemSize: 2, bytesPerItem: 4, divisor: d, normalize: false },\n    \"fields2\": { offset: 2, itemSize: 4, bytesPerItem: 4, divisor: d, normalize: false },\n    \"color4b\": { offset: VBB_COLOR_OFFSET, itemSize: 4, bytesPerItem: 1, divisor: d, normalize: true },\n    \"dbId4b\": { offset: VBB_DBID_OFFSET, itemSize: 4, bytesPerItem: 1, divisor: d, normalize: false },\n    \"flags4b\": { offset: VBB_FLAGS_OFFSET, itemSize: 4, bytesPerItem: 1, divisor: d, normalize: false },\n    \"layerVp4b\": { offset: VBB_LAYER_VP_OFFSET, itemSize: 4, bytesPerItem: 1, divisor: d, normalize: false } };\n\n\n  //Set the expanded vertex layout to use the last two floats in the buffer. If the\n  //were allocated then it is good. If they weren't it overlaps the flags4b and layerVp4b\n  //channels, but since the extraParams won't be used in the shader it won't matter.\n  //Doing this lets the shader connect to something and prevents crashes on iOS.\n  mesh.vblayout[\"extraParams\"] = { offset: this.stride - 2, itemSize: 2, bytesPerItem: 4, divisor: d, normalize: false };\n  return mesh;\n};\n\nVertexBufferBuilder.prototype.toMesh = function ()\n{\n  var mesh = null;\n\n  if (this.useCompactBuffers)\n  mesh = this.makeCompactVertexLayout();\n\n  if (!mesh)\n  mesh = this.makeWideVertexLayout();\n\n  if (this.useInstancing) {\n    mesh.numInstances = this.vcount;\n\n    //Set up trivial vertexId and index attributes\n\n    var instFlags = new Int32Array([VBB_SEG_START_RIGHT, VBB_SEG_START_LEFT, VBB_SEG_END_RIGHT, VBB_SEG_END_LEFT]);\n    mesh.vblayout.instFlags4b = { offset: 0, itemSize: 4, bytesPerItem: 1, divisor: 0, normalize: false };\n    mesh.vblayout.instFlags4b.array = instFlags.buffer;\n\n    var idx = mesh.indices = new Uint16Array(QUAD_TRIANGLE_INDICES);\n  } else {\n    mesh.indices = new Uint16Array(this.ib.buffer.slice(0, 2 * this.icount));\n  }\n\n  mesh.dbIds = this.dbIds;\n\n  var w = this.maxx - this.minx;\n  var h = this.maxy - this.miny;\n  var sz = Math.max(w, h);\n\n  mesh.boundingBox = {\n    min: { x: this.minx, y: this.miny, z: -sz * 1e-3 },\n    max: { x: this.maxx, y: this.maxy, z: sz * 1e-3 } };\n\n\n  //Also compute a rough bounding sphere\n  var bs = mesh.boundingSphere = {\n    center: {\n      x: 0.5 * (this.minx + this.maxx),\n      y: 0.5 * (this.miny + this.maxy),\n      z: 0.0 },\n\n    radius: 0.5 * Math.sqrt(w * w + h * h) };\n\n\n  return mesh;\n};\n\n// The following logic attempts to \"fix\" imprecisions in arc definitions introduced\n// by Heidi's fixed point math, in case that the extractor doesn't handle it correctly.\n\nvar fixUglyArc = function fixUglyArc(start, end)\n{\n  //Snap critical angles exactly\n  function snapCritical() {\n    function fuzzyEquals(a, b) {return Math.abs(a - b) < 1e-3;}\n\n    if (fuzzyEquals(start, 0)) start = 0.0;\n    if (fuzzyEquals(end, 0)) end = 0.0;\n    if (fuzzyEquals(start, TAU)) start = TAU;\n    if (fuzzyEquals(end, TAU)) end = TAU;\n  }\n\n  snapCritical();\n\n  //OK, in some cases the angles are both over-rotated...\n  if (start > end) {\n    while (start > TAU) {\n      start -= TAU;\n      end -= TAU;\n    }\n  } else {\n    while (end > TAU) {\n      start -= TAU;\n      end -= TAU;\n    }\n  }\n\n  //Snap critical angles exactly -- again\n  snapCritical();\n\n  //If the arc crosses the x axis, we have to make it clockwise...\n  //This is a side effect of bringing over-rotated arcs in range above.\n  //For example start = 5.0, end = 7.0 will result in start < 0 and end > 0,\n  //so we have to make start > end in order to indicate we are crossing angle = 0.\n  if (start < 0 && end > 0) {\n    start += TAU;\n  }\n\n  return { start: start, end: end };\n};","\n\"use strict\";\n\n// Similar as InputStream but with bounds checking.\n// Throw exception when out of bounds access is / to be made.\nexport function CheckedInputStream(buf) {\n  this.buffer = buf;\n  this.offset = 0;\n  this.byteLength = buf.length;\n\n  //We will use these shared memory arrays to\n  //convert from bytes to the desired data type.\n  this.convBuf = new ArrayBuffer(8);\n  this.convUint8 = new Uint8Array(this.convBuf);\n  this.convUint16 = new Uint16Array(this.convBuf);\n  this.convInt32 = new Int32Array(this.convBuf);\n  this.convUint32 = new Uint32Array(this.convBuf);\n}\n\nfunction OutOfBoundsBufferAccessException(offset) {\n  this.offset = offset;\n  this.message = \"try to access an offset that is out of bounds: \" + this.offset;\n  this.toString = function () {\n    return this.message;\n  };\n}\n\nCheckedInputStream.prototype.boundsCheck = function (offset) {\n  if (offset >= this.byteLength) {\n    throw new OutOfBoundsBufferAccessException(offset);\n  }\n};\n\nCheckedInputStream.prototype.seek = function (off) {\n  this.boundsCheck(off);\n  this.offset = off;\n};\n\nCheckedInputStream.prototype.getBytes = function (len) {\n  this.boundsCheck(this.offset + len);\n  var ret = new Uint8Array(this.buffer.buffer, this.offset, len);\n  this.offset += len;\n  return ret;\n};\n\nCheckedInputStream.prototype.skipBytes = function (len) {\n  this.boundsCheck(this.offset + len);\n  this.offset += len;\n};\n\n\nCheckedInputStream.prototype.getVarints = function () {\n  var b;\n  var value = 0;\n  var shiftBy = 0;\n  do {\n    this.boundsCheck(this.offset);\n    b = this.buffer[this.offset++];\n    value |= (b & 0x7f) << shiftBy;\n    shiftBy += 7;\n  } while (b & 0x80);\n  return value;\n};\n\nCheckedInputStream.prototype.getUint8 = function () {\n  this.boundsCheck(this.offset + 1);\n  return this.buffer[this.offset++];\n};\n\nCheckedInputStream.prototype.getUint16 = function () {\n  this.boundsCheck(this.offset + 2);\n  this.convUint8[0] = this.buffer[this.offset++];\n  this.convUint8[1] = this.buffer[this.offset++];\n  return this.convUint16[0];\n};\n\nCheckedInputStream.prototype.getInt16 = function () {\n  var tmp = this.getUint16();\n  //make negative integer if the ushort is negative\n  if (tmp > 0x7fff)\n  tmp = tmp | 0xffff0000;\n  return tmp;\n};\n\nCheckedInputStream.prototype.getInt32 = function () {\n  this.boundsCheck(this.offset + 4);\n  var src = this.buffer;\n  var dst = this.convUint8;\n  var off = this.offset;\n  dst[0] = src[off];\n  dst[1] = src[off + 1];\n  dst[2] = src[off + 2];\n  dst[3] = src[off + 3];\n  this.offset += 4;\n  return this.convInt32[0];\n};\n\nCheckedInputStream.prototype.getUint32 = function () {\n  this.boundsCheck(this.offset + 4);\n  var src = this.buffer;\n  var dst = this.convUint8;\n  var off = this.offset;\n  dst[0] = src[off];\n  dst[1] = src[off + 1];\n  dst[2] = src[off + 2];\n  dst[3] = src[off + 3];\n  this.offset += 4;\n  return this.convUint32[0];\n};\n\nCheckedInputStream.prototype.skipUint32 = function () {\n  this.boundsCheck(this.offset + 4);\n  this.offset += 4;\n};\n\nCheckedInputStream.prototype.getFloat32 = function () {\n  this.boundsCheck(this.offset + 4);\n  this.offset += 4;\n  return 0;\n};\n\nCheckedInputStream.prototype.getFloat64 = function () {\n  this.boundsCheck(this.offset + 8);\n  this.offset += 8;\n  return 0;\n};\n\nCheckedInputStream.prototype.skipFloat64 = function () {\n  this.boundsCheck(this.offset + 8);\n  this.offset += 8;\n};\n\nCheckedInputStream.prototype.reset = function (buf) {\n  this.buffer = buf;\n  this.offset = 0;\n  this.byteLength = buf.length;\n};","\nimport { VertexBufferBuilder } from \"../common/VertexBufferBuilder\";\nimport { LmvBox3 } from \"../../../wgs/scene/LmvBox3\";\nimport { LmvVector3 } from \"../../../wgs/scene/LmvVector3\";\nimport { VBUtils } from \"../common/VbUtils\";\nimport { InputStream } from \"../common/InputStream\";\nimport { logger } from \"../../../logger/Logger\";\nimport { errorCodeString, ErrorCodes } from \"../../net/ErrorCodes\";\n\n\nvar MOBILE_MAX_VCOUNT = 16383;\n\nexport var F2dDataType = {\n  //Fixed size types\n  dt_object: 0,\n  dt_void: 1,\n  dt_byte: 2,\n  dt_int: 3,\n  dt_float: 4,\n  dt_double: 5,\n  dt_varint: 6,\n  dt_point_varint: 7,\n\n  //Variable size types\n  //Data bytes are prefixed by an integer\n  //representing the number of elements in the array.\n  dt_byte_array: 32,\n  dt_int_array: 33,\n  dt_float_array: 34,\n  dt_double_array: 35,\n  dt_varint_array: 36,\n  //Special variable int encoding for point data\n  dt_point_varint_array: 37,\n\n  //Well-known data types that help reduce output size for commonly\n  //encountered simple geometries\n  dt_arc: 38,\n  dt_circle: 39,\n  dt_circular_arc: 40,\n\n  dt_string: 63,\n  //do not want to go into varint range\n  dt_last_data_type: 127 };\n\n\nexport var F2dSemanticType = {\n  //For objects with fixed serialization (arc, raster) we don't bother having dedicated semantic for each member\n  //and assume the parsing application knows the order they appear. There is still an end-object tag of course\n  //which shows where the object ends.\n  st_object_member: 0,\n\n  //Simple / fixed size attributes\n  st_fill: 1,\n  st_fill_off: 2,\n  st_clip_off: 3,\n  st_layer: 4,\n  st_link: 5,\n  st_line_weight: 6,\n  st_miter_angle: 7,\n  st_miter_length: 8,\n  st_line_pattern_ref: 9,\n  st_back_color: 10,\n  st_color: 11,\n  st_markup: 12,\n  st_object_id: 13,\n  st_markup_id: 14,\n  st_reset_rel_offset: 15,\n  st_font_ref: 16,\n\n  //Compound object opcodes\n\n  //Begin a generic object opcode\n  st_begin_object: 32,\n\n  //Style attribute related opcodes. Those are compound objects\n  st_clip: 33,\n  st_line_caps: 34,\n  st_line_join: 35,\n  st_line_pattern_def: 36,\n  st_font_def: 37,\n  st_viewport: 38,\n\n  //Drawables are all objects-typed bounded by begin/end object opcodes\n\n  //Root level document begin\n  st_sheet: 42,\n  //Circle, Ellipse, Arcs\n  st_arc: 43,\n  //The grandfather of them all\n  st_polyline: 44,\n  st_raster: 45,\n  st_text: 46,\n  st_polytriangle: 47,\n  st_dot: 48,\n  //end object -- could be ending a generic object or drawable, etc.\n  st_end_object: 63,\n\n  st_last_semantic_type: 127 };\n\n\n\n//Initializes a structure of counters used for statistical purposes and sheet content hash\nfunction initGeomMetrics() {\n  return {\n    \"arcs\": 0,\n    \"circles\": 0,\n    \"circ_arcs\": 0,\n    \"viewports\": 0,\n    \"clips\": 0,\n    \"colors\": 0,\n    \"db_ids\": 0,\n    \"dots\": 0,\n    \"fills\": 0,\n    \"layers\": 0,\n    \"line_caps\": 0,\n    \"line_joins\": 0,\n    \"line_patterns\": 0,\n    \"line_pat_refs\": 0,\n    \"plines\": 0,\n    \"pline_points\": 0,\n    \"line_weights\": 0,\n    \"links\": 0,\n    \"miters\": 0,\n    \"ptris\": 0,\n    \"ptri_indices\": 0,\n    \"ptri_points\": 0,\n    \"rasters\": 0,\n    \"texts\": 0,\n    \"strings\": [] };\n\n}\n\n\n// Restore sign bit from LSB of an encoded integer which has the sign bit\n// moved from MSB to LSB.\n// The decoding process is the reverse by restoring the sign bit from LSB to MSB.\nexport function restoreSignBitFromLSB(integer) {\n  return integer & 1 ? -(integer >>> 1) : integer >>> 1;\n};\n\nexport function F2D(metadata, manifest, basePath) {var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  this.metadata = metadata;\n  this.scaleX = 1;\n  this.scaleY = 1;\n  this.bbox = { min: { x: 0, y: 0, z: 0 }, max: { x: 0, y: 0, z: 0 } };\n  this.is2d = true;\n  this.layersMap = {};\n  this.fontDefs = {};\n  this.fontCount = 0;\n  this.fontId = 0;\n  this.manifestAvailable = false;\n  this.geomMetricsSum = 0;\n  this.objectMemberQueue = [];\n\n  this.propertydb = {\n    attrs: [],\n    avs: [],\n    ids: [],\n    values: [],\n    offsets: [],\n    viewables: [] };\n\n\n  if (metadata) {\n\n    var dims = metadata.page_dimensions;\n\n    this.paperWidth = dims.page_width;\n    this.paperHeight = dims.page_height;\n\n    // TODO: scale parsing.\n    this.scaleX = this.paperWidth / dims.plot_width;\n    this.scaleY = this.paperHeight / dims.plot_height;\n\n    this.hidePaper = dims.hide_paper;\n\n    var pw = this.paperWidth;\n    var ph = this.paperHeight;\n    this.bbox.max.x = pw;\n    this.bbox.max.y = ph;\n\n    var dim = metadata.page_dimensions || {};\n    // If the paper is rotated or offset, include that in the bbox\n    if (isFinite(dim.paper_rotation) && dim.paper_rotation !== 0) {\n      var angle = dim.paper_rotation * Math.PI / 180;\n      var cos = Math.cos(angle);\n      var sin = Math.sin(angle);\n      var dwx;\n      var dwx = pw * cos;\n      var dwy = pw * sin;\n      var dhx = -ph * sin;\n      var dhy = ph * cos;\n      this.bbox.min.x = Math.min(0, dwx, dhx, dwx + dhx);\n      this.bbox.max.x = Math.max(0, dwx, dhx, dwx + dhx);\n      this.bbox.min.y = Math.min(0, dwy, dhy, dwy + dhy);\n      this.bbox.max.y = Math.max(0, dwy, dhy, dwy + dhy);\n    }\n    if (isFinite(dim.paper_offset_x) && dim.paper_offset_x !== 0) {\n      this.bbox.min.x += dim.paper_offset_x;\n      this.bbox.max.x += dim.paper_offset_x;\n    }\n    if (isFinite(dim.paper_offset_y) && dim.paper_offset_y !== 0) {\n      this.bbox.min.y += dim.paper_offset_y;\n      this.bbox.max.y += dim.paper_offset_y;\n    }\n\n    //Initialize mapping between layer index -> layer number to be used for rendering\n    var count = 0;\n    //Some geometry comes on null layer, and we reserve a spot for that one.\n    //For example, Revit plots have no layers at all.\n    this.layersMap[0] = count++;\n\n    for (var l in metadata.layers) {\n\n      var index = parseInt(l);\n\n      //We store in a map in order to allow non-consecutive layer numbers,\n      //which does happen.\n      this.layersMap[index] = count++;\n    }\n\n    this.layerCount = count;\n\n    //Create a layers tree to be used by the UI -- this splits AutoCAD style\n    //layer groups (specified using | character) into a tree of layers.\n    this.createLayerGroups(metadata.layers);\n\n    if (metadata.geom_metrics) {\n      var values = Object.keys(metadata.geom_metrics).map(function (key) {\n        return metadata.geom_metrics[key];\n      });\n      this.geomMetricsSum = values.reduce(function (acc, cur) {return acc + cur;});\n    }\n  }\n\n  this.hidePaper = this.hidePaper || options.modelSpace;\n  this.noShadow = !!options.noShadow; // The request to not draw a shadow\n\n  this.hasPageShadow = false; // Will be true only if the shadow was actually created\n\n  // For debugging only. Could be removed.\n  this.opCount = 0;\n\n  this.excludeTextGeometry = options.excludeTextGeometry;\n\n  this.fontFaces = [];\n  this.fontFamilies = [];\n\n  this.viewports = [{}]; // make viewport index start at 1, 0 as paper is used in LineShader\n  this.currentVpId = 0; // current viewport index\n  this.viewports[0].geom_metrics = this.currentGeomMetrics = initGeomMetrics();\n\n  this.clips = [0]; // make clip index start at 1, matched with viewport index\n\n  this.strings = [];\n  this.stringDbIds = [];\n  this.stringBoxes = [];\n  this.currentStringNumber = -1;\n  this.currentStringBox = new LmvBox3();\n\n  this.linkBoxes = [];\n  this.currentLinkBox = new LmvBox3();\n\n  this.objectNumber = 0;\n  this.currentFakeId = -2; //We tag certain objects that we care about (like strings) that have no ID with fake negative IDs instead of giving them default ID of 0.\n  this.imageNumber = 0;\n  this.linkNumber = 0;\n  this.maxObjectNumber = 0;\n\n  this.objectStack = [];\n  this.objectNameStack = [];\n  this.parseObjState = {\n    polyTriangle: {},\n    viewport: {},\n    clip: {},\n    raster: {},\n    text: {},\n    fontDef: {},\n    uknown: {} };\n\n\n  this.layer = 0;\n\n  this.bgColor = typeof options.bgColor === \"number\" ? options.bgColor : 0xffffffff;\n\n  //NOTE: Use of contrast color is turned off in mapColor() until UX makes up their mind\n  //one way or another.\n  this.contrastColor = this.color = this.fillColor = 0xff000000;\n  if (this.hidePaper)\n  this.contrastColor = 0xffffff00;\n\n  this.isMobile = options && !!options.isMobile;\n\n  // https://git.autodesk.com/A360/firefly.js/pull/3884\n  // We spotted multiple devices that doesn't play nice with 2dInstancing and compactBuffers.\n  // After some testing, we found out that using WebGL2 fixes the performance issues for these devices.\n  // For browsers that don't support WebGL2 (Safari), we want to still use these optimisations, \n  // only if the number of geometries is large (more than 10 million) - this is when the memory optimisation\n  // is really important and we can't risk on not using it.\n  var isWebGL2 = options && !!options.isWebGL2;\n  var useMobileOptimizations = this.isMobile && (isWebGL2 || this.geomMetricsSum > 1e7);\n  var useInstancing = useMobileOptimizations && options && !!options.supportsInstancing;\n  var useCompactBuffers = useMobileOptimizations;\n\n  this.max_vcount = this.isMobile ? MOBILE_MAX_VCOUNT : undefined;\n\n  this.currentVbb = new VertexBufferBuilder(useInstancing, undefined, this.max_vcount, useCompactBuffers);\n  this.meshes = [];\n\n  this.numCircles = this.numEllipses = this.numPolylines = this.numLineSegs = 0;\n  this.numPolytriangles = this.numTriangles = 0;\n\n  // Newly added f2d pasing stuff.\n  this.error = false;\n\n  // Last absolute positions of point parsed so far.\n  // Used to decode relative positions parsed from points array.\n  this.offsetX = 0;\n  this.offsetY = 0;\n\n  // Parse manifest, do stuff.\n  // 1. Build image id to raster URI map used to assign values to texture path.\n  // 2. Acquire names of property database json streams.\n  if (manifest) {\n    this.manifestAvailable = true;\n    this.imageId2URI = {};\n    var assets = manifest.assets;\n    for (var i = 0, e = assets.length; i < e; ++i) {\n      var entry = assets[i];\n      var mime = entry.mime;\n      if (mime.indexOf('image/') !== -1) {\n        var id = entry.id;\n        id = id.substr(0, id.indexOf('.'));\n        this.imageId2URI[id] = basePath + entry.URI;\n      }\n\n      if (entry.type === \"Autodesk.CloudPlatform.PropertyAttributes\")\n      this.propertydb.attrs.push({ path: entry.URI });\n      if (entry.type === \"Autodesk.CloudPlatform.PropertyValues\")\n      this.propertydb.values.push({ path: entry.URI });\n      if (entry.type === \"Autodesk.CloudPlatform.PropertyIDs\")\n      this.propertydb.ids.push({ path: entry.URI });\n      if (entry.type === \"Autodesk.CloudPlatform.PropertyViewables\")\n      this.propertydb.viewables.push({ path: entry.URI });\n      if (entry.type === \"Autodesk.CloudPlatform.PropertyOffsets\") {\n        // rcv and rcv_offsets are not used any longer\n        if (entry.id.indexOf('rcv') === -1)\n        this.propertydb.offsets.push({ path: entry.URI });\n      }\n      if (entry.type === \"Autodesk.CloudPlatform.PropertyAVs\")\n      this.propertydb.avs.push({ path: entry.URI });\n    }\n\n  }\n}\n\nF2D.prototype.load = function (loadContext, fydoPack) {\n\n  if (!(fydoPack instanceof Uint8Array))\n  fydoPack = new Uint8Array(fydoPack);\n  this.data = fydoPack;\n  this.parse();\n\n  if (this.stringBoxes.length) {\n    var fbuf = new Float32Array(this.stringBoxes.length);\n    fbuf.set(this.stringBoxes);\n    this.stringBoxes = fbuf;\n  }\n\n  loadContext.loadDoneCB(true);\n};\n\nF2D.prototype.loadFrames = function (loadContext) {\n\n  this.loadContext = loadContext;\n\n  var data = loadContext.data;\n\n  if (data) {\n    if (!(data instanceof Uint8Array))\n    data = new Uint8Array(data);\n    this.data = data;\n  } else if (loadContext.finalFrame) {\n    this.data = null;\n\n    if (this.stringBoxes.length) {\n      var fbuf = new Float32Array(this.stringBoxes.length);\n      fbuf.set(this.stringBoxes);\n      this.stringBoxes = fbuf;\n    }\n  }\n\n  this.parseFrames(loadContext.finalFrame);\n\n  loadContext.loadDoneCB(true);\n};\n\n\nF2D.prototype.pushMesh = function (mesh) {\n  this.meshes.push(mesh);\n\n\n  mesh.material = {\n    skipEllipticals: !this.currentVbb.numEllipticals,\n    skipCircles: !this.currentVbb.numCirculars,\n    skipTriangleGeoms: !this.currentVbb.numTriangleGeoms,\n    useInstancing: this.currentVbb.useInstancing,\n    unpackPositions: !!mesh.unpackXform };\n\n\n  if (this.currentImage) {\n    mesh.material.image = this.currentImage;\n    mesh.material.image.name = this.imageNumber++;\n    this.currentImage = null;\n  }\n};\n\nF2D.prototype.flushBuffer = function (addCount, finalFlush)\n{\n  if (!this.currentVbb.vcount && !finalFlush)\n  {\n    return;\n  }\n\n  var flush = finalFlush;\n  flush = flush || this.currentVbb.isFull(addCount);\n\n  if (flush) {\n    if (this.currentVbb.vcount) {\n      var mesh = this.currentVbb.toMesh();\n      VBUtils.bboxUnion(this.bbox, mesh.boundingBox);\n\n      this.pushMesh(mesh);\n      this.currentVbb.reset(0);\n    }\n\n    if (this.loadContext)\n    this.loadContext.loadDoneCB(true, finalFlush);\n  }\n\n\n};\n\nF2D.prototype.tx = function (x) {\n  return this.sx(x);\n};\n\nF2D.prototype.ty = function (y) {\n  return this.sy(y);\n};\n\nF2D.prototype.sx = function (x) {\n  //TODO: The hardcoded scale is used to get the integer coords from FYDO\n  //into something normal and close to page coordinates\n  return x * this.scaleX;\n};\n\nF2D.prototype.sy = function (y) {\n  //TODO: The hardcoded scale is used to get the integer coords from FYDO\n  //into something normal and close to page coordinates\n  return y * this.scaleY;\n};\n\nF2D.prototype.invertColor = function (c) {\n  var a = c >> 24 & 0xff;\n  var b = c >> 16 & 0xff;\n  var g = c >> 8 & 0xff;\n  var r = c & 0xff;\n\n  b = 255 - b;\n  g = 255 - g;\n  r = 255 - r;\n\n  return a << 24 | b << 16 | g << 8 | r;\n};\n\nF2D.prototype.mapColor = function (c, isFill) {\n\n  if (!this.hidePaper || this.bgColor !== 0)\n  return c;\n\n  //Color substitution in cases when we want to interleave the 2D drawing\n  //into a 3D scene (when bgColor is explicitly specified as transparent black (0)\n  //and hidePaper is set to true.\n\n  var r = c & 0xff;\n  var g = (c & 0xff00) >> 8;\n  var b = (c & 0xff0000) >> 16;\n\n  var isGrey = r === g && r === b;\n\n  if (r < 0x7f) {\n    //c = this.contrastColor;\n  } else if (isGrey && isFill) {\n    c = c & 0x55ffffff;\n  }\n\n  return c;\n};\n\n// ====================== F2D Parser ================================= //\n\n\n// Convert relative positions to absolute positions, and update global offsets.\nF2D.prototype.parsePointPositions = function () {\n  var x = this.stream.getVarints();\n  var y = this.stream.getVarints();\n\n  x = restoreSignBitFromLSB(x);\n  y = restoreSignBitFromLSB(y);\n\n  x += this.offsetX;\n  y += this.offsetY;\n\n  this.offsetX = x;\n  this.offsetY = y;\n\n  return [this.tx(x), this.ty(y)];\n};\n\nF2D.prototype.parserAssert = function (actualType, expectedType, functionName) {\n  if (actualType != expectedType) {\n    logger.warn(\"Expect \" + expectedType + \"; actual type is \" +\n    actualType + \"; in function \" + functionName);\n    this.error = true;\n    return true;\n  } else {\n    return false;\n  }\n};\n\nF2D.prototype.unhandledTypeWarning = function (inFunction, semanticType) {\n  logger.warn(\"Unhandled semantic type : \" + semanticType + \" in function \" + inFunction);\n};\n\nF2D.prototype.parseObject = function () {\n  var semantic_type = this.stream.getVarints();\n  this.objectStack.push(semantic_type);\n  //debug(semantic_type);\n  switch (semantic_type) {\n    case F2dSemanticType.st_sheet:\n      this.objectNameStack.push(\"sheet\");\n      this.objectMemberQueue.unshift(\"paperColor\");\n      break;\n    case F2dSemanticType.st_viewport:\n      this.objectNameStack.push(\"viewport\");\n      this.objectMemberQueue.unshift(\"units\", \"transform\");\n      break;\n    case F2dSemanticType.st_clip:\n      this.objectNameStack.push(\"clip\");\n      this.objectMemberQueue.unshift(\"contourCounts\", \"points\", \"indices\");\n      break;\n    case F2dSemanticType.st_polytriangle:\n      this.objectNameStack.push(\"polyTriangle\");\n      this.objectMemberQueue.unshift(\"points\", \"indices\", \"colors\");\n      break;\n    case F2dSemanticType.st_raster:\n      this.objectNameStack.push(\"raster\");\n      this.objectMemberQueue.unshift(\"position\", \"width\", \"height\", \"imageId\");\n      break;\n    case F2dSemanticType.st_text:\n      this.currentStringNumber = this.strings.length;\n      if (this.objectNumber === 0)\n      this.objectNumber = this.currentFakeId--;\n      this.currentStringBox.makeEmpty();\n      this.objectNameStack.push(\"text\");\n      this.objectMemberQueue.unshift(\"string\", \"position\", \"height\", \"widthScale\", \"rotation\", \"oblique\", \"charWidths\");\n      break;\n    case F2dSemanticType.st_font_def:\n      this.objectNameStack.push(\"fontDef\");\n      this.objectMemberQueue.unshift(\"name\", \"fullName\", \"flags\", \"spacing\", \"panose\");\n      break;\n    case F2dSemanticType.st_end_object:{\n        this.objectStack.pop(); //pop the end_object we pushed at the beginning of the function\n\n        if (!this.objectStack.length)\n        this.parserAssert(0, 1, \"parseEndObject (Stack Empty)\");else\n        {\n          //Do any end-of-object post processing depending on object type\n          var objType = this.objectStack.pop(); //pop the start object\n\n          switch (objType) {\n            case F2dSemanticType.st_polytriangle:this.actOnPolyTriangle();break;\n            case F2dSemanticType.st_viewport:this.actOnViewport();break;\n            case F2dSemanticType.st_clip:this.actOnClip();break;\n            case F2dSemanticType.st_raster:this.actOnRaster();break;\n            case F2dSemanticType.st_text:this.actOnText();break;\n            case F2dSemanticType.st_font_def:this.actOnFontDef();break;}\n\n\n          //Zero out the state of the object we just finished processing\n          var name = this.objectNameStack.pop();\n          var state = this.parseObjState[name];\n          for (var p in state) {\n            state[p] = null;}\n        }\n\n        this.objectMemberQueue.length = 0;\n      }\n      break;\n    default:\n      this.objectNameStack.push(\"unknown\");\n      this.error = true;\n      this.unhandledTypeWarning('parseObject', semantic_type);\n      break;}\n\n};\n\n\nF2D.prototype.initSheet = function (paperColor) {\n  if (this.hidePaper)\n  return;\n\n  this.bgColor = paperColor;\n\n  if (this.metadata) {\n    var pw = this.paperWidth;\n    var ph = this.paperHeight;\n\n    var o = { x: 0, y: 0 }; // origin\n    var dw = { x: pw, y: 0 }; // paper width direction\n    var dh = { x: 0, y: ph }; // paper height direction\n\n    // If the metadata has a non-zero rotation, then use it\n    var dim = this.metadata.page_dimensions || {};\n    if (isFinite(dim.paper_rotation) && dim.paper_rotation !== 0) {\n      var angle = dim.paper_rotation * Math.PI / 180;\n      var cos = Math.cos(angle);\n      var sin = Math.sin(angle);\n      dw.y = pw * sin;\n      dw.x = pw * cos;\n      dh.x = -ph * sin;\n      dh.y = ph * cos;\n    }\n    // If the metadata has a non-zero offset, then use them\n    if (isFinite(dim.paper_offset_x) && dim.paper_offset_x !== 0) {\n      o.x = dim.paper_offset_x;\n    }\n    if (isFinite(dim.paper_offset_y) && dim.paper_offset_y !== 0) {\n      o.y = dim.paper_offset_y;\n    }\n\n    var vbb = this.currentVbb;\n\n    var points = [o.x, o.y, o.x + dw.x, o.y + dw.y, o.x + dw.x + dh.x, o.y + dw.y + dh.y, o.x + dh.x, o.y + dh.y];\n    var colors = [paperColor, paperColor, paperColor, paperColor];\n    var indices = [0, 1, 2, 0, 2, 3];\n\n    if (!this.noShadow) {\n      var ss = pw * 0.0075;\n      var ssw = { x: dw.x * ss / pw, y: dw.y * ss / pw }; // shadow offset in width direction\n      var ssh = { x: dh.x * ss / ph, y: dh.y * ss / ph }; // shadow offset in height direction\n      var ssb = { x: o.x + ssw.x, y: o.y + ssw.y }; // bottom shadow origin\n      var ssr = { x: o.x + dw.x, y: o.y + dw.y }; // right shadow origin\n      var shadowColor = 0xff555555;\n\n      points = points.concat([ssb.x - ssh.x, ssb.y - ssh.y, ssb.x - ssh.x + dw.x, ssb.y - ssh.y + dw.y, ssb.x + dw.x, ssb.y + dw.y, ssb.x, ssb.y,\n      ssr.x, ssr.y, ssr.x + ssw.x, ssr.y + ssw.y, ssr.x + ssw.x - ssh.x + dh.x, ssr.y + ssw.y - ssh.y + dh.y, ssr.x - ssh.x + dh.x, ssr.y - ssh.y + dh.y]);\n      colors = colors.concat([shadowColor, shadowColor, shadowColor, shadowColor,\n      shadowColor, shadowColor, shadowColor, shadowColor]);\n      indices = indices.concat([4, 5, 6, 4, 6, 7,\n      8, 9, 10, 8, 10, 11]);\n\n      this.hasPageShadow = true;\n    }\n\n    var paperLayer = 0; //Put the paper the null layer so it won't get turned off.\n    var paperDbId = -1;\n\n    this.addPolyTriangle(points, colors, indices, 0xffffffff, paperDbId, paperLayer, false);\n\n    //Page outline\n    vbb.addSegment(o.x, o.y, o.x + dw.x, o.y + dw.y, 0, 1e-6, 0xff000000, paperDbId, paperLayer, this.currentVpId);\n    vbb.addSegment(o.x + dw.x, o.y + dw.y, o.x + dw.x + dh.x, o.y + dw.y + dh.y, 0, 1e-6, 0xff000000, paperDbId, paperLayer, this.currentVpId);\n    vbb.addSegment(o.x + dw.x + dh.x, o.y + dw.y + dh.y, o.x + dh.x, o.y + dh.y, 0, 1e-6, 0xff000000, paperDbId, paperLayer, this.currentVpId);\n    vbb.addSegment(o.x + dh.x, o.y + dh.y, o.x, o.y, 0, 1e-6, 0xff000000, paperDbId, paperLayer, this.currentVpId);\n\n\n    //Test pattern for line styles.\n    //for (var i=0; i<39; i++) {\n    //    vbb.addSegment(0, ph + i * 0.25 + 1, 12, 12 + ph + i * 0.25 + 1, 0, -1 /* device space pixel width */, 0xff000000, 0xffffffff, 0, 0, i);\n    //}\n\n    //Test pattern for line styles.\n    //for (var i=0; i<39; i++) {\n    //    vbb.addSegment(0, ph + (i+39) * 0.25 + 1, 12, 12 + ph + (i+39) * 0.25 + 1, 0, (1.0 / 25.4) /*1mm width*/, 0xff000000, 0xffffffff, 0, 0, i);\n    //}\n\n  }\n};\n\nF2D.prototype.setObjectMember = function (val) {\n  if (!this.objectMemberQueue.length) {\n    logger.warn(\"Unexpected object member. \" + val + \" on object \" + this.objectNameStack[this.objectNameStack.length - 1]);\n    return false;\n  }\n\n  var propName = this.objectMemberQueue.shift();\n  var curObjName = this.objectNameStack[this.objectNameStack.length - 1];\n\n  //The paper color needs to be processed as soon as it comes in\n  //because we want to initialize the page geometry first, before\n  //adding any other geometry\n  if (curObjName == \"sheet\" && propName == \"paperColor\") {\n    this.initSheet(val);\n    return true;\n  } else\n  if (curObjName) {\n    this.parseObjState[curObjName][propName] = val;\n    return true;\n  }\n\n  return false;\n};\n\n\nF2D.prototype.parseString = function () {\n  var s = this.stream;\n  var sema = s.getVarints();\n\n  var len = s.getVarints();\n  var ret = s.getString(len);\n\n  switch (sema) {\n    case F2dSemanticType.st_object_member:\n      if (this.setObjectMember(ret))\n      return;\n      break;\n    default:logger.info(\"Unexpected opcode semantic type for string.\");break;}\n\n\n  return ret;\n};\n\n\nF2D.prototype.actOnFontDef = function () {\n  var fontDef = this.parseObjState.fontDef;\n  this.fontDefs[++this.fontCount] = fontDef;\n  this.fontId = this.fontCount;\n};\n\n\nF2D.prototype.parsePoint = function () {\n  var s = this.stream;\n  var sema = s.getVarints(); //skip past the semantics\n  var ret = this.parsePointPositions();\n\n  switch (sema) {\n    case F2dSemanticType.st_object_member:\n      if (this.setObjectMember(ret))\n      return;\n      break;\n    default:logger.info(\"Unexpected opcode semantic type for point.\");break;}\n\n\n  return ret;\n};\n\n\nF2D.prototype.parsePointsArray = function () {\n\n  var s = this.stream;\n\n  var sema = s.getVarints();\n\n  var count = s.getVarints(); // number of coordinates * 2\n  if (!count) return;\n  count = count / 2;\n\n  var ret = [];\n  var position;\n\n  for (var i = 0; i < count; ++i) {\n    position = this.parsePointPositions();\n    ret.push(position[0]);\n    ret.push(position[1]);\n  }\n\n  switch (sema) {\n    case F2dSemanticType.st_polyline:\n      this.actOnPolylinePointsArray(ret);\n      return;\n    case F2dSemanticType.st_dot:\n      this.actOnDot(ret);\n      return;\n    case F2dSemanticType.st_object_member:\n      if (this.setObjectMember(ret))\n      return;\n      break;\n    default:logger.info(\"Unexpected opcode semantic type for points array.\");break;}\n\n\n  return ret;\n};\n\nF2D.prototype.parseIntArray = function () {\n  var s = this.stream;\n  var sema = s.getVarints();\n  var count = s.getVarints(); // total number of elements in integer array.\n  var retVal = [];\n  for (var i = 0; i < count; ++i) {\n    retVal.push(s.getUint32());\n  }\n\n  switch (sema) {\n    case F2dSemanticType.st_object_member:\n      if (this.setObjectMember(retVal))\n      return;\n      break;\n    default:\n      this.unhandledTypeWarning('parseIntArray', sema);\n      break;}\n\n\n  return retVal;\n};\n\nF2D.prototype.parseDoubleArray = function () {\n  var s = this.stream;\n  var sema = s.getVarints();\n  var count = s.getVarints(); // total number of elements in integer array.\n  var retVal = [];\n  for (var i = 0; i < count; ++i) {\n    retVal.push(s.getFloat64());\n  }\n\n  switch (sema) {\n    case F2dSemanticType.st_object_member:\n      if (this.setObjectMember(retVal))\n      return;\n      break;\n    default:\n      this.unhandledTypeWarning('parseDoubleArray', sema);\n      break;}\n\n\n  return retVal;\n};\n\nF2D.prototype.parseByteArray = function () {\n  var s = this.stream;\n  var sema = s.getVarints();\n  var count = s.getVarints(); // total number of elements in byte array.\n  var retVal = [];\n  for (var i = 0; i < count; ++i) {\n    retVal.push(s.getUint8());\n  }\n\n  switch (sema) {\n    case F2dSemanticType.st_object_member:\n      if (this.setObjectMember(retVal))\n      return;\n      break;\n    default:\n      this.unhandledTypeWarning('parseByteArray', sema);\n      break;}\n\n\n  return retVal;\n};\n\n\nF2D.prototype.parseVarintArray = function () {\n  var s = this.stream;\n  var sema = s.getVarints();\n\n  var ret = [];\n\n  // Total number of integers in array, not the total number of bytes.\n  var count = s.getVarints();\n\n  for (var i = 0; i < count; ++i) {\n    ret.push(s.getVarints());\n  }\n\n  switch (sema) {\n    case F2dSemanticType.st_object_member:\n      if (this.setObjectMember(ret))\n      return;\n      break;\n    default:\n      this.unhandledTypeWarning('parseVarIntArray', sema);\n      break;}\n\n\n  return ret;\n};\n\n\nF2D.prototype.parseInt = function () {\n  var s = this.stream;\n  var sema = s.getVarints();\n  var val = s.getUint32();\n\n  switch (sema) {\n    case F2dSemanticType.st_color:\n      this.color = this.mapColor(val, false);\n      this.currentGeomMetrics.colors++;\n      break;\n    case F2dSemanticType.st_fill:\n      this.fill = true;\n      this.fillColor = this.mapColor(val, true);\n      this.currentGeomMetrics.fills++;\n      break;\n    case F2dSemanticType.st_object_member:\n      if (this.setObjectMember(val))\n      return;\n    default:\n      this.unhandledTypeWarning('parseInt', sema);\n      break;}\n\n\n  return val;\n};\n\nF2D.prototype.parseVoid = function () {\n  var sema = this.stream.getVarints();\n  switch (sema) {\n    case F2dSemanticType.st_fill_off:\n      this.fill = false;\n      this.currentGeomMetrics.fills++;\n      break;\n    default:\n      this.unhandledTypeWarning('parseVoid', sema);\n      break;}\n\n};\n\nF2D.prototype.parseVarint = function () {\n  var s = this.stream;\n  var semantic_type = s.getVarints();\n  var val = s.getVarints();\n\n  switch (semantic_type) {\n    case F2dSemanticType.st_line_weight:\n      this.lineWeight = this.tx(val);\n      this.currentGeomMetrics.line_weights++;\n      break;\n    case F2dSemanticType.st_line_caps:\n      this.currentGeomMetrics.line_caps++;\n      break;\n    case F2dSemanticType.st_line_join:\n      this.currentGeomMetrics.line_joins++;\n      break;\n    case F2dSemanticType.st_object_id:\n    case F2dSemanticType.st_markup_id:\n      this.objectNumber = val;\n      this.maxObjectNumber = Math.max(this.maxObjectNumber, val);\n      this.currentGeomMetrics.db_ids++;\n      break;\n    case F2dSemanticType.st_link:\n      if (this.linkNumber) {\n        this.linkBoxes[this.linkNumber] = this.currentLinkBox.clone();\n        this.currentLinkBox.makeEmpty();\n      }\n      this.linkNumber = val;\n      break;\n    case F2dSemanticType.st_layer:\n      this.currentGeomMetrics.layers++;\n      this.layer = this.layersMap[val];\n      break;\n    case F2dSemanticType.st_font_ref:\n      this.fontId = val;\n      break;\n    case F2dSemanticType.st_object_member:\n      if (this.setObjectMember(val))\n      return;\n      break;\n    default:\n      break;}\n\n\n  return val;\n};\n\nF2D.prototype.parseFloat = function () {\n  var s = this.stream;\n  var semantic_type = s.getVarints();\n  var val = s.getFloat32();\n\n  switch (semantic_type) {\n    case F2dSemanticType.st_miter_angle:\n      break;\n    case F2dSemanticType.st_miter_length:\n      break;\n    case F2dSemanticType.st_object_member:\n      if (this.setObjectMember(val)) {\n        return;\n      }\n      break;\n    default:\n      break;}\n\n\n  return val;\n};\n\nF2D.prototype.parseCircularArc = function () {\n  var s = this.stream;\n  var sema = s.getVarints();\n  if (this.parserAssert(sema, F2dSemanticType.st_arc, 'parseCircularArc')) return;\n\n  var point = this.parsePointPositions();\n  var major = s.getVarints(), /*rotation = s.getFloat32(),*/start = s.getFloat32(),end = s.getFloat32();\n\n  this.actOnCircularArc(point[0], point[1], start, end, this.sx(major));\n};\n\nF2D.prototype.parseCircle = function () {\n  var s = this.stream;\n  var sema = s.getVarints();\n  if (this.parserAssert(sema, F2dSemanticType.st_arc, 'parseCircle')) return;\n\n  var point = this.parsePointPositions();\n  var major = s.getVarints();\n\n  this.actOnCompleteCircle(point[0], point[1], this.sx(major));\n};\n\nF2D.prototype.parseArc = function () {\n  var s = this.stream;\n  var sema = s.getVarints();\n  if (this.parserAssert(sema, F2dSemanticType.st_arc, 'parseArc')) return;\n\n  // Relative positions.\n  var point = this.parsePointPositions();\n\n  var major = s.getVarints();\n  var minor = s.getVarints();\n\n  var rotation = s.getFloat32();\n  var start = s.getFloat32();\n  var end = s.getFloat32();\n\n  this.actOnArc(point[0], point[1], start, end, this.sx(major), this.sy(minor), rotation);\n};\n\nF2D.prototype.parseDataType = function () {\n  var data_type = this.stream.getVarints();\n\n  switch (data_type) {\n    case F2dDataType.dt_void:\n      this.parseVoid();\n      break;\n    case F2dDataType.dt_int:\n      this.parseInt();\n      break;\n    case F2dDataType.dt_object:\n      this.parseObject();\n      break;\n    case F2dDataType.dt_varint:\n      this.parseVarint();\n      break;\n    case F2dDataType.dt_point_varint:\n      this.parsePoint();\n      break;\n    case F2dDataType.dt_float:\n      this.parseFloat();\n      break;\n    case F2dDataType.dt_point_varint_array:\n      this.parsePointsArray();\n      break;\n    case F2dDataType.dt_circular_arc:\n      this.parseCircularArc();\n      break;\n    case F2dDataType.dt_circle:\n      this.parseCircle();\n      break;\n    case F2dDataType.dt_arc:\n      this.parseArc();\n      break;\n    case F2dDataType.dt_int_array:\n      this.parseIntArray();\n      break;\n    case F2dDataType.dt_varint_array:\n      this.parseVarintArray();\n      break;\n    case F2dDataType.dt_byte_array:\n      this.parseByteArray();\n      break;\n    case F2dDataType.dt_string:\n      this.parseString();\n      break;\n    case F2dDataType.dt_double_array:\n      this.parseDoubleArray();\n      break;\n    default:\n      this.error = true;\n      logger.info(\"Data type not supported yet: \" + data_type);\n      break;}\n\n};\n\nF2D.prototype.readHeader = function () {\n  var stream = this.stream = new InputStream(this.data);\n\n  // \"F2D\"\n  var header = stream.getString(3);\n\n  if (header !== \"F2D\") {\n    logger.error(\"Invalid F2D header : \" + header, errorCodeString(ErrorCodes.BAD_DATA));\n    return false;\n  }\n\n  var versionMajor = stream.getString(2);\n  if (versionMajor !== \"01\") {\n    logger.error(\"Only support f2d major version 1; actual version is : \" + versionMajor, errorCodeString(ErrorCodes.BAD_DATA));\n    return false;\n  }\n\n  var dot = stream.getString(1);\n  if (dot !== \".\") {\n    logger.error(\"Invalid version delimiter.\", errorCodeString(ErrorCodes.BAD_DATA));\n    return false;\n  }\n\n  var versionMinor = stream.getString(2);\n  return true;\n};\n\nF2D.prototype.parse = function () {\n  // Read and check header\n  if (!this.readHeader())\n  return;\n\n  var stream = this.stream;\n  while (stream.offset < stream.byteLength) {\n    this.parseDataType();\n    if (this.error)\n    break;\n    this.opCount++;\n  }\n\n  if (this.linkNumber) {\n    this.linkBoxes[this.linkNumber] = this.currentLinkBox.clone();\n    this.currentLinkBox.makeEmpty();\n  }\n\n  this.flushBuffer(0, true);\n  this.currentVbb = null;\n\n  this.stream = null;\n  this.data = null;\n\n  logger.info(\"F2d parse: data types count : \" + this.opCount);\n};\n\nF2D.prototype.parseFrames = function (flush) {\n\n  if (this.data) {\n    var stream = this.stream = new InputStream(this.data);\n    while (stream.offset < stream.byteLength) {\n      this.parseDataType();\n      if (this.error)\n      break;\n      this.opCount++;\n    }\n  } else if (!flush) {\n    logger.warn(\"Unexpected F2D parse state: If there is no data, we only expect a flush command, but flush was false.\");\n  }\n\n  if (flush) {\n    this.flushBuffer(0, true);\n  }\n\n  this.stream = null;\n  this.data = null;\n};\n\n// ================= Semantic Analysis Pass ======================//\n\nF2D.prototype.actOnPolylinePointsArray = function (points) {\n\n  this.flushBuffer();\n\n  // For now only consider this.fill == false case.\n  // TODO: handle fill case.\n\n  var count = points.length / 2;\n\n  var totalLen = 0;\n  var x0 = points[0];\n  var y0 = points[1];\n  for (var i = 1; i < count; ++i) {\n    var x1 = points[2 * i];\n    var y1 = points[2 * i + 1];\n\n    // TODO: make sure this function can be reused as is.\n    this.currentVbb.addSegment(x0, y0, x1, y1, totalLen, this.lineWeight, this.color, this.objectNumber, this.layer, this.currentVpId);\n\n    totalLen += Math.sqrt((x1 - x0) * (x1 - x0) + (y1 - y0) * (y1 - y0));\n\n    x0 = x1;\n    y0 = y1;\n  }\n\n  this.numPolylines++;\n  this.numLineSegs += count - 1;\n\n  this.currentGeomMetrics.plines++;\n  this.currentGeomMetrics.pline_points += count - 1;\n};\n\nF2D.prototype.actOnDot = function (points) {\n\n  this.currentGeomMetrics.dots++;\n\n  var x0 = points[0];\n  var y0 = points[1];\n\n  this.actOnCompleteCircle(x0, y0, this.sx(1), true);\n};\n\n\nF2D.prototype.actOnCompleteCircle = function (cx, cy, radius, skipCount) {\n  // Relative positions.\n  this.flushBuffer();\n  this.numCircles++;\n\n  if (!skipCount)\n  this.currentGeomMetrics.circles++;\n\n  if (this.fill) {\n    //A simple filled circle can be handled\n    //as degenerate thick line segment -- lots of these\n    //in line style grass clippings\n    this.currentVbb.addSegment(cx, cy, cx, cy, 0, 2 * radius, this.color, this.objectNumber,\n    this.layer, this.currentVpId, true, false, true);\n  } else {\n    this.currentVbb.addArc(cx, cy, 0, 2 * Math.PI, /*major*/radius, /*minor*/radius, /*tilt*/0.0,\n    this.lineWeight, this.color, this.objectNumber, this.layer, this.currentVpId);\n  }\n};\n\nF2D.prototype.actOnCircularArc = function (cx, cy, start, end, radius) {\n  this.numCircles++;\n  this.currentGeomMetrics.circ_arcs++;\n  this.flushBuffer();\n\n  //    debug(\"circle \" + start + \" \" + end + \" c \" + this.color.toString(16));\n\n  this.currentVbb.addArc(cx, cy, start, end, /*major*/radius, /*minor*/radius, /*tilt*/0.0,\n  this.lineWeight, this.color, this.objectNumber, this.layer, this.currentVpId);\n};\n\nF2D.prototype.actOnArc = function (cx, cy, start, end, major, minor, rotation) {\n  this.numEllipses++;\n  this.currentGeomMetrics.arcs++;\n  // TODO: need this?\n  this.flushBuffer();\n  this.currentVbb.addArc(cx, cy, start, end, major, minor, rotation,\n  this.lineWeight, this.color, this.objectNumber, this.layer, this.currentVpId);\n};\n\nF2D.prototype.actOnRaster = function () {\n\n  if (!this.manifestAvailable)\n  return;\n\n  this.flushBuffer(4, true);\n\n  var ps = this.parseObjState.raster;\n\n  var position = ps.position,\n  imageId = ps.imageId,\n  imageUri = this.imageId2URI[imageId];\n\n  var width = this.sx(ps.width),\n  height = this.sy(ps.height);\n\n  var centerX = position[0] + 0.5 * width,\n  centerY = position[1] - 0.5 * height;\n\n  this.currentVbb.addTexturedQuad(centerX, centerY, width, height, /*rotation*/0, 0xff00ffff, this.objectNumber, this.layer, this.currentVpId);\n  this.currentImage = { dataURI: imageUri };\n\n  //We can do one image per Vertex Buffer, so flush the quad\n  this.flushBuffer(0, true);\n\n  //TODO: we need to compare the contents of the raster also.\n  this.currentGeomMetrics.rasters++;\n};\n\nF2D.prototype.actOnClip = function () {\n\n  var v = this.parseObjState.clip;\n  this.parseObjState.clip = {};\n\n  this.clips.push(v);\n\n  this.currentGeomMetrics.clips++;\n};\n\nF2D.prototype.actOnText = function () {\n  //TODO: text not currently used for rendering,\n  //but we collect the strings for search/lookup purposes\n  this.strings[this.currentStringNumber] = this.parseObjState.text.string;\n\n  this.currentGeomMetrics.texts++;\n  this.currentGeomMetrics.strings.push(this.parseObjState.text.string);\n\n  this.stringDbIds[this.currentStringNumber] = this.objectNumber;\n  this.stringBoxes.push(this.currentStringBox.min.x, this.currentStringBox.min.y, this.currentStringBox.max.x, this.currentStringBox.max.y);\n  this.currentStringBox.makeEmpty();\n  this.currentStringNumber = -1;\n  if (this.objectNumber < -1)\n  this.objectNumber = 0; //reset the current object ID in case we were using a fake one for the text object\n};\n\n\nvar _tmpVector = new LmvVector3();\n\n//Polytriangle processing differs depending on whether\n//we want edge antialiasing and whether the renderer is using\n//hardware instancing or not, so it require a lot more\n//work than other geometries before sending raw primitives to the\n//vertex buffer.\nF2D.prototype.addPolyTriangle = function (points, colors, inds, color, dbId, layer, antialiasEdges) {\n  var me = this;\n  var edgeMap = null;\n\n  //For non-text geometry we get good looking results with\n  //1 pixel outlines. For text, which is generally small and highly detailed,\n  //a 0.5 pixel AA outline does better.\n  var aaLineWeight = -1.0; //negative = in pixel units\n  if (this.objectStack[this.objectStack.length - 1] == F2dSemanticType.st_text)\n  aaLineWeight = -0.5;\n\n\n  function processEdge(iFrom, iTo) {\n    if (iFrom > iTo) {\n      var tmp = iFrom;\n      iFrom = iTo;\n      iTo = tmp;\n    }\n\n    if (!edgeMap[iFrom])\n    edgeMap[iFrom] = [iTo];else\n    {\n      var adjacentVerts = edgeMap[iFrom];\n      var idx = adjacentVerts.lastIndexOf(iTo);\n      if (idx == -1)\n      adjacentVerts.push(iTo); //first time we see this edge, so remember it as exterior edge\n      else\n        adjacentVerts[idx] = -1; //the second time we see an edge mark it as interior edge\n    }\n  }\n\n\n  function addAllAntialiasEdges() {\n\n    for (var i = 0, iEnd = edgeMap.length; i < iEnd; i++) {\n\n      var adjacentVerts = edgeMap[i];\n      if (!adjacentVerts)\n      continue;\n\n      for (var j = 0; j < adjacentVerts.length; j++) {\n        var iTo = adjacentVerts[j];\n        if (iTo == -1)\n        continue; //an interior edge was here -- skip\n        else {\n            //exterior edge -- add an antialiasing line for it\n            me.flushBuffer(4);\n            me.currentVbb.addSegment(points[2 * i], points[2 * i + 1],\n            points[2 * iTo], points[2 * iTo + 1],\n            0,\n            aaLineWeight,\n            me.mapColor(colors ? colors[i] : color, true),\n            dbId, layer, me.currentVpId);\n            {\n              if (colors && colors[i] != colors[iTo])\n              logger.warn(\"Gouraud triangle encountered. Will have incorrect antialiasing.\");}\n          }\n      }\n    }\n  }\n\n  function antialiasOneEdge(iFrom, iTo) {\n    if (iFrom > iTo) {\n      var tmp = iFrom;\n      iFrom = iTo;\n      iTo = tmp;\n    }\n\n    var adjacentVerts = edgeMap[iFrom];\n    if (!adjacentVerts)\n    return;\n\n    var idx = adjacentVerts.indexOf(iTo);\n    if (idx != -1) {\n      //exterior edge -- add an antialiasing line for it\n      me.flushBuffer(4);\n      me.currentVbb.addSegment(points[2 * iFrom], points[2 * iFrom + 1],\n      points[2 * iTo], points[2 * iTo + 1],\n      0,\n      aaLineWeight,\n      me.mapColor(colors ? colors[iFrom] : color, true),\n      dbId, layer, me.currentVpId);\n\n      if (colors && colors[iFrom] != colors[iTo])\n      logger.warn(\"Gouraud triangle encountered. Will have incorrect antialiasing.\");\n    }\n  }\n\n  if (antialiasEdges) {\n    edgeMap = new Array(points.length / 2);\n\n    for (var i = 0, iEnd = inds.length; i < iEnd; i += 3) {\n      var i0 = inds[i];\n      var i1 = inds[i + 1];\n      var i2 = inds[i + 2];\n\n      processEdge(i0, i1);\n      processEdge(i1, i2);\n      processEdge(i2, i0);\n    }\n  }\n\n  //If the polytriangle is part of tesselated text or hyperlink, add it to the current\n  //text object bounding box\n  if (this.currentStringNumber !== -1 || this.linkNumber) {\n    var count = points.length / 2; // number of vertices\n    for (var i = 0; i < count; ++i) {\n      _tmpVector.set(points[2 * i], points[2 * i + 1], 0);\n\n      if (this.currentStringNumber !== -1)\n      this.currentStringBox.expandByPoint(_tmpVector);\n\n      if (this.linkNumber)\n      this.currentLinkBox.expandByPoint(_tmpVector);\n    }\n  }\n\n  if (this.currentVbb.useInstancing) {\n    var count = inds.length;\n    for (var i = 0; i < count; i += 3) {\n      var i0 = inds[i];\n      var i1 = inds[i + 1];\n      var i2 = inds[i + 2];\n\n      this.flushBuffer(4);\n\n      this.currentVbb.addTriangleGeom(points[2 * i0], points[2 * i0 + 1],\n      points[2 * i1], points[2 * i1 + 1],\n      points[2 * i2], points[2 * i2 + 1],\n      this.mapColor(colors ? colors[i0] : color, true), dbId, layer, this.currentVpId);\n\n      if (antialiasEdges) {\n        antialiasOneEdge(i0, i1);\n        antialiasOneEdge(i1, i2);\n        antialiasOneEdge(i2, i0);\n      }\n    }\n  } else\n  {\n    var count = points.length / 2; // number of vertices\n\n    this.flushBuffer(count);\n    var vbb = this.currentVbb;\n    var vbase = vbb.vcount;\n\n    for (var i = 0; i < count; ++i) {\n      var x = points[2 * i];\n      var y = points[2 * i + 1];\n      vbb.addVertexPolytriangle(x, y, this.mapColor(colors ? colors[i] : color, true), dbId, layer, this.currentVpId);\n    }\n\n    vbb.addIndices(inds, vbase);\n\n    if (antialiasEdges) {\n      addAllAntialiasEdges();\n    }\n\n  }\n};\n\nF2D.prototype.actOnPolyTriangle = function () {\n\n  var ptri = this.parseObjState.polyTriangle;\n  this.parseObjState.polyTriangle = {};\n\n  var points = ptri.points;\n  var inds = ptri.indices;\n  var colors = ptri.colors;\n\n  if (!points || !inds) {\n    logger.warn(\"Malformed polytriangle.\");\n    return;\n  }\n\n  //Skip polytriangles that belong to text strings from the geometry stats\n  //as they are not relevant to the sheet signature computation\n  if (this.objectStack[this.objectStack.length - 1] == F2dSemanticType.st_text) {\n    if (this.excludeTextGeometry) {\n      return;\n    }\n  } else {\n    this.currentGeomMetrics.ptris++;\n    this.currentGeomMetrics.ptri_points += points.length / 2;\n    this.currentGeomMetrics.ptri_indices += inds.length;\n  }\n\n  this.numPolytriangles++;\n  this.numTriangles += inds.length / 3;\n\n  this.addPolyTriangle(points, colors, inds, this.color, this.objectNumber, this.layer, true);\n};\n\nF2D.prototype.actOnViewport = function () {\n\n  var v = this.parseObjState.viewport;\n  this.parseObjState.viewport = {};\n\n  v.geom_metrics = this.currentGeomMetrics = initGeomMetrics();\n\n  this.viewports.push(v);\n  this.currentVpId = this.viewports.length - 1;\n};\n\nF2D.prototype.createLayerGroups = function (layers) {\n\n  // Temporary: build the layers tree. Eventually the extractor\n  // should be the one doing this; we're incompletely faking it\n  // by looking at the layer names.\n  //\n  var layersRoot = this.layersRoot = { name: 'root', id: 'root', childrenByName: {}, isLayer: false };\n  var groupId = 0,layerId = 0;\n\n  for (var l in layers) {\n\n    var index = parseInt(l);\n    var layerDef = layers[l];\n\n    var name = typeof layerDef === \"string\" ? layerDef : layerDef.name;\n\n    if (!name)\n    name = l; //won't get here...\n\n    var path = name.split('|');\n    var parent = layersRoot;\n\n    if (path.length > 1) {\n      for (var i = 0; i < path.length - 1; ++i) {\n        var pathComponent = path[i];\n        var item = parent.childrenByName[pathComponent];\n        if (!item) {\n          item = {\n            name: pathComponent,\n            id: 'group-' + groupId++,\n            childrenByName: {},\n            isLayer: false };\n\n          parent.childrenByName[pathComponent] = item;\n        }\n        parent = item;\n      }\n    }\n\n    parent.childrenByName[name] = {\n      name: name,\n      index: index,\n      id: layerId++,\n      childrenByName: {},\n      isLayer: true };\n\n  }\n\n  function sortLayers(parent) {\n    var children = Object.keys(parent.childrenByName).map(function (k) {return parent.childrenByName[k];});\n    delete parent.childrenByName;\n\n    if (children.length) {\n      parent.children = children;\n\n      parent.childCount = 0;\n\n      for (var i = 0; i < children.length; ++i) {\n        parent.childCount += sortLayers(children[i]);\n      }\n\n      children.sort(function (a, b) {\n        if (a.isLayer && !b.isLayer) {\n          return -1; // Layers before groups\n        } else if (!a.isLayer && b.isLayer) {\n          return 1;\n        }\n        return a.name.localeCompare(b.name, undefined, { sensitivity: 'base', numeric: true }); // Sort layers and groups by name\n      });\n    }\n\n    return parent.isLayer ? 1 : parent.childCount;\n  }\n  sortLayers(this.layersRoot);\n};","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}import { GeometryBuilder } from \"./GeometryBuilder\";\nimport { InputStream } from \"../common/InputStream\";\nimport { logger } from \"../../../logger/Logger\";\nimport { errorCodeString, ErrorCodes } from \"../../net/ErrorCodes\";\nimport { F2dDataType, F2dSemanticType, restoreSignBitFromLSB } from \"./F2d\";\n\nexport var F2DGeometry = /*#__PURE__*/function () {\n  function F2DGeometry(metadata, options) {_classCallCheck(this, F2DGeometry);\n    this.metadata = metadata;\n    this.scaleX = 1;\n    this.scaleY = 1;\n    this.bbox = { min: { x: 0, y: 0, z: 0 }, max: { x: 0, y: 0, z: 0 } };\n    this.fillColor = null;\n    if (metadata) {\n      var dimensions = metadata.page_dimensions;\n      this.setScale(dimensions);\n    }\n\n    this.excludeTextGeometry = options.excludeTextGeometry || true;\n\n    this.dbId = 0;\n    this.maxDbId = 0;\n\n    this.geometry = new GeometryBuilder();\n\n    // Newly added f2d pasing stuff.\n    this.error = false;\n\n    // Last absolute positions of point parsed so far.\n    // Used to decode relative positions parsed from points array.\n    this.offsetX = 0;\n    this.offsetY = 0;\n  }_createClass(F2DGeometry, [{ key: \"setScale\", value: function setScale(\n\n    dims) {\n      this.paperWidth = dims.page_width;\n      this.paperHeight = dims.page_height;\n\n      // TODO: scale parsing.\n      this.scaleX = this.paperWidth / dims.plot_width;\n      this.scaleY = this.paperHeight / dims.plot_height;\n    } }, { key: \"load\", value: function load(\n\n    loadContext, fydoPack) {\n      if (!(fydoPack instanceof Uint8Array)) fydoPack = new Uint8Array(fydoPack);\n      this.data = fydoPack;\n      this.parse();\n\n      loadContext.loadDoneCB(true);\n    } }, { key: \"loadFrames\", value: function loadFrames(\n\n    loadContext) {\n      this.loadContext = loadContext;\n\n      var data = loadContext.data;\n\n      if (data) {\n        if (!(data instanceof Uint8Array)) data = new Uint8Array(data);\n        this.data = data;\n      } else if (loadContext.finalFrame) {\n        this.data = null;\n      }\n\n      this.probeFrames(loadContext.finalFrame);\n\n      loadContext.loadDoneCB(true);\n    } }, { key: \"sx\", value: function sx(\n\n    x) {\n      //TODO: The hardcoded scale is used to get the integer coords from FYDO\n      //into something normal and close to page coordinates\n      return x * this.scaleX;\n    } }, { key: \"sy\", value: function sy(\n\n    y) {\n      //TODO: The hardcoded scale is used to get the integer coords from FYDO\n      //into something normal and close to page coordinates\n      return y * this.scaleY;\n    }\n\n    // ====================== F2D Parser ================================= //\n  }, { key: \"parserAssert\", value: function parserAssert(\n    actualType, expectedType, functionName) {\n      if (actualType != expectedType) {\n        logger.warn(\n        \"Expect \" +\n        expectedType +\n        \"; actual type is \" +\n        actualType +\n        \"; in function \" +\n        functionName);\n\n        this.error = true;\n        return true;\n      } else {\n        return false;\n      }\n    } }, { key: \"parseDataType\", value: function parseDataType()\n\n    {\n      var data_type = this.stream.getVarints();\n      switch (data_type) {\n        case F2dDataType.dt_void:\n          this.parseVoid();\n          break;\n        case F2dDataType.dt_int:\n          this.parseInt();\n          break;\n        case F2dDataType.dt_object:\n          this.parseObject();\n          break;\n        case F2dDataType.dt_varint:\n          this.parseVarint();\n          break;\n        case F2dDataType.dt_point_varint:\n          this.parsePoint();\n          break;\n        case F2dDataType.dt_float:\n          this.parseFloat();\n          break;\n        case F2dDataType.dt_point_varint_array:\n          this.parsePointsArray();\n          break;\n        case F2dDataType.dt_circular_arc:\n          this.parseCircularArc();\n          break;\n        case F2dDataType.dt_circle:\n          this.parseCircle();\n          break;\n        case F2dDataType.dt_arc:\n          this.parseArc();\n          break;\n        case F2dDataType.dt_int_array:\n          this.parseIntArray();\n          break;\n        case F2dDataType.dt_varint_array:\n          this.parseVarintArray();\n          break;\n        case F2dDataType.dt_byte_array:\n          this.parseByteArray();\n          break;\n        case F2dDataType.dt_string:\n          this.parseString();\n          break;\n        case F2dDataType.dt_double_array:\n          this.parseDoubleArray();\n          break;\n        default:\n          this.error = true;\n          logger.info(\"Data type not supported yet: \" + data_type);\n          break;}\n\n    } }, { key: \"readHeader\", value: function readHeader()\n\n    {\n      var stream = this.stream = new InputStream(this.data);\n\n      // \"F2D\"\n      var header = stream.getString(3);\n\n      if (header !== \"F2D\") {\n        logger.error(\n        \"Invalid F2D header : \" + header,\n        errorCodeString(ErrorCodes.BAD_DATA));\n\n        return false;\n      }\n\n      var versionMajor = stream.getString(2);\n      if (versionMajor !== \"01\") {\n        logger.error(\n        \"Only support f2d major version 1; actual version is : \" + versionMajor,\n        errorCodeString(ErrorCodes.BAD_DATA));\n\n        return false;\n      }\n\n      var dot = stream.getString(1);\n      if (dot !== \".\") {\n        logger.error(\n        \"Invalid version delimiter.\",\n        errorCodeString(ErrorCodes.BAD_DATA));\n\n        return false;\n      }\n\n      var versionMinor = stream.getString(2);\n      return true;\n    } }, { key: \"probe\", value: function probe()\n\n    {\n      var stream = this.stream;\n      this.error = false;\n\n      try {\n        while (stream.offset < stream.byteLength) {\n          this.parseDataType();\n          if (this.error) {\n            break;\n          }\n        }\n      } catch (exc) {\n        // Typically caused by out of bounds access of data.\n        var message = exc.toString();\n        var stack = exc.stack ? exc.stack.toString() : \"...\";\n\n        // Don't panic with this - we are supposed to hit out of bounds a couple of times when probing.\n        logger.error(\n        \"Error in F2DProbe.prototype.probe : \" +\n        message +\n        \" with stack : \" +\n        stack);\n\n      }\n    } }, { key: \"parse\", value: function parse()\n\n    {\n      // Read and check header\n      if (!this.readHeader()) return;\n      this.probe();\n    } }, { key: \"parseFrames\", value: function parseFrames()\n\n    {\n      if (this.data) {\n        this.stream = new InputStream(this.data);\n        this.probe();\n      }\n\n      this.stream = null;\n      this.data = null;\n    }\n\n    // === Parse Geometry === //\n  }, { key: \"parsePointPositions\", value: function parsePointPositions()\n    {\n      var x = this.stream.getVarints();\n      var y = this.stream.getVarints();\n\n      x = restoreSignBitFromLSB(x);\n      y = restoreSignBitFromLSB(y);\n\n      x += this.offsetX;\n      y += this.offsetY;\n\n      this.offsetX = x;\n      this.offsetY = y;\n\n      return [this.sx(x), this.sy(y)];\n    } }, { key: \"parseObject\", value: function parseObject()\n\n    {\n      this.stream.getVarints();\n    } }, { key: \"parseString\", value: function parseString()\n\n    {\n      var s = this.stream;\n      s.getVarints(); //skip past the semantics\n\n      var len = s.getVarints();\n      return s.getString(len);\n    } }, { key: \"parsePoint\", value: function parsePoint()\n\n    {\n      var s = this.stream;\n      s.getVarints(); //skip past the semantics\n      this.parsePointPositions();\n    } }, { key: \"parsePointsArray\", value: function parsePointsArray()\n\n    {\n      var s = this.stream;\n      var sema = s.getVarints();\n\n      var count = s.getVarints(); // number of coordinates * 2\n      if (!count) return;\n      count = count / 2;\n\n      var ret = [];\n      var position;\n\n      for (var i = 0; i < count; ++i) {\n        position = this.parsePointPositions();\n        ret.push(position[0]);\n        ret.push(position[1]);\n      }\n\n      switch (sema) {\n        case F2dSemanticType.st_polyline:\n          this.actOnPolylinePointsArray(ret);\n          return;\n        case F2dSemanticType.st_dot:\n          this.actOnDot(ret[0], ret[1]);\n          return;\n        default:\n          logger.info(\"Unexpected opcode semantic type for points array.\");\n          break;}\n\n    } }, { key: \"parseArray\", value: function parseArray(\n\n    getFunction) {\n      var s = this.stream;\n      s.getVarints();\n      var count = s.getVarints(); // total number of elements in integer array.\n\n      for (var i = 0; i < count; ++i) {\n        getFunction();\n      }\n    } }, { key: \"parseIntArray\", value: function parseIntArray()\n\n    {\n      var s = this.stream;\n      this.parseArray(s.getUint32.bind(s));\n    } }, { key: \"parseDoubleArray\", value: function parseDoubleArray()\n\n    {\n      var s = this.stream;\n      this.parseArray(s.getFloat64.bind(s));\n    } }, { key: \"parseByteArray\", value: function parseByteArray()\n\n    {\n      var s = this.stream;\n      this.parseArray(s.getUint8.bind(s));\n    } }, { key: \"parseVarintArray\", value: function parseVarintArray()\n\n    {\n      var s = this.stream;\n      this.parseArray(s.getVarints.bind(s));\n    } }, { key: \"parseInt\", value: function parseInt()\n\n    {\n      var sema = this.stream.getVarints();\n      var val = this.stream.getUint32();\n      switch (sema) {\n        case F2dSemanticType.st_fill:\n          this.fillColor = val;\n          break;}\n\n\n      return val;\n    } }, { key: \"parseFloat\", value: function parseFloat()\n\n    {\n      this.stream.getVarints();\n      this.stream.getFloat32();\n    } }, { key: \"parseVoid\", value: function parseVoid()\n\n    {\n      var sema = this.stream.getVarints();\n      switch (sema) {\n        case F2dSemanticType.st_fill_off:\n          this.fillColor = null;\n          break;}\n\n    } }, { key: \"parseVarint\", value: function parseVarint()\n\n    {\n      var s = this.stream;\n      var semantic_type = s.getVarints();\n      var val = s.getVarints();\n\n      switch (semantic_type) {\n        case F2dSemanticType.st_object_id:\n        case F2dSemanticType.st_markup_id:\n          this.dbId = val;\n          this.maxDbId = Math.max(this.maxDbId, val);\n          break;\n        default:\n          break;}\n\n    } }, { key: \"parseCircularArc\", value: function parseCircularArc()\n\n    {\n      var s = this.stream;\n      var sema = s.getVarints();\n      if (this.parserAssert(sema, F2dSemanticType.st_arc, \"parseCircularArc\"))\n      return;\n\n      var point = this.parsePointPositions();\n      var major = s.getVarints();\n      var start = s.getFloat32();\n      var end = s.getFloat32();\n\n      this.actOnCircularArc(point[0], point[1], start, end, this.sx(major));\n    } }, { key: \"parseCircle\", value: function parseCircle()\n\n    {\n      var s = this.stream;\n      var sema = s.getVarints();\n      if (this.parserAssert(sema, F2dSemanticType.st_arc, \"parseCircle\")) return;\n\n      var point = this.parsePointPositions();\n      var major = s.getVarints();\n\n      this.actOnCompleteCircle(point[0], point[1], this.sx(major));\n    } }, { key: \"parseArc\", value: function parseArc()\n\n    {\n      var s = this.stream;\n      var sema = s.getVarints();\n      if (this.parserAssert(sema, F2dSemanticType.st_arc, \"parseArc\")) return;\n\n      // Relative positions.\n      var point = this.parsePointPositions();\n\n      var major = s.getVarints();\n      var minor = s.getVarints();\n\n      var rotation = s.getFloat32();\n      var start = s.getFloat32();\n      var end = s.getFloat32();\n\n      this.actOnArc(\n      point[0],\n      point[1],\n      start,\n      end,\n      this.sx(major),\n      this.sy(minor),\n      rotation);\n\n    }\n\n    // ================= Semantic Analysis Pass ======================//\n  }, { key: \"actOnPolylinePointsArray\", value: function actOnPolylinePointsArray(points) {\n      this.geometry.addPolyLine(points, this.fillColor, this.dbId);\n    } }, { key: \"actOnDot\", value: function actOnDot(\n\n    x, y) {\n      this.actOnCompleteCircle(x, y, this.sx(1));\n    } }, { key: \"actOnCompleteCircle\", value: function actOnCompleteCircle(\n\n    cx, cy, radius) {\n      // Relative positions.\n      this.geometry.addCircularArc(\n      cx,\n      cy,\n      /*major*/radius,\n      0,\n      2 * Math.PI,\n      this.dbId);\n\n    } }, { key: \"actOnCircularArc\", value: function actOnCircularArc(\n\n    cx, cy, start, end, radius) {\n      this.geometry.addCircularArc(\n      cx,\n      cy,\n      /*major*/radius,\n      start,\n      end,\n      this.dbId);\n\n    } }, { key: \"actOnArc\", value: function actOnArc(\n\n    cx, cy, start, end, major, minor) {\n      this.geometry.addEllipticalArc(cx, cy, start, end, major, minor, this.dbId);\n    } }, { key: \"actOnPolyTriangle\", value: function actOnPolyTriangle()\n\n    {\n      logger.warn(\"Polytriangles not currently supported.\");\n      return;\n    } }]);return F2DGeometry;}();","\n\"use strict\";\n\nimport { CheckedInputStream } from \"./CheckedInputStream\";\nimport { F2dDataType, F2dSemanticType } from \"./F2d\";\nimport { errorCodeString, ErrorCodes } from \"../../net/ErrorCodes\";\nimport { logger } from \"../../../logger/Logger\";\n\nexport function F2DProbe() {\n  this.data = null;\n  this.frameStart = 0;\n  this.frameEnd = 0;\n  this.stream = null;\n  this.opCount = 0;\n  this.marker = { frameStart: this.frameStart,\n    frameEnd: this.frameEnd };\n}\n\nF2DProbe.prototype.load = function (data) {\n  this.data = data;\n  this.frameStart = 0;\n\n  if (!this.stream) {\n    this.stream = new CheckedInputStream(this.data);\n    // Skip headers.\n    this.stream.seek(8);\n    this.frameStart = 8;\n    this.frameEnd = 8;\n  } else\n  {\n    this.stream.reset(this.data);\n    this.stream.seek(0);\n    this.frameEnd = 0;\n  }\n\n  this.probe();\n  this.marker.frameStart = this.frameStart;\n  this.marker.frameEnd = this.frameEnd;\n  return this.marker;\n};\n\nvar F2dProbeDataType = F2dDataType;\nvar F2dProbeSemanticType = F2dSemanticType;\n\nF2DProbe.prototype.readColor = function () {\n  var s = this.stream;\n  s.getVarints(); // data type : dt_int 3\n  s.getVarints(); // semantic type : st_object_member 0\n  s.skipUint32(); // color\n};\n\nF2DProbe.prototype.parsePointPositions = function () {\n  this.stream.getVarints();\n  this.stream.getVarints();\n};\n\nF2DProbe.prototype.unhandledTypeWarning = function (inFunction, semanticType) {\n  logger.warn(\"Unhandled semantic type when probing F2d : \" + semanticType + \" in function \" + inFunction);\n};\n\nF2DProbe.prototype.parseObject = function () {\n  /*var semantic_type =*/this.stream.getVarints();\n  //debug(\"object parsing : type\" + semantic_type);\n};\n\n\nF2DProbe.prototype.parseString = function () {\n  var s = this.stream;\n  s.getVarints();\n  var len = s.getVarints();\n  s.skipBytes(len);\n};\n\nF2DProbe.prototype.parsePoint = function () {\n  this.stream.getVarints();\n  this.parsePointPositions();\n};\n\nF2DProbe.prototype.parseVarintArray = function () {\n  var s = this.stream;\n  s.getVarints();\n\n  var count = s.getVarints();\n  for (var i = 0; i < count; ++i) {\n    s.getVarints();}\n};\n\nF2DProbe.prototype.parseByteArray = function () {\n  var s = this.stream;\n  s.getVarints();\n  var count = s.getVarints();\n  s.skipBytes(count);\n};\n\nF2DProbe.prototype.parseEndOfObject = function () {\n  var s = this.stream;\n  s.getVarints();\n  s.getVarints();\n};\n\nF2DProbe.prototype.parsePointsArray = function (context) {\n  var s = this.stream;\n  var sema = s.getVarints();\n  var count = s.getVarints(); // number of coordinates * 2\n  if (!count) return;\n  count = count / 2;\n  for (var i = 0; i < count; ++i) {\n    this.parsePointPositions();}\n};\n\nF2DProbe.prototype.parsePoint = function (context) {\n  var s = this.stream;\n  var sema = s.getVarints();\n  this.parsePointPositions();\n};\n\nF2DProbe.prototype.parseInt = function () {\n  var s = this.stream;\n  var sema = s.getVarints();\n\n  switch (sema) {\n    case F2dProbeSemanticType.st_color:\n      s.skipUint32();\n      break;\n    case F2dProbeSemanticType.st_fill:{\n        s.skipUint32();\n        break;\n      }\n    default:\n      s.skipUint32();\n      this.unhandledTypeWarning('parseInt', sema);\n      break;}\n\n};\n\nF2DProbe.prototype.parseVoid = function () {\n  var sema = this.stream.getVarints();\n  switch (sema) {\n    case F2dProbeSemanticType.st_fill_off:\n      break;\n    default:\n      this.unhandledTypeWarning('parseVoid', sema);\n      break;}\n\n};\n\nF2DProbe.prototype.parseVarint = function () {\n  this.stream.getVarints();\n  this.stream.getVarints();\n};\n\nF2DProbe.prototype.parseIntArray = function () {\n  var s = this.stream;\n  s.getVarints();\n  var count = s.getVarints();\n  for (var i = 0; i < count; ++i) {\n    s.skipUint32();}\n};\n\nF2DProbe.prototype.parseFloat = function () {\n  var s = this.stream;\n  s.getVarints();\n  s.getFloat32();\n};\n\nF2DProbe.prototype.parseDoubleArray = function () {\n  var s = this.stream;\n  s.getVarints();\n  var count = s.getVarints();\n  for (var i = 0; i < count; ++i) {\n    s.skipFloat64();}\n};\n\nF2DProbe.prototype.parseCircularArc = function () {\n  var s = this.stream;\n  s.getVarints();\n  this.parsePointPositions();\n  s.getVarints();\n  s.getFloat32();\n  s.getFloat32();\n};\n\nF2DProbe.prototype.parseCircle = function () {\n  var s = this.stream;\n  s.getVarints();\n  this.parsePointPositions();\n  s.getVarints();\n};\n\nF2DProbe.prototype.parseArc = function () {\n  var s = this.stream;\n  s.getVarints();\n  this.parsePointPositions();\n  s.getVarints();\n  s.getVarints();\n  s.getFloat32();\n  s.getFloat32();\n  s.getFloat32();\n};\n\nF2DProbe.prototype.parseDataType = function () {\n  var data_type = this.stream.getVarints();\n\n  switch (data_type) {\n    case F2dProbeDataType.dt_void:\n      this.parseVoid();\n      break;\n    case F2dProbeDataType.dt_int:\n      this.parseInt();\n      break;\n    case F2dProbeDataType.dt_object:\n      this.parseObject();\n      break;\n    case F2dProbeDataType.dt_varint:\n      this.parseVarint();\n      break;\n    case F2dProbeDataType.dt_float:\n      this.parseFloat();\n      break;\n    case F2dProbeDataType.dt_point_varint:\n      this.parsePoint();\n      break;\n    case F2dProbeDataType.dt_point_varint_array:\n      this.parsePointsArray();\n      break;\n    case F2dProbeDataType.dt_circular_arc:\n      this.parseCircularArc();\n      break;\n    case F2dProbeDataType.dt_circle:\n      this.parseCircle();\n      break;\n    case F2dProbeDataType.dt_arc:\n      this.parseArc();\n      break;\n    case F2dProbeDataType.dt_varint_array:\n      this.parseVarintArray();\n      break;\n    case F2dProbeDataType.dt_int_array:\n      this.parseIntArray();\n      break;\n    case F2dProbeDataType.dt_byte_array:\n      this.parseByteArray();\n      break;\n    case F2dProbeDataType.dt_string:\n      this.parseString();\n      break;\n    case F2dProbeDataType.dt_double_array:\n      this.parseDoubleArray();\n      break;\n    default:\n      this.error = true;\n      logger.error(\"Bad op code encountered : \" + data_type + \" , bail out.\", errorCodeString(ErrorCodes.BAD_DATA));\n      break;}\n\n\n  if (!this.error)\n  this.frameEnd = this.stream.offset;\n};\n\nF2DProbe.prototype.probe = function () {\n  var stream = this.stream;\n  var error = false;\n\n  try {\n    while (stream.offset < stream.byteLength) {\n      this.parseDataType();\n      if (this.error) {\n        break;\n      }\n      this.opCount++;\n    }\n  } catch (exc) {\n    // Typically caused by out of bounds access of data.\n    var message = exc.toString();\n    var stack = exc.stack ? exc.stack.toString() : \"...\";\n\n    // Don't panic with this - we are supposed to hit out of bounds a couple of times when probing.\n    //debug(\"Error in F2DProbe.prototype.probe : \" + message + \" with stack : \" + stack);\n  }\n};","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}function _slicedToArray(arr, i) {return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();}function _nonIterableRest() {throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === \"Object\" && o.constructor) n = o.constructor.name;if (n === \"Map\" || n === \"Set\") return Array.from(o);if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}function _iterableToArrayLimit(arr, i) {if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;var _arr = [];var _n = true;var _d = false;var _e = undefined;try {for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {_arr.push(_s.value);if (i && _arr.length === i) break;}} catch (err) {_d = true;_e = err;} finally {try {if (!_n && _i[\"return\"] != null) _i[\"return\"]();} finally {if (_d) throw _e;}}return _arr;}function _arrayWithHoles(arr) {if (Array.isArray(arr)) return arr;}var createEllipticalCurveData = function createEllipticalCurveData(\ncenter,\nmajorAxis,\nminorAxis,\ntiltInRadians,\nstartInRadians,\nendInRadians,\ndbId) {return (\n    {\n      ellipse: {\n        center: center,\n        majorAxis: majorAxis,\n        minorAxis: minorAxis,\n        tiltInRadians: tiltInRadians },\n\n      startInRadians: startInRadians,\n      endInRadians: endInRadians,\n      dbId: dbId });};\n\n\nvar createCircularCurveData = function createCircularCurveData(\ncenter,\nradius,\nstartInRadians,\nendInRadians,\ndbId) {return (\n    {\n      type: \"circularCurve\",\n      circle: {\n        center: center,\n        radius: radius },\n\n      startInRadians: startInRadians,\n      endInRadians: endInRadians,\n      dbId: dbId });};\n\n\nvar createPolyLineData = function createPolyLineData(vertices, fillColor, dbId) {return {\n    type: \"polyLine\",\n    vertices: vertices,\n    fillColor: fillColor,\n    dbId: dbId };};\n\n\nvar createTriangleData = function createTriangleData(_ref, dbId) {var _ref2 = _slicedToArray(_ref, 3),point1 = _ref2[0],point2 = _ref2[1],point3 = _ref2[2];return {\n    type: \"triangle\",\n    point1: point1,\n    point2: point2,\n    point3: point3,\n    dbId: dbId };};\n\n\nvar createLineSegmentData = function createLineSegmentData(from, to, dbId) {return {\n    type: \"lineSegment\",\n    from: from,\n    to: to,\n    dbId: dbId };};\n\n\nexport var GeometryBuilder = /*#__PURE__*/function () {\n  function GeometryBuilder() {_classCallCheck(this, GeometryBuilder);\n    this.numPolyLine = 0;\n    this.numEllipticals = 0;\n    this.numCirculars = 0;\n    this.numSegments = 0;\n    this.geometries = [];\n  }_createClass(GeometryBuilder, [{ key: \"addPolyLine\", value: function addPolyLine(\n\n    flatPoints, fillColor, dbId) {\n\n      this.numPolyLine++;\n      var count = flatPoints.length / 2;\n      var points = [];\n      for (var i = 0; i < count; i++) {\n        points.push({ x: flatPoints[2 * i], y: flatPoints[2 * i + 1] });\n      }\n      var polyLine = createPolyLineData(points, fillColor, dbId);\n      this.geometries.push(polyLine);\n    } }, { key: \"addSegment\", value: function addSegment(\n\n    to, from, dbId) {\n      this.numSegments++;\n      var lineSegment = createLineSegmentData(to, from, dbId);\n      this.geometries.push(lineSegment);\n    } }, { key: \"addCircularArc\", value: function addCircularArc(\n\n    cx, cy, radius, start, end, dbId) {\n      this.numCirculars++;\n\n      var circularArc = createCircularCurveData(\n      [cx, cy],\n      radius,\n      start,\n      end,\n      dbId);\n\n      this.geometries.push(circularArc);\n    } }, { key: \"addEllipticalArc\", value: function addEllipticalArc(\n\n    cx, cy, start, end, majorRadius, minorRadius, dbId) {\n      this.numEllipticals++;\n      var circularArc = createEllipticalCurveData(\n      [cx, cy],\n      majorRadius,\n      minorRadius,\n      start,\n      end,\n      dbId);\n\n      this.geometries.push(circularArc);\n    } }]);return GeometryBuilder;}();","function _typeof(obj) {\"@babel/helpers - typeof\";if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);} /*! https://mths.be/base64 v<%= version %> by @mathias | MIT license */\n;(function (root) {\n\n  // Detect free variables `exports`.\n  var freeExports = (typeof exports === \"undefined\" ? \"undefined\" : _typeof(exports)) == 'object' && exports;\n\n  // Detect free variable `module`.\n  var freeModule = (typeof module === \"undefined\" ? \"undefined\" : _typeof(module)) == 'object' && module &&\n  module.exports == freeExports && module;\n\n  // Detect free variable `global`, from Node.js or Browserified code, and use\n  // it as `root`.\n  var freeGlobal = (typeof global === \"undefined\" ? \"undefined\" : _typeof(global)) == 'object' && global;\n  if (freeGlobal.global === freeGlobal || freeGlobal.window === freeGlobal) {\n    root = freeGlobal;\n  }\n\n  /*--------------------------------------------------------------------------*/\n\n  var InvalidCharacterError = function InvalidCharacterError(message) {\n    this.message = message;\n  };\n  InvalidCharacterError.prototype = new Error();\n  InvalidCharacterError.prototype.name = 'InvalidCharacterError';\n\n  var error = function error(message) {\n    // Note: the error messages used throughout this file match those used by\n    // the native `atob`/`btoa` implementation in Chromium.\n    throw new InvalidCharacterError(message);\n  };\n\n  var TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n  // http://whatwg.org/html/common-microsyntaxes.html#space-character\n  var REGEX_SPACE_CHARACTERS = /<%= spaceCharacters %>/g;\n\n  // `decode` is designed to be fully compatible with `atob` as described in the\n  // HTML Standard. http://whatwg.org/html/webappapis.html#dom-windowbase64-atob\n  // The optimized base64-decoding algorithm used is based on @atk’s excellent\n  // implementation. https://gist.github.com/atk/1020396\n  var decode = function decode(input) {\n    input = String(input).\n    replace(REGEX_SPACE_CHARACTERS, '');\n    var length = input.length;\n    if (length % 4 == 0) {\n      input = input.replace(/==?$/, '');\n      length = input.length;\n    }\n    if (\n    length % 4 == 1 ||\n    // http://whatwg.org/C#alphanumeric-ascii-characters\n    /[^+a-zA-Z0-9/]/.test(input))\n    {\n      error(\n      'Invalid character: the string to be decoded is not correctly encoded.');\n\n    }\n    var bitCounter = 0;\n    var bitStorage;\n    var buffer;\n    var output = '';\n    var position = -1;\n    while (++position < length) {\n      buffer = TABLE.indexOf(input.charAt(position));\n      bitStorage = bitCounter % 4 ? bitStorage * 64 + buffer : buffer;\n      // Unless this is the first of a group of 4 characters…\n      if (bitCounter++ % 4) {\n        // …convert the first 8 bits to a single ASCII character.\n        output += String.fromCharCode(\n        0xFF & bitStorage >> (-2 * bitCounter & 6));\n\n      }\n    }\n    return output;\n  };\n\n  // `encode` is designed to be fully compatible with `btoa` as described in the\n  // HTML Standard: http://whatwg.org/html/webappapis.html#dom-windowbase64-btoa\n  var encode = function encode(input) {\n    input = String(input);\n    if (/[^\\0-\\xFF]/.test(input)) {\n      // Note: no need to special-case astral symbols here, as surrogates are\n      // matched, and the input is supposed to only contain ASCII anyway.\n      error(\n      'The string to be encoded contains characters outside of the ' +\n      'Latin1 range.');\n\n    }\n    var padding = input.length % 3;\n    var output = '';\n    var position = -1;\n    var a;\n    var b;\n    var c;\n    var d;\n    var buffer;\n    // Make sure any padding is handled outside of the loop.\n    var length = input.length - padding;\n\n    while (++position < length) {\n      // Read three bytes, i.e. 24 bits.\n      a = input.charCodeAt(position) << 16;\n      b = input.charCodeAt(++position) << 8;\n      c = input.charCodeAt(++position);\n      buffer = a + b + c;\n      // Turn the 24 bits into four chunks of 6 bits each, and append the\n      // matching character for each of them to the output.\n      output +=\n      TABLE.charAt(buffer >> 18 & 0x3F) +\n      TABLE.charAt(buffer >> 12 & 0x3F) +\n      TABLE.charAt(buffer >> 6 & 0x3F) +\n      TABLE.charAt(buffer & 0x3F);\n\n    }\n\n    if (padding == 2) {\n      a = input.charCodeAt(position) << 8;\n      b = input.charCodeAt(++position);\n      buffer = a + b;\n      output +=\n      TABLE.charAt(buffer >> 10) +\n      TABLE.charAt(buffer >> 4 & 0x3F) +\n      TABLE.charAt(buffer << 2 & 0x3F) +\n      '=';\n\n    } else if (padding == 1) {\n      buffer = input.charCodeAt(position);\n      output +=\n      TABLE.charAt(buffer >> 2) +\n      TABLE.charAt(buffer << 4 & 0x3F) +\n      '==';\n\n    }\n\n    return output;\n  };\n\n  var base64 = {\n    'encode': encode,\n    'decode': decode,\n    'version': '<%= version %>' };\n\n\n  // Some AMD build optimizers, like r.js, check for specific condition patterns\n  // like the following:\n  if (\n  typeof define == 'function' &&\n  _typeof(define.amd) == 'object' &&\n  define.amd)\n  {\n    define(function () {\n      return base64;\n    });\n  } else if (freeExports && !freeExports.nodeType) {\n    if (freeModule) {// in Node.js or RingoJS v0.8.0+\n      freeModule.exports = base64;\n    } else {// in Narwhal or RingoJS v0.7.0-\n      for (var key in base64) {\n        base64.hasOwnProperty(key) && (freeExports[key] = base64[key]);\n      }\n    }\n  } else {// in Rhino or a web browser\n    root.base64 = base64;\n  }\n\n})(this);","function _typeof(obj) {\"@babel/helpers - typeof\";if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {_typeof = function _typeof(obj) {return typeof obj;};} else {_typeof = function _typeof(obj) {return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;};}return _typeof(obj);}import { VBUtils } from '../common/VbUtils';\nimport { LmvVector3 } from '../../../wgs/scene/LmvVector3';\nimport { LmvBox3 } from '../../../wgs/scene/LmvBox3';\nimport { LmvMatrix4 } from '../../../wgs/scene/LmvMatrix4';\nimport { ViewingService } from \"../../net/Xhr\";\n\n/*\n                                                 * base64-arraybuffer\n                                                 * https://github.com/niklasvh/base64-arraybuffer\n                                                 *\n                                                 * Copyright (c) 2012 Niklas von Hertzen\n                                                 * Licensed under the MIT license.\n                                                 */\n\nvar chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/\";\n\n// Use a lookup table to find the index.\nvar lookup = new Uint8Array(256);\nfor (var i = 0; i < chars.length; i++) {\n  lookup[chars.charCodeAt(i)] = i;\n}\n\n// currently base64_encode is not used.\n/*\nvar base64_encode = function(arraybuffer) {\n  var bytes = new Uint8Array(arraybuffer),\n  i, len = bytes.length, base64 = \"\";\n   for (i = 0; i < len; i+=3) {\n    base64 += chars[bytes[i] >> 2];\n    base64 += chars[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];\n    base64 += chars[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];\n    base64 += chars[bytes[i + 2] & 63];\n  }\n   if ((len % 3) === 2) {\n    base64 = base64.substring(0, base64.length - 1) + \"=\";\n  } else if (len % 3 === 1) {\n    base64 = base64.substring(0, base64.length - 2) + \"==\";\n  }\n   return base64;\n};\n*/\n\n\n\n\nvar base64_decode = function base64_decode(base64) {\n  var bufferLength = base64.length * 0.75,\n  len = base64.length,i,p = 0,\n  encoded1,encoded2,encoded3,encoded4;\n\n  if (base64[base64.length - 1] === \"=\") {\n    bufferLength--;\n    if (base64[base64.length - 2] === \"=\") {\n      bufferLength--;\n    }\n  }\n\n  var arraybuffer = new ArrayBuffer(bufferLength),\n  bytes = new Uint8Array(arraybuffer);\n\n  for (i = 0; i < len; i += 4) {\n    encoded1 = lookup[base64.charCodeAt(i)];\n    encoded2 = lookup[base64.charCodeAt(i + 1)];\n    encoded3 = lookup[base64.charCodeAt(i + 2)];\n    encoded4 = lookup[base64.charCodeAt(i + 3)];\n\n    bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n    bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n    bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n  }\n\n  return arraybuffer;\n};\n\n\nfunction blobToJson(blob) {\n\n  var decodedString;\n\n  if ((typeof TextDecoder === \"undefined\" ? \"undefined\" : _typeof(TextDecoder)) !== undefined) {\n    decodedString = new TextDecoder(\"utf-8\").decode(blob);\n  } else\n  {\n    var encodedString = \"\";\n    for (var i = 0; i < blob.length; i++) {\n      encodedString += String.fromCharCode(blob[i]);}\n\n    decodedString = decodeURIComponent(escape(encodedString));\n  }\n\n  return JSON.parse(decodedString);\n}\n\n\nexport function GltfPackage(gltfJson) {\n\n  this.loadedBuffers = {};\n\n  //Check for binary glTF (glb)\n  if (gltfJson instanceof Uint8Array) {\n    var header = new Int32Array(gltfJson.buffer, 0, 20);\n    if (header[0] !== 0x46546C67) //['g', 'l', 'T', 'F'] in little endian\n      debug(\"glb header \" + header[0]);\n    var sceneLength = header[3];\n\n    var sceneBlob = new Uint8Array(gltfJson.buffer, 20, sceneLength);\n\n    //TODO: this is a bit lame, copies a large part of the ArrayBuffer,\n    //but the geometry parsing logic is made much easier this way, without\n    //having to keep track of a base offset to add when creating buffer views.\n    var binary_glTF = gltfJson.buffer.slice(20 + sceneLength);\n\n    gltfJson = blobToJson(sceneBlob);\n\n    this.loadedBuffers[\"binary_glTF\"] = binary_glTF;\n  }\n\n  this.gltf = gltfJson;\n  //NOTE: We will map the GltfPackage contents to a structure similar\n  //to an SVF package so that the rendering engine and viewer can work with it.\n\n  this.manifest = null;\n\n  this.metadata = this.gltf.asset || {}; //metadata json\n  this.metadata.gltf = this.metadata.version || 1;\n\n  this.materials = this.gltfMaterials = {\n    name: \"GLTF Materials\",\n    version: \"1.0\",\n    scene: {\n      \"SceneUnit\": \"m\" },\n\n    materials: {} };\n  //The materials jsons from the GLTF, reindexed\n\n  this.materialToIndex = {};\n  this.materialList = [];\n\n  this.geomToIndex = {};\n  this.geomList = [];\n  this.geomsLoaded = 0;\n\n  this.fragments = {\n    length: 0,\n    numLoaded: 0,\n    boxes: null,\n    transforms: null,\n    materials: null,\n\n    fragId2dbId: null,\n    entityIndexes: null,\n    mesh2frag: {} };\n\n\n  this.geompacks = [];\n\n  this.instances = [];\n\n  this.cameras = [];\n  this.lights = [];\n\n  this.bbox = null; //Overall scene bounds\n\n  this.animations = null; // animations json\n\n  this.pendingRequests = 0;\n\n  this.globalOffset = { x: 0, y: 0, z: 0 };\n  this.bbox = new LmvBox3();\n\n  this.nodeToDbId = {};\n  this.nextDbId = 1;\n  this.nextFragId = 0;\n\n}\n\n\nvar BASE64_PREFIX = \"data:application/octet-stream;base64,\";\n\n//Lists all dependent files, so that their paths can be converted\n//to e.g. signed links by the manifest interceptor before they are loaded.\nGltfPackage.prototype.loadManifest = function (loadContext) {\n\n  var manifestTemplate = {\n    \"name\": \"LMV Manifest\",\n    \"toolkitversion\": \"LMVTK 2.6.4\",\n    \"manifestversion\": 2,\n    \"adskID\": {\n      \"sourceSystem\": \"\",\n      \"type\": \"\",\n      \"id\": \"\",\n      \"version\": \"\" },\n\n    \"assets\": [],\n    \"typesets\": [] };\n\n\n  this.manifest = manifestTemplate;\n\n  var buffers = this.gltf.buffers;\n\n  for (var bid in buffers) {\n\n    //Is it the embedded glb buffer? Skip it, it needs no URI remapping.\n    if (bid === \"binary_glTF\")\n    continue;\n\n    var buffer = buffers[bid];\n\n    //Base64 embedded buffers, decode\n    //and store in loaded buffers array.\n    if (buffer.uri.indexOf(BASE64_PREFIX) === 0) {\n      this.loadedBuffers[bid] = base64_decode(buffer.uri.slice(BASE64_PREFIX.length));\n      buffer.uri = \"embed://\" + bid;\n      continue;\n    }\n\n    var asset = {\n      id: bid,\n      URI: buffer.uri,\n      uri: buffer.uri,\n      usize: buffer.byteLength,\n      type: buffer.type };\n\n\n    this.manifest.assets.push(asset);\n  }\n\n  var images = this.gltf.images;\n\n  for (var iid in images) {\n\n    var image = images[iid];\n\n    var _asset = {\n      id: iid,\n      URI: image.uri,\n      uri: image.uri,\n      name: image.name,\n      type: \"image\" //just so we can differentiate it from the geom buffers\n    };\n\n    this.manifest.assets.push(_asset);\n  }\n\n  //TODO: Process any other externally referenced assets that we want to support\n\n};\n\n\nGltfPackage.prototype.loadRemainingSvf = function (loadContext) {\n\n  //In case it was modified by the path interceptor\n  if (loadContext.manifest)\n  this.manifest = loadContext.manifest;\n\n  //It's more convenient to find assets by their ids\n  //when dealing with gltf.\n  this.manifest.assetMap = {};\n  for (var i = 0; i < this.manifest.assets.length; i++) {\n    var a = this.manifest.assets[i];\n    this.manifest.assetMap[a.id] = a;\n  }\n\n  this.processMeshesList();\n  this.processMaterialsList();\n\n  this.deriveInstanceTree();\n\n  loadContext.loadDoneCB(\"svf\");\n\n  //Call the callback for any buffers that were embedded in the gltf,\n  //before loading the external ones.\n  for (var b in this.loadedBuffers) {\n    this.loadGeometry(loadContext, b);\n  }\n\n  this.loadBuffers(loadContext);\n\n};\n\nGltfPackage.prototype.loadBuffers = function (loadContext) {\n\n  //Launch an XHR to load the data from external file\n  var svf = this;\n\n  var bufList = [];\n  var assets = this.manifest.assets;\n  for (var i = 0; i < assets.length; i++) {\n    if (assets[i].type !== \"image\")\n    bufList.push(assets[i]);\n  }\n\n  var currentRequest = -1;\n\n  function xhrCB(responseData) {\n\n    if (currentRequest < bufList.length - 1) {\n      var nextBuf = bufList[currentRequest + 1];\n\n      var options = {\n        responseType: nextBuf.type || 'arraybuffer' };\n\n\n      ViewingService.getItem(\n      loadContext,\n      loadContext.basePath + nextBuf.URI,\n      xhrCB,\n      loadContext.onFailureCallback,\n      options);\n\n    }\n\n    if (responseData) {\n      var curBuf = bufList[currentRequest];\n      svf.loadedBuffers[curBuf.id] = responseData.buffer; //Get the ArrayBuffer out of the Uint8Array returned by the ViewingService.getItem\n      svf.loadGeometry(loadContext, curBuf.id);\n    }\n\n    currentRequest++;\n\n  }\n\n  xhrCB(null);\n\n};\n\nvar COMPONENT_TO_BYTES = {\n  \"5120\": 1, //BYTE\n  \"5121\": 1, //UNSIGNED_BYTE\n  \"5122\": 2, //SHORT\n  \"5123\": 2, //UNSIGNED_SHORT\n  \"5124\": 4, //INT\n  \"5125\": 4, //UNSIGNED_INT\n  \"5126\": 4 //FLOAT\n};\n\nvar TYPE_TO_SIZE = {\n  \"SCALAR\": 1,\n  \"VEC2\": 2,\n  \"VEC3\": 3,\n  \"VEC4\": 4 };\n\n\n\nvar _tmpfbuf = new Float32Array(1);\nvar _tmpbbuf = new Uint8Array(_tmpfbuf.buffer);\n\nfunction extractFloat(bbuf, offset) {\n  _tmpbbuf[0] = bbuf[offset];\n  _tmpbbuf[1] = bbuf[offset + 1];\n  _tmpbbuf[2] = bbuf[offset + 2];\n  _tmpbbuf[3] = bbuf[offset + 3];\n  return _tmpfbuf[0];\n}\n\n//Constructs all meshes that use the buffer\n//that was just loaded\n//NOTE: This loader pulls out all attributes for a mesh from a possibly\n//large shared buffer and interleaves them into a per-mesh vertex buffer\n//for each mesh. This fits better with the architecture of the LMV renderer\n//right now. But, in the future, things could be refactored so that the GL\n//buffers are managed separately from the meshes, and the meshes are pointing\n//into larger shared buffers.\nGltfPackage.prototype.loadGeometry = function (loadContext, bufferId) {\n\n  var buffer = this.gltf.buffers[bufferId];\n  var meshIds = buffer.meshes;\n  var scope = this;\n\n  function checkIfBufferAvailable(accessorId) {\n    var accessor = scope.gltf.accessors[accessorId];\n    var bvId = accessor.bufferView;\n    if (bvId) {\n      var bufferId = scope.gltf.bufferViews[bvId].buffer;\n      if (bufferId) {\n        return !!scope.loadedBuffers[bufferId];\n      }\n    }\n    return false;\n  }\n\n  for (var meshIdx = 0; meshIdx < meshIds.length; meshIdx++) {\n\n    var mesh = this.gltf.meshes[meshIds[meshIdx]];\n    var prims = mesh.primitives;\n\n    var usePackedNormals = typeof loadContext.packNormals !== \"undefined\" ? loadContext.packNormals : true;\n\n    for (var primIdx = 0; primIdx < prims.length; primIdx++) {\n\n      var prim = prims[primIdx];\n\n      var mesh = {\n        vblayout: {},\n        vbstride: 0,\n        packedNormals: usePackedNormals };\n\n\n      var canLoad = true;\n      if (prim.indices) {\n        canLoad = canLoad && checkIfBufferAvailable(prim.indices);\n        if (canLoad) {\n          var inds = scope.gltf.accessors[prim.indices];\n          mesh.triangleCount = inds.count / 3;\n          var stride = inds.byteStride;\n          var componentSize = 2;\n\n          var bv = scope.gltf.bufferViews[inds.bufferView];\n          var byteOffset = inds.byteOffset + bv.byteOffset;\n          var buffer = scope.loadedBuffers[bv.buffer];\n          var src, dst;\n\n          if (inds.componentType === 5123) {\n            dst = mesh.indices = new Uint16Array(inds.count);\n            componentSize = 2;\n            src = new Uint16Array(buffer);\n          } else\n          if (inds.componentType === 5125) {\n            dst = mesh.indices = new Uint32Array(inds.count);\n            componentSize = 4;\n            src = new Uint32Array(buffer);\n          } else\n            // other unimplemented types\n            debug(\"Unimplemented component type for index buffer\");\n\n          var srcOffset = byteOffset / componentSize;\n\n          if (stride === 0)\n          stride = 1;else\n\n          stride /= componentSize;\n\n          for (var i = 0; i < inds.count; i++) {\n            dst[i] = src[srcOffset + i * stride];\n          }\n        }\n      }\n\n      var offset = 0;\n      for (var a in prim.attributes) {\n        canLoad = canLoad && checkIfBufferAvailable(prim.attributes[a]);\n        var attr = scope.gltf.accessors[prim.attributes[a]];\n\n        if (canLoad) {\n          if (a === \"NORMAL\") {\n            mesh.vbstride += usePackedNormals ? 1 : 3;\n\n            mesh.vblayout['normal'] = { offset: offset,\n              itemSize: usePackedNormals ? 2 : 3,\n              bytesPerItem: usePackedNormals ? 2 : 4,\n              normalize: usePackedNormals };\n\n            offset += usePackedNormals ? 1 : 3;\n\n          } else\n          {\n            var attrName = a;\n\n            if (a === \"POSITION\") {\n              attrName = \"position\";\n              mesh.vertexCount = attr.count;\n            } else if (a.indexOf(\"TEXCOORD\") === 0) {\n              var uvIdx = parseInt(a.split(\"_\")[1]);\n              attrName = \"uv\" + (uvIdx || \"\");\n            } else if (a.indexOf(\"COLOR\") === 0) {\n              attrName = \"color\";\n            }\n\n            var byteSize = COMPONENT_TO_BYTES[attr.componentType] * TYPE_TO_SIZE[attr.type];\n            mesh.vbstride += byteSize / 4;\n\n            mesh.vblayout[attrName] = { offset: offset,\n              itemSize: TYPE_TO_SIZE[attr.type],\n              bytesPerItem: COMPONENT_TO_BYTES[attr.componentType],\n              normalize: false };\n\n\n            offset += byteSize / 4;\n          }\n        }\n\n      }\n\n      //Now that we know how big of a vertex buffer we need, make one, and\n      //go over the attributes again to copy their data from the glTF buffer\n      //into the mesh vertex buffer\n      if (canLoad) {\n        var vbf = mesh.vb = new Float32Array(mesh.vertexCount * mesh.vbstride);\n        //See if we want to pack the normals into two shorts\n        var vbi;\n        if (usePackedNormals)\n        vbi = new Uint16Array(mesh.vb.buffer);\n\n        for (var a in prim.attributes) {\n          var attr = scope.gltf.accessors[prim.attributes[a]];\n          var bv = scope.gltf.bufferViews[attr.bufferView];\n          var byteOffset = attr.byteOffset + bv.byteOffset;\n          var rawbuffer = new Uint8Array(scope.loadedBuffers[bv.buffer]);\n\n          if (a === \"NORMAL\") {\n            var lmvAttr = mesh.vblayout[\"normal\"];\n\n            if (attr.count != mesh.vertexCount)\n            debug(\"Normals count does not equal vertex count\");\n\n            //TODO: assumption that they're all floats...\n            var stride = attr.byteStride !== 0 ? attr.byteStride : bytesPerItem * TYPE_TO_SIZE[attr.type];\n            var srcIdx = byteOffset;\n            var offset = lmvAttr.offset;\n\n            for (var i = 0; i < mesh.vertexCount; i++, offset += mesh.vbstride) {\n              var nx = extractFloat(rawbuffer, srcIdx);\n              var ny = extractFloat(rawbuffer, srcIdx + 4);\n              var nz = extractFloat(rawbuffer, srcIdx + 8);\n\n              if (vbi) {\n                var pnx = (Math.atan2(ny, nx) / Math.PI + 1.0) * 0.5;\n                var pny = (nz + 1.0) * 0.5;\n\n                vbi[offset * 2] = pnx * 65535 | 0;\n                vbi[offset * 2 + 1] = pny * 65535 | 0;\n              } else {\n                vbf[offset] = nx;\n                vbf[offset + 1] = ny;\n                vbf[offset + 2] = nz;\n              }\n\n              srcIdx += stride;\n            }\n          } else\n          {\n            var attrName = a;\n\n            //Map common attribute names to ones used by LMV\n            if (a === \"POSITION\") {\n              attrName = \"position\";\n              mesh.vertexCount = attr.count;\n            } else if (a.indexOf(\"TEXCOORD\") === 0) {\n              var uvIdx = parseInt(a.split(\"_\")[1]);\n              attrName = \"uv\" + (uvIdx || \"\");\n            } else if (a.indexOf(\"COLOR\") === 0) {\n              attrName = \"color\";\n            }\n\n            var lmvAttr = mesh.vblayout[attrName];\n\n            var bytesPerItem = COMPONENT_TO_BYTES[attr.componentType];\n            var stride = attr.byteStride !== 0 ? attr.byteStride : bytesPerItem * TYPE_TO_SIZE[attr.type];\n            var src = new Uint8Array(rawbuffer);\n            var dst = new Uint8Array(vbf.buffer, lmvAttr.offset * 4);\n            var srcIdx = byteOffset;\n            var offset = 0;\n            for (var i = 0; i < mesh.vertexCount; i++) {\n\n              for (var j = 0; j < lmvAttr.itemSize * bytesPerItem; j++) {\n                dst[offset + j] = src[srcIdx + j];\n              }\n\n              offset += mesh.vbstride * bytesPerItem;\n              srcIdx += stride;\n            }\n          }\n\n          //If all meshes using this buffer are successfully loaded,\n          //free its array buffer from memory.\n          var gltfBuffer = scope.gltf.buffers[bv.buffer];\n          gltfBuffer.refCount--;\n          if (gltfBuffer.refCount === 0) {\n            delete scope.loadedBuffers[bv.buffer];\n          }\n        }\n\n        //Mesh is complete.\n        scope.geomsLoaded++;\n\n        VBUtils.computeBounds3D(mesh);\n\n        loadContext.loadDoneCB(\"mesh\", { mesh: mesh,\n\n          //Set these so that when SvfLoader adds them together\n          //it comes up with the IDs we use in the meshToFrag map.\n          packId: meshIds[meshIdx],\n          meshIndex: primIdx,\n\n          progress: scope.geomsLoaded / scope.geomList.length });\n      }\n    }\n\n  }\n\n  buffer.meshes = null;\n\n};\n\n//Converts materials to indexed list, for use in\n//the fragment list material indices array\nGltfPackage.prototype.processMaterialsList = function () {\n\n  var mats = this.gltf.materials;\n\n  for (var m in mats) {\n    var idx = this.materialList.length;\n    this.materialToIndex[m] = idx;\n    this.gltfMaterials.materials[idx] = mats[m];\n    this.materialList.push(m);\n  }\n\n};\n\nGltfPackage.prototype.processMeshesList = function () {\n\n  var meshes = this.gltf.meshes;\n  var scope = this;\n\n  function processAccessor(accessorId) {\n    var accessor = scope.gltf.accessors[accessorId];\n    var bvId = accessor.bufferView;\n    if (bvId) {\n      var bufferId = scope.gltf.bufferViews[bvId].buffer;\n      if (bufferId) {\n        var buffer = scope.gltf.buffers[bufferId];\n\n        //Keep track of how many buffer views are using this buffer.\n        //Once we load all of them, we will free it from memory\n        if (!buffer.refCount)\n        buffer.refCount = 1;else\n\n        buffer.refCount++;\n\n        //Keep track of meshes using a buffer. We will load those\n        //in a batch once a buffer file is loaded.\n        if (!buffer.meshes)\n        buffer.meshes = [];\n\n        if (!addedToBuffer) {\n          buffer.meshes.push(m);\n          addedToBuffer = true;\n        }\n      }\n    }\n  }\n\n  for (var m in meshes) {\n    var mesh = meshes[m];\n    var addedToBuffer = false;\n    for (var k = 0; k < mesh.primitives.length; k++) {\n      var entityId = m + \":\" + k;\n      this.geomToIndex[entityId] = this.geomList.length;\n      this.geomList.push(entityId);\n\n      var prim = mesh.primitives[k];\n\n      if (prim.indices) {\n        processAccessor(prim.indices);\n      }\n\n      for (var a in prim.attributes) {\n        processAccessor(prim.attributes[a]);\n      }\n    }\n  }\n\n  this.numGeoms = this.geomList.length;\n};\n\n\n//Pre-traversal of the node hierarchy to count how many fragments we will\n//need in the LMV fragment list\nGltfPackage.prototype.countFragments = function () {\n\n  var sceneName = this.gltf.scene;\n  var gltfRoot = this.gltf.scenes[sceneName];\n  var gltfNodes = this.gltf.nodes;\n\n  var numFrags = 0;\n\n  var scope = this;\n\n  function traverseNodes(gltfNode) {\n\n    var meshes = gltfNode.meshes;\n    if (gltfNode.meshes) {\n      for (var j = 0; j < meshes.length; j++) {\n        var prims = scope.gltf.meshes[meshes[j]].primitives;\n        for (var k = 0; k < prims.length; k++) {\n          numFrags++;\n        }\n      }\n    }\n\n    var children = gltfNode.children || gltfNode.nodes; //the root scene uses \"nodes\" instead of \"children\"\n    if (children) {\n      for (var i = 0; i < children.length; i++) {\n        var gltfChild = gltfNodes[children[i]];\n        traverseNodes(gltfChild);\n      }\n    }\n  }\n\n  traverseNodes(gltfRoot);\n\n  this.fragments.length = numFrags;\n  this.fragments.boxes = new Float32Array(6 * numFrags);\n  this.fragments.transforms = new Float32Array(12 * numFrags);\n  this.fragments.materials = new Int32Array(numFrags);\n  this.fragments.entityIndexes = new Int32Array(numFrags);\n  this.fragments.fragId2dbId = new Int32Array(numFrags);\n  this.fragments.packIds = new Int32Array(numFrags); //TODO: not used for gltf\n\n};\n\n//Create an instance tree similar to the one\n//that SVF gets from the property db\nGltfPackage.prototype.deriveInstanceTree = function () {\n\n  this.countFragments();\n\n  var sceneName = this.gltf.scene;\n  var gltfRoot = this.gltf.scenes[sceneName];\n  var gltfNodes = this.gltf.nodes;\n\n  this.instanceTree = {\n    name: sceneName,\n    dbId: this.nextDbId++,\n    children: [] };\n\n  this.nodeToDbId[sceneName] = this.instanceTree.dbId;\n\n  var nodeBoxes = [];\n  var maxDepth = 1;\n\n  var scope = this;\n  var fragments = this.fragments;\n  var tmpBox = new LmvBox3();\n\n  function traverseNodes(svfNode, gltfNode, worldTransform, depth) {\n\n    if (depth > maxDepth)\n    maxDepth = depth;\n\n    var currentTransform = worldTransform.clone();\n    // nodes can have a matrix transform, or a TRS type transform\n    if (gltfNode.matrix) {\n      var mtx = new LmvMatrix4(true);\n      mtx.fromArray(gltfNode.matrix);\n      currentTransform.multiply(mtx);\n    } else\n    {\n      var t = gltfNode.translation;\n      var r = gltfNode.rotation;\n      var s = gltfNode.scale;\n\n      // if none are defined, don't bother making the matrix -\n      // this may be a non-matrix-oriented node\n      if (t !== undefined || r !== undefined || s !== undefined) {\n\n        // Rotations are stored as quaternions in glTF. Here is a quick and dirty quaternion class.\n        // It's purely for storing the incoming data. We need this below to call the matrix.compose function.\n        // Feel free to make a whole separate LmvQuaternion.js file if you're doing serious quaternion work.\n        var Quat = function Quat(x, y, z, w) {\n\n          this.x = x || 0;\n          this.y = y || 0;\n          this.z = z || 0;\n          this.w = w || 0;\n\n        };\n\n        var position = t ? new LmvVector3(t[0], t[1], t[2]) :\n        new LmvVector3();\n        var rotation = r ? new Quat(r[0], r[1], r[2], r[3]) :\n        new Quat();\n        var scale = s ? new LmvVector3(s[0], s[1], s[2]) :\n        new LmvVector3(1, 1, 1);\n\n        var mtx = new LmvMatrix4(true);\n        mtx.compose(position, rotation, scale);\n        currentTransform.multiply(mtx);\n      }\n    }\n\n    var nodeBox = new LmvBox3();\n\n    var meshes = gltfNode.meshes;\n    if (gltfNode.meshes) {\n      svfNode.fragIds = [];\n      for (var j = 0; j < meshes.length; j++) {\n        var prims = scope.gltf.meshes[meshes[j]].primitives;\n        for (var k = 0; k < prims.length; k++) {\n\n          var entityId = meshes[j] + \":\" + k;\n          var fragId = scope.nextFragId++;\n\n          svfNode.fragIds.push(fragId);\n\n          fragments.fragId2dbId[fragId] = svfNode.dbId;\n\n          fragments.entityIndexes[fragId] = scope.geomToIndex[entityId];\n\n          if (!fragments.mesh2frag[entityId])\n          fragments.mesh2frag[entityId] = [fragId];else\n\n          fragments.mesh2frag[entityId].push(fragId);\n\n          fragments.materials[fragId] = scope.materialToIndex[prims[k].material];\n\n          // Copy the transform to the fraglist array\n          var off = fragId * 12;\n          var cur = currentTransform.elements;\n          var orig = fragments.transforms;\n          orig[off] = cur[0];\n          orig[off + 1] = cur[1];\n          orig[off + 2] = cur[2];\n          orig[off + 3] = cur[4];\n          orig[off + 4] = cur[5];\n          orig[off + 5] = cur[6];\n          orig[off + 6] = cur[8];\n          orig[off + 7] = cur[9];\n          orig[off + 8] = cur[10];\n          orig[off + 9] = cur[12];\n          orig[off + 10] = cur[13];\n          orig[off + 11] = cur[14];\n\n          var posAccessorId = prims[k].attributes[\"POSITION\"];\n          if (posAccessorId) {\n            var accessor = scope.gltf.accessors[posAccessorId];\n            if (accessor.min && accessor.max) {\n              tmpBox.min.x = accessor.min[0];\n              tmpBox.min.y = accessor.min[1];\n              tmpBox.min.z = accessor.min[2];\n              tmpBox.max.x = accessor.max[0];\n              tmpBox.max.y = accessor.max[1];\n              tmpBox.max.z = accessor.max[2];\n\n            } else {\n\n              tmpBox.min.x = -0.5;\n              tmpBox.min.y = -0.5;\n              tmpBox.min.z = -0.5;\n              tmpBox.max.x = 0.5;\n              tmpBox.max.y = 0.5;\n              tmpBox.max.z = 0.5;\n\n              debug(\"unknown bbox for mesh, using unit box\", meshes[j]);\n            }\n\n            tmpBox.applyMatrix4(currentTransform);\n\n            off = fragId * 6;\n            var dst = fragments.boxes;\n            dst[off] = tmpBox.min.x;\n            dst[off + 1] = tmpBox.min.y;\n            dst[off + 2] = tmpBox.min.z;\n\n            dst[off + 3] = tmpBox.max.x;\n            dst[off + 4] = tmpBox.max.y;\n            dst[off + 5] = tmpBox.max.z;\n\n            nodeBox.union(tmpBox);\n          }\n        }\n      }\n    }\n\n    var children = gltfNode.children || gltfNode.nodes; //the root scene uses \"nodes\" instead of \"children\"\n    if (children) {\n      svfNode.children = [];\n      for (var i = 0; i < children.length; i++) {\n        var gltfChild = gltfNodes[children[i]];\n\n        var svfChild = {\n          name: gltfChild.name || children[i],\n          dbId: scope.nextDbId++ };\n\n\n        scope.nodeToDbId[children[i]] = svfChild.dbId;\n\n        svfNode.children.push(svfChild);\n\n        var childBox = traverseNodes(svfChild, gltfChild, currentTransform, depth + 1);\n        nodeBox.union(childBox);\n      }\n    }\n\n    var boxOffset = svfNode.dbId * 6;\n    var dst = nodeBoxes;\n    dst[boxOffset] = nodeBox.min.x;\n    dst[boxOffset + 1] = nodeBox.min.y;\n    dst[boxOffset + 2] = nodeBox.min.z;\n    dst[boxOffset + 3] = nodeBox.max.x;\n    dst[boxOffset + 4] = nodeBox.max.y;\n    dst[boxOffset + 5] = nodeBox.max.z;\n\n    return nodeBox;\n  }\n\n  var rootBox = traverseNodes(this.instanceTree, gltfRoot, new LmvMatrix4(true), 1);\n  scope.bbox.union(rootBox);\n\n  //convert boxes to typed array now that we know the needed size\n  this.instanceBoxes = new Float32Array(nodeBoxes.length);\n  this.instanceBoxes.set(nodeBoxes);\n  this.objectCount = this.nextDbId;\n  this.maxTreeDepth = maxDepth;\n};","var TO_HEX = new Array(256);\nfor (var i = 0; i < 256; i++) {\n  var s = i.toString(16);\n  if (s.length === 1)\n  s = \"0\" + s;\n  TO_HEX[i] = s;\n}\n\n//Most common case is for SHA1 hashes, which are 20 bytes\nvar tmpArr20 = new Array(20);\n\nfunction getHexString(buffer, offset, length) {\n  var res = length === 20 ? tmpArr20 : [];\n\n  for (var i = 0; i < length; i++) {\n    var b = buffer[offset + i];\n    var s = TO_HEX[b];\n    res[i] = s;\n  }\n\n  return res.join(\"\");\n}\n\nvar tmpArr10 = new Array(10);\n\n//Converts the input byte array into a string of half the length\n//by packing two bytes into each string character (JS strings are two bytes per char)\nfunction getHexStringPacked(buffer, offset, length) {\n  var res = length === 20 ? tmpArr10 : [];\n\n  for (var i = 0; i < length; i += 2) {\n    var b0 = buffer[offset + i];\n    var b1 = buffer[offset + i + 1];\n    res[i / 2] = b1 << 8 | b0;\n  }\n\n  return String.fromCharCode.apply(null, res);\n}\n\n//Converts from UCS16 packed string (two bytes per character) to\n//regular ASCII string of 4x the length\nfunction unpackHexString(s) {\n  var res = s.length === 10 ? tmpArr20 : [];\n\n  for (var i = 0; i < s.length; i++) {\n    var bytes = s.charCodeAt(i);\n    res[2 * i] = TO_HEX[bytes & 0xff];\n    res[2 * i + 1] = TO_HEX[bytes >> 8 & 0xff];\n  }\n\n  return res.join(\"\");\n}\n\n\nfunction hexToDec(code) {\n  //0-9\n  if (code >= 48 && code <= 57) {\n    return code - 48;\n  }\n  //A-F\n  if (code >= 65 && code <= 70) {\n    return code - 55;\n  }\n  //a-f\n  if (code >= 97 && code <= 102) {\n    return code - 87;\n  }\n\n  return 0;\n}\n\n//Convert string in hex format, e.g. \"3498572abc\" to binary\nfunction hexToBin(str, buf, offset) {\n\n  //TODO: Add utility function that goes directly from packed to bin,\n  //instead of unopack, then convert to bin\n  var s = str.length === 10 ? unpackHexString(str) : str;\n\n  var j = offset;\n  for (var _i = 0; _i < s.length; _i += 2) {\n    var d1 = hexToDec(s.charCodeAt(_i));\n    var d2 = hexToDec(s.charCodeAt(_i + 1));\n    buf[j++] = d1 << 4 | d2;\n  }\n}\n\nmodule.exports = {\n  //getHexString,\n  getHexStringPacked: getHexStringPacked,\n  unpackHexString: unpackHexString,\n  hexToBin: hexToBin };","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\nimport { utf8ArrayToString, blobToJson } from \"../common/StringUtils\";\nimport { isNodeJS, isMobileDevice, isSafari, isIE11 } from \"../../../compat\";\n\nvar pako = require('pako');\n\n//All object stores go into this database\nvar DB_NAME = \"otg\";\n\nvar CONTENT_STORE = \"otg-content\";\nvar CONTENT_STORE_LRU = \"otg-lru\";\n\n\nexport var LocalDbCache = /*#__PURE__*/function () {\n\n  function LocalDbCache(forceDisabled, isInlineWorker) {_classCallCheck(this, LocalDbCache);\n    this.db = null;\n    this.readTransaction = null;\n    this.loaded = false;\n    this.opening = false;\n\n    this.dbDisabled = this._isDbDisabled(forceDisabled, isInlineWorker);\n\n    if (!isNodeJS() && this.dbDisabled) {\n      console.log(\"IndexedDb disabled\");\n    }\n\n    this.storeName = CONTENT_STORE;\n    this.storeNameTimestamp = CONTENT_STORE_LRU;\n    this.bothStoreNames = [this.storeName, this.storeNameTimestamp];\n\n    this.useCompression = true;\n    this.pendingTimestampUpdates = {};\n    this.pendingTimestampCount = 0;\n\n    this.pendingStores = [];\n\n    this._pendingCallbacks = [];\n  }\n\n  // Disable on Safari until we figure out why performance is terrible.\n  // Disable on Node.js because we don't need to cache locally on the server side\n  // Disable on Mobile until we decide if we want the performance hit there.\n  // Disable IE11 & Edge if worker created from a Blob URL. IndexedDB is not supported in that case.\n  _createClass(LocalDbCache, [{ key: \"_isDbDisabled\", value: function _isDbDisabled(forceDisabled, isInlineWorker) {\n      return (\n        forceDisabled ||\n        isNodeJS() ||\n        isSafari() ||\n        isMobileDevice() ||\n        isIE11 && isInlineWorker ||\n        typeof indexedDB === \"undefined\");\n\n    } }, { key: \"notifyPendingCallbacks\", value: function notifyPendingCallbacks(\n\n    error) {var _this = this;\n      this._pendingCallbacks.forEach(function (cb) {return cb(error, _this.db);});\n      this._pendingCallbacks = [];\n    } }, { key: \"open\", value: function open(\n\n    cb) {var _this2 = this;\n\n      if (this.dbDisabled) {\n        cb && cb();\n        return;\n      }\n\n      //Call back immediately if we are already open\n      if (this.loaded) {\n        cb && cb(null, this.db);\n        return;\n      }\n\n      //Delay callback if we are still waiting to open.\n      if (this.opening) {\n        cb && this._pendingCallbacks.push(cb);\n        return;\n      }\n\n      this.opening = true;\n\n      //Open the IndexedDb database connection\n      var request = indexedDB.open(DB_NAME, 1);\n\n      request.onerror = function (event) {\n        console.error(\"Failed to open or create cache database.\");\n        _this2.dbDisabled = true;\n        _this2.notifyPendingCallbacks(event);\n      };\n      request.onsuccess = function (event) {\n\n        _this2.opening = false;\n        _this2.db = event.target.result;\n\n        _this2.db.onerror = function (event) {\n          console.error(\"Database error\", event);\n        };\n\n        _this2.loaded = true;\n        _this2.notifyPendingCallbacks();\n\n        /*\r\n                                         this.size((err, data) => {\r\n                                             console.log(data);\r\n                                         });\r\n                                         */\n      };\n\n      request.onupgradeneeded = function (event) {\n\n        console.log(\"Db upgrade\", _this2.storeName);\n\n        // Save the IDBDatabase interface\n        var db = event.target.result;\n\n        // Create the database schema\n        db.createObjectStore(CONTENT_STORE);\n        var os = db.createObjectStore(CONTENT_STORE_LRU);\n        os.createIndex(CONTENT_STORE_LRU + \"-index\", \"t\", { unique: false });\n      };\n    } }, { key: \"deleteOld\", value: function deleteOld(\n\n\n    callback) {var _this3 = this;\n\n      if (!this.db) {\n        callback();\n        return;\n      }\n\n      if (this.deleteInProgress)\n      return;\n\n      this.deleteInProgress = true;\n\n      var howMany = 200;\n\n      //Avoid deleting stuff that was last used a short while ago, by using a range query\n      var upperBoundOpenKeyRange = IDBKeyRange.upperBound(Date.now() - 300 * 1000, true);\n\n      var hashes = [];\n\n      var objectStore = this.db.transaction([this.storeNameTimestamp] /*, \"readwrite\"*/).objectStore(this.storeNameTimestamp);\n\n      var index = objectStore.index(this.storeNameTimestamp + \"-index\");\n\n      index.openCursor(upperBoundOpenKeyRange).onsuccess = function (event) {\n        var cursor = event.target.result;\n        if (cursor && hashes.length < howMany) {\n          hashes.push(cursor.primaryKey);\n          cursor.continue();\n          return;\n        }\n\n        if (hashes.length) {\n\n          console.log(\"Deleting old objects.\", hashes.length);\n\n          var transaction = _this3.db.transaction(_this3.bothStoreNames, \"readwrite\");\n\n          transaction.oncomplete = function (event) {\n            _this3.deleteInProgress = false;\n            console.log(\"Delete done\");\n            callback && callback();\n          };\n\n          transaction.onerror = function (event) {\n            _this3.deleteInProgress = false;\n            console.error(\"Transaction error.\", event);\n          };\n\n          transaction.onabort = function (event) {\n            _this3.deleteInProgress = false;\n            var error = event.target.error; // DOMError\n            console.log(\"Failed to delete cached objects\", error);\n          };\n\n          var objectStoreMain = transaction.objectStore(_this3.storeName);\n          var objectStoreTimestamp = transaction.objectStore(_this3.storeNameTimestamp);\n\n          for (var i = 0; i < hashes.length; i++) {\n            objectStoreMain.delete(hashes[i]);\n            objectStoreTimestamp.delete(hashes[i]);\n          }\n\n        }\n      };\n\n\n\n    } }, { key: \"flush\", value: function flush(\n\n\n    cb) {var _this4 = this;\n\n      if (!this.pendingStores.length) {\n        cb && cb();\n        return;\n      }\n\n      if (!this.writeTransaction) {\n\n        var transaction = this.db.transaction(this.bothStoreNames, \"readwrite\");\n\n        if (cb) {\n          transaction.oncomplete = function (event) {\n            //console.log(\"Transaction complete\");\n            cb();\n          };\n        }\n\n        transaction.onerror = function (event) {\n          console.error(\"Transaction error.\", event);\n          cb && cb(event.target.error);\n        };\n\n        transaction.onabort = function (event) {\n          var error = event.target.error; // DOMError\n          if (error.name === 'QuotaExceededError') {\n            //console.log(\"Quota exceeded\");\n            _this4.deleteOld(function () {});\n\n          }\n          cb && cb(event.target.error);\n        };\n\n        this.writeTransaction = transaction;\n      }\n\n      for (var i = 0; i < this.pendingStores.length; i += 2) {\n\n        var hash = this.pendingStores[i];\n        var data = this.pendingStores[i + 1];\n\n        if (data instanceof Uint8Array && this.useCompression) {\n          if (data[0] === 31 && data[1] === 139) {\n            //already compressed\n          } else {\n            //let before = data.length;\n            try {\n              data = pako.gzip(data);\n            } catch (e) {\n              console.error(\"Compression failed.\");\n            }\n            //let after = data.length;\n            //console.log(before/after, \"x\");\n          }\n        }\n\n        var objectStore = this.writeTransaction.objectStore(this.storeName);\n\n        var storeBlob = objectStore.put(data, hash);\n\n        storeBlob.onerror = function (event) {\n          console.error(\"Object store error.\", event);\n        };\n\n        var timestampStore = this.writeTransaction.objectStore(this.storeNameTimestamp);\n        timestampStore.put({ t: Date.now() }, hash);\n\n      }\n\n      this.pendingStores = [];\n\n      //TODO: reuse this transaction for longer\n      this.writeTransaction = null;\n    } }, { key: \"store\", value: function store(\n\n\n    hash, data, cb) {\n\n      if (!this.db) {\n        cb && cb();\n        return;\n      }\n\n      this.pendingStores.push(hash);\n      this.pendingStores.push(data);\n\n      if (this.pendingStores.length < 200) {\n        cb && cb();\n        return;\n      }\n\n      this.flush(cb);\n    } }, { key: \"flushTimestamps\", value: function flushTimestamps(\n\n\n    cb) {var _this5 = this;\n\n      var transaction = this.db.transaction([this.storeNameTimestamp], \"readwrite\");\n\n      if (cb) {\n        transaction.oncomplete = function (event) {\n          //console.log(\"Transaction complete\");\n          cb();\n        };\n      }\n\n      transaction.onerror = function (event) {\n        console.error(\"Transaction error.\", event);\n        cb && cb(event.target.error);\n      };\n\n      transaction.onabort = function (event) {\n        var error = event.target.error; // DOMError\n        if (error.name === 'QuotaExceededError') {\n          console.log(\"Quota exceeded\");\n          _this5.deleteOld(function () {});\n        }\n        cb && cb(event.target.error);\n      };\n\n\n      var timestampStore = transaction.objectStore(this.storeNameTimestamp);\n\n      for (var hash in this.pendingTimestampUpdates) {\n        timestampStore.put({ t: this.pendingTimestampUpdates[hash] }, hash);\n      }\n\n      this.pendingTimestampUpdates = {};\n      this.pendingTimestampCount = 0;\n    } }, { key: \"_createReadTransaction\", value: function _createReadTransaction()\n\n    {var _this6 = this;\n      //We try to keep the read transaction alive by reusing it\n      //for all new requests. If they come fast enough, the transaction\n      //will stay alive. If it completes, we will create a new one.\n      var transaction = this.readTransaction = this.db.transaction(this.storeName);\n\n      transaction.oncomplete = function (event) {\n        _this6.readTransaction = null;\n      };\n      transaction.onerror = function (event) {\n        console.error(\"Transaction error.\", comment, event);\n        _this6.readTransaction = null;\n      };\n      transaction.onabort = function (event) {\n        console.warn(\"Transaction abort\", comment, event);\n        _this6.readTransaction = null;\n      };\n    } }, { key: \"get\", value: function get(\n\n    hash, cb) {var _this7 = this;\n\n      if (this.opening) {\n        console.error(\"Tried to get IndexedDb resource while database was still opening\");\n        cb(-1, null);\n        return;\n      }\n\n      if (!this.db) {\n        cb(-1, null);\n        return;\n      }\n\n      //We try to reuse the same read transaction for as long as it will let us\n      if (!this.readTransaction) {\n        this._createReadTransaction();\n      }\n\n      var req;\n      //This can fail if the transaction has gone inactive\n      try {\n        req = this.readTransaction.objectStore(this.storeName).get(hash);\n      } catch (e) {\n        this._createReadTransaction();\n        req = this.readTransaction.objectStore(this.storeName).get(hash);\n      }\n\n      req.onsuccess = function (event) {\n\n        //Somehow we sometimes end up getting null for an existing key\n        //so we force reload\n        if (!event.target.result) {\n          cb(-1, null);\n          return;\n        }\n\n\n        var data = event.target.result;\n\n        if (data[0] === 31 && data[1] === 139) {\n          try {\n            data = pako.ungzip(data);\n          } catch (e) {\n            console.error(\"Failed to decompress.\", e);\n            cb(e, null);\n            return;\n          }\n        }\n\n        cb(null, data);\n\n        //Remember the new timestamp for this hash, but don't update\n        //it in the mru table immediately, to avoid slowing down model load\n        //with a write transaction.\n        _this7.pendingTimestampUpdates[hash] = Date.now();\n        _this7.pendingTimestampCount++;\n      };\n\n      req.onerror = function (event) {\n        cb(event.target.errorCode);\n      };\n\n    } }, { key: \"updatePendingTimestamps\", value: function updatePendingTimestamps()\n\n\n    {var _this8 = this;\n\n      if (!this.db)\n      return;\n\n      this.flush(function (err) {\n        //console.log(\"Updating all timestamps\");\n\n        if (err) {\n          return;\n        }\n\n        _this8.flushTimestamps();\n\n      });\n\n    } }, { key: \"size\", value: function size(\n\n    callback) {\n      if (!this.db) {\n        callback();\n        return;\n      }\n\n      var size = 0;\n      var items = 0;\n\n      var transaction = this.db.transaction([this.storeName]).\n      objectStore(this.storeName).\n      openCursor();\n\n      transaction.onsuccess = function (event) {\n        var cursor = event.target.result;\n        if (cursor) {\n          var storedObject = cursor.value;\n          size += storedObject.length;\n          items++;\n          cursor.continue();\n        } else\n        {\n          callback(null, { size: size, items: items });\n        }\n      };\n\n      transaction.onerror = function (err) {\n        callback(err);\n      };\n    } }]);return LocalDbCache;}();","import { LmvBox3 } from \"../../../wgs/scene/LmvBox3\";\n\nfunction setFromArray(array, offset) {\n\n  this.min.x = array[offset];\n  this.min.y = array[offset + 1];\n  this.min.z = array[offset + 2];\n\n  this.max.x = array[offset + 3];\n  this.max.y = array[offset + 4];\n  this.max.z = array[offset + 5];\n}\n\nfunction copyToArray(array, offset) {\n\n  array[offset] = this.min.x;\n  array[offset + 1] = this.min.y;\n  array[offset + 2] = this.min.z;\n\n  array[offset + 3] = this.max.x;\n  array[offset + 4] = this.max.y;\n  array[offset + 5] = this.max.z;\n}\n\n//Overload of the default FragInfo, used with OTG-specific fragments_extra data file\n//to initialize the BVH spatial index.\nexport function OtgFragInfo(data, loadContext) {\n\n  var byteStride = data[1] << 8 | data[0];\n  //var version = data[3] << 8 | data[2];\n\n  if (!byteStride)\n  byteStride = 7 * 4;\n\n  this.boxStride = byteStride / 4;\n  this.count = data.byteLength / byteStride - 1;\n\n  //Global offset set by the viewer loader client\n  var globalOffset = loadContext.globalOffset || { x: 0, y: 0, z: 0 };\n\n  //Internal double precision offset used in the OTG file format (always set as of November 2018)\n  var fo = loadContext.fragmentTransformsOffset || { x: 0, y: 0, z: 0 };\n\n  if (this.count) {\n    //make views directly into the first data record (skipping the header record)\n    this.boxes = new Float32Array(data.buffer, byteStride);\n    this.flags = new Int32Array(data.buffer, byteStride);\n\n    //apply placement transform if given\n    var boxes = this.boxes;\n\n    if (loadContext.placementTransform) {\n      var tmpBox = new LmvBox3();\n      var offset = 0;\n      for (var i = 0; i < this.count; i++, offset += this.boxStride) {\n\n        setFromArray.call(tmpBox, boxes, offset);\n\n        //Add back the built-in OTG offset\n        tmpBox.min.x += fo.x;\n        tmpBox.min.y += fo.y;\n        tmpBox.min.z += fo.z;\n        tmpBox.max.x += fo.x;\n        tmpBox.max.y += fo.y;\n        tmpBox.max.z += fo.z;\n\n\n        tmpBox.applyMatrix4(loadContext.placementWithOffset); //this will apply both placement and global offset at once\n\n        copyToArray.call(tmpBox, boxes, offset);\n      }\n    } else {\n\n      var ox = fo.x - globalOffset.x;\n      var oy = fo.y - globalOffset.y;\n      var oz = fo.z - globalOffset.z;\n\n      //Faster code path when we only have global offset and no placement transform\n      for (var i = 0, offset = 0; i < this.count; i++, offset += this.boxStride) {\n\n        boxes[offset] += ox;\n        boxes[offset + 1] += oy;\n        boxes[offset + 2] += oz;\n\n        boxes[offset + 3] += ox;\n        boxes[offset + 4] += oy;\n        boxes[offset + 5] += oz;\n      }\n    }\n  }\n\n  this.hasPolygonCounts = true;\n  this.wantSort = false;\n}\n\nOtgFragInfo.prototype.getCount = function () {\n  return this.count;\n};\n\nOtgFragInfo.prototype.isTransparent = function (i) {\n  var flags = this.flags[i * this.boxStride + 6];\n  return !!(flags >> 24);\n};\n\nOtgFragInfo.prototype.getPolygonCount = function (i) {\n  var flags = this.flags[i * this.boxStride + 6];\n  return flags & 0xffffff;\n};","\nimport { isNodeJS } from \"../../../compat\";\nimport { InputStream } from \"../common/InputStream\";\nimport { LmvBox3 } from \"../../../wgs/scene/LmvBox3\";\n\n/*\n                                                      Integers encoded in *little endian*\n                                                      \n                                                      Magic header: LMV0 (4 bytes)\n                                                      Flags: 2 bytes (isLine, isPoint, isWideLine, etc.)\n                                                      Num buffers: 1 byte\n                                                      Num attributes: 1 byte (attributes are fixed size)\n                                                      Buf Offsets (from beginning of data block, first buffer is always at 0, so is skipped): 4 bytes each\n                                                      Attributes: {\n                                                      \tName: 1 byte enum (Index, IndexEdges, Position, Normal, TextureUV, Color)\n                                                      \titemSize: 1/2 byte low nibble (must be 1,2,3 or 4)\n                                                      \titemType: 1/2 byte hi nibble (BYTE, SHORT, UBYTE, USHORT, FLOAT ...)\n                                                      \titemOffset: 1 byte (in bytes)\n                                                      \titemStride: 1 byte (stride in bytes)\n                                                      \tbuffer Idx: 1 bytes\n                                                      } (5 bytes each)\n                                                      \n                                                      (padding bytes to make data stream offset a multiple of 4)\n                                                      \n                                                      Data: binary, concatenated vertex and index streams\n                                                      */\n\nvar AttributeName = {\n  Index: 0,\n  IndexEdges: 1,\n  Position: 2,\n  Normal: 3,\n  TextureUV: 4,\n  Color: 5 };\n\n\nvar AttributeType = {\n  BYTE: 0,\n  SHORT: 1,\n  UBYTE: 2,\n  USHORT: 3,\n\n  BYTE_NORM: 4,\n  SHORT_NORM: 5,\n  UBYTE_NORM: 6,\n  USHORT_NORM: 7,\n\n  FLOAT: 8,\n  INT: 9,\n  UINT: 10\n  //DOUBLE: 11\n};\n\n\nvar MeshFlags = {\n  //NOTE: Lower two bits are NOT A BITMASK!!!\n  TRIANGLES: 0,\n  LINES: 1,\n  POINTS: 2,\n  WIDE_LINES: 3 };\n\n\n\n\n\nvar LMV2OTGAttr = {\n  \"position\": AttributeName.Position,\n  \"normal\": AttributeName.Normal,\n  \"index\": AttributeName.Index,\n  \"indexlines\": AttributeName.IndexEdges,\n  \"color\": AttributeName.Color };\n\n\nvar OTG2LMVAttr = {};\nOTG2LMVAttr[AttributeName.Position] = \"position\";\nOTG2LMVAttr[AttributeName.Normal] = \"normal\";\nOTG2LMVAttr[AttributeName.Index] = \"index\";\nOTG2LMVAttr[AttributeName.IndexEdges] = \"indexlines\";\nOTG2LMVAttr[AttributeName.Color] = \"color\";\nOTG2LMVAttr[AttributeName.TextureUV] = \"uv\";\n\n\nvar AttributeTypeToSize = {};\nAttributeTypeToSize[AttributeType.BYTE] = 1;\nAttributeTypeToSize[AttributeType.SHORT] = 2;\nAttributeTypeToSize[AttributeType.UBYTE] = 1;\nAttributeTypeToSize[AttributeType.USHORT] = 2;\nAttributeTypeToSize[AttributeType.BYTE_NORM] = 1;\nAttributeTypeToSize[AttributeType.SHORT_NORM] = 2;\nAttributeTypeToSize[AttributeType.UBYTE_NORM] = 1;\nAttributeTypeToSize[AttributeType.USHORT_NORM] = 2;\nAttributeTypeToSize[AttributeType.FLOAT] = 4;\nAttributeTypeToSize[AttributeType.INT] = 4;\nAttributeTypeToSize[AttributeType.UINT] = 4;\n//DOUBLE: 11\n\n\n\nfunction rotate(tri) {\n  var tmp = tri[0];\n  tri[0] = tri[1];\n  tri[1] = tri[2];\n  tri[2] = tmp;\n}\n\nfunction deltaEncodeIndexBuffer3(ib) {\n\n  var triangles = [];\n\n  for (var i = 0; i < ib.length; i += 3) {\n    triangles.push(\n    [ib[i], ib[i + 1], ib[i + 2]]);\n\n  }\n\n  //Sort the indices for each triangle so that\n  //the first one is smallest\n  for (var i = 0; i < triangles.length; i++) {\n    var t = triangles[i];\n\n    while (t[0] > t[1] || t[0] > t[2]) {\n      rotate(t);\n    }\n  }\n\n  //Sort triangles by ascending first index\n  triangles.sort(function (a, b) {\n    return a[0] - b[0];\n  });\n\n  //Delta encode the indices\n  var t = triangles[0];\n  var j = 0;\n  ib[j] = t[0];\n  ib[j + 1] = t[1] - t[0];\n  ib[j + 2] = t[2] - t[0];\n  j += 3;\n\n  for (var i = 1; i < triangles.length; i++, j += 3) {\n    t = triangles[i];\n\n    ib[j] = t[0] - triangles[i - 1][0];\n    ib[j + 1] = t[1] - t[0];\n    ib[j + 2] = t[2] - t[0];\n  }\n\n}\n\nfunction deltaEncodeIndexBuffer2(ib) {\n\n  var lines = [];\n\n  for (var i = 0; i < ib.length; i += 2) {\n    lines.push(\n    [ib[i], ib[i + 1]]);\n\n  }\n\n  //Sort the indices for each triangle so that\n  //the first one is smallest\n  for (var i = 0; i < lines.length; i++) {\n    var t = lines[i];\n\n    if (t[0] > t[1]) {\n      var tmp = t[0];\n      t[0] = t[1];\n      t[1] = tmp;\n    }\n  }\n\n  //Sort lines by ascending first index\n  lines.sort(function (a, b) {\n    return a[0] - b[0];\n  });\n\n  //Delta encode the indices\n  var t = lines[0];\n  var j = 0;\n  ib[j] = t[0];\n  ib[j + 1] = t[1] - t[0];\n  j += 2;\n\n  for (var i = 1; i < lines.length; i++, j += 2) {\n    t = lines[i];\n\n    ib[j] = t[0] - lines[i - 1][0];\n    ib[j + 1] = t[1] - t[0];\n  }\n\n}\n\n\nfunction deltaDecodeIndexBuffer3(ib) {\n\n  if (!ib.length)\n  return;\n\n  ib[1] += ib[0];\n  ib[2] += ib[0];\n\n  for (var i = 3; i < ib.length; i += 3) {\n    ib[i] += ib[i - 3];\n    ib[i + 1] += ib[i];\n    ib[i + 2] += ib[i];\n  }\n}\n\nfunction deltaDecodeIndexBuffer2(ib) {\n\n  if (!ib.length)\n  return;\n\n  ib[1] += ib[0];\n\n  for (var i = 2; i < ib.length; i += 2) {\n    ib[i] += ib[i - 2];\n    ib[i + 1] += ib[i];\n  }\n}\n\nfunction attrNameMapper(attributeName) {\n\n  var name = LMV2OTGAttr[attributeName];\n  if (typeof name !== \"undefined\")\n  return name;\n\n  if (attributeName.indexOf(\"uv\") === 0) {\n    return AttributeName.TextureUV;\n  }\n\n  console.warn(\"Unknown attribute name\");\n  return AttributeName.TextureUV;\n}\n\n\nfunction attrNameToLMV(attrName) {\n\n  var lmvAttr = OTG2LMVAttr[attrName];\n  if (lmvAttr)\n  return lmvAttr;\n\n  console.error(\"Unknown vertex attribute\");\n  return AttributeName.TextureUV;\n}\n\n\nfunction attrTypeMapper(attr) {\n\n  var type = AttributeType.FLOAT;\n\n  var itemWidth = attr.bytesPerItem || 4;\n  if (itemWidth === 1) {\n    type = attr.normalize ? AttributeType.UBYTE_NORM : AttributeType.UBYTE;\n  } else if (itemWidth === 2) {\n    type = attr.normalize ? AttributeType.USHORT_NORM : AttributeType.USHORT;\n  }\n\n  return type << 4 | attr.itemSize & 0xf;\n}\n\nfunction indexTypeMapper(attr) {\n  var type = AttributeType.USHORT;\n\n  var itemWidth = attr.bytesPerItem || 2;\n  if (itemWidth === 1) {\n    type = AttributeType.UBYTE;\n  } else if (itemWidth === 2) {\n    type = AttributeType.USHORT;\n  } else if (itemWidth === 4) {\n    type = AttributeType.UINT;\n  }\n\n  return type << 4 | attr.itemSize & 0xf;\n}\n\n\nfunction OtgGeomEncoder() {\n}\n\n\nOtgGeomEncoder.prototype.beginHeader = function (meshFlag, numAttributes, dataStreamLengths) {\n  var headerSize = 8;\n\n  var numBuffers = dataStreamLengths.length;\n  headerSize += (numBuffers - 1) * 4;\n\n  headerSize += numAttributes * 5;\n\n  while (headerSize % 4 !== 0) {\n    headerSize++;\n  }\n\n  var totalDataSize = 0;\n  for (var i = 0; i < dataStreamLengths.length; i++) {\n    totalDataSize += dataStreamLengths[i];}\n\n  this.buffer = Buffer.alloc(headerSize + totalDataSize);\n  this.writeOffset = 0;\n\n  //Write the 4 byte magic prefix\n  var MAGIC = \"OTG0\";\n  for (var i = 0; i < 4; i++) {\n    this.writeOffset = this.buffer.writeUInt8(MAGIC.charCodeAt(i), this.writeOffset);\n  }\n\n  //TODO: line width if wide lines and pointSize if points\n\n  this.writeOffset = this.buffer.writeUInt16LE(meshFlag, this.writeOffset);\n\n  this.writeOffset = this.buffer.writeUInt8(numBuffers, this.writeOffset);\n\n  this.writeOffset = this.buffer.writeUInt8(numAttributes, this.writeOffset);\n\n  //write buffer offsets from the beginning of the binary data block\n  //Skip the first buffer as its at offset zero\n  var offset = dataStreamLengths[0];\n  for (var i = 1; i < dataStreamLengths.length; i++) {\n    this.writeOffset = this.buffer.writeUInt32LE(offset, this.writeOffset);\n    offset += dataStreamLengths[i];\n  }\n};\n\nOtgGeomEncoder.prototype.addAttribute = function (attrName, attr, stride, bufferIndex) {\n  this.writeOffset = this.buffer.writeUInt8(attrName, this.writeOffset);\n\n  if (attrName === AttributeName.Index || attrName === AttributeName.IndexEdges) {\n\n    this.writeOffset = this.buffer.writeUInt8(indexTypeMapper(attr), this.writeOffset);\n\n    this.writeOffset = this.buffer.writeUInt8((attr.itemOffset || 0) * 4, this.writeOffset); //itemOffset\n    this.writeOffset = this.buffer.writeUInt8((stride || 0) * 4, this.writeOffset); //itemStride\n\n    this.writeOffset = this.buffer.writeUInt8(bufferIndex, this.writeOffset); //buffer index\n  } else {\n    this.writeOffset = this.buffer.writeUInt8(attrTypeMapper(attr), this.writeOffset);\n\n    this.writeOffset = this.buffer.writeUInt8((attr.itemOffset || 0) * 4, this.writeOffset); //itemOffset (LMV stores in multiples of 4)\n    this.writeOffset = this.buffer.writeUInt8((stride || 0) * 4, this.writeOffset); //itemStride (LMV stores in multiples of 4)\n\n    this.writeOffset = this.buffer.writeUInt8(bufferIndex, this.writeOffset); //buffer index\n  }\n};\n\n\nOtgGeomEncoder.prototype.endHeader = function () {\n  //Padding so that buffers are written at multiple of 4\n  while (this.writeOffset % 4 !== 0) {\n    this.writeOffset = this.buffer.writeUInt8(0, this.writeOffset);\n  }\n};\n\nOtgGeomEncoder.prototype.addBuffer = function (buffer) {\n  buffer.copy(this.buffer, this.writeOffset);\n  this.writeOffset += buffer.length;\n};\n\n\nOtgGeomEncoder.prototype.end = function () {\n  if (this.writeOffset !== this.buffer.length) {\n    console.error(\"Incorrect encoding buffer size\");\n  }\n\n  return this.buffer;\n};\n\n\n\nfunction OtgGeomDecoder(buf) {\n\n  this.buffer = buf;\n  this.readOffset = 0;\n\n  this.meshFlag = 0;\n  this.numBuffers = 0;\n  this.numAttributes = 0;\n  this.bufferOffsets = [];\n  this.attributes = [];\n  this.buffers = [];\n}\n\n\nOtgGeomDecoder.prototype.readNodeJS = function () {\n\n  var magic = this.buffer.toString(\"ascii\", 0, 4);\n  if (magic !== \"OTG0\") {\n    console.error(\"Invalid OTG header\");\n    return false;\n  }\n\n  this.readOffset = 4;\n\n  this.meshFlag = this.buffer.readUInt16LE(this.readOffset);\n  this.readOffset += 2;\n\n  this.numBuffers = this.buffer.readUInt8(this.readOffset);\n  this.readOffset++;\n\n  this.numAttributes = this.buffer.readUInt8(this.readOffset);\n  this.readOffset++;\n\n  if (this.numBuffers) {\n    this.bufferOffsets.push(0);\n\n    for (var i = 1; i < this.numBuffers; i++) {\n      var boff = this.buffer.readUInt32LE(this.readOffset);\n      this.readOffset += 4;\n      this.bufferOffsets.push(boff);\n    }\n  }\n\n  for (var i = 0; i < this.numAttributes; i++) {\n    var attr = {};\n\n    attr.name = this.buffer.readUInt8(this.readOffset);\n    this.readOffset++;\n\n    var type = this.buffer.readUInt8(this.readOffset);\n    this.readOffset++;\n\n    attr.itemSize = type & 0xf;\n    attr.type = type >> 4;\n\n    attr.bytesPerItem = AttributeTypeToSize[attr.type];\n\n    attr.normalize = attr.type === AttributeType.BYTE_NORM ||\n    attr.type === AttributeType.SHORT_NORM ||\n    attr.type === AttributeType.UBYTE_NORM ||\n    attr.type === AttributeType.USHORT_NORM;\n\n\n    attr.itemOffset = this.buffer.readUInt8(this.readOffset) / 4;\n    this.readOffset++;\n\n    attr.itemStride = this.buffer.readUInt8(this.readOffset) / 4;\n    this.readOffset++;\n\n    attr.bufferIndex = this.buffer.readUInt8(this.readOffset);\n    this.readOffset++;\n\n    this.attributes.push(attr);\n  }\n\n  //seek to the beginning of the buffer data\n  while (this.readOffset % 4 !== 0) {\n    this.readOffset++;}\n\n  for (var i = 0; i < this.bufferOffsets.length; i++) {\n\n    var startOffset = this.readOffset + this.bufferOffsets[i];\n    var endOffset;\n\n    if (i < this.bufferOffsets.length - 1) {\n      endOffset = this.readOffset + this.bufferOffsets[i + 1];\n    } else {\n      endOffset = this.buffer.length;\n    }\n\n    this.buffers.push(this.buffer.slice(startOffset, endOffset));\n  }\n\n  return true;\n};\n\n\nOtgGeomDecoder.prototype.readWeb = function () {\n\n  var stream = new InputStream(this.buffer);\n\n  var magic = stream.getString(4);\n  if (magic !== \"OTG0\") {\n    console.error(\"Invalid OTG header\");\n    return false;\n  }\n\n\n  this.meshFlag = stream.getUint16();\n  this.numBuffers = stream.getUint8();\n  this.numAttributes = stream.getUint8();\n\n  if (this.numBuffers) {\n    this.bufferOffsets.push(0);\n\n    for (var i = 1; i < this.numBuffers; i++) {\n      var boff = stream.getUint32();\n      this.bufferOffsets.push(boff);\n    }\n  }\n\n  for (var i = 0; i < this.numAttributes; i++) {\n    var attr = {};\n\n    attr.name = stream.getUint8();\n\n    var type = stream.getUint8();\n\n    attr.itemSize = type & 0xf;\n    attr.type = type >> 4;\n\n    attr.bytesPerItem = AttributeTypeToSize[attr.type];\n\n    attr.normalize = attr.type === AttributeType.BYTE_NORM ||\n    attr.type === AttributeType.SHORT_NORM ||\n    attr.type === AttributeType.UBYTE_NORM ||\n    attr.type === AttributeType.USHORT_NORM;\n\n\n    attr.itemOffset = stream.getUint8() / 4;\n\n    attr.itemStride = stream.getUint8() / 4;\n\n    attr.bufferIndex = stream.getUint8();\n\n    this.attributes.push(attr);\n  }\n\n  //seek to the beginning of the buffer data\n  while (stream.offset % 4 !== 0) {\n    stream.offset++;}\n\n  for (var i = 0; i < this.bufferOffsets.length; i++) {\n\n    var startOffset = stream.offset + this.bufferOffsets[i];\n    var endOffset;\n\n    if (i < this.bufferOffsets.length - 1) {\n      endOffset = stream.offset + this.bufferOffsets[i + 1];\n    } else {\n      endOffset = stream.byteLength;\n    }\n\n    this.buffers.push(this.buffer.subarray(startOffset, endOffset));\n  }\n\n  return true;\n};\n\n\nOtgGeomDecoder.prototype.read = function () {\n\n  if (isNodeJS() && this.buffer instanceof Buffer) {\n    return this.readNodeJS();\n  } else {\n    return this.readWeb();\n  }\n};\n\n\n\nexport function serializeLmvBufferGeom(geom) {\n\n  var otgEncoder = new OtgGeomEncoder();\n\n  //Check for interleaved buffer. For now\n  //this is the only one we support\n  var bufSizes = [];\n  if (!geom.vb) {\n    console.error(\"Unexpected non-interleaved vertex buffer\");\n    return null;\n  } else {\n    bufSizes = [geom.vb.byteLength, geom.ib.byteLength];\n\n    if (geom.iblines) {\n      bufSizes.push(geom.iblines.byteLength);\n    }\n  }\n\n  var attrKeys = Object.keys(geom.attributes);\n\n  var meshFlag = 0;\n  if (geom.isLines)\n  meshFlag = meshFlag | MeshFlags.LINES;\n  if (geom.isWideLines)\n  meshFlag = meshFlag | MeshFlags.WIDE_LINES;\n  if (geom.isPoints)\n  meshFlag = meshFlag | MeshFlags.POINTS;\n\n  otgEncoder.beginHeader(meshFlag, attrKeys.length, bufSizes);\n\n  //Write the attributes\n  for (var i = 0; i < attrKeys.length; i++) {\n    var attr = geom.attributes[attrKeys[i]];\n    var attrName = attrNameMapper(attrKeys[i]);\n\n    if (attrKeys[i] === \"index\") {\n      otgEncoder.addAttribute(attrName, attr, 0, 1);\n    } else if (attrKeys[i] === \"indexlines\") {\n      otgEncoder.addAttribute(attrName, attr, 0, 2);\n    } else {\n      otgEncoder.addAttribute(attrName, attr, geom.vbstride, 0);\n    }\n\n  }\n\n  otgEncoder.endHeader();\n\n  //Write the buffers\n\n  //Buffer 0\n  var tmp = Buffer.from(geom.vb.buffer, geom.vb.byteOffset, geom.vb.byteLength);\n  otgEncoder.addBuffer(tmp);\n\n  //Buffer 1\n  if (geom.isLines)\n  deltaEncodeIndexBuffer2(geom.ib);else\n\n  deltaEncodeIndexBuffer3(geom.ib);\n\n  tmp = Buffer.from(geom.ib.buffer, geom.ib.byteOffset, geom.ib.byteLength);\n  otgEncoder.addBuffer(tmp);\n\n  //Buffer 2\n  if (geom.iblines) {\n    deltaEncodeIndexBuffer2(geom.iblines);\n\n    tmp = Buffer.from(geom.iblines.buffer, geom.iblines.byteOffset, geom.iblines.byteLength);\n    otgEncoder.addBuffer(tmp);\n  }\n\n  var buf = otgEncoder.end();\n\n  return buf;\n}\n\n\n\nvar unitBox = new LmvBox3();\nunitBox.min.x = -0.5;\nunitBox.min.y = -0.5;\nunitBox.min.z = -0.5;\nunitBox.max.x = 0.5;\nunitBox.max.y = 0.5;\nunitBox.max.z = 0.5;\n\n//var unitSphere = new THREE.Sphere();\n//unitSphere.radius = Math.sqrt(0.5 * 0.5 * 3);\nvar unitSphere = {\n  center: { x: 0, y: 0, z: 0 },\n  radius: Math.sqrt(0.5 * 0.5 * 3) };\n\n\nexport function readLmvBufferGeom(buffer, skipEdges) {\n\n  var dec = new OtgGeomDecoder(buffer);\n\n  if (!dec.read()) {\n    console.error(\"Failed to parse OTG geometry\");\n    return null;\n  }\n\n  //Assumes the interleaved buffer serialization we use by default\n  //Maps the decoded data to the mdata/vblayout structures produced by\n  //the LMV loader worker threads. It's slightly different from the LmvBufferGeometry fields\n  var mesh = {\n    vblayout: {},\n    vb: new Float32Array(dec.buffers[0].buffer, dec.buffers[0].byteOffset, dec.buffers[0].byteLength / 4),\n    isLines: (dec.meshFlag & 0x3) === MeshFlags.LINES,\n    isWideLines: (dec.meshFlag & 0x3) === MeshFlags.WIDE_LINES,\n    isPoints: (dec.meshFlag & 0x3) === MeshFlags.POINTS,\n    boundingBox: unitBox,\n    boundingSphere: unitSphere };\n\n\n  //TODO: line width\n\n  for (var i = 0; i < dec.attributes.length; i++) {\n    var attr = dec.attributes[i];\n\n    if (attr.name === AttributeName.Index) {\n      var ib = dec.buffers[1];\n      if (attr.bytesPerItem === 1) {\n        mesh.indices = ib;\n      } else if (attr.bytesPerItem === 2) {\n        mesh.indices = new Uint16Array(ib.buffer, ib.byteOffset, ib.byteLength / attr.bytesPerItem);\n      } else if (attr.bytesPerItem === 4) {\n        mesh.indices = new Uint32Array(ib.buffer, ib.byteOffset, ib.byteLength / attr.bytesPerItem);\n      }\n\n      if (mesh.isLines)\n      deltaDecodeIndexBuffer2(mesh.indices);else\n\n      deltaDecodeIndexBuffer3(mesh.indices);\n    } else if (attr.name === AttributeName.IndexEdges) {\n      if (!skipEdges) {\n        var iblines = dec.buffers[2];\n        if (attr.bytesPerItem === 1) {\n          mesh.iblines = iblines;\n        } else if (attr.bytesPerItem === 2) {\n          mesh.iblines = new Uint16Array(iblines.buffer, iblines.byteOffset, iblines.byteLength / attr.bytesPerItem);\n        } else if (attr.bytesPerItem === 4) {\n          mesh.iblines = new Uint32Array(iblines.buffer, iblines.byteOffset, iblines.byteLength / attr.bytesPerItem);\n        }\n\n        deltaDecodeIndexBuffer2(mesh.iblines);\n      }\n    } else {\n      var lmvAttr = attrNameToLMV(attr.name);\n\n      if (!mesh.vbstride)\n      mesh.vbstride = attr.itemStride;else\n      {\n        //We expect all vertex attributes to be packed into one VB \n        if (mesh.vbstride !== attr.itemStride)\n        console.error(\"Unexpected vertex buffer stride mismatch.\");\n      }\n\n      if (attr.itemOffset >= attr.itemStride) {\n        //Some old (pre- October 2018) meshes have an extra UV attribute defined even though\n        //it's not physically in the vertex buffer data. We skip it here.\n        //If the attribute offset is out of bounds, we just ignore it.\n        //console.warn(\"Buggy OTG mesh. Ignoring out of bounds attribute\");\n      } else {\n        mesh.vblayout[lmvAttr] = {\n          bytesPerItem: attr.bytesPerItem,\n          offset: attr.itemOffset,\n          normalize: attr.normalize,\n          itemSize: attr.itemSize };\n\n      }\n    }\n\n  }\n\n  var mdata = {\n    mesh: mesh,\n    packId: 0,\n    meshIndex: 0 };\n\n\n  return mdata;\n\n}","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}var WebSocket = require('isomorphic-ws');\n\nvar hexToBin = require(\"./HashStrings\").hexToBin;\nvar getHexStringPacked = require(\"./HashStrings\").getHexStringPacked;\n\n//Copied from compat.js to avoid importing ES6 exports from plain node.js forge-tools.\nvar isBrowser = typeof navigator !== \"undefined\";\nvar isNodeJS = function isNodeJS() {\n  return !isBrowser;\n};\n\nvar _maxRequests = 200;\n\n//OTG web socket protocol.\nvar OtgWs = /*#__PURE__*/function () {\"use strict\";\n\n  function OtgWs(loadContext, loadCB, errorCB) {_classCallCheck(this, OtgWs);\n\n    this.ws = null;\n    this.numRequests = 0;\n    this.txMsg = 0;\n    this.rxMsg = 0;\n    this.authorizeUrns = {};\n    this._pendingCallbacks = [];\n    this._retriedOpen = 0;\n    this._wsUsable = !loadContext.disableWebSocket && typeof WebSocket !== \"undefined\" && !!loadContext.otg_ws;\n    this.loadCB = loadCB;\n    this.errorCB = errorCB;\n\n    this._pendingMdata = [];\n    this._pendingSends = {\n      \"g\": [],\n      \"m\": [],\n      \"t\": [] };\n\n\n    this.msgBuffer = new Uint8Array(201);\n\n    this.addAuthorizeUrns(loadContext);\n  }_createClass(OtgWs, [{ key: \"notifyPendingCallbacks\", value: function notifyPendingCallbacks(\n\n    ws) {\n      this._pendingCallbacks.forEach(function (cb) {\n        cb(ws);\n      });\n      this._pendingCallbacks = [];\n    } }, { key: \"addAuthorizeUrns\", value: function addAuthorizeUrns(\n\n    loadContext) {var _this = this;\n      //Remember which URNs need to be authorized for CDN data via the web socket\n      if (loadContext && loadContext.authorizeUrns) {\n        loadContext.authorizeUrns.forEach(function (urn) {\n          _this.authorizeUrns[urn] = 1;\n        });\n      }\n    } }, { key: \"getWebSocket\", value: function getWebSocket()\n\n    {\n\n      //Socket already established?\n      var ws = this.ws;\n      if (ws && ws.readyState === 1) {\n        return ws;\n      } else if (ws && ws.readyState === 0) {\n        console.warn(\"Reentry into getWebSocket. Should not happen.\");\n        //If we get called while the web socket is still opening,\n        //ignore the callback, we will continue processing once it's open.\n        return null;\n      }\n\n      return null;\n    } }, { key: \"startSession\", value: function startSession(\n\n\n    loadContext, doneCB) {\n\n      if (!this._wsUsable) {\n        doneCB && doneCB(null);\n        return;\n      }\n\n      this.addAuthorizeUrns(loadContext);\n\n      var ctx = this;\n\n      //Remember the given callback\n      doneCB && ctx._pendingCallbacks.push(doneCB);\n\n      //Are we still in the process of opening the socket?\n      if (ctx._opening) {\n        return;\n      }\n\n      //If socket is already open, notify the callback (and any previously pending callbacks\n      var ws = this.getWebSocket();\n      if (ws) {\n        this.notifyPendingCallbacks(ws);\n        return;\n      }\n\n      if (loadContext)\n      this.loadContext = loadContext;\n\n      //console.log(\"Init worker called\");\n\n      this.openWebSocket(function (ws) {\n        //console.log(\"Web socket open.\");\n\n        ctx.flushEvent = setInterval(function () {\n          if (ctx.ws)\n          ctx.flushSendQueue();\n        }, 200);\n\n        ctx.notifyPendingCallbacks(ws);\n      });\n    } }, { key: \"endSession\", value: function endSession()\n\n    {\n      var ctx = this;\n\n      //The worker can be used by multiple loaders, so only close the\n      //web socket if it's not waiting on other requests.\n      if (ctx.numRequests) {\n        console.warn(\"Messages still pending. Leaving WebSocket open.\");\n        return;\n      }\n\n      var ws = ctx.getWebSocket();\n      if (ws && ws.readyState === 1) {\n\n        console.log(\"Web socket close.\");\n\n        ctx._opening = false;\n        ctx._clientClose = true;\n        ws.close(1000);\n        ctx.ws = null;\n      }\n\n      if (ctx.flushEvent) {\n        //We do not actually expect any pending messages here, because\n        //this function gets called after the whole model is loaded.\n\n        clearInterval(ctx.flushEvent);\n        ctx.flushEvent = null;\n      }\n    } }, { key: \"openWebSocket\", value: function openWebSocket(\n\n    openCB) {var _this2 = this;\n\n      var loadContext = this.loadContext;\n      var ctx = this;\n\n      ctx._opening = true;\n\n      //http and 7124->7125 are here to support local debugging, when the endpoints are overridden to\n      //point directly to local node.js process(es).\n      var url = loadContext.otg_ws.replace(\"https:\", \"wss:\").replace(\"http:\", \"ws:\").replace(\":7124\", \":7125\");\n\n      if (loadContext.queryParams) {\n        url += \"?\" + loadContext.queryParams;\n      }\n\n      var ws = new WebSocket(url, undefined, { headers: loadContext.headers });\n\n      ws.addEventListener('open', function () {\n\n        ctx._opening = false;\n        ctx.ws = ws;\n        ctx.accountIdSent = null;\n\n        ws.binaryType = \"arraybuffer\";\n\n        //On web clients that do not use the cookie approach, the headers\n        //will not get sent (unlike on node.js WebSocket implementation\n        //so we send the Authorization first thing after open\n        if (!isNodeJS()) {\n          //console.log(\"Sending headers as message\", JSON.stringify(loadContext.headers));\n          ws.send(\"/headers/\" + JSON.stringify(loadContext.headers));\n        }\n\n        //Tell the server that we support batched responses\n        ws.send(\"/options/\" + JSON.stringify({ batch_responses: true }));\n        ctx.batchResponses = true;\n\n        //Tell the server to authorize the web socket\n        //for the URNs that we will be loading\n        for (var urn in ctx.authorizeUrns) {\n          ws.send(\"/auth/\" + urn);\n        }\n\n        openCB(ws);\n      });\n\n      ws.addEventListener('message', function (data) {\n        if (ctx.batchResponses)\n        _this2.decodeBatchMessage(new Uint8Array(data.data));else\n\n        _this2.decodeSingleItemMessage(new Uint8Array(data.data));\n      });\n\n      ws.addEventListener('close', function close(event) {\n        if (ctx.numRequests) {\n          console.log(\"Socket close\", event.code, event.reason, \"pending:\", ctx.numRequests, \"tx:\", ctx.txMsg, \"rx:\", ctx.rxMsg);\n          //TODO: we need to take care of the case where there were pending requests when the socket\n          //closed -- we have to reissue those requests.\n        }\n\n        ctx._opening = false;\n        ctx.ws = null;\n\n        if (!ctx._clientClose && ctx.numRequests) {\n\n          console.log(\"Abnormal socket close. Retrying.\", event.code, event.reason, \"pending:\", ctx.numRequests);\n          ctx._retriedOpen++;\n\n          ctx.numRequests = 0;\n\n          //case where there were pending requests when the socket\n          //closed -- we have to reissue those requests.\n          if (ctx._retriedOpen <= 3) {\n            setTimeout(function () {\n              ctx.openWebSocket(function (ws) {\n                ctx.errorCB && ctx.errorCB(ctx.loadContext);\n              });\n            }, 2000);\n          } else {\n            console.error(\"Too many WebSocket failures. Giving up on mesh load.\");\n\n            ctx._wsUsable = false;\n\n            //Tell our owner that they need to retry or fail or something.\n            ctx.errorCB && ctx.errorCB(ctx.loadContext);\n          }\n        }\n\n        ctx._clientClose = false;\n      });\n\n      ws.addEventListener('error', function incoming(data) {\n        console.log(\"ws error, reverting to plain http.\", data);\n\n        ctx._opening = false;\n        ctx.ws = null;\n\n        ctx._wsUsable = false;\n\n        ctx.notifyPendingCallbacks(ctx, ws);\n\n        ctx.errorCB && ctx.errorCB(true);\n      });\n\n    } }, { key: \"decodeSingleItemMessage\", value: function decodeSingleItemMessage(\n\n    buf, resourceType) {\n      var hash = getHexStringPacked(buf, 0, 20);\n      var datagz = new Uint8Array(buf.buffer, buf.byteOffset + 20, buf.length - 20);\n\n      this.numRequests--;\n      this.rxMsg++;\n      this.loadCB(datagz, hash, this.loadContext, false, resourceType);\n    }\n\n    //Packed message format, where the response from the server may contain multiple items in the same\n    //buffer.\n    /*\n        The format is as follows:\n         Bytes      Meaning\n        ------------------------------\n        0-3        Magic number. The bytes 'OPK1'\n        4-7        Currently unused flags + resource type (ASCII 'm' or 'g') in byte 0 of this integer.\n        8-11       Number of items in the message stream. Little endian.\n        12-15      Offset of the first item in the data buffer (first item is implicitly at offset 0, so this is always zero)\n        16-19      Offset of the second item in the data buffer\n        20-...     etc... subsequent offsets, one per item\n        ...\n        Remaining bytes: all items combined into single buffer\n    */ }, { key: \"decodeBatchMessage\", value: function decodeBatchMessage(\n\n    data) {\n\n      var prefixLength = 12;\n\n      var headerInt = new Int32Array(data.buffer, 0, prefixLength / 4);\n\n      if (headerInt[0] !== 0x314B504F) {\n        console.error(\"Invalid message format\", headerInt[0].toString(16), headerInt[1], data);\n        return;\n      }\n\n      var resourceType = String.fromCharCode(headerInt[1] & 0xff);\n\n      var numItems = headerInt[2];\n      var offsets = new Int32Array(data.buffer, prefixLength, numItems);\n\n      var baseOffset = prefixLength + numItems * 4;\n\n      for (var i = 0; i < offsets.length; i++) {\n        var start = offsets[i];\n        var end = i < offsets.length - 1 ? offsets[i + 1] : data.length - baseOffset;\n\n        var oneItem = new Uint8Array(data.buffer, start + baseOffset, end - start);\n\n        this.decodeSingleItemMessage(oneItem, resourceType);\n      }\n    } }, { key: \"flushSendQueue\", value: function flushSendQueue()\n\n\n    {\n\n      var ctx = this;\n\n      for (var type in ctx._pendingSends) {\n\n        var msgs = ctx._pendingSends[type];\n\n        if (!msgs.length)\n        continue;\n\n        ctx.txMsg += msgs.length;\n\n        //Send all hashes collected in requestResources in a single shot websocket message\n\n        //Enlarge the accumulation buffer if needed\n        var len = 1 + msgs.length * 20;\n        if (ctx.msgBuffer.length < len) {\n          ctx.msgBuffer = new Uint8Array(len);\n        }\n\n        var allBufs = ctx.msgBuffer;\n\n        allBufs[0] = type.charCodeAt(0);\n        for (var i = 0; i < msgs.length; i++) {\n          hexToBin(msgs[i], allBufs, 1 + i * 20);\n        }\n        var ws = this.getWebSocket();\n\n        // ws may be null if socket is not ready (e.g., readyState closing)\n        if (!ws) {\n          return;\n        }\n\n        ws.send(new Uint8Array(allBufs.buffer, 0, len));\n        ctx._pendingSends[type] = [];\n      }\n    }\n\n    // @param {string}   urls - list of request urls\n    // @param {string}   hashes - list of hashes corresponding to each item in the urls list.\n    // @param {string}   type - one of \"t\", \"m\" or \"g\"\n  }, { key: \"requestResources\", value: function requestResources(urls, hashes, type) {\n\n      if (!this.ws) {\n        console.error(\"Trying to request resources over non-existent web socket,\");\n        return;\n      }\n\n      var ctx = this;\n      type = type || \"g\";\n\n      for (var i = 0; i < urls.length; i++) {\n        ctx.numRequests++;\n\n        var url = urls[i];\n\n        var wspath = url.slice(url.indexOf(\"/cdn/\") + 5);\n        var parts = wspath.split(\"/\");\n\n        //Send the account ID prefix just once, it's not likely to vary\n        if (ctx.accountIdSent !== parts[1]) {\n          this.ws.send(\"/account_id/\" + parts[1]);\n          ctx.accountIdSent = parts[1];\n        }\n\n        ctx._pendingSends[type].push(hashes[i]);\n\n        if (ctx._pendingSends[type].length > _maxRequests) {\n          ctx.flushSendQueue();\n        }\n      }\n    } }]);return OtgWs;}();\n\n\n\nmodule.exports.OtgWs = OtgWs;","\"use strict\";\n\nexport function readCameraDefinition(pfr, inst) {\n  var entry = inst.definition;\n  var tse = pfr.seekToEntry(entry);\n  if (!tse)\n  return null;\n  if (tse.version > 2 /*Constants::CameraDefinitionVersion*/)\n    return null;\n\n  var s = pfr.stream;\n  var cam = {\n    isPerspective: !s.getUint8(), /* 0 = perspective, 1 = ortho */\n    position: pfr.readVector3f(),\n    target: pfr.readVector3f(),\n    up: pfr.readVector3f(),\n    aspect: s.getFloat32(),\n    fov: s.getFloat32() * (180 / Math.PI) };\n\n  if (tse.version < 2) {\n    // Skip the clip planes for old files.\n    s.getFloat32();\n    s.getFloat32();\n  }\n\n  cam.orthoScale = s.getFloat32();\n\n  return cam;\n}","import { LmvBox3 } from '../../../wgs/scene/LmvBox3';\nimport { LmvMatrix4 } from '../../../wgs/scene/LmvMatrix4';\nimport { LmvVector3 } from '../../../wgs/scene/LmvVector3';\nimport { isMobileDevice } from '../../../compat';\nimport { MeshFlags } from '../../../wgs/scene/MeshFlags';\n\n//FragList represents an array of fragments, stored in Structure of Arrays form\n//which allows us to free some parts easily and transfer the fragment information in large chunks.\nvar NUM_FRAGMENT_LIMITS = isMobileDevice() ? null : null;\nvar MAX_BBOX_RATIO = 100;\n\n/** @constructor */\n// note: update transferable var list in SvfWorker.ts if you add a new field\nexport function FragList() {\n  this.length = 0;\n  this.numLoaded = 0;\n\n  this.boxes = null;\n  this.transforms = null;\n  this.materials = null;\n\n  this.packIds = null;\n  this.entityIndexes = null;\n\n  this.fragId2dbId = null;\n\n  this.topoIndexes = null;\n\n  this.visibilityFlags = null;\n}\n\nexport function readGeometryMetadataIntoFragments(pfr, fragments) {\n  var length = fragments.geomDataIndexes.length;\n  var stream = pfr.stream;\n  var primsCount = 0;\n\n  // Read from cache if the same entry has been reading from stream.\n  var entryCache = {};\n  var mesh2frag = fragments.mesh2frag = {};\n  fragments.polygonCounts = fragments.geomDataIndexes;\n  for (var g = 0; g < length; g++) {\n    var entry = fragments.geomDataIndexes[g];\n\n    if (entryCache[entry]) {\n      var i = entryCache[entry];\n      fragments.polygonCounts[g] = fragments.polygonCounts[i];\n      fragments.packIds[g] = fragments.packIds[i];\n      fragments.entityIndexes[g] = fragments.entityIndexes[i];\n      primsCount += fragments.polygonCounts[g];\n    } else\n    {\n      var tse = pfr.seekToEntry(entry);\n      if (!tse)\n      return;\n\n      // Frag type, seems no use any more.\n      stream.getUint8();\n      //skip past object space bbox -- we don't use that\n      stream.seek(stream.offset + 24);\n\n      fragments.polygonCounts[g] = stream.getUint16();\n      fragments.packIds[g] = parseInt(pfr.readString());\n      fragments.entityIndexes[g] = pfr.readU32V();\n      primsCount += fragments.polygonCounts[g];\n\n      entryCache[entry] = g;\n    }\n\n    // Construct mesh2frag here directly\n    var meshid = fragments.packIds[g] + \":\" + fragments.entityIndexes[g];\n    var meshRefs = mesh2frag[meshid];\n    if (meshRefs === undefined) {\n      //If it's the first fragments for this mesh,\n      //store the index directly -- most common case.\n      mesh2frag[meshid] = g;\n    } else\n    if (!Array.isArray(meshRefs)) {\n      //otherwise put the fragments that\n      //reference the mesh into an array\n      mesh2frag[meshid] = [meshRefs, g];\n    } else\n    {\n      //already is an array\n      meshRefs.push(g);\n    }\n\n  }\n  fragments.geomDataIndexes = null;\n  entryCache = null;\n\n  return primsCount;\n}\n\nexport function readGeometryMetadata(pfr, geoms)\n{\n  var numGeoms = pfr.getEntryCounts();\n  var stream = pfr.stream;\n\n  geoms.length = numGeoms;\n  var fragTypes = geoms.fragTypes = new Uint8Array(numGeoms);\n  var primCounts = geoms.primCounts = new Uint16Array(numGeoms);\n  var packIds = geoms.packIds = new Int32Array(numGeoms);\n  var entityIndexes = geoms.entityIndexes = new Int32Array(numGeoms);\n  // Holds the indexes to the topology data.\n  var topoIndexes;\n\n  for (var g = 0, gEnd = numGeoms; g < gEnd; g++) {\n    var tse = pfr.seekToEntry(g);\n    if (!tse)\n    return;\n\n    fragTypes[g] = stream.getUint8();\n    //skip past object space bbox -- we don't use that\n    stream.seek(stream.offset + 24);\n    primCounts[g] = stream.getUint16();\n    packIds[g] = parseInt(pfr.readString());\n    entityIndexes[g] = pfr.readU32V();\n\n    if (tse.version > 2) {\n      var topoIndex = stream.getInt32();\n      if (topoIndex != -1 && topoIndexes === undefined) {\n        topoIndexes = geoms.topoIndexes = new Int32Array(numGeoms);\n        // Fill in the first entries to indicate\n        for (var i = 0; i < g; i++) {\n          topoIndexes[i] = -1;}\n      }\n\n      if (topoIndexes != undefined)\n      topoIndexes[g] = topoIndex;\n    }\n\n  }\n}\n\n// Convert a list of object id (dbid) to a list of integers where each integer is an index of the fragment\n// in fragment list that associated with the object id.\nfunction objectIds2FragmentIndices(pfr, ids) {\n  var ret = [];\n\n  if (!ids) {\n    return ret;\n  }\n\n  var counts = pfr.getEntryCounts();\n  var stream = pfr.stream;\n  for (var entry = 0; entry < counts; entry++) {\n    var tse = pfr.seekToEntry(entry);\n    if (!tse)\n    return;\n    if (tse.version > 5)\n    return;\n\n    // Keep reading fragment fields as usual, but does not store anything as we only\n    // interested in the data base id / object id field at the very end.\n    if (tse.version > 4) {\n      // Flag byte.\n      pfr.readU8();\n    }\n    // Material index\n    pfr.readU32V();\n    if (tse.version > 2) {\n      // Geometry metadata reference\n      pfr.readU32V();\n    } else {\n      // Pack file reference\n      pfr.readString();\n      pfr.readU32V();\n    }\n\n    // Transform\n    pfr.readTransform(entry, null, 12 * entry);\n\n    // Bounding box\n    for (var i = 0; i < 6; i++) {\n      stream.getFloat32();\n    }\n\n    if (tse.version > 1) {\n      var dbid = pfr.readU32V();\n      if (ids.indexOf(dbid) >= 0) {\n        ret.push(entry);\n      }\n    }\n  }\n\n  return ret;\n}\n\n// globalOffset:        GlobalOffset as specified by loadOptions (may be undefined)\n// defaultGlobalOffset: GlobalOffset as initially chosen by SvfPlacementUtil.initPlacement\nexport function readFragments(pfr, frags, globalOffset, placementTransform, fragmentTransformsDouble, ids, bbox, defaultGlobalOffset) {\n  var filteredIndices = objectIds2FragmentIndices(pfr, ids);\n\n  //Initialize all the fragments structures\n  //once we know how many fragments we have.\n  var numFrags = filteredIndices.length ? filteredIndices.length : pfr.getEntryCounts();\n  var stream = pfr.stream;\n\n  if (NUM_FRAGMENT_LIMITS && numFrags > NUM_FRAGMENT_LIMITS) {\n    numFrags = NUM_FRAGMENT_LIMITS;\n  }\n\n  // Recored the total length of the fragments\n  frags.totalLength = pfr.getEntryCounts();\n  frags.length = numFrags;\n  frags.numLoaded = 0;\n\n  //Allocate flat array per fragment property\n  var fragBoxes = frags.boxes = fragmentTransformsDouble ? new Float64Array(6 * numFrags) : new Float32Array(6 * numFrags);\n  var transforms = frags.transforms = fragmentTransformsDouble ? new Float64Array(12 * numFrags) : new Float32Array(12 * numFrags);\n  var materials = frags.materials = new Int32Array(numFrags);\n  var packIds = frags.packIds = new Int32Array(numFrags);\n  var entityIndexes = frags.entityIndexes = new Int32Array(numFrags);\n  var geomDataIndexes = frags.geomDataIndexes = new Int32Array(numFrags);\n  var fragId2dbId = frags.fragId2dbId = new Int32Array(numFrags); //NOTE: this potentially truncates IDs bigger than 4 billion -- can be converted to array if needed.\n  var visibilityFlags = frags.visibilityFlags = new Uint16Array(numFrags);\n\n  var tmpBox;\n  var tmpMat;\n  var boxTranslation = [0, 0, 0];\n  if (placementTransform) {\n    tmpBox = new LmvBox3();\n    tmpMat = new LmvMatrix4(true).fromArray(placementTransform.elements);\n  }\n\n  var calculateOffset = !globalOffset && bbox;\n  var dpTranslations = transforms;\n  // Normally the translations component of transforms is 12 entries for each\n  // transform and then offset by 9 in the transform.\n  var translationSize = 12;\n  var translationOff = 9;\n  if (calculateOffset) {\n    // A global offset wasn't specified in the load context, so we will calculate one\n    // here. We normally use the center of the bbox, but if the bbox is signficantly\n    // larger than the objects in the model, then we make the global offset the\n    // average of the centers of the fragment bounding boxes, which will push\n    // offset toward places where there are more fragments.\n    if (!fragmentTransformsDouble) {\n      // We need to keep bboxes and transform translations in double precision\n      // to guarantee precision in large bbox cases\n      fragBoxes = new Float64Array(6 * numFrags);\n      dpTranslations = new Float64Array(3 * numFrags);\n      // In this case the translations are 3 entries offset by 0\n      translationSize = 3;\n      translationOff = 0;\n    }\n  }\n\n  //Helper functions used by the main fragment read loop.\n\n  function applyPlacement(index) {\n    if (placementTransform) {\n      var offset = index * 6;\n      tmpBox.setFromArray(fragBoxes, offset);\n      tmpBox.applyMatrix4(tmpMat);\n      tmpBox.copyToArray(fragBoxes, offset);\n    }\n  }\n\n  function readBoundingBox(entry) {\n    var offset = entry * 6;\n    for (var i = 0; i < 6; i++) {\n      fragBoxes[offset++] = stream.getFloat32();}\n  }\n\n  function readBoundingBoxOffset(entry, boxTranslation) {\n    var offset = entry * 6;\n    for (var i = 0; i < 6; i++) {\n      fragBoxes[offset++] = stream.getFloat32() + boxTranslation[i % 3];}\n  }\n\n  //Spin through all the fragments now\n  for (var entry = 0, eEnd = frags.length; entry < eEnd; entry++) {\n    var tse = filteredIndices.length ? pfr.seekToEntry(filteredIndices[entry]) : pfr.seekToEntry(entry);\n\n    if (!tse)\n    return;\n    if (tse.version > 5)\n    return;\n\n    var isVisible = true;\n    if (tse.version > 4) {\n      // Fragments v5+ include a flag byte, the LSB of which denotes\n      // visibility\n      var flags = pfr.readU8();\n      isVisible = (flags & 0x01) != 0;\n    }\n    visibilityFlags[entry] = isVisible ? MeshFlags.MESH_VISIBLE : 0;\n\n    materials[entry] = pfr.readU32V();\n\n    if (tse.version > 2) {\n      //In case it's new style fragment that\n      //points to a geometry metadata entry\n      geomDataIndexes[entry] = pfr.readU32V();\n    } else\n    {\n      //Old style fragment, pack reference is directly\n      //encoded in the fragment entry\n      packIds[entry] = parseInt(pfr.readString());\n      entityIndexes[entry] = pfr.readU32V();\n    }\n\n    pfr.readTransform(entry, transforms, 12 * entry, placementTransform, globalOffset, boxTranslation);\n    if (calculateOffset && dpTranslations !== transforms) {\n      dpTranslations.set(boxTranslation, entry * translationSize + translationOff);\n    }\n\n    if (tse.version > 3) {\n      // With this version the transform's (double precision) translation is subtracted from the BB,\n      // so we have to add it back\n      readBoundingBoxOffset(entry, boxTranslation);\n    } else\n    {\n      readBoundingBox(entry);\n    }\n\n    //Apply the placement transform to the world space bbox\n    applyPlacement(entry);\n\n    //Apply any global offset to the world space bbox\n    if (globalOffset) {\n      var offset = entry * 6;\n      fragBoxes[offset++] -= globalOffset.x;\n      fragBoxes[offset++] -= globalOffset.y;\n      fragBoxes[offset++] -= globalOffset.z;\n      fragBoxes[offset++] -= globalOffset.x;\n      fragBoxes[offset++] -= globalOffset.y;\n      fragBoxes[offset++] -= globalOffset.z;\n    }\n\n    if (tse.version > 1) {\n      fragId2dbId[entry] = pfr.readU32V();\n    }\n    // Skip reading path ID which is not in use now.\n    // pfr.readPathID();\n  }\n\n  if (calculateOffset) {\n    // We compare the size of the bbox against the size of the largest\n    // max size of the bounding boxes in the model to see decide\n    // what to use as the globalOffset.\n\n    // First calculate the max of object box sizes\n    var maxX = -1,maxY = -1,maxZ = -1;\n    var boxEnd = fragBoxes.length;\n    // Effectively this calculates the average of the centers of the fragment bboxes\n    for (var i = 0; i < boxEnd; i += 6) {\n      maxX = Math.max(maxX, fragBoxes[i + 3] - fragBoxes[i]);\n      maxY = Math.max(maxY, fragBoxes[i + 4] - fragBoxes[i + 1]);\n      maxZ = Math.max(maxZ, fragBoxes[i + 5] - fragBoxes[i + 2]);\n    }\n\n    var size = bbox.size();\n    if (size.x > maxX * MAX_BBOX_RATIO || size.y > maxY * MAX_BBOX_RATIO || size.z > maxZ * MAX_BBOX_RATIO) {\n      // Now calculate the weighted offset. The weighted globalOffset is\n      // weighted to be close to places with more fragments.\n      var offsetX = 0,offsetY = 0,offsetZ = 0;\n      // Effectively this calculates the average of the centers of the fragment bboxes\n      for (var i = 0; i < boxEnd; i += 3) {\n        offsetX += fragBoxes[i];\n        offsetY += fragBoxes[i + 1];\n        offsetZ += fragBoxes[i + 2];\n      }\n      globalOffset = new LmvVector3(offsetX * 3 / boxEnd, offsetY * 3 / boxEnd, offsetZ * 3 / boxEnd);\n    } else {\n      globalOffset = defaultGlobalOffset;\n    }\n\n    // Need to addjust the bounding boxes, using the globalOffset\n    var outBoxes = frags.boxes;\n    for (i = 0; i < boxEnd; i += 3) {\n      outBoxes[i] = fragBoxes[i] - globalOffset.x;\n      outBoxes[i + 1] = fragBoxes[i + 1] - globalOffset.y;\n      outBoxes[i + 2] = fragBoxes[i + 2] - globalOffset.z;\n    }\n\n    if (placementTransform && dpTranslations !== transforms) {\n      var tmpVec = new LmvVector3();\n      // And adjust the transforms, too\n      for (entry = 0; entry < eEnd; ++entry) {\n        var _from = entry * translationSize + translationOff;\n        tmpVec.fromArray(dpTranslations, _from).applyMatrix4(tmpMat).toArray(dpTranslations, _from);\n      }\n    }\n\n    // And adjust the transforms, too\n    for (entry = 0; entry < eEnd; ++entry) {\n      var to = entry * 12 + 9;\n      var from = entry * translationSize + translationOff;\n      transforms[to] = dpTranslations[from] - globalOffset.x;\n      transforms[to + 1] = dpTranslations[from + 1] - globalOffset.y;\n      transforms[to + 2] = dpTranslations[from + 2] - globalOffset.z;\n    }\n  }\n\n  frags.finishLoading = true;\n\n  return globalOffset;\n}\n\n// Filter fragments based on specified object id list, by picking\n// up fragment whose id is in the specified id list, and dropping others.\n// This is used to produce a list of fragments that matches a search hit.\nexport function filterFragments(frags, ids) {\n  frags.length = ids.length;\n  frags.numLoaded = 0;\n  var numFrags = frags.length;\n  var bb = [Infinity, Infinity, Infinity, -Infinity, -Infinity, -Infinity];\n\n  var fragBoxes = new Float32Array(6 * numFrags);\n  var transforms = new Float32Array(12 * numFrags);\n  var materials = new Int32Array(numFrags);\n  var packIds = new Int32Array(numFrags);\n  var entityIndexes = new Int32Array(numFrags);\n  var visibilityFlags = new Uint16Array(numFrags);\n  var fragId2DbId = new Int32Array(numFrags);\n  var polygonCounts = new Int32Array(numFrags);\n  var geomDataIndexes = frags.geomDataIndexes ? new Int32Array(numFrags) : null;\n  var topoIndexes = frags.topoIndexes ? new Int32Array(numFrags) : null;\n\n  var mesh2frag = {};\n\n  for (var i = 0; i < ids.length; ++i) {\n    var index = ids[i];\n\n    var idxOld = index * 6;\n    var idxNew = i * 6;\n    for (var j = 0; j < 6; ++j) {\n      fragBoxes[idxNew++] = frags.boxes[idxOld++];}\n\n    idxOld = index * 12;\n    idxNew = i * 12;\n    for (var _j = 0; _j < 12; ++_j) {\n      transforms[idxNew++] = frags.transforms[idxOld++];}\n\n    materials[i] = frags.materials[index];\n    packIds[i] = frags.packIds[index];\n    entityIndexes[i] = frags.entityIndexes[index];\n    visibilityFlags[i] = frags.visibilityFlags[index];\n    fragId2DbId[i] = frags.fragId2dbId[index];\n    polygonCounts[i] = frags.polygonCounts[index];\n    if (geomDataIndexes) {\n      geomDataIndexes[i] = frags.geomDataIndexes[index];\n    }\n    if (topoIndexes) {\n      topoIndexes[i] = frags.topoIndexes[index];\n    }\n\n    // TODO: consolidate this with addToMeshMap.\n    var meshID = frags.packIds[index] + \":\" + frags.entityIndexes[index];\n    var meshRefs = mesh2frag[meshID];\n    if (meshRefs == undefined) {\n      mesh2frag[meshID] = i;\n    } else\n    if (!Array.isArray(meshRefs)) {\n      mesh2frag[meshID] = [meshRefs, i];\n    } else\n    {\n      meshRefs.push(i);\n    }\n\n    var bbIndex = i * 6;\n    for (var _j2 = 0; _j2 < 3; ++_j2) {\n      if (fragBoxes[bbIndex + _j2] < bb[_j2])\n      bb[_j2] = fragBoxes[bbIndex + _j2];}\n    for (var _j3 = 3; _j3 < 6; ++_j3) {\n      if (fragBoxes[bbIndex + _j3] > bb[_j3])\n      bb[_j3] = fragBoxes[bbIndex + _j3];}\n  }\n\n  frags.boxes = fragBoxes;\n  frags.transforms = transforms;\n  frags.materials = materials;\n  frags.packIds = packIds;\n  frags.entityIndexes = entityIndexes;\n  frags.mesh2frag = mesh2frag;\n  frags.visibilityFlags = visibilityFlags;\n  frags.fragId2dbId = fragId2DbId;\n  frags.polygonCounts = polygonCounts;\n  frags.geomDataIndexes = geomDataIndexes;\n  frags.topoIndexes = topoIndexes;\n\n  frags.totalLength = numFrags;\n\n  return bb;\n}","import { isNodeJS } from \"../../../compat\";\nimport { VBUtils } from '../common/VbUtils';\n//import { readOpenCTM_MG2 } from './OctmMG2';\n\n\"use strict\";\n\n//=====================================================================\n//=====================================================================\n//=====================================================================\n//=====================================================================\n//=====================================================================\n//=====================================================================\n//=====================================================================\n\nvar ntmp = new Float32Array(3);\n\nvar INV_PI = 1.0 / Math.PI;\n\nvar atan2 = Math.atan2;\nif (!isNodeJS()) {\n  //Faster approximation to atan2\n  //http://math.stackexchange.com/questions/1098487/atan2-faster-approximation\n  //The algorithm does not deal with special cases such as x=0,y=0x=0,y=0,\n  //nor does it consider special IEEE-754 floating-point operands such as infinities and NaN.\n  atan2 = function atan2(y, x) {\n    var ax = Math.abs(x);\n    var ay = Math.abs(y);\n    //var a = (ax > ay) ? ay / ax : ax / ay;\n    var a = Math.min(ax, ay) / Math.max(ax, ay);\n    var s = a * a;\n    var r = ((-0.0464964749 * s + 0.15931422) * s - 0.327622764) * s * a + a;\n    if (ay > ax)\n    r = 1.57079637 - r;\n    if (x < 0)\n    r = 3.14159274 - r;\n    if (y < 0)\n    r = -r;\n    return r;\n  };\n}\n\nfunction readOpenCTM_RAW(stream, mesh, dstBuffer, startOffset, estimateSizeOnly) {\n\n  var readOpenCTMString = function readOpenCTMString() {\n    return stream.getString(stream.getInt32());\n  };\n\n  //Now do the data reads\n  var name = stream.getString(4);\n  if (name != \"INDX\") return null;\n\n  var vcount = mesh.vertexCount;\n  var tcount = mesh.triangleCount;\n  var stride = mesh.vbstride;\n\n  //We will create a single ArrayBuffer to back both the vertex and index buffers\n  //The indices will be places after the vertex information, because we need alignment\n  //of 4 bytes\n  var vbSizeFloat = vcount * stride;\n  var totalSizeInFloats = vbSizeFloat + (tcount * 3 * 2 + 3) / 4 | 0;\n\n  mesh.sharedBufferBytes = totalSizeInFloats * 4;\n\n  if (estimateSizeOnly) {\n    return;\n  }\n\n  var vbf;\n  if (!dstBuffer) {\n    dstBuffer = new ArrayBuffer(totalSizeInFloats * 4);\n    startOffset = 0;\n  }\n\n  vbf = mesh.vb = new Float32Array(dstBuffer, startOffset, vbSizeFloat);\n  mesh.indices = new Uint16Array(dstBuffer, startOffset + vbSizeFloat * 4, tcount * 3);\n  stream.getIndicesArray(vbf.buffer, startOffset + vbSizeFloat * 4, tcount * 3);\n\n  name = stream.getString(4);\n  if (name != \"VERT\") return null;\n\n  var vbi;\n  //See if we want to pack the normals into two shorts\n  if (mesh.vblayout.normal && mesh.vblayout.normal.itemSize === 2)\n  vbi = new Uint16Array(vbf.buffer, vbf.byteOffset, vbf.byteLength / 2);\n\n  //Read positions\n  stream.getVector3Array(vbf, vcount, mesh.vblayout['position'].offset, stride);\n\n  //Read normals\n  var i, t, offset;\n  if (mesh.flags & 1) {\n    name = stream.getString(4);\n    if (name != \"NORM\") return null;\n\n    if (vbi) {\n      if (ntmp.length < vcount * 3)\n      ntmp = new Float32Array(vcount * 3);\n      stream.getVector3Array(ntmp, vcount, 0, 3);\n\n      for (i = 0, offset = mesh.vblayout['normal'].offset;\n      i < vcount;\n      i++, offset += stride)\n      {\n        var pnx = (atan2(ntmp[i * 3 + 1], ntmp[i * 3]) * INV_PI + 1.0) * 0.5;\n        var pny = (ntmp[i * 3 + 2] + 1.0) * 0.5;\n\n        vbi[offset * 2] = pnx * 65535 | 0;\n        vbi[offset * 2 + 1] = pny * 65535 | 0;\n      }\n    } else {\n      stream.getVector3Array(vbf, vcount, mesh.vblayout['normal'].offset, stride);\n    }\n\n  }\n\n  //Read uv layers\n  for (t = 0; t < mesh.texMapCount; t++) {\n    name = stream.getString(4);\n    if (name != \"TEXC\") return null;\n\n    var uv = {\n      name: readOpenCTMString(),\n      file: readOpenCTMString() };\n\n    mesh.uvs.push(uv);\n\n    var uvname = \"uv\";\n    if (t)\n    uvname += (t + 1).toString();\n\n    stream.getVector2Array(vbf, vcount, mesh.vblayout[uvname].offset, stride);\n  }\n\n  var attributeOffset = stride - (mesh.attribMapCount || 0) * 3;\n\n  //Read vertex colors and uvw (and skip any other attributes that we don't know)\n  for (t = 0; t < mesh.attribMapCount; t++) {\n    name = stream.getString(4);\n    if (name != \"ATTR\") return null;\n\n    var attr = {\n      name: readOpenCTMString() };\n\n\n    // console.log(\"attribute\", attr.name);\n\n    var attrname;\n    if (attr.name.indexOf(\"Color\") != -1) //Special case of vertex colors\n      attrname = 'color';else\n    if (attr.name.indexOf(\"UVW\") != -1) //Only used by prism 3d wood.\n      attrname = 'uvw';else\n    {\n      //Other attributes, though we don't know what to do with those\n      mesh.attrs.push(attr);\n      stream.getBytes(vcount * 16); //skip past\n      continue;\n    }\n\n    mesh.vblayout[attrname] = { offset: attributeOffset, itemSize: 3 };\n\n    var v4 = [0, 0, 0, 0];\n    for (i = 0, offset = attributeOffset;\n    i < vcount;\n    i++, offset += stride) {\n      stream.getVector4(v4, 0);\n      vbf[offset] = v4[0];\n      vbf[offset + 1] = v4[1];\n      vbf[offset + 2] = v4[2];\n      //Ignoring the alpha term. For color attribute, we can actually pack it in a 4-byte attribute,\n      //but we do not know in advance (when we allocate the target buffer) if the OCTM attribute is UVW or color\n    }\n    attributeOffset += 3;\n  }\n\n}\n\n// Helper function for calculating new vertex for wide lines\nvar getLineSplitVertex = function getLineSplitVertex(stride, vbf, neighbourhoods, a, b) {\n  // New vertex position\n  var pos = {\n    x: vbf[stride * a],\n    y: vbf[stride * a + 1],\n    z: vbf[stride * a + 2] };\n\n  // Direction to the next vertex for segment (must be valid always)\n  var next = {\n    x: pos.x - vbf[stride * b],\n    y: pos.y - vbf[stride * b + 1],\n    z: pos.z - vbf[stride * b + 2] };\n\n\n  // Index of previous point\n  var prev_ind = neighbourhoods[a].next == b ? neighbourhoods[a].prev : neighbourhoods[a].next;\n\n  // Direction to previous point\n  var prev;\n  // If does not exist\n  if (prev_ind < 0) {\n    // mirror next direction\n    prev = {\n      x: next.x,\n      y: next.y,\n      z: next.z };\n\n  } else {\n    // else - set directly\n    prev = {\n      x: vbf[stride * prev_ind] - pos.x,\n      y: vbf[stride * prev_ind + 1] - pos.y,\n      z: vbf[stride * prev_ind + 2] - pos.z };\n\n  }\n\n  return {\n    pos: pos,\n    next: next,\n    prev: prev };\n\n};\n\n// convert a line mesh into specially organised triangles, which will be drawn\n// as lines with a specific width\nvar convertToWideLines = function convertToWideLines(mesh, stride, vbf, indexPairs, offset) {\n\n  var numCoords = 3;\n\n  // add some extra vertex data to the mesh\n  // prev & next are directions specific vertex positions, which are used to specify\n  // the offset direction in the shader\n  // side is the directed line width used for the magnitude of the offset in the shader\n  offset = mesh.vbstride;\n  mesh.vblayout['prev'] = { offset: offset, itemSize: numCoords };\n  offset += numCoords;\n  mesh.vblayout['next'] = { offset: offset, itemSize: numCoords };\n  offset += numCoords;\n  mesh.vblayout['side'] = { offset: offset, itemSize: 1 };\n\n  mesh.vbstride += 7;\n\n  // Count of shared vertexes\n  var connections = 0;\n\n  // Build neighbourhoods of each vertex\n  var neighbourhoods = new Array(mesh.vertexCount);\n  var i, j, n, a, b;\n  for (i = 0; i < mesh.vertexCount; ++i) {\n    neighbourhoods[i] = {\n      prev: -1, // index of previous vertex\n      next: -1, // index of next vertex\n      prev_seg: -1 // index of previous segment\n    };\n  }\n\n  for (j = 0; j < indexPairs; ++j) {\n    n = j * 2;\n    a = mesh.indices[n];\n    b = mesh.indices[n + 1];\n    neighbourhoods[a].next = b;\n    if (neighbourhoods[a].prev >= 0) {\n      ++connections;\n    }\n\n    neighbourhoods[b].prev = a;\n    neighbourhoods[b].prev_seg = j;\n    if (neighbourhoods[b].next >= 0) {\n      ++connections;\n    }\n  }\n\n  // Each segment will have its own vertexes\n  var newBaseVertexCount = indexPairs * 2;\n  var newBaseVertexies = new Array(newBaseVertexCount);\n\n  // Indexes contains line segments and additional connection for shared vertexes\n  var newIndices = new Uint16Array(2 * numCoords * (indexPairs + connections));\n  var meshIndex = 0;\n\n  // Split all vertexes and build indexes of all triangles\n  for (j = 0; j < indexPairs; ++j) {\n    n = j * 2;\n    a = mesh.indices[n];\n    b = mesh.indices[n + 1];\n    // New vertexes with calculated next and previous points\n    newBaseVertexies[n] = getLineSplitVertex(stride, vbf, neighbourhoods, a, b);\n    newBaseVertexies[n + 1] = getLineSplitVertex(stride, vbf, neighbourhoods, b, a);\n\n    // Segment triangles\n    a = n;\n    b = n + 1;\n    // First two coordinates form line segment are used in ray casting\n    newIndices[meshIndex++] = 2 * a + 1;\n    newIndices[meshIndex++] = 2 * b;\n    newIndices[meshIndex++] = 2 * a;\n    newIndices[meshIndex++] = 2 * b;\n    newIndices[meshIndex++] = 2 * b + 1;\n    newIndices[meshIndex++] = 2 * a;\n\n    // Connection triangles for shared vertexes, if exist\n    a = mesh.indices[n];\n    if (neighbourhoods[a].prev >= 0) {\n      b = neighbourhoods[a].prev_seg * 2 + 1;\n      a = n;\n\n      newIndices[meshIndex++] = 2 * b;\n      newIndices[meshIndex++] = 2 * a;\n      newIndices[meshIndex++] = 2 * b + 1;\n      newIndices[meshIndex++] = 2 * a + 1;\n      newIndices[meshIndex++] = 2 * a;\n      newIndices[meshIndex++] = 2 * b;\n    }\n  }\n  mesh.indices = newIndices;\n\n  // Finally, fill vertex buffer with new data\n  var newVertexCount = newBaseVertexCount * 2;\n  mesh.vb = new Float32Array(newVertexCount * mesh.vbstride);\n\n  offset = mesh.vblayout['position'].offset;\n  for (var c = 0; c < newBaseVertexCount; ++c) {\n    // Duplicate every vertex for each side\n    for (var side = 0; side < 2; ++side) {\n      // Vertex position\n      mesh.vb[offset] = newBaseVertexies[c].pos.x;\n      mesh.vb[offset + 1] = newBaseVertexies[c].pos.y;\n      mesh.vb[offset + 2] = newBaseVertexies[c].pos.z;\n      offset += stride;\n\n      // Previous vertex direction\n      mesh.vb[offset] = newBaseVertexies[c].prev.x;\n      mesh.vb[offset + 1] = newBaseVertexies[c].prev.y;\n      mesh.vb[offset + 2] = newBaseVertexies[c].prev.z;\n      offset += numCoords;\n\n      // Next vertex direction\n      mesh.vb[offset] = newBaseVertexies[c].next.x;\n      mesh.vb[offset + 1] = newBaseVertexies[c].next.y;\n      mesh.vb[offset + 2] = newBaseVertexies[c].next.z;\n      offset += numCoords;\n\n      // Side (offset direction)\n      mesh.vb[offset] = side ? -1 : 1;\n      offset += 1;\n    }\n  }\n\n  mesh.vertexCount = newVertexCount;\n\n  // flag to mark this mesh as special\n  mesh.isWideLines = true;\n};\n\n//=====================================================================\n//=====================================================================\n//=====================================================================\n//=====================================================================\n//=====================================================================\n//=====================================================================\n//=====================================================================\n\n\nvar readOpenCTM = function readOpenCTM(stream, dstBuffer, startOffset, estimateSizeOnly, packNormals) {\n\n  var readOpenCTMString = function readOpenCTMString() {\n    return stream.getString(stream.getInt32());\n  };\n\n  var fourcc = stream.getString(4);\n  if (fourcc != \"OCTM\") return null;\n\n  var version = stream.getInt32();\n  if (version != 5) return null;\n\n  var method = stream.getString(3);\n  stream.getUint8(); //read the last 0 char of the RAW or MG2 fourCC.\n\n  var mesh = {\n    stream: null,\n    vertices: null,\n    indices: null,\n    normals: null,\n    colors: null,\n    uvs: [],\n    attrs: [] };\n\n\n  mesh.vertexCount = stream.getInt32();\n  mesh.triangleCount = stream.getInt32();\n  mesh.texMapCount = stream.getInt32();\n  mesh.attribMapCount = stream.getInt32();\n  mesh.flags = stream.getInt32();\n  mesh.comment = readOpenCTMString();\n\n  var usePackedNormals = packNormals;\n\n\n  //Calculate stride of the interleaved buffer we need\n  mesh.vbstride = 3; //position is always there\n  if (mesh.flags & 1)\n  mesh.vbstride += usePackedNormals ? 1 : 3; //normal\n  mesh.vbstride += 2 * (mesh.texMapCount || 0); //texture coords\n  mesh.vbstride += 3 * (mesh.attribMapCount || 0); //we now support color and uvw. Both of them use three floats.\n\n  mesh.vblayout = {};\n  var offset = 0;\n\n  mesh.vblayout['position'] = { offset: offset, itemSize: 3 };\n\n  offset += 3;\n  if (mesh.flags & 1) {\n    mesh.vblayout['normal'] = { offset: offset,\n      itemSize: usePackedNormals ? 2 : 3,\n      bytesPerItem: usePackedNormals ? 2 : 4,\n      normalize: usePackedNormals };\n\n    offset += usePackedNormals ? 1 : 3; //offset is counted in units of 4 bytes\n  }\n  if (mesh.texMapCount) {\n    for (var i = 0; i < mesh.texMapCount; i++) {\n      var uvname = \"uv\";\n      if (i)\n      uvname += (i + 1).toString();\n\n      mesh.vblayout[uvname] = { offset: offset, itemSize: 2 };\n      offset += 2;\n    }\n  }\n\n  //Now read and populate the mesh data\n  if (method == \"RAW\") {\n    readOpenCTM_RAW(stream, mesh, dstBuffer, startOffset, estimateSizeOnly);\n    if (!estimateSizeOnly) {\n      VBUtils.deduceUVRepetition(mesh);\n      VBUtils.computeBounds3D(mesh);\n    }\n    return mesh;\n  } else\n  if (method == \"MG2\") {\n    //This code path is never used, since MG2 compression is disabled at the LMVTK C++ level\n    debug(\"readOpenCTM_MG2(stream, mesh, dstBuffer, startOffset, estimateSizeOnly) not supported\");\n    if (!estimateSizeOnly) {\n      VBUtils.deduceUVRepetition(mesh);\n      VBUtils.computeBounds3D(mesh);\n    }\n    return mesh;\n  } else\n\n  return null;\n};\n\n\nvar readLinesOrPoints = function readLinesOrPoints(pfr, tse, estimateSizeOnly, lines) {\n\n  //TODO: Line geometry does not go into shared buffers yet\n  if (estimateSizeOnly)\n  return null;\n\n  // Initialize mesh\n  var mesh = {\n    vertices: null,\n    indices: null,\n    colors: null,\n    normals: null,\n    uvs: [],\n    attrs: [],\n    lineWidth: 1.0 };\n\n\n  // Read vertex count, index count, polyline bound count\n  var indexCount;\n  if (lines) {\n    // Read vertex count, index count, polyline bound count\n    var polyLineBoundCount;\n    if (tse.version > 1) {\n      mesh.vertexCount = pfr.readU16();\n      indexCount = pfr.readU16();\n      polyLineBoundCount = pfr.readU16();\n\n      if (tse.version > 2) {\n        mesh.lineWidth = pfr.readF32();\n      }\n    } else {\n      mesh.vertexCount = pfr.readU32V();\n      indexCount = pfr.readU32V();\n      polyLineBoundCount = pfr.readU32V();\n    }\n    mesh.isLines = true;\n  } else {\n    // Read vertex count, index count, point size\n    mesh.vertexCount = pfr.readU16();\n    indexCount = pfr.readU16();\n    mesh.pointSize = pfr.readF32();\n    mesh.isPoints = true;\n  }\n\n  // Determine if color is defined\n  var hasColor = pfr.stream.getUint8() != 0;\n\n\n  //Calculate stride of the interleaved buffer we need\n  mesh.vbstride = 3; //position is always there\n  if (hasColor)\n  mesh.vbstride += 3; //we only interleave the color attribute, and we reduce that to RGB from ARGB.\n\n  mesh.vblayout = {};\n  var offset = 0;\n\n  mesh.vblayout['position'] = { offset: offset, itemSize: 3 };\n\n  offset += 3;\n  if (hasColor) {\n    mesh.vblayout['color'] = { offset: offset, itemSize: 3 };\n  }\n\n  mesh.vb = new Float32Array(mesh.vertexCount * mesh.vbstride);\n\n\n  // Read vertices\n  var vbf = mesh.vb;\n  var stride = mesh.vbstride;\n  var stream = pfr.stream;\n\n  stream.getVector3Array(vbf, mesh.vertexCount, mesh.vblayout['position'].offset, stride);\n\n  // Determine color if specified\n  var c, cEnd;\n  if (hasColor) {\n    for (c = 0, offset = mesh.vblayout['color'].offset, cEnd = mesh.vertexCount;\n    c < cEnd;\n    c++, offset += stride)\n    {\n      vbf[offset] = stream.getFloat32();\n      vbf[offset + 1] = stream.getFloat32();\n      vbf[offset + 2] = stream.getFloat32();\n      stream.getFloat32(); //skip alpha -- TODO: convert color to ARGB 32 bit integer in the vertex layout and shader\n    }\n  }\n\n  // Copies bytes from buffer\n  var forceCopy = function forceCopy(b) {\n    return b.buffer.slice(b.byteOffset, b.byteOffset + b.length);\n  };\n\n  // Read indices and polyline bound buffer\n  if (lines) {\n    var indices;\n    var polyLineBoundBuffer;\n    if (tse.version > 1) {\n      // 16 bit format\n      indices = new Uint16Array(forceCopy(stream.getBytes(indexCount * 2)));\n      polyLineBoundBuffer = new Uint16Array(forceCopy(stream.getBytes(polyLineBoundCount * 2)));\n    } else\n    {\n      // 32 bit format\n      indices = new Int32Array(forceCopy(stream.getBytes(indexCount * 4)));\n      polyLineBoundBuffer = new Int32Array(forceCopy(stream.getBytes(polyLineBoundCount * 4)));\n    }\n\n    // three.js uses GL-style index pairs in its index buffer. We need one pair\n    // per segment in each polyline\n    var indexPairs = polyLineBoundBuffer[polyLineBoundCount - 1] - polyLineBoundCount + 1;\n\n    mesh.indices = new Uint16Array(2 * indexPairs);\n\n    // Extract the individual line segment index pairs\n    var meshIndex = 0;\n    for (var i = 0; i + 1 < polyLineBoundCount; i++) {\n      for (var j = polyLineBoundBuffer[i]; j + 1 < polyLineBoundBuffer[i + 1]; j++) {\n        mesh.indices[meshIndex++] = indices[j];\n        mesh.indices[meshIndex++] = indices[j + 1];\n      }\n    }\n  } else {\n    mesh.indices = new Uint16Array(forceCopy(stream.getBytes(indexCount * 2)));\n  }\n\n  if (mesh.lineWidth != 1.0) {\n    convertToWideLines(mesh, stride, vbf, indexPairs, offset);\n  }\n\n  VBUtils.computeBounds3D(mesh);\n\n  return mesh;\n};\n\nvar readLines = function readLines(pfr, tse, estimateSizeOnly) {\n  return readLinesOrPoints(pfr, tse, estimateSizeOnly, true);\n};\n\nvar readPoints = function readPoints(pfr, tse, estimateSizeOnly) {\n  return readLinesOrPoints(pfr, tse, estimateSizeOnly, false);\n};\n\nexport function readGeometry(pfr, entry, options) {\n  var tse = pfr.seekToEntry(entry);\n  if (!tse)\n  return null;\n\n  if (tse.entryType == \"Autodesk.CloudPlatform.OpenCTM\") {\n    return readOpenCTM(pfr.stream, options.dstBuffer, options.startOffset, options.estimateSizeOnly, options.packNormals);\n  } else\n  if (tse.entryType == \"Autodesk.CloudPlatform.Lines\") {\n    return readLines(pfr, tse, options.estimateSizeOnly);\n  } else\n  if (tse.entryType == \"Autodesk.CloudPlatform.Points\") {\n    return readPoints(pfr, tse, options.estimateSizeOnly);\n  }\n\n  return null;\n}","\"use strict\";\n\nexport function readInstance(pfr, entry, placementTransform, globalOffset) {\n  var tse = pfr.seekToEntry(entry);\n  if (!tse)\n  return null;\n  if (tse.version > 2 /*Constants::InstanceVersion*/)\n    return null;\n\n  var isVisible = true;\n  if (tse.version > 1) {\n    // Instances v2+ include a flag byte, the LSB of which denotes visibility\n    var flags = pfr.readU8();\n    isVisible = (flags & 0x01) != 0;\n  }\n\n  return {\n    definition: pfr.stream.getUint32(),\n    transform: pfr.readTransform(undefined, undefined, undefined, placementTransform, globalOffset),\n    instanceNodePath: pfr.readPathID() };\n\n}\n\n\n\nvar NodeType = {\n  NT_Inner: 0,\n  NT_Geometry: 1,\n  NT_Camera: 2,\n  NT_Light: 3 };\n\n\nexport function readInstanceTree(pfr, version) {\n\n  var transforms = [];\n  var dbIds = [];\n  var fragIds = [];\n  var childCounts = [];\n  var nodeIndex = 0;\n  var s = pfr.stream;\n\n  while (s.offset < s.byteLength - 8 - 1) {\n\n    pfr.readTransform(nodeIndex, transforms, nodeIndex * 12, undefined, undefined, undefined);\n\n    // Version 1-4 had optional \"shared nodes\" that were never used in practice. If found, consume and ignore.\n    if (version < 5) {\n      var hasSharedNode = s.getUint8();\n      if (hasSharedNode) {\n        s.getUint32();\n      }\n    }\n\n    var nodeType = s.getUint8();\n\n    // Version 5 introduced a flags byte and the visibility flag.\n    if (version >= 5) {\n      var flags = s.getUint8();\n      var visible = !!(flags & 1);\n    }\n\n    // Version 3 introduced the database ID\n    if (version >= 3) {\n      dbIds[nodeIndex] = s.getVarints();\n    }\n\n    if (nodeIndex) {\n      // Not a root, behavior depends on type\n      // Leaf, instantiate and add fragment references before returning\n      switch (nodeType) {\n\n        case NodeType.NT_Inner:\n          break;\n        case NodeType.NT_Geometry:{\n            if (version < 2) {\n              var fragCount = s.getUint16();\n              if (fragCount === 1) {\n                fragIds[nodeIndex] = s.getUint32();\n              } else if (fragCount > 0) {\n                var flist = [];\n                for (var i = 0; i < fragCount; i++) {\n                  flist.push(s.getUint32());}\n                fragIds[nodeIndex] = flist;\n              }\n            } else {\n              var fragCount = s.getVarints();\n              if (fragCount === 1) {\n                fragIds[nodeIndex] = s.getVarints();\n              } else if (fragCount > 0) {\n                var flist = [];\n                for (var i = 0; i < fragCount; i++) {\n                  flist.push(s.getVarints());}\n                fragIds[nodeIndex] = flist;\n              }\n            }\n          }\n          break;\n        case NodeType.NT_Camera:\n        case NodeType.NT_Light:{\n            var hasInstanceEntryId = s.getUint8();\n            if (hasInstanceEntryId) {\n              s.getUint32();\n            }\n          }\n          break;\n        default:\n          debug(\"Unrecognized instance tree node type.\");\n          break;}\n\n    }\n\n    var childCount = 0;\n    if (nodeType === NodeType.NT_Inner) {\n      if (version < 2) {\n        childCount = s.getUint16();\n      } else {\n        childCount = s.getVarints();\n      }\n    }\n    childCounts[nodeIndex] = childCount;\n\n    nodeIndex++;\n  }\n\n  var dbIdBuffer = new Uint32Array(dbIds.length);\n  dbIdBuffer.set(dbIds);\n\n  var xformBuffer = new Float32Array(transforms.length);\n  xformBuffer.set(transforms);\n\n  var childCountsBuffer = new Uint32Array(childCounts.length);\n  childCountsBuffer.set(childCounts);\n\n  return { dbIds: dbIdBuffer, fragIds: fragIds, transforms: xformBuffer, childCounts: childCountsBuffer };\n}","\"use strict\";\n\n\nexport function readLightDefinition(pfr, entry) {\n  var tse = pfr.seekToEntry(entry);\n  if (!tse)\n  return null;\n  if (tse.version > 1 /*Constants::LightDefinitionVersion*/)\n    return null;\n\n  var s = pfr.stream;\n\n  var light = {\n    position: pfr.readVector3f(),\n    dir: pfr.readVector3f(),\n    r: s.getFloat32(),\n    g: s.getFloat32(),\n    b: s.getFloat32(),\n    intensity: s.getFloat32(),\n    spotAngle: s.getFloat32(),\n    size: s.getFloat32(),\n    type: s.getUint8() };\n\n\n  return light;\n}","import { InputStream } from '../common/InputStream';\nimport { LmvMatrix4 } from '../../../wgs/scene/LmvMatrix4';\n\n\n\"use strict\";\n\nvar warnedGzip = false;\n\n/** @constructor */\nexport function PackFileReader(data)\n{\n  var stream = this.stream = new InputStream(data);\n\n  var len = stream.getInt32();\n  this.type = stream.getString(len);\n  this.version = stream.getInt32();\n\n  this.types = null;\n  this.entryOffsets = [];\n\n  //read the table of contents\n  {\n    var offset = stream.offset;\n\n    // Jump to file footer.\n    stream.seek(stream.byteLength - 8);\n\n    // Jump to toc.\n    var tocOffset = stream.getUint32();\n    this.typesOffset = stream.getUint32();\n\n    // Populate type sets.\n    stream.seek(this.typesOffset);\n    var typesCount = this.readU32V();\n    this.types = [];\n    for (var i = 0; i < typesCount; ++i) {\n      this.types.push({\n        \"entryClass\": this.readString(),\n        \"entryType\": this.readString(),\n        \"version\": this.readU32V() });}\n\n\n    // Populate data offset list.\n    stream.seek(tocOffset);\n    var entryCount = this.readU32V();\n    var dso = this.entryOffsets;\n    for (var i = 0; i < entryCount; ++i) {\n      dso.push(stream.getUint32());}\n\n    // Restore sanity of the world.\n    stream.seek(offset);\n  }\n};\n\nPackFileReader.prototype.readVarint = function () {\n  var b;\n  var value = 0;\n  var shiftBy = 0;\n  do {\n    b = this.stream.getUint8();\n    value |= (b & 0x7f) << shiftBy;\n    shiftBy += 7;\n  } while (b & 0x80);\n  return value;\n};\nPackFileReader.prototype.readU32V = PackFileReader.prototype.readVarint;\n\nPackFileReader.prototype.readU16 = function () {\n  return this.stream.getUint16();\n};\n\nPackFileReader.prototype.readU8 = function () {\n  return this.stream.getUint8();\n};\n\nPackFileReader.prototype.readString = function () {\n  return this.stream.getString(this.readU32V());\n};\n\nPackFileReader.prototype.readVector3f = function () {\n  var s = this.stream;\n  return { x: s.getFloat32(), y: s.getFloat32(), z: s.getFloat32() };\n};\n\nPackFileReader.prototype.readF32 = function () {\n  return this.stream.getFloat32();\n};\n\nPackFileReader.prototype.readVector3d = function () {\n\n  var t = { x: 0, y: 0, z: 0 };\n\n  return function () {\n    var s = this.stream;\n    t.x = s.getFloat64();\n    t.y = s.getFloat64();\n    t.z = s.getFloat64();\n\n    return t;\n  };\n}();\n\nPackFileReader.prototype.readQuaternionf = function () {\n\n  var q = { x: 0, y: 0, z: 0, w: 0 };\n\n  return function () {\n    var s = this.stream;\n    q.x = s.getFloat32();\n    q.y = s.getFloat32();\n    q.z = s.getFloat32();\n    q.w = s.getFloat32();\n\n    return q;\n  };\n\n}();\n\nPackFileReader.prototype.readMatrix3f = function () {\n\n  var _m = new LmvMatrix4();\n\n  return function (dst) {\n    if (!dst) dst = _m;\n\n    var s = this.stream;\n    dst.identity();\n    for (var i = 0; i < 3; ++i) {\n      for (var j = 0; j < 3; ++j) {\n        dst.elements[4 * i + j] = s.getFloat32();}}\n\n    return dst;\n  };\n\n}();\n\n\n\nPackFileReader.prototype.readTransform = function () {\n\n  var s = { x: 1, y: 1, z: 1 };\n  var m = new LmvMatrix4(true);\n\n  return function (entityIndex, buffer, offset, placementTransform, globalOffset, originalTranslation)\n  {\n    var stream = this.stream;\n    var t, q;\n\n    var transformType = stream.getUint8();\n\n    switch (transformType) {\n\n      case 4 /*TransformType.Identity*/:{\n          m.identity();\n        }break;\n      case 0 /*TransformType.Translation*/:{\n          t = this.readVector3d();\n          m.makeTranslation(t.x, t.y, t.z);\n        }break;\n      case 1 /*TransformType.RotationTranslation*/:{\n          q = this.readQuaternionf();\n          t = this.readVector3d();\n          s.x = 1;s.y = 1;s.z = 1;\n          m.compose(t, q, s);\n        }break;\n      case 2 /*TransformType.UniformScaleRotationTranslation*/:{\n          var scale = stream.getFloat32();\n          q = this.readQuaternionf();\n          t = this.readVector3d();\n          s.x = scale;s.y = scale;s.z = scale;\n          m.compose(t, q, s);\n        }break;\n      case 3 /*TransformType.AffineMatrix*/:{\n          this.readMatrix3f(m);\n          t = this.readVector3d();\n          m.setPosition(t);\n        }break;\n      default:\n        break; //ERROR\n    }\n\n    //Report the original translation term to the caller, if they need it.\n    //This is only required when reading fragment bounding boxes, where the translation\n    //term of this matrix is subtracted from the bbox terms.\n    if (originalTranslation) {\n      originalTranslation[0] = m.elements[12];\n      originalTranslation[1] = m.elements[13];\n      originalTranslation[2] = m.elements[14];\n    }\n\n    //Apply any placement transform\n    if (placementTransform) {\n      m.multiplyMatrices(placementTransform, m);\n    }\n\n    //Apply global double precision offset on top\n    if (globalOffset) {\n      m.elements[12] -= globalOffset.x;\n      m.elements[13] -= globalOffset.y;\n      m.elements[14] -= globalOffset.z;\n    }\n\n    //Store result back into single precision matrix or array\n    if (entityIndex !== undefined) {\n      var src = m.elements;\n      // Sometimes we don't want to keep this data (e.g. when we are probing the fragment list\n      // to find the data base id to fragment index mappings used for fragment filtering) so we\n      // pass a null buffer and if that is the case, bail out here.\n      if (!buffer) return;\n      buffer[offset + 0] = src[0];buffer[offset + 1] = src[1];buffer[offset + 2] = src[2];\n      buffer[offset + 3] = src[4];buffer[offset + 4] = src[5];buffer[offset + 5] = src[6];\n      buffer[offset + 6] = src[8];buffer[offset + 7] = src[9];buffer[offset + 8] = src[10];\n      buffer[offset + 9] = src[12];buffer[offset + 10] = src[13];buffer[offset + 11] = src[14];\n    } else\n    {\n      return new LmvMatrix4().copy(m);\n    }\n  };\n\n}();\n\nPackFileReader.prototype.getEntryCounts = function () {\n  return this.entryOffsets.length;\n};\n\nPackFileReader.prototype.seekToEntry = function (entryIndex) {\n  var count = this.getEntryCounts();\n  if (entryIndex >= count)\n  return null;\n\n  // Read the type index and populate the entry data\n  this.stream.seek(this.entryOffsets[entryIndex]);\n  var typeIndex = this.stream.getUint32();\n  if (typeIndex >= this.types.length)\n  return null;\n\n  return this.types[typeIndex];\n};\n\n\nPackFileReader.prototype.readPathID = function () {\n  var s = this.stream;\n\n  //Construct a /-delimited string as the path to a node\n  //TODO: in case we need a split representation (e.g. to follow paths), then\n  //an array of numbers might be better to return from here.\n  if (this.version < 2) {\n    var pathLength = s.getUint16();\n    if (!pathLength)\n    return null;\n\n    //The first number in a path ID is always zero (root)\n    //so we skip adding it to the path string here.\n    //Remove this section if that is not the case in the future.\n    s.getUint16();\n    if (pathLength == 1)\n    return \"\";\n\n    var path = s.getUint16();\n    for (var i = 2; i < pathLength; ++i) {\n      path += \"/\" + s.getUint16();\n    }\n  } else\n  {\n    var pathLength = this.readU32V();\n    if (!pathLength)\n    return null;\n\n    //The first number in a path ID is always zero (root)\n    //so we skip adding it to the path string here.\n    //Remove this section if that is not the case in the future.\n    this.readU32V();\n    if (pathLength == 1)\n    return \"\";\n\n    var path = this.readU32V();\n    for (var i = 2; i < pathLength; ++i) {\n      path += \"/\" + this.readU32V();\n    }\n  }\n  return path;\n};","function _toConsumableArray(arr) {return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();}function _nonIterableSpread() {throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");}function _unsupportedIterableToArray(o, minLen) {if (!o) return;if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);var n = Object.prototype.toString.call(o).slice(8, -1);if (n === \"Object\" && o.constructor) n = o.constructor.name;if (n === \"Map\" || n === \"Set\") return Array.from(o);if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);}function _iterableToArray(iter) {if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter);}function _arrayWithoutHoles(arr) {if (Array.isArray(arr)) return _arrayLikeToArray(arr);}function _arrayLikeToArray(arr, len) {if (len == null || len > arr.length) len = arr.length;for (var i = 0, arr2 = new Array(len); i < len; i++) {arr2[i] = arr[i];}return arr2;}import { isMobileDevice } from \"../../../compat\";\nimport { BVHBuilder } from '../../../wgs/scene/BVHBuilder';\nimport { LmvVector3 } from \"../../../wgs/scene/LmvVector3\";\nimport { ViewingService } from '../../net/Xhr';\n\nimport { InputStream } from '../common/InputStream';\nimport { PackFileReader } from './PackReader';\nimport { FragList, readFragments, readGeometryMetadata, filterFragments } from './Fragments';\nimport { readInstance, readInstanceTree } from './Instances';\nimport { initPlacement, transformAnimations, calculatePlacementWithOffset } from '../common/SvfPlacementUtils';\nimport { readCameraDefinition } from './Cameras';\nimport { readLightDefinition } from './Lights';\n\nvar Zlib = require(\"../../../../thirdparty/zlib/unzip.min.js\").Zlib;\n\n\n/** @constructor */\nexport function Package(zipPack) {\n\n  this.unzip = new Zlib.Unzip(zipPack);\n\n  this.manifest = null;\n\n  this.materials = null; //The materials json as it came from the SVF\n\n  this.metadata = null; //metadata json\n\n  this.fragments = null; //will be a FragList\n\n  this.geompacks = [];\n\n  //TODO:\n  //Those will not be parsed immediately\n  //but we will remember the raw arrays\n  //and fire off async workers to parse\n  //them later, once we are loading geometry packs\n  this.instances = [];\n\n  this.cameras = [];\n  this.lights = [];\n\n  this.propertydb = {\n    attrs: [],\n    avs: [],\n    ids: [],\n    values: [],\n    offsets: [] };\n\n\n  this.bbox = null; //Overall scene bounds\n\n  this.animations = null; // animations json\n\n  this.pendingRequests = 0;\n\n  this.globalOffset = { x: 0, y: 0, z: 0 };\n\n  this.topologyPath = null; // string path to the topology file\n\n}\n\n\n\nPackage.prototype.loadAsyncResource = function (loadContext, resourcePath, contents, callback) {\n\n  //Data is immediately available from the SVF zip\n  if (contents) {\n    callback(contents);\n    return;\n  }\n\n  //Launch an XHR to load the data from external file\n  var svf = this;\n\n  this.pendingRequests++;\n\n  function xhrCB(responseData) {\n    svf.pendingRequests--;\n\n    callback(responseData);\n\n    if (svf.pendingRequests == 0)\n    svf.postLoad(loadContext);\n  }\n\n  ViewingService.getItem(loadContext, loadContext.basePath + resourcePath,\n  xhrCB,\n  loadContext.onFailureCallback);\n\n\n};\n\n/**\n    * Extracts `manifest.json` file from the geometry pack file. Note that \n    * the call to `Zlib.Unzip.decompress()` throws an exception if the manifest\n    * cannot be found in the pack file. The exception will be caught in \n    * `guardFunction` that encapsulates the call, so this function does not \n    * return any value.\n    * \n    * @param {object} loadContext The loading context object passed in by an \n    * SvfLoader object as it successfully downloaded a geometry pack file. The \n    * load context is not used in this function.\n    * \n    * @throws {Error} `manifest.json` cannot be found within the package.\n    */\nPackage.prototype.loadManifest = function (loadContext) {\n  // TODO: zlib.js throws exceptions on failure;\n  // it doesn't return null as this code seems to assume.\n  // yes, LoadContext is passed in, but is not used.\n  var manifestJson = this.unzip.decompress(\"manifest.json\");\n  if (!manifestJson)\n  return false;\n  var jdr = new InputStream(manifestJson);\n  this.manifest = JSON.parse(jdr.getString(manifestJson.byteLength));\n};\n\n// Replace default globalOffset from SvfPlacementOffset by a recomputed one computed based on Fragment bboxes.\nPackage.prototype.applyLargeBoxOffset = function (offset) {\n  if (offset && (\n  offset.x !== this.globalOffset.x ||\n  offset.y !== this.globalOffset.y ||\n  offset.z !== this.globalOffset.z))\n  {\n    // So far, bbox was in viewer-coords, assuming the default globalOffset. Since we modified the offset,\n    // we have to adjust the bbox now.\n    if (!this.bbox.empty()) {\n      this.bbox.translate({\n        x: this.globalOffset.x - offset.x,\n        y: this.globalOffset.y - offset.y,\n        z: this.globalOffset.z - offset.z });\n\n    }\n\n    // self.globalOffset may not be an LMVVector3, but in that case\n    // offset should be self.GlobalOffset, so this should be OK\n    this.verylargebbox = true;\n    this.globalOffset.copy(offset);\n    calculatePlacementWithOffset(this, this.placementTransform);\n  }\n};\n\nPackage.prototype.parseFragmentList = function (asset, loadContext, path, contents) {\n\n  var self = this;\n  this.loadAsyncResource(loadContext, path, contents, function (data) {\n    var pfr = new PackFileReader(data);\n\n    //Use a single large blocks to store all fragment elements\n    //TODO: perhaps have a FragList per pack file to keep block size down?\n    var frags = self.fragments = new FragList();\n    var offset = readFragments(pfr, frags, loadContext.globalOffset, loadContext.placementTransform,\n    loadContext.fragmentTransformsDouble, undefined, self.bbox, self.globalOffset);\n    pfr = null;\n\n    self.applyLargeBoxOffset(offset);\n  });\n};\n\nPackage.prototype.parseGeometryMetadata = function (asset, loadContext, path, contents) {\n  var self = this;\n  this.loadAsyncResource(loadContext, path, contents, function (data) {\n    var pfr = new PackFileReader(data);\n\n    self.geomMetadata = {};\n    readGeometryMetadata(pfr, self.geomMetadata);\n    self.numGeoms = self.geomMetadata.primCounts.length;\n  });\n};\n\n\nPackage.prototype.parseInstanceTree = function (loadContext, path, contents, version) {\n\n  var that = this;\n\n  this.loadAsyncResource(loadContext, path, contents, function (data) {\n    var pfr = new PackFileReader(data);\n    that.instanceTransforms = readInstanceTree(pfr, version);\n  });\n\n};\n\n\nPackage.prototype.loadRemainingSvf = function (loadContext) {\n  var svf = this;\n\n  var unzip = this.unzip;\n\n  //var filenames = unzip.getFilenames();\n  this.manifest = loadContext.manifest;\n  var manifest = this.manifest;\n\n  var assets = manifest[\"assets\"];\n\n  var metadataJson = unzip.decompress(\"metadata.json\");\n  var jdr = new InputStream(metadataJson);\n\n  // Test to see if this is json (not a binary header)\n  // Done by verifying that there is no 0 (Hence ASCII)\n  if (metadataJson.byteLength > 3 && metadataJson[3] !== 0) {\n    this.metadata = JSON.parse(jdr.getString(metadataJson.byteLength)).metadata;\n\n    initPlacement(this, loadContext);\n  }\n\n  //Version strings seem to be variable at the moment.\n  //var manifestVersion = manifest[\"manifestversion\"];\n  //if (   manifest[\"name\"] != \"LMV Manifest\"\n  //    || manifest[\"manifestversion\"] != 1)\n  //    return false;\n\n  this.packFileTotalSize = 0;\n  this.primitiveCount = 0;\n\n  var typesetsList = manifest[\"typesets\"];\n  var typesets = {};\n  for (var i = 0; i < typesetsList.length; i++) {\n    var ts = typesetsList[i];\n    typesets[ts['id']] = ts['types'];\n  }\n\n  //Loop through the assets, and schedule non-embedded\n  //ones for later loading.\n  //TODO: currently only geometry pack files are stored for later\n  //load and other assets will be loaded by this worker thread before\n  //we return to the SvfLoader in the main thread.\n\n  for (var i = 0; i < assets.length; i++)\n  {\n    var asset = assets[i];\n    if (isMobileDevice() && asset.id === \"Set.bin\")\n    continue;\n    var type = asset[\"type\"];\n    if (type.indexOf(\"Autodesk.CloudPlatform.\") == 0)\n    type = type.substr(23);\n    var uri = asset[\"URI\"];\n    var typeset = asset[\"typeset\"] ? typesets[asset[\"typeset\"]] : null;\n    var usize = asset[\"usize\"] || 0;\n    var megaBytes = Math.round(usize / 1048576 * 100000) / 100000 | 0;\n\n    //If the asset is a geometry pack or property pack\n    //just remember it for later demand loading\n    if (uri.indexOf(\"embed:/\") != 0) {\n      if (type == \"PackFile\") {\n        var typeclass = typeset ? typeset[0][\"class\"] : null;\n\n        if (typeclass == \"Autodesk.CloudPlatform.Geometry\") {\n\n          this.packFileTotalSize += usize;\n\n          this.geompacks.push({ id: asset[\"id\"], uri: uri, usize: usize });\n        }\n      } else\n      if (type == \"PropertyAttributes\") {\n        this.propertydb.attrs.push({ path: uri });\n      } else\n      if (type == \"PropertyAVs\") {\n        this.propertydb.avs.push({ path: uri });\n      } else\n      if (type == \"PropertyIDs\") {\n        this.propertydb.ids.push({ path: uri });\n      } else\n      if (type == \"PropertyOffsets\") {\n        this.propertydb.offsets.push({ path: uri });\n      } else\n      if (type == \"PropertyValues\") {\n        this.propertydb.values.push({ path: uri });\n      }\n    }\n\n    //parse assets which we will need immediately when\n    // setting up the scene (whether embedded or not)\n    var path = asset[\"URI\"];\n    var contents = null; //if the data was in the zip, this will contain it\n    if (path.indexOf(\"embed:/\") == 0) {\n      path = path.substr(7);\n      contents = unzip.decompress(path);\n    }\n\n    if (type == \"ProteinMaterials\") {\n      //For simple materials, we want the file named \"Materials.json\" and not \"ProteinMaterials.json\"\n      if (path.indexOf(\"Protein\") == -1) {\n        this.loadAsyncResource(loadContext, path, contents, function (data) {\n          var jdr = new InputStream(data);\n          var byteLength = data.byteLength;\n          if (0 < byteLength) {\n            svf.materials = JSON.parse(jdr.getString(byteLength));\n          } else {\n            svf.materials = null;\n          }\n        });\n      } else {\n        //Also parse the Protein materials -- at the moment this helps\n        //With some Prism materials that have properties we can handle, but\n        //are not in the Simple variant.\n        this.loadAsyncResource(loadContext, path, contents, function (data) {\n          var jdr = new InputStream(data);\n          var byteLength = data.byteLength;\n          if (0 < byteLength) {\n            try {\n              svf.proteinMaterials = JSON.parse(jdr.getString(byteLength));\n            } catch (e) {\n              //TS: This is dumb, but what can we do... Revit extractor had (has?) a bug where\n              //materials are written as ANSI instead of UTF8 encoded. So we have this fallback attempt\n              var ansi = \"\";\n              for (var i = 0; i < data.length; i++) {\n                ansi += String.fromCharCode(data[i]);}\n\n              try {\n                svf.proteinMaterials = JSON.parse(ansi);\n              } catch (e) {\n                console.error(\"Failed to parse Protein materials file either as UTF8 or ANSI\");\n              }\n            }\n          } else {\n            svf.proteinMaterials = null;\n          }\n        });\n      }\n    } else\n    if (type == \"StandardMaterials\") {\n\n      this.loadAsyncResource(loadContext, path, contents, function (data) {\n        var jdr = new InputStream(data);\n        var byteLength = data.byteLength;\n        if (0 < byteLength) {\n          var strContent = jdr.getString(byteLength);\n          svf.stdSurfMats = JSON.parse(strContent);\n        } else {\n          svf.stdSurfMats = null;\n        }\n      });\n    } else\n\n    if (type == \"MaterialX\") {\n      this.loadAsyncResource(loadContext, path, contents, function (data) {\n        var jdr = new InputStream(data);\n        var byteLength = data.byteLength;\n        if (0 < byteLength) {\n          svf.mtlx = jdr.getString(byteLength);\n        } else {\n          svf.mtlx = null;\n        }\n      });\n\n    } else\n    if (type == \"FragmentList\") {\n\n      this.parseFragmentList(asset, loadContext, path, contents);\n\n    } else\n    if (type == \"GeometryMetadataList\") {\n\n      this.parseGeometryMetadata(asset, loadContext, path, contents);\n\n    } else\n    if (type == \"PackFile\") {\n\n      if (path.indexOf(\"CameraDefinitions.bin\") != -1) {\n        this.loadAsyncResource(loadContext, path, contents, function (data) {\n          svf.camDefPack = new PackFileReader(data);\n        });\n      } else\n\n      if (path.indexOf(\"CameraList.bin\") != -1) {\n        this.loadAsyncResource(loadContext, path, contents, function (data) {\n          svf.camInstPack = new PackFileReader(data);\n        });\n      } else\n\n      if (path.indexOf(\"LightDefinitions.bin\") != -1) {\n        this.loadAsyncResource(loadContext, path, contents, function (data) {\n          svf.lightDefPack = new PackFileReader(data);\n        });\n      } else\n\n      if (path.indexOf(\"LightList.bin\") != -1) {\n        this.loadAsyncResource(loadContext, path, contents, function (data) {\n          svf.lightInstPack = new PackFileReader(data);\n        });\n      }\n    } else\n    if (type == \"Animations\") {\n      this.loadAsyncResource(loadContext, path, contents, function (data) {\n        var jdr = new InputStream(data);\n        var byteLength = data.byteLength;\n        if (0 < byteLength) {\n          svf.animations = JSON.parse(jdr.getString(byteLength));\n        } else {\n          svf.animations = null;\n        }\n      });\n    } else\n    if (type == \"Topology\") {\n\n      // save the path for later download.\n      svf.topologyPath = loadContext.basePath + path;\n      svf.topologySizeMB = megaBytes;\n\n    } else\n    if (loadContext.loadInstanceTree && (\n    type == \"InstanceTree\" || type == \"InstanceTreeTree\")) {//Yes, the typo does occur in some older files\n\n      //Instance tree node serialization version is stored in the type set\n      var version = typeset ? typeset[0][\"version\"] : 1;\n\n      this.parseInstanceTree(loadContext, path, contents, version);\n    }\n  }\n\n\n  if (this.pendingRequests == 0)\n  this.postLoad(loadContext);\n\n  delete this.unzip;\n};\n\nPackage.prototype.addTransparencyFlagsToMaterials = function (mats) {\n  for (var id in mats) {\n    var mat = mats[id];\n    var userAssets = mat[\"userassets\"];\n    var innerMats = mat[\"materials\"];\n    var innerMat = innerMats[userAssets[0]];\n    mat.transparent = innerMat[\"transparent\"];\n  }\n};\n\nPackage.prototype.postLoadOfCam = function (loadContext) {\n\n  //Combine camera instances and camera definitions -- we need\n  //both to be loaded to get the camera list\n  if (this.camDefPack && this.camInstPack) {\n    for (var k = 0, kEnd = this.camInstPack.getEntryCounts(); k < kEnd; k++) {\n      var inst = readInstance(this.camInstPack, k, this.placementTransform, this.globalOffset);\n      var cam = readCameraDefinition(this.camDefPack, inst);\n\n      //Apply any instance transform to get the camera to world space.\n      if (inst.transform) {\n        // Apply any transformations associated with the camera\n        // to put it into world space\n        inst.transform.transformPoint(cam.position);\n        inst.transform.transformPoint(cam.target);\n        inst.transform.transformDirection(cam.up);\n      }\n\n      // Fix camera's target if it is not inside the scene's bounding box.\n      var bbox = this.bbox;\n      if (bbox && !bbox.containsPoint(cam.target)) {\n        var distanceFromCenter = new LmvVector3().copy(bbox.center()).distanceTo(cam.position);\n        var direction = new LmvVector3().copy(cam.target).sub(cam.position).normalize().multiplyScalar(distanceFromCenter);\n        cam.target = new LmvVector3().copy(cam.position).add(direction);\n      }\n\n      this.cameras.push(cam);\n    }\n\n    delete this.camDefPack;\n    delete this.camInstPack;\n  }\n\n};\n\nPackage.prototype.postLoadOfLight = function (loadContext) {\n\n  //Lights need the same thing as the cameras\n  if (this.lightDefPack && this.lightInstPack) {\n    for (var k = 0, kEnd = this.lightInstPack.getEntryCounts(); k < kEnd; k++) {\n      var inst = readInstance(this.lightInstPack, k, this.placementTransform, this.globalOffset);\n      this.lights.push(readLightDefinition(this.lightDefPack, inst.definition));\n    }\n\n    delete this.lightInstPack;\n    delete this.lightDefPack;\n  }\n\n};\n\nPackage.prototype.postLoadOfFragments = function (loadContext) {\n\n  //Post processing step -- splice geometry metadata information\n  //into the fragments list, in case it was given separately\n  //TODO: consider keeping the geom metadata as is instead of splicing\n  //into the fragments, as it would be more efficient --\n  //but that would require special handling on the viewer side,\n  //changing the fragment filter code, etc.\n  var frags = this.fragments;\n\n  if (this.geomMetadata) {\n\n    //reusing the geomDataIndexes array to store\n    //polygon counts, now that we don't need the geomIndexes\n    //after this loop.\n    frags.polygonCounts = frags.geomDataIndexes;\n\n    var gm = this.geomMetadata;\n\n    // Holds the indexes to the topology data.\n    if (gm.topoIndexes != undefined) {\n      frags.topoIndexes = new Int32Array(frags.length);\n    }\n\n    for (var i = 0, iEnd = frags.length; i < iEnd; i++) {\n      var geomIndex = frags.geomDataIndexes[i];\n      frags.entityIndexes[i] = gm.entityIndexes[geomIndex];\n      frags.packIds[i] = gm.packIds[geomIndex];\n\n      frags.polygonCounts[i] = gm.primCounts[geomIndex];\n      this.primitiveCount += gm.primCounts[geomIndex];\n\n      // Fills in the indexes to the topology data.\n      if (gm.topoIndexes != undefined) {\n        frags.topoIndexes[i] = gm.topoIndexes[geomIndex];\n      }\n    }\n\n    frags.geomDataIndexes = null;\n\n    this.geomMetadata = null;\n  }\n\n  //Build a map from mesh to its referencing fragment(s)\n  //So that we can quickly find them once meshes begin loading\n  //incrementally. This requires the packIds and entityIndexes\n  //to be known per fragment, so it happens after geometry metadata\n  //is resolved above\n  this.calculateMesh2Frag(frags);\n};\n\nPackage.prototype.calculateMesh2Frag = function (frags) {\n  var mesh2frag = frags.mesh2frag = {};\n  var packIds = frags.packIds;\n  var entityIndexes = frags.entityIndexes;\n\n  for (var i = 0, iEnd = frags.length; i < iEnd; i++) {\n    var meshid = packIds[i] + \":\" + entityIndexes[i];\n\n    var meshRefs = mesh2frag[meshid];\n    if (meshRefs === undefined) {\n      //If it's the first fragments for this mesh,\n      //store the index directly -- most common case.\n      mesh2frag[meshid] = i;\n    } else\n    if (!Array.isArray(meshRefs)) {\n      //otherwise put the fragments that\n      //reference the mesh into an array\n      mesh2frag[meshid] = [meshRefs, i];\n    } else\n    {\n      //already is an array\n      meshRefs.push(i);\n    }\n  }\n};\n\nPackage.prototype.postLoadOfBBox = function (loadContext) {\n\n  //if we don't know the overall scene bounds, compute them from the\n  //fragment boxes\n  if (!this.bbox || loadContext.placementTransform) {\n\n    var totalbox = [Infinity, Infinity, Infinity, -Infinity, -Infinity, -Infinity];\n    var frags = this.fragments;\n    var fragBoxes = frags.boxes;\n\n    for (var f = 0, fEnd = frags.length; f < fEnd; f++) {\n      var bboff = f * 6;\n      var i;\n      for (i = 0; i < 3; i++) {\n        if (fragBoxes[bboff + i] < totalbox[i])\n        totalbox[i] = fragBoxes[bboff + i];}\n\n      for (i = 3; i < 6; i++) {\n        if (fragBoxes[bboff + i] > totalbox[i])\n        totalbox[i] = fragBoxes[bboff + i];}\n    }\n\n    this.bbox = {\n      min: { x: totalbox[0], y: totalbox[1], z: totalbox[2] },\n      max: { x: totalbox[3], y: totalbox[4], z: totalbox[5] } };\n\n  }\n\n\n};\n\nPackage.prototype.postLoadOfObjectIds = function (loadContext) {\n\n  // If object ids are specified, clean up pack file list by only keeping the packs that's\n  // we intended to load.\n  var ids = new Set(loadContext.objectIds);\n  if (ids.size > 0) {\n    var packIds = new Set();\n    var fragIds = new Set();\n    // Pick out pack ids that referenced by fragments with specified db ids.\n\n    for (var j = 0; j < this.fragments.length; ++j) {\n      if (ids.has(this.fragments.fragId2dbId[j])) {\n        packIds.add(this.fragments.packIds[j]);\n        fragIds.add(j);\n      }\n    }\n\n    // Reduce pack files based on selected pack ids.\n    var packs = new Set();\n    for (var i = 0; i < this.geompacks.length; ++i) {\n      // LMVTK pre-2.0 release uses integers for pack file id.\n      // LMVTK 2.0 release uses integer + .pf as id.\n      // We just drop the suffix here as we did in SVFLoader.\n      // More info: https://git.autodesk.com/A360/LMVTK/commit/68b8c07a643a7ac39ecd5651d031d170e3a325be\n      if (packIds.has(parseInt(this.geompacks[i].id))) {\n        packs.add(this.geompacks[i]);\n      }\n    }\n    this.geompacks = _toConsumableArray(packs);\n\n    var bb = filterFragments(this.fragments, _toConsumableArray(fragIds));\n    this.bbox = {\n      min: { x: bb[0], y: bb[1], z: bb[2] },\n      max: { x: bb[3], y: bb[4], z: bb[5] } };\n\n  }\n\n};\n\nPackage.prototype.postLoadComplete = function (loadContext) {\n\n  loadContext.loadDoneCB(\"svf\");\n\n  if (this.fragments.polygonCounts) {\n    //Build the R-Tree\n    var t0 = performance.now();\n    var mats = this.materials ? this.materials[\"materials\"] : null;\n    if (mats)\n    this.addTransparencyFlagsToMaterials(mats);\n    this.bvh = new BVHBuilder(this.fragments, mats);\n    this.bvh.build(loadContext.bvhOptions);\n    var t1 = performance.now();\n    loadContext.worker.debug(\"BVH build time (worker thread):\" + (t1 - t0));\n\n    // In normal mode, just post back BVH as svf is already posted back earlier.\n    loadContext.loadDoneCB(\"bvh\");\n  }\n\n  loadContext.loadDoneCB(\"done\");\n};\n\nPackage.prototype.postLoad = function (loadContext) {\n\n  transformAnimations(this);\n\n  this.postLoadOfCam(loadContext);\n\n  this.postLoadOfLight(loadContext);\n\n  this.postLoadOfFragments(loadContext);\n\n  this.postLoadOfBBox(loadContext);\n\n  this.postLoadOfObjectIds(loadContext);\n\n  this.postLoadComplete(loadContext);\n};","\n/**\n * Error code constants\n * These constants will be used in {@link Callbacks#onGenericError} functions.\n *\n * @namespace Autodesk.Viewing.ErrorCodes\n */\nexport var ErrorCodes = {\n  /** \n                           * An unknown failure has occurred. \n                           *\n                           * @constant\n                           * @memberof Autodesk.Viewing.ErrorCodes\n                           * @default\n                           */\n  UNKNOWN_FAILURE: 1,\n\n  /** \n                       * Bad data (corrupted or malformed) was encountered. \n                       *\n                       * @constant\n                       * @memberof Autodesk.Viewing.ErrorCodes\n                       * @default\n                       */\n  BAD_DATA: 2,\n\n  /** \n                * A network failure was encountered. \n                *\n                * @constant\n                * @memberof Autodesk.Viewing.ErrorCodes\n                * @default\n                */\n  NETWORK_FAILURE: 3,\n\n  /** \n                       * Access was denied to a network resource (HTTP 403)\n                       *\n                       * @constant\n                       * @memberof Autodesk.Viewing.ErrorCodes\n                       * @default\n                       */\n  NETWORK_ACCESS_DENIED: 4,\n\n  /** \n                             * A network resource could not be found (HTTP 404)\n                             *\n                             * @constant\n                             * @memberof Autodesk.Viewing.ErrorCodes\n                             * @default\n                             */\n  NETWORK_FILE_NOT_FOUND: 5,\n\n  /** \n                              * A server error was returned when accessing a network resource (HTTP 5xx)\n                              *\n                              * @constant\n                              * @memberof Autodesk.Viewing.ErrorCodes\n                              * @default\n                              */\n  NETWORK_SERVER_ERROR: 6,\n\n  /** \n                            * An unhandled response code was returned when accessing a network resource (HTTP 'everything else')\n                            *\n                            * @constant\n                            * @memberof Autodesk.Viewing.ErrorCodes\n                            * @default\n                            */\n  NETWORK_UNHANDLED_RESPONSE_CODE: 7,\n\n  /** \n                                       * Browser error = webGL is not supported by the current browser\n                                       *\n                                       * @constant\n                                       * @memberof Autodesk.Viewing.ErrorCodes\n                                       * @default\n                                       */\n  BROWSER_WEBGL_NOT_SUPPORTED: 8,\n\n  /** \n                                   * There is nothing viewable in the fetched document \n                                   *\n                                   * @constant\n                                   * @memberof Autodesk.Viewing.ErrorCodes\n                                   * @default\n                                   */\n  BAD_DATA_NO_VIEWABLE_CONTENT: 9,\n\n  /** \n                                    * Browser error = webGL is supported, but not enabled \n                                    *\n                                    * @constant\n                                    * @memberof Autodesk.Viewing.ErrorCodes\n                                    * @default\n                                    */\n  BROWSER_WEBGL_DISABLED: 10,\n\n  /**\n                               * There is no geometry in loaded model\n                               *\n                               * @constant\n                               * @memberof Autodesk.Viewing.ErrorCodes\n                               * @default\n                               */\n  BAD_DATA_MODEL_IS_EMPTY: 11,\n\n  /** \n                                * Collaboration server error\n                                *\n                                * @constant\n                                * @memberof Autodesk.Viewing.ErrorCodes\n                                * @default\n                                */\n  RTC_ERROR: 12,\n\n  /** \n                  * The extension of the loaded file is not supported \n                  *\n                  * @constant\n                  * @memberof Autodesk.Viewing.ErrorCodes\n                  * @default\n                  */\n  UNSUPORTED_FILE_EXTENSION: 13,\n\n  /** \n                                  * Viewer error: wrong or forbidden usage of the viewer\n                                  *\n                                  * @constant\n                                  * @memberof Autodesk.Viewing.ErrorCodes\n                                  * @default\n                                  */\n  VIEWER_INTERNAL_ERROR: 14,\n\n  /** \n                              * WebGL error while loading a model, typically due to IE11 limitations\n                              *\n                              * @constant\n                              * @memberof Autodesk.Viewing.ErrorCodes \n                              * @default\n                              */\n  WEBGL_LOST_CONTEXT: 15,\n\n  LOAD_CANCELED: 16 };\n\n\n/**\n                        * Formatted error message\n                        * @param {number} errorCode - Error code\n                        * @returns {string} - Error message\n                        * @alias Autodesk.Viewing.errorCodeString\n                        * @private\n                        */\nexport function errorCodeString(errorCode) {\n  return \"ErrorCode:\" + errorCode + \".\";\n}\n\n/**\n   * Get ErrorCodes enum from http status code\n   * @param {number} networkStatus - HTTP status code\n   * @returns {number} - Autodesk.Viewing.ErrorCodes enum\n   * @alias Autodesk.Viewing.getErrorCode\n   * @private\n   */\nexport function getErrorCode(networkStatus)\n{\n  if (networkStatus === 403 || networkStatus === 401)\n  {\n    return ErrorCodes.NETWORK_ACCESS_DENIED;\n  } else\n  if (networkStatus === 404)\n  {\n    return ErrorCodes.NETWORK_FILE_NOT_FOUND;\n  } else\n  if (networkStatus >= 500)\n  {\n    return ErrorCodes.NETWORK_SERVER_ERROR;\n  }\n  return ErrorCodes.NETWORK_UNHANDLED_RESPONSE_CODE;\n}","import { logger } from \"../../logger/Logger\";\nimport { ErrorCodes } from \"./ErrorCodes\";\nimport { blobToJson } from '../lmvtk/common/StringUtils';\nimport { endpoint } from \"./endpoints\";\nimport { isNodeJS, getGlobal } from \"../../compat\";\nvar pako = require('pako');\n\nexport var ViewingService = {};\nViewingService.WORKER_REGISTER_FILE_PORT = \"REGISTER_FILE_PORT\";\nViewingService.WORKER_READ_FILE = \"READ_FILE\";\n\nvar warnedGzip = false;\n\n// Simplify Unix style file path. For example, turn '/a/./b/../../c/' into \"/c\".\n// Required to deal with OSS crappy URNs where there are embedded '..'.\nfunction simplifyPath(path) {\n\n  var elements = path.split('/');\n  if (elements.length == 0)\n  return path;\n\n  var stack = [];\n  for (var index = 0; index < elements.length; ++index) {\n    var c = elements[index];\n    if (c === '.') {\n      continue;\n    }if (c === '..' && stack.length) {\n      stack.pop();\n    } else {\n      stack.push(c);\n    }\n  }\n\n  // Great, the path commits suicide.\n  if (stack.length == 0)\n  return '';\n\n  return stack.join(\"/\");\n}\n\n//Maps a relative resource path (like a pack file or texture)\n//to an absolute URL. If absoluteBasePath is specified, it is\n//used to construct the absolute URL, otherwise the window location\n//is used.\nexport function pathToURL(path, absoluteBasePath) {\n\n  if (path.indexOf(\"://\") !== -1 ||\n  path.indexOf(\"urn:\") === 0) {\n    return path;\n  }\n\n  if (absoluteBasePath) {\n    return absoluteBasePath + path;\n  }\n\n  if (typeof window === \"undefined\")\n  return path;\n\n  var _window = getGlobal();\n  var rootRelPath = _window.location.pathname;\n  //chop off the index.html part\n  var lastSlash = rootRelPath.lastIndexOf(\"/\");\n  rootRelPath = rootRelPath.substr(0, lastSlash + 1);\n  var absPath = _window.location.protocol + \"//\" + _window.location.host + rootRelPath + path;\n  return absPath;\n}\n\n\nViewingService.simplifyPath = simplifyPath;\n\nexport function textToArrayBuffer(textBuffer, startOffset) {\n  var len = textBuffer.length - startOffset;\n  var arrayBuffer = new ArrayBuffer(len);\n  var ui8a = new Uint8Array(arrayBuffer, 0);\n  for (var i = 0, j = startOffset; i < len; i++, j++) {\n    ui8a[i] = textBuffer.charCodeAt(j) & 0xff;}\n  return ui8a;\n}\n\n\nViewingService.OSS_PREFIX = \"urn:adsk.objects:os.object:\";\n\n/**\n                                                            * Construct full URL given a potentially partial viewing service \"urn:\" prefixed resource\n                                                            * @returns {string}\n                                                            */\nViewingService.generateUrl = function (baseUrl, api, path, apiData) {\n\n  path = path || \"\";\n\n  //NODE\n  if (isNodeJS() && !isRemotePath(baseUrl, path)) {\n    return path;\n  }\n\n  path = simplifyPath(path);\n\n  //V2 only accepts URL encoded paths\n  var urnidx = path.indexOf(\"urn:\");\n  var qidx = path.indexOf(\"?\");\n  if (urnidx != -1) {\n    if (qidx !== -1) {\n      //TODO: not sure this will happen, queryParams are normally\n      //passed in separately in the options object\n      path = path.slice(0, urnidx) + encodeURIComponent(path.slice(urnidx, qidx)) + path.slice(qidx);\n    } else {\n      path = path.slice(0, urnidx) + encodeURIComponent(path.slice(urnidx));\n    }\n  } else {\n    path = encodeURI(path);\n  }\n\n  //Check if it's a viewing service item path\n  //Public/static content will not have the urn: prefix.\n  //So URL construction is a no-op\n  if (!api || decodeURIComponent(path).indexOf('urn:') !== 0) {\n    if (isRemotePath(null, path))\n    return path;else\n\n    return baseUrl + path;\n  }\n\n  //Remove \"urn:\" prefix when getting URN-based stuff (manifests and thumbnails)\n  if (api !== 'items') {\n    path = path.substr(6);\n  }\n\n  switch (api) {\n    case \"items\":return endpoint.getItemApi(baseUrl, path, apiData);\n    case \"bubbles\":return endpoint.getManifestApi(baseUrl, path, apiData);\n    case \"thumbnails\":return endpoint.getThumbnailApi(baseUrl, path, apiData);}\n\n};\n\nfunction isRemotePath(baseUrl, path) {\n  if (path.indexOf(\"file://\") !== -1)\n  return false;\n  if (path.indexOf(\"://\") !== -1)\n  return true;\n  if (baseUrl)\n  return true;\n}\n\n\n//Conditional GET request implementation for node vs. browser\nif (isNodeJS()) {\n\n  (function () {\n\n    var fs = require('fs');\n    var zlib = require('zlib');\n    var https = require('https');\n    var http = require('http');\n    var urllib = require('url');\n\n    var httpsAgent = new https.Agent({\n      keepAlive: true,\n      keepAliveMsecs: 100,\n      maxSockets: 10 });\n\n    var httpAgent = new http.Agent({\n      keepAlive: true,\n      keepAliveMsecs: 100,\n      maxSockets: 10 });\n\n\n\n    var forgeAgent = new https.Agent({ maxSockets: 10 });\n\n    function loadLocalFile(url, onSuccess, onFailure, options) {\n\n      if (url.indexOf(\"file://\") === 0)\n      url = url.substr(7);\n\n      function postProcess(data) {\n        if (options.responseType === \"json\") {\n          try {\n            return JSON.parse(data.toString(\"utf8\"));\n          } catch (e) {\n            onFailure(e);\n          }\n        }\n        return data;\n      }\n\n      //Always use async on Node\n      fs.readFile(url, function (error, data) {\n        if (error) {\n          onFailure(0, 0, { httpStatusText: error, url: url });\n        } else {\n          if (data[0] === 31 && data[1] === 139) {\n            zlib.gunzip(data, null, function (error, data) {\n              if (error)\n              onFailure(0, 0, { httpStatusText: error, url: url });else\n              {\n                data = postProcess(data);\n                if (options.ondata)\n                options.ondata(data);\n                onSuccess(data);\n              }\n            });\n          } else {\n            data = postProcess(data);\n            if (options.ondata)\n            options.ondata(data);\n            onSuccess(data);\n          }\n        }\n      });\n    }\n\n    function needsGunzip(res, pathname) {\n\n      if (res.headers['content-encoding'] === 'gzip')\n      return true;\n\n      //These SVF related files come pre-gzipped\n      //regardless of content-encoding header\n\n      if (pathname.endsWith(\".json.gz\"))\n      return true;\n\n      if (pathname.endsWith(\"FragmentList.pack\"))\n      return true;\n\n      if (pathname.endsWith(\"LightList.bin\"))\n      return true;\n\n      if (pathname.endsWith(\"CameraList.bin\"))\n      return true;\n\n      if (pathname.endsWith(\"CameraDefinitions.bin\"))\n      return true;\n\n      if (pathname.endsWith(\"LightDefinitions.bin\"))\n      return true;\n\n      return false;\n    }\n\n\n    /**\n       *  Performs a GET/HEAD request to Viewing Service. (Node.js specific implementation)\n       *\n       * @param {string} viewingServiceBaseUrl - The base url for the viewing service.\n       * @param {string} api - The api to call in the viewing service.\n       *  @param {string} url - The url for the request.\n       *  @param {function} onSuccess - A function that takes a single parameter that represents the response\n       *                                returned if the request is successful.\n       *  @param {function} onFailure - A function that takes an integer status code, and a string status, which together represent\n       *                                the response returned if the request is unsuccessful, and a third data argument, which\n       *                                has more information about the failure.  The data is a dictionary that minimally includes\n       *                                the url, and an exception if one was raised.\n       *  @param {Object=} [options] - A dictionary of options that can include:\n       *                               headers - A dictionary representing the additional headers to add.\n       *                               queryParams - A string representing the query parameters\n       *                               responseType - A string representing the response type for this request.\n       *                               {boolean} [encodeUrn] - when true, encodes the document urn if found.\n       *                               {boolean} [noBody] - when true, will perform a HEAD request\n       */\n    ViewingService.rawGet = function (viewingServiceBaseUrl, api, url, onSuccess, onFailure, options) {\n\n      options = options || {};\n\n      url = ViewingService.generateUrl(viewingServiceBaseUrl, api, url);\n\n      if (!isRemotePath(viewingServiceBaseUrl, url)) {\n        loadLocalFile(url, onSuccess, onFailure, options);\n        return;\n      }\n\n      if (options.queryParams) {\n        var concatSymbol = url.indexOf('?') === -1 ? '?' : '&';\n        url = url + concatSymbol + options.queryParams;\n      }\n\n      var parsed = urllib.parse(url);\n\n      var req = {\n        host: parsed.hostname,\n        port: parsed.port,\n        method: options.method || \"GET\",\n        path: parsed.path,\n        headers: {},\n        retryCount: 0,\n        agent: parsed.protocol === \"https:\" ? httpsAgent : httpAgent };\n\n\n      //Don't overload derivative service with requests\n      if (req.host.endsWith(\".api.autodesk.com\") && (\n      req.path.startsWith(\"/derivativeservice\") || req.path.startsWith(\"/modelderivative\"))) {\n        req.agent = forgeAgent;\n      }\n\n      if (options.headers) {\n        for (var p in options.headers) {\n          req.headers[p] = options.headers[p];\n        }\n      }\n\n      if (!req.headers['accept-encoding']) {\n        req.headers['accept-encoding'] = 'gzip, deflate';\n      }\n\n      if (options.range) {\n        req.headers[\"Range\"] = \"bytes=\" + options.range.min + \"-\" + options.range.max;\n      }\n\n      //Undo hack used to make streaming receive work on browser XHR -- the hack\n      //involves processing the response as text, so responseType is set to \"\".\n      if (options.ondata || options.onprogress) {\n        options.responseType = \"arraybuffer\";\n      }\n\n      var request = (parsed.protocol === \"https:\" ? https : http).request(req, function (res) {\n\n        var hasError = !(res.statusCode >= 200 && res.statusCode < 400);\n\n        //Pipe through gunzip if needed\n        var stream = res;\n        if (!hasError && needsGunzip(res, parsed.pathname) && !options.skipDecompress) {\n          stream = res.pipe(zlib.createGunzip());\n        }\n\n        //Decode as UTF8 string if needed\n        if (options.responseType === \"json\" || options.responseType === \"text\" || !options.responseType)\n        stream.setEncoding('utf8');\n\n        var chunks = [];\n        var receiveBuffer = Buffer.allocUnsafe(65536);\n        var receivedLen = 0;\n        stream.on('data', function (chunk) {\n\n          //The onprogress callback is special in that it\n          //want us to accumulate the data as we receive it, and it only looks at it.\n          if (options.onprogress) {\n\n            if (chunk.length + receivedLen > receiveBuffer.length) {\n              var nb = Buffer.allocUnsafe(0 | Math.ceil(receiveBuffer.length * 1.5));\n              receiveBuffer.copy(nb, 0, 0, receivedLen);\n              receiveBuffer = nb;\n            }\n\n            chunk.copy(receiveBuffer, receivedLen, 0, chunk.length);\n            receivedLen += chunk.length;\n            var abort = options.onprogress(receiveBuffer, receivedLen);\n            if (abort)\n            request.abort();\n            return;\n          } else {\n            chunks.push(chunk);\n          }\n\n          if (options.ondata) {\n            options.ondata(chunk);\n          }\n\n        });\n\n        stream.on('end', function () {\n\n          if (res.statusCode >= 200 && res.statusCode < 400) {\n\n            if (options.responseType === \"json\") {\n              var jsobj = JSON.parse(chunks.join(''));\n              onSuccess(jsobj);\n              return;\n            }\n\n            if (options.responseType === \"text\" || options.responseType === \"\") {\n              var str = chunks.join('');\n              onSuccess(str);\n              return;\n            }\n\n            var buf = options.onprogress ? receiveBuffer : Buffer.concat(chunks);\n\n            if (!options.skipDecompress && buf[0] === 31 && buf[1] === 139) {\n\n              logger.warn(\"An LMV resource (\" + url + \") was double compressed, or Content-Encoding header missing\");\n\n              try {\n                buf = zlib.gunzipSync(buf);\n                receivedLen = buf.length;\n              } catch (err) {\n                onFailure(ErrorCodes.BAD_DATA,\n                \"Malformed data received when requesting file\",\n                { \"url\": url, \"exception\": err.toString(), \"stack\": err.stack });\n              }\n            }\n\n            if (request.status === 200 && options.range) {\n              //If we requested a range, but the entire content was returned,\n              //make sure to give back just the requested subset to the caller\n              buf = new Uint8Array(buf, options.range.min, options.range.max - options.range.min);\n            }\n\n            onSuccess(buf, receivedLen);\n\n          } else {\n\n            if (onFailure)\n            onFailure(res.statusCode, res.statusMessage, { url: url });\n\n          }\n        });\n\n      });\n\n      request.on(\"error\", function (error) {\n        if (onFailure)\n        onFailure(error.code, error.message, { url: url });\n      });\n\n      if (options.postData) {\n        request.write(options.postData);\n      }\n\n      request.end();\n\n    };\n\n  })();\n\n} else {\n\n  var Pend = require(\"pend\");\n  var xhrThrottle = new Pend();\n  xhrThrottle.max = 25;\n\n  var protocolPortMap = {};\n  var pendingPortRequest = {};\n  var pendingRequestChannelMap = {};\n\n  /**\n                                      * Explain how the protocol handler working in general here\n                                      * Why adding this function:\n                                      * In Emscripten it has a virtual file system, it provide us ability to run wasm loader to load \n                                      * native DWF models, and write the output in that virtual file system\n                                      * \n                                      * While, we run the extraction code in the worker, it makes us hard to read the data back since only \n                                      * the worker thread can read that data. But we need put the resource in the bubble data to indicate that\n                                      * this data is from Emscripten Virtual File System, the urn is not an http(s) or file.\n                                      * \n                                      * It makes the whole process complex, we don't want to change the existing data schema(bubble) so we need\n                                      * to add a support in the Xhr.js to support the this resource request.\n                                      * \n                                      * The idea here is we register a MessagePort in the main thread, and once we create a worker which need to\n                                      * load the special resource, it will check whether this special protocol has a handler or not. If it does,\n                                      * it will let the handler to do the heavy lifting. \n                                      * \n                                      * In the WorkerCreator, it will create new  MessageChannel between new created worker and the main thread,\n                                      * it became the bridge to get the actual resource from the loader who registered the protocol\n                                      * \n                                      */\n  ViewingService.registerProtocolPort = function (protocol, port) {\n    if (/^(http(s)?|file):/gi.test(protocol)) {\n      // for peace of mind: security\n      console.warn(\"http(s) or file protocol were not allowed to be handled\");\n      return;\n    }\n\n    if (!port) {\n      // means we need to remove if there is a port open\n      if (protocolPortMap[protocol] && protocolPortMap[protocol] instanceof MessagePort) {\n        protocolPortMap[protocol].onmessage = undefined;\n        protocolPortMap[protocol] = undefined;\n      }\n\n      return;\n    }\n\n    protocolPortMap[protocol] = port;\n\n    port.onmessage = function (message) {\n      var url = message.data.url;\n      if (pendingPortRequest[url]) {\n        var pendingHandler = pendingPortRequest[url];\n\n        if (message.data.error) {\n          pendingHandler.onFailureWrapped(ErrorCodes.BAD_DATA,\n          \"Malformed data received when requesting file\",\n          { \"url\": url, \"exception\": message.data.error.message, \"stack\": message.data.error.stack });\n        } else {\n          // In the worker whom is root when request the data\n          var rawbuf = message.data.buffer;\n          pendingPortRequest[url] = undefined;\n\n          if (rawbuf[0] === 31 && rawbuf[1] === 139 && url.match(/(.f2d|.gz)$/gi)) {\n            try {\n              rawbuf = pako.ungzip(rawbuf);\n              if (pendingHandler.options && pendingHandler.options.ondata) {\n                pendingHandler.options.ondata(rawbuf);\n              }\n              pendingHandler.onSuccessWrapped(rawbuf);\n            } catch (err) {\n              pendingHandler.onFailureWrapped(ErrorCodes.BAD_DATA,\n              \"Malformed data received when requesting file\",\n              { \"url\": url, \"exception\": err.toString(), \"stack\": err.stack });\n            }\n          } else {\n            pendingHandler.onSuccessWrapped(rawbuf);\n          }\n        }\n      } else if (pendingRequestChannelMap[url]) {\n        // For the middle man\n        var transfer = [];\n        if (message.data && message.data.buffer && message.data.buffer.buffer instanceof ArrayBuffer) {\n          transfer.push(message.data.buffer.buffer);\n        }\n        pendingRequestChannelMap[url].postMessage(message.data, transfer);\n        pendingRequestChannelMap[url] = undefined;\n      }\n    };\n  };\n\n  ViewingService.handlerProtocol = function (protocol, url, onSuccessWrapped, onFailureWrapped, options) {\n    var port = protocolPortMap[protocol];\n    pendingPortRequest[url] = {\n      onSuccessWrapped: onSuccessWrapped,\n      onFailureWrapped: onFailureWrapped,\n      options: options };\n\n\n    port.postMessage({\n      operation: ViewingService.WORKER_READ_FILE,\n      url: url });\n\n\n  };\n\n  ViewingService.forwardProtocolHandlerToWorker = function (worker) {\n    var map = {};\n\n    // create the middle man who connect between the worker who need to request the resource\n    // and the main thread\n    var channel = new MessageChannel();\n    channel.port1.onmessage = function (message) {\n      var url = new URL(message.data.url);\n      protocolPortMap[url.protocol].postMessage(message.data);\n      pendingRequestChannelMap[url] = channel.port1;\n    };\n\n    for (var key in protocolPortMap) {\n      if (protocolPortMap[key] instanceof MessagePort) {\n        map[key] = channel.port2;\n      }\n    }\n\n    worker.doOperation({\n      operation: ViewingService.WORKER_REGISTER_FILE_PORT,\n      protocolPortMap: map },\n    [channel.port2]);\n  };\n\n  ViewingService.rawGet = function (viewingServiceBaseUrl, api, url, onSuccess, onFailure, options) {\n    xhrThrottle.go(function (pendCB) {\n      var onFailureWrapped = function onFailureWrapped() {\n        pendCB();for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {args[_key] = arguments[_key];}\n        onFailure && onFailure.apply(onFailure, args);\n      };\n\n      var onSuccessWrapped = function onSuccessWrapped() {\n        pendCB();for (var _len2 = arguments.length, args = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {args[_key2] = arguments[_key2];}\n        onSuccess && onSuccess.apply(onSuccess, args);\n      };\n\n      var protocolMatch = /^(\\w+:)\\/\\//gi.exec(url);\n      // if there is a special handler for this request, delegate this request to the handler\n      if (protocolMatch && protocolMatch.length == 2 && protocolPortMap[protocolMatch[1]]) {\n        ViewingService.handlerProtocol(protocolMatch[1], url, onSuccessWrapped, onFailureWrapped, options);\n      } else {\n        ViewingService._rawGet(viewingServiceBaseUrl, api, url, onSuccessWrapped, onFailureWrapped, options);\n      }\n    });\n  };\n\n  /**\n      *  Performs a GET/HEAD request to Viewing Service.\n      *\n      * @param {string} viewingServiceBaseUrl - The base url for the viewing service.\n      * @param {string} api - The api to call in the viewing service.\n      *  @param {string} url - The url for the request.\n      *  @param {function} onSuccess - A function that takes a single parameter that represents the response\n      *                                returned if the request is successful.\n      *  @param {function} onFailure - A function that takes an integer status code, and a string status, which together represent\n      *                                the response returned if the request is unsuccessful, and a third data argument, which\n      *                                has more information about the failure.  The data is a dictionary that minimally includes\n      *                                the url, and an exception if one was raised.\n      *  @param {Object=} [options] - A dictionary of options that can include:\n      *                               headers - A dictionary representing the additional headers to add.\n      *                               queryParams - A string representing the query parameters\n      *                               responseType - A string representing the response type for this request.\n      *                               {boolean} [encodeUrn] - when true, encodes the document urn if found.\n      *                               {boolean} [noBody] - when true, will perform a HEAD request\n      */\n  ViewingService._rawGet = function (viewingServiceBaseUrl, api, url, onSuccess, onFailure, options) {\n\n    options = options || {};\n\n    url = ViewingService.generateUrl(viewingServiceBaseUrl, api, url, options.apiData);\n\n    if (options.queryParams) {\n      var concatSymbol = url.indexOf('?') === -1 ? '?' : '&';\n      url = url + concatSymbol + options.queryParams;\n    }\n\n    var request = new XMLHttpRequest();\n\n    function onError(e) {\n      if (onFailure)\n      onFailure(request.status, request.statusText, { url: url });\n    }\n\n    function fixJsonResponse(response) {\n      if (options.responseType === \"json\") {\n        try {\n          if (response instanceof Uint8Array) {\n            //This should only happen in the node.js case so we can do toString\n            //instead of using the LMV utf8 converter.\n            return blobToJson(response);\n          } else if (typeof response === \"string\") {\n            return JSON.parse(response);\n          }\n        } catch (e) {}\n      }\n      return response;\n    }\n\n    function onLoad(e) {\n      if (request.status >= 200 && request.status < 400) {\n\n        if (request.response &&\n        request.response instanceof ArrayBuffer) {\n\n          var rawbuf;\n          if (request.status === 200 && options.range) {\n            //If we requested a range, but the entire content was returned,\n            //make sure to give back just the requested subset to the caller\n            rawbuf = new Uint8Array(request.response, options.range.min, options.range.max - options.range.min);\n          } else {\n            rawbuf = new Uint8Array(request.response);\n          }\n\n          // It's possible that if the Content-Encoding header is set,\n          // the browser unzips the file by itself, so let's check if it did.\n          // Return raw buffer if skip decompress is true\n          if (!options.skipDecompress && rawbuf[0] === 31 && rawbuf[1] === 139) {\n            if (!warnedGzip) {\n              warnedGzip = true;\n              logger.warn(\"An LMV resource (\" + url + \") was not uncompressed by the browser. This hurts performance. Check the Content-Encoding header returned by the server and check whether you're getting double-compressed streams. The warning prints only once but it's likely the problem affects multiple resources.\");\n            }\n            try {\n              rawbuf = pako.ungzip(rawbuf);\n            } catch (err) {\n              onFailure(ErrorCodes.BAD_DATA,\n              \"Malformed data received when requesting file\",\n              { \"url\": url, \"exception\": err.toString(), \"stack\": err.stack });\n            }\n          }\n\n          onSuccess && onSuccess(fixJsonResponse(rawbuf));\n        } else\n        {\n          var res = request.response;\n          if (!res && (!options.responseType || options.responseType === \"text\"))\n          res = request.responseText;\n\n          onSuccess && onSuccess(fixJsonResponse(res));\n        }\n      } else\n      {\n        onError(e);\n      }\n    }\n\n    try {\n\n      var isAsync = options.hasOwnProperty('asynchronous') ? options.asynchronous : true;\n      request.open(options.method || (options.noBody ? 'HEAD' : 'GET'), url, isAsync);\n\n      if (options.hasOwnProperty('responseType')) {\n        request.responseType = options.responseType;\n      }\n\n      request.withCredentials = true;\n      if (options.hasOwnProperty(\"withCredentials\"))\n      request.withCredentials = options.withCredentials;\n\n      if (options.range) {\n        request.setRequestHeader(\"Range\", \"bytes=\" + options.range.min + \"-\" + options.range.max);\n      }\n\n      if (options.headers) {\n        for (var header in options.headers) {\n          request.setRequestHeader(header, options.headers[header]);\n\n          // Disable withCredentials if header is Authorization type\n          // NOTE: using withCredentials attaches cookie data to request\n          if (header.toLocaleLowerCase() === \"authorization\") {\n            request.withCredentials = false;\n          }\n        }\n      }\n\n      if (isAsync) {\n        request.onload = onLoad;\n        request.onerror = onError;\n        request.ontimeout = onError;\n\n        if (options.ondata || options.onprogress) {\n\n          //Set up incremental progress notification\n          //if needed. We have to do some magic in order\n          //to get the received data progressively.\n          //https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest\n          request.overrideMimeType('text/plain; charset=x-user-defined');\n          options._dlProgress = {\n            streamOffset: 0 };\n\n\n          request.onreadystatechange = function () {\n\n            if (request.readyState > 2 && request.status === 200) {\n\n              if (options.ondata) {\n\n                var textBuffer = request.responseText;\n\n                // No new data coming in.\n                if (options._dlProgress.streamOffset >= textBuffer.length)\n                return;\n\n                var arrayBuffer = textToArrayBuffer(textBuffer, options._dlProgress.streamOffset);\n\n                options._dlProgress.streamOffset = textBuffer.length;\n\n                options.ondata(arrayBuffer);\n\n              } else if (options.onprogress) {\n\n                var abort = options.onprogress(request.responseText);\n                if (abort)\n                request.abort();\n              }\n            }\n          };\n        }\n      }\n\n      request.send(options.postData);\n\n      if (!isAsync) {\n        onLoad();\n      }\n    }\n    catch (e) {\n      onFailure(request.status, request.statusText, { url: url, exception: e });\n    }\n  };\n\n} //rawGet conditionsl implementation\n\n// Create the default failure callback.\n//\nViewingService.defaultFailureCallback = function (httpStatus, httpStatusText, data) {\n  if (httpStatus == 403) {\n    this.raiseError(\n    ErrorCodes.NETWORK_ACCESS_DENIED,\n    \"Access denied to remote resource\",\n    { \"url\": data.url, \"httpStatus\": httpStatus, \"httpStatusText\": httpStatusText });\n  } else\n  if (httpStatus == 404) {\n    this.raiseError(\n    ErrorCodes.NETWORK_FILE_NOT_FOUND,\n    \"Remote resource not found\",\n    { \"url\": data.url, \"httpStatus\": httpStatus, \"httpStatusText\": httpStatusText });\n  } else\n  if (httpStatus >= 500 && httpStatus < 600) {\n    this.raiseError(\n    ErrorCodes.NETWORK_SERVER_ERROR,\n    \"Server error when accessing resource\",\n    { \"url\": data.url, \"httpStatus\": httpStatus, \"httpStatusText\": httpStatusText });\n  } else\n  if (data.exception) {\n    this.raiseError(\n    ErrorCodes.NETWORK_FAILURE,\n    \"Network failure\",\n    { \"url\": data.url, \"exception\": data.exception.toString(), \"stack\": data.exception.stack });\n  } else\n  {\n    this.raiseError(\n    ErrorCodes.NETWORK_UNHANDLED_RESPONSE_CODE,\n    \"Unhandled response code from server\",\n    { \"url\": data.url, \"httpStatus\": httpStatus, \"httpStatusText\": httpStatusText, data: data });\n  }\n};\n\n\n\nfunction copyOptions(loadContext, options) {\n\n  //Those are the usual defaults when called from the LMV worker\n\n  if (!options.hasOwnProperty(\"responseType\"))\n  options.responseType = \"arraybuffer\";\n\n  //Add options junk we got from the main thread context\n\n  if (!options.hasOwnProperty(\"withCredentials\"))\n  options.withCredentials = !!loadContext.auth;\n\n  options.headers = loadContext.headers;\n  options.queryParams = loadContext.queryParams;\n  options.endpoint = loadContext.endpoint;\n}\n\n//Utility function called from the web worker to set up the options for a get request,\n//then calling ViewingService.get internally\nViewingService.getItem = function (loadContext, url, onSuccess, onFailure, options) {\n\n  options = options || {};\n\n  copyOptions(loadContext, options);\n\n  //If the endpoint does not support range requests (Apigee), then convert\n  //the range to start/end URL parameters.\n  if (options.range && !loadContext.supportsRangeRequests) {\n\n    var rangeParam = \"start=\" + options.range.min + \"&end=\" + options.range.max;\n    if (options.queryParams) {\n      options.queryParams += \"&\" + rangeParam;\n    } else {\n      options.queryParams = rangeParam;\n    }\n\n    options.range = undefined;\n  }\n\n  ViewingService.rawGet(loadContext.endpoint, 'items', url, onSuccess, onFailure, options);\n\n};\n\n//Utility function called from the web worker to set up the options for a get request,\n//then calling ViewingService.get internally\nViewingService.getManifest = function (loadContext, url, onSuccess, onFailure, options) {\n\n  options = options || {};\n\n  if (!options.hasOwnProperty(\"responseType\"))\n  options.responseType = \"json\";\n\n  copyOptions(loadContext, options);\n\n  ViewingService.rawGet(loadContext.endpoint, 'bubbles', url, onSuccess, onFailure, options);\n\n};\n\n//Utility function called from the web worker to set up the options for a get request,\n//then calling ViewingService.get internally\nViewingService.getThumbnail = function (loadContext, url, onSuccess, onFailure, options) {\n\n  options = options || {};\n\n  copyOptions(loadContext, options);\n\n  var queryParams = options.queryParams || '';\n  var missingElements = [];\n  if (queryParams.indexOf('guid=') === -1 && options.guid) {\n    missingElements.push(\"guid=\" + encodeURIComponent(options.guid));\n  }\n  if (queryParams.indexOf('role=') === -1) {\n    var role = options.role || \"rendered\";\n    missingElements.push(\"role=\" + role);\n  }\n  if (queryParams.indexOf('width=') === -1) {\n    var sz = options.size || 400;\n    missingElements.push(\"width=\" + sz);\n  }\n  if (queryParams.indexOf('height=') === -1) {\n    var sz = options.size || 400;\n    missingElements.push(\"height=\" + sz);\n  }\n  if (queryParams.indexOf('acmsession=') === -1 && options.acmsession) {\n    missingElements.push(\"acmsession=\" + options.acmsession);\n  }\n  var thumbQueryParams = missingElements.join('&');\n\n  if (options.queryParams) {\n    options.queryParams = options.queryParams + '&' + thumbQueryParams;\n  } else {\n    options.queryParams = thumbQueryParams;\n  }\n\n  ViewingService.rawGet(loadContext.endpoint, 'thumbnails', url, onSuccess, onFailure, options);\n};\n\n\nViewingService.getACMSession = function (endpoint, acmProperties, onSuccess, onFailure) {\n\n  var acmHeaders = {};\n  var token;\n\n  for (var key in acmProperties) {\n\n    if (key === \"oauth2AccessToken\")\n    token = acmProperties[key];else\n\n    if (key.indexOf(\"x-ads-acm\") !== -1)\n    acmHeaders[key] = acmProperties[key];\n  }\n\n  // The value of this can be anything. Required for some arcane reasons.\n  acmHeaders.application = \"autodesk\";\n\n  var xhr = new XMLHttpRequest();\n  xhr.open(\"POST\", endpoint + '/oss-ext/v2/acmsessions', true);\n  xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n  xhr.setRequestHeader(\"Authorization\", \"Bearer \" + token);\n  xhr.responseType = \"json\";\n\n  xhr.onload = function () {\n    if (xhr.status === 200 && xhr.response) {\n      // If the response is a string (e.g. from IE), need to parse it to an object first\n      var response = typeof xhr.response === 'string' ? JSON.parse(xhr.response) : xhr.response;\n\n      if (response && response.acmsession) {\n        onSuccess(response.acmsession);\n      } else\n      {\n        onFailure(xhr.status, \"Can't get acm session from response.\");\n      }\n\n    } else {\n      onFailure(xhr.status);\n    }\n  };\n\n  xhr.onerror = onFailure;\n  xhr.ontimeout = onFailure;\n  xhr.send(JSON.stringify(acmHeaders));\n\n  // \"application\" header is only required for OSS end point, and should not be passed\n  // with normal requests because this header is not in allowed header sets of APIGEE.\n  delete acmHeaders.application;\n\n};","\nimport { isNodeJS, getGlobal } from \"../../compat\";\nimport { getParameterByName } from \"../../globals\";\n\nvar _window = getGlobal();\n\nvar endp = {};\n\nvar CDN_ROOT = null;\nendp.ENDPOINT_API_DERIVATIVE_SERVICE_V2 = 'derivativeV2';\nendp.ENDPOINT_API_MODEL_DERIVATIVE_V2 = 'modelDerivativeV2'; // Forge\nendp.ENDPOINT_API_FLUENT = 'fluent';\nendp.ENDPOINT_API_D3S = 'D3S';\n\nvar _apis_data = {\n  derivativeV2: {\n    baseURL: '/derivativeservice/v2',\n    itemURL: '/derivativeservice/v2/derivatives/:derivativeurn',\n    manifestURL: '/derivativeservice/v2/manifest/:urn',\n    thumbnailsURL: '/derivativeservice/v2/thumbnails/:urn' },\n\n  derivativeV2_EU: {\n    baseURL: '/derivativeservice/v2/regions/eu',\n    itemURL: '/derivativeservice/v2/regions/eu/derivatives/:derivativeurn',\n    manifestURL: '/derivativeservice/v2/regions/eu/manifest/:urn',\n    thumbnailsURL: '/derivativeservice/v2/regions/eu/thumbnails/:urn' },\n\n  modelDerivativeV2: {\n    baseURL: '/modelderivative/v2/',\n    itemURL: '/modelderivative/v2/designdata/:urn/manifest/:derivativeurn',\n    manifestURL: '/modelderivative/v2/designdata/:urn/manifest',\n    thumbnailsURL: '/modelderivative/v2/designdata/:urn/thumbnail' },\n\n  fluent: {\n    baseURL: '/modeldata',\n    itemURL: '/modeldata/file/:derivativeurn',\n    manifestURL: '/modeldata/manifest/:urn',\n    thumbnailsURL: '/derivativeservice/v2/thumbnails/:urn',\n    cdnURL: '/cdn',\n    cdnWS: '/cdnws'\n    //cdnRedirectURL: '/cdnurl', //There is no separate CDN endpoint currently\n  },\n  D3S: {\n    baseURL: '/modeldata',\n    itemURL: '/modeldata/file/:derivativeurn',\n    manifestURL: '/modeldata/manifest/:urn',\n    thumbnailsURL: '/derivativeservice/v2/thumbnails/:urn',\n    cdnURL: '/cdn',\n    cdnWS: '/cdnws' },\n\n  D3S_EU: {\n    baseURL: '/modeldata',\n    itemURL: '/modeldata/file/:derivativeurn',\n    manifestURL: '/modeldata/manifest/:urn',\n    thumbnailsURL: '/derivativeservice/v2/regions/eu/thumbnails/:urn',\n    cdnURL: '/cdn',\n    cdnWS: '/cdnws' } };\n\n\n\nvar _endpoint = '';\nvar _api = endp.ENDPOINT_API_DERIVATIVE_SERVICE_V2;\nvar _useCredentials = false;\nvar _useCookie = false;\nvar _acmSession = '';\n\nendp.HTTP_REQUEST_HEADERS = {};\nendp.queryParams = {};\n\n/**\r\n                        * Sets the endpoint and api to be used to create REST API request strings.\r\n                        * @param {string} endpoint\r\n                        * @param {string} [api] - Possible values are derivativeV2, modelDerivativeV2\r\n                        */\nendp.setEndpointAndApi = function (endpoint, api) {\n  if (endpoint) {\n    _endpoint = endpoint;\n  }\n  if (api) {\n    _api = api;\n  }\n};\n\n/**\r\n    * Returns the endpoint plus the api used to create REST API request strings.\r\n    * Example: \"developer.api.autodesk.com/modelderivative/v2\"\r\n    * @returns {string}\r\n    */\nendp.getEndpointAndApi = function () {\n  return _endpoint + _apis_data[_api].baseURL;\n};\n\n/**\r\n    * Returns the endpoint used to create REST API request strings.\r\n    * Examples: \"developer.api.autodesk.com\"\r\n    * @returns {string}\r\n    */\nendp.getApiEndpoint = function () {\n  return _endpoint;\n};\n\n/**\r\n    * @private\r\n    * @returns {string}\r\n    */\nendp.getApiFlavor = function () {\n  return _api;\n};\n\n/**\r\n    * Returns the default shared resource CDN location.\r\n    * For best performance (and to not overload our servers), this should\r\n    * be replaced by a direct CloudFront url during initialization, by\r\n    * calling the cdnRedirectUrl and looking at the result.\r\n    */\nendp.getCdnUrl = function () {\n  return CDN_ROOT || (_endpoint ? _endpoint + _apis_data[_api].cdnURL : undefined);\n};\n\nendp.getCdnWebSocketEndpoint = function () {\n  return _endpoint + (_apis_data[_api].cdnWS || '');\n};\n\nendp.setCdnUrl = function (url) {\n  CDN_ROOT = url;\n};\n\nendp.getCdnRedirectUrl = function () {\n  var redirect = _apis_data[_api].cdnRedirectURL;\n  if (!redirect)\n  return null;\n  return _endpoint + redirect;\n};\n\nendp.setAcmSession = function (value) {\n  _acmSession = value;\n};\n\nendp.getAcmSession = function () {\n  return _acmSession;\n};\n\n/**\r\n    * Returns a REST API request strings to be used to get the manifest of the provided urn.\r\n    * Example: \"developer.api.autodesk.com/modelderivative/v2/designdata/:urn/manifest\"\r\n    * @param {string | null} endpoint - When provided is used instead of the globally set endpoint.\r\n    * @param {string} urn\r\n    * @param {string} api - When provided is used instead of the globally set API flavor\r\n    * @returns {string}\r\n    */\nendp.getManifestApi = function (endpoint, urn, api) {\n  var url = endpoint || _endpoint;\n  api = api || _api;\n  url += _apis_data[api].manifestURL;\n  // If urn is not provided we return same string that before for backward compatibility.\n  urn = urn || '';\n  url = url.replace(':urn', urn);\n  return url;\n};\n\n/**\r\n    * Returns a REST API request strings to be used to get a derivative urn.\r\n    * Example: \"developer.api.autodesk.com/modelderivative/v2/designdata/:urn/manifest/:derivativeUrn\"\r\n    * @param {string | null} endpoint - When provided is used instead of the globally set API endpoint.\r\n    * @param {string} derivativeUrn\r\n    * @param {string} api - When provided is used instead of the globally set API flavor\r\n    * @returns {string}\r\n    */\nendp.getItemApi = function (endpoint, derivativeUrn, api) {\n  var theApi = api || _api;\n  var itemApi = (endpoint || _endpoint) + _apis_data[theApi].itemURL;\n  // If urn is not provided we return same string that before for backward compatibility.\n  derivativeUrn = derivativeUrn || '';\n  var decodedUrn = decodeURIComponent(derivativeUrn);\n\n  // Extract svf urn from item urn, needed when using model derivative.\n  if (itemApi.indexOf(':urn') !== -1) {\n    var parts = decodedUrn.split('/');\n    var urn = parts[0] || '';\n    urn = urn.split(':');\n    urn = urn[urn.length - 1] || '';\n\n    itemApi = itemApi.replace(':urn', urn);\n  }\n\n  if (theApi === endp.ENDPOINT_API_MODEL_DERIVATIVE_V2) {\n    derivativeUrn = encodeURIComponent(decodedUrn);\n  }\n\n  itemApi = itemApi.replace(':derivativeurn', derivativeUrn);\n\n  return itemApi;\n};\n\n/**\r\n    * Returns a REST API request strings to be used to get the thumbnail for a specific urn.\r\n    * Example: \"developer.api.autodesk.com/modelderivative/v2/designdata/:urn/thumbnail\"\r\n    * @param {string | null} endpoint - When provided is used instead of the globally set endpoint.\r\n    * @param {string} urn\r\n    * @param {string} api - When provided is used instead of the globally set API flavor\r\n    * @returns {string}\r\n    */\nendp.getThumbnailApi = function (endpoint, urn, api) {\n  var thumbnailApi = (endpoint || _endpoint) + _apis_data[api || _api].thumbnailsURL;\n  return thumbnailApi.replace(':urn', urn || '');\n};\n\nendp.getUseCredentials = function () {\n  return _useCredentials;\n};\n\nendp.getDomainParam = function () {\n  console.warn(\"getDomainParam is deprecated, switch to getQueryParams instead.\");\n  return this.getUseCredentials() && !isNodeJS() ? \"domain=\" + encodeURIComponent(_window.location.origin) : \"\";\n};\n\n/**\r\n    * Adds a URL parameter that will be used in all data load requests.\r\n    * @param {string} param - The name of the parameter\r\n    * @param {string} value - The value of the parameter. It will be URI encoded when constructing the final URL.\r\n    */\nendp.addQueryParam = function (param, value) {\n  this.queryParams[param] = value;\n};\n\n/**\r\n    * Deletes a previously specified URL parameter.\r\n    * @param {string} param - The name of the parameter to delete\r\n    */\nendp.deleteQueryParam = function (param) {\n  delete this.queryParams[param];\n};\n\nendp.getQueryParams = function (inputObj) {\n\n  var qParam = this.getUseCredentials() && !isNodeJS() ? \"domain=\" + encodeURIComponent(_window.location.origin) : \"\";\n\n  var bypassDs = getParameterByName(\"bypassds\");\n  if (bypassDs) {\n    qParam = qParam ? qParam + \"&bypassds=1\" : \"bypassds=1\";\n  }\n\n  var addedParams = [];\n  for (var p in this.queryParams) {\n    addedParams.push(encodeURIComponent(p) + \"=\" + encodeURIComponent(this.queryParams[p]));\n  }\n\n  if (addedParams.length) {\n    if (qParam)\n    qParam += \"&\" + addedParams.join(\"&\");else\n\n    qParam = addedParams.join(\"&\");\n  }\n\n  if (qParam && inputObj) {\n    if (inputObj.queryParams) {\n      inputObj.queryParams += \"&\" + qParam;\n    } else {\n      inputObj.queryParams = qParam;\n    }\n  }\n\n  return qParam;\n};\n\nendp.setUseCredentials = function (useCredentials) {\n  _useCredentials = useCredentials;\n};\n\nendp.setUseCookie = function (useCookie) {\n  _useCookie = useCookie;\n};\n\nendp.getUseCookie = function () {\n  return _useCookie;\n};\n\nendp.isOtgBackend = function () {\n  return this.getApiFlavor() === this.ENDPOINT_API_FLUENT;\n};\n\nendp.isSVF2Backend = function () {\n  return this.getApiFlavor() === 'D3S' || this.getApiFlavor() === 'D3S_EU';\n};\n\nendp.initLoadContext = function (inputObj) {\n\n  inputObj = inputObj || {};\n\n  inputObj.auth = this.getUseCredentials();\n\n  if (!inputObj.endpoint)\n  inputObj.endpoint = this.getApiEndpoint();\n\n  if (!inputObj.api)\n  inputObj.api = this.getApiFlavor();\n\n  if (!inputObj.headers)\n  inputObj.headers = {};\n\n  for (var p in this.HTTP_REQUEST_HEADERS) {\n    inputObj.headers[p] = this.HTTP_REQUEST_HEADERS[p];\n  }\n\n  if (inputObj.api === this.ENDPOINT_API_FLUENT) {\n    //Turned off because Nginx on fluent server is refusing to\n    //return ranges from the proxy cache -- and it's not clear why.\n    //inputObj.supportsRangeRequests = true;\n  }\n\n  //This is done to avoid CORS errors on content served from proxy or browser cache\n  //The cache will respond with a previously received response, but the Access-Control-Allow-Origin\n  //response header might not match the current Origin header (e.g. localhost vs. developer.api.autodesk.com)\n  //which will cause a CORS error on the second request for the same resource.\n  this.getQueryParams(inputObj);\n\n  //shared geometry/material storage\n  inputObj.otg_cdn = CDN_ROOT || this.getCdnUrl();\n  inputObj.otg_ws = this.getCdnWebSocketEndpoint();\n\n  return inputObj;\n};\n\n//TODO: Globals that need a better place\nvar _env; //formerly avp.env\nexport function getEnv() {\n  return _env;\n}\nexport function setEnv(env) {\n  _env = env;\n}\n\n// Set viewer in offline mode if set to true. In offline mode, viewer would ignore all URNs in bubble JSON\n// and assume the viewables are laid out in local file system path relative to the bubble.json.\nvar _offline = false;\nexport function isOffline() {\n  return _offline;\n}\nexport function setOffline(offline) {\n  _offline = offline;\n}\n\n// Offline resource prefix specified by viewer consumer (e.g. IOS web view). Used as prefix to concatenate with\n// each resource relative path to form the absolute path of each resource.\nvar _offlineResourcePrefix = \"\";\nexport function setOfflineResourcePrefix(prefix) {\n  _offlineResourcePrefix = prefix;\n}\nexport function getOfflineResourcePrefix() {\n  return _offlineResourcePrefix;\n}\n\nexport var endpoint = endp;\n\n//For backwards compatibility until all code is converted to use\n//the function from the endpoint instance.\nexport var initLoadContext = endp.initLoadContext.bind(endp);","import { LmvMatrix4 } from \"../../wgs/scene/LmvMatrix4\";\nimport { LmvVector3 } from \"../../wgs/scene/LmvVector3\";\nimport { GeomMergeTask } from \"../../wgs/scene/consolidation/GeomMergeTask\";\n\n/**\n                                                                              * Main function of ConsolidationWorker. The purpose of this function is to overtake some time-consuming\n                                                                              * work from mergeGeometries (see Consolidation.js), e.g., baking transforms into vertex-positions and normals.\n                                                                              *  @param {Object}      context\n                                                                              *  @param {MergeTask[]} context.tasks - Each MergeTask provides the input data to process a single consolidated mesh.\n                                                                              *                                       See ParallelGeomMerge.js for details.\n                                                                              */\nexport function doGeomMerge(context) {\n\n  // Since we are running in the worker script, use LmvVector/LmvMatrix to run the MergeTask\n  var matrix = new LmvMatrix4();\n  var vec = new LmvVector3();\n\n  var results = [];\n  for (var i = 0; i < context.tasks.length; i++) {\n    var task = context.tasks[i];\n\n    var result = GeomMergeTask.prototype.run.call(task, matrix, vec);\n\n    results.push(result);\n  }\n\n  // add result array buffers to transferlist to avoid copying\n  var transferList = [];\n  for (var i = 0; i < results.length; i++) {\n    transferList.push(results[i].vb.buffer);\n    transferList.push(results[i].vertexIds.buffer);\n  }\n\n  // send back result\n  context.worker.postMessage(results, transferList);\n}\n\nexport function register(workerMain) {\n  workerMain.register(\"MERGE_GEOMETRY\", { doOperation: doGeomMerge });\n}","\"use strict\";\n\nimport * as base64 from '../lmvtk/fusion/base64';\nvar pako = require('pako');\n\n//FUSION SPECIFIC\n\nexport function doDecompressDelta(loadContext) {\n\n  var _this = loadContext.worker;\n\n  // Step1:decode the compressed data\n  var compressData = base64.decode(loadContext.delta);\n  compressData = compressData.split('').map(function (e) {\n    return e.charCodeAt(0);\n  });\n\n  //Step2:decompress the data\n  var output = pako.inflate(compressData);\n\n  //Step3:convert byte array to string\n  var json = \"\";\n  for (var i = 0; i < output.length; i++) {\n    json += String.fromCharCode(output[i]);\n  }\n\n  //Step4:parse scene json\n  json = JSON.parse(json);\n  _this.postMessage({ cbId: loadContext.cbId, index: loadContext.index, res: json });\n}\n\nexport function register(workerMain) {\n  workerMain.register(\"DECOMPRESS_DELTA\", { doOperation: doDecompressDelta });\n}","\nimport { F2D } from \"../lmvtk/f2d/F2d\";\nimport { F2DGeometry } from \"../lmvtk/f2d/F2dGeometry\";\nimport { ErrorCodes } from \"../net/ErrorCodes\";\n\nfunction tryCatch(_this, f) {\n  try {\n    f();\n  }\n  catch (exc) {\n    _this.raiseError(\n    ErrorCodes.BAD_DATA, \"\",\n    { \"exception\": exc.toString(), \"stack\": exc.stack });\n    _this.postMessage(null);\n  }\n}\n\nfunction getF2DParser(loadContext) {\n  if (loadContext.f2dLoadOptions.outputType === \"geometry\") {\n    return new F2DGeometry(loadContext.metadata, loadContext.f2dLoadOptions);\n  }\n  return new F2D(loadContext.metadata, loadContext.manifest, loadContext.basePath, loadContext.f2dLoadOptions);\n}\n\nfunction doParseF2D(loadContext) {\n  var _this = loadContext.worker;\n\n  _this.postMessage({ progress: 0.01 }); //Tell the main thread we are alive\n\n  if (loadContext.data) {\n\n    _this.postMessage({ progress: 0.5 }); //rough progress reporting -- can do better\n    var f2d = getF2DParser(loadContext);\n    loadContext.loadDoneCB = function (success) {\n\n      if (success) {\n        var msg = { \"f2d\": f2d };\n        _this.postMessage(msg);\n      } else\n      {\n        _this.raiseError(ErrorCodes.BAD_DATA, \"\", {});\n        _this.postMessage(null);\n      }\n    };\n\n    tryCatch(_this, function () {\n      f2d.load(loadContext, loadContext.data);\n    });\n  } else\n  {\n    _this.postMessage(null);\n  }\n}\n\nfunction doParseF2DFrame(loadContext) {\n  var _this = loadContext.worker;\n\n  var f2d = _this.f2d;\n\n  if (!f2d) {\n    _this.postMessage({ progress: 0.5 }); //rough progress reporting -- can do better\n    var f2d = _this.f2d = getF2DParser(loadContext);\n    f2d.F2D_MESH_COUNT_OLD = 0;\n\n    // First post needs to post entire F2D so we can set up bounding boxes, etc.\n    var msg = { \"f2dframe\": f2d };\n    _this.postMessage(msg);\n  }\n\n  function loadDoneCallback(success, finalFlush) {\n    if (success) {\n\n      if (!f2d.meshes.length && !finalFlush) {\n        // No new data coming in.\n        // debug(\"F2D streaming : no new data coming in.\");\n        return;\n      } else {\n\n        var msg = { \"f2dframe\": true,\n          \"meshes\": f2d.meshes,\n          \"baseIndex\": f2d.F2D_MESH_COUNT_OLD,\n          \"bbox\": f2d.bbox };\n\n\n        if (loadContext.finalFrame) {\n\n          //Add f2d properties which are cumulative and their\n          //final values are not known until the end\n          msg.cumulativeProps = {\n            maxObjectNumber: f2d.maxObjectNumber,\n            viewports: f2d.viewports,\n            clips: f2d.clips,\n            strings: f2d.strings,\n            stringDbIds: f2d.stringDbIds,\n            stringBoxes: f2d.stringBoxes,\n            linkBoxes: f2d.linkBoxes,\n            hasPageShadow: f2d.hasPageShadow,\n            minLineWidth: f2d.currentVbb.minLineWidth };\n\n\n          msg.finalFrame = finalFlush;\n        }\n\n        // User transferable objects to pass the array buffers used by mesh without deep copying.\n        var transferList = [];\n        for (var i = 0, e = f2d.meshes.length; i < e; ++i) {\n          transferList.push(f2d.meshes[i].vb.buffer);\n          transferList.push(f2d.meshes[i].indices.buffer);\n        }\n        _this.postMessage(msg, transferList);\n\n        f2d.F2D_MESH_COUNT_OLD += f2d.meshes.length;\n        f2d.meshes = [];\n      }\n    } else\n    {\n      _this.raiseError(\n      ErrorCodes.BAD_DATA, \"\",\n      {});\n      _this.postMessage(null);\n    }\n  }\n\n  loadContext.loadDoneCB = loadDoneCallback;\n\n  tryCatch(_this, function () {\n    f2d.loadFrames(loadContext);\n  });\n}\n\n\nexport function register(workerMain) {\n  workerMain.register(\"PARSE_F2D\", { doOperation: doParseF2D });\n  workerMain.register(\"PARSE_F2D_FRAME\", { doOperation: doParseF2DFrame });\n}","\"use strict\";\n\nimport { ViewingService } from \"../net/Xhr\";\nimport { F2DProbe } from \"../lmvtk/f2d/F2dProbe\";\nimport { logger } from \"../../logger/Logger\";\nimport { utf8ArrayToString } from \"../lmvtk/common/StringUtils\";\nimport { errorCodeString, ErrorCodes } from \"../net/ErrorCodes\";\n\nvar pako = require('pako');\n\nvar ENABLE_F2D_STREAMING_MODE = true;\n\nfunction requestFileF2D(loadContext, filename, onSuccess) {\n  var url = loadContext.basePath + filename;\n  ViewingService.getItem(loadContext, url, onSuccess, null);\n}\n\n// Stream loading f2d data and prepare parseable data frames.\nfunction doStreamF2D(loadContext) {\n\n  var _this = loadContext.worker;\n\n  _this.postMessage({ progress: 0.01 }); //Tell the main thread we are alive\n\n  //Get the metadata and manifest first.\n  var metadata;\n  var manifest;\n  var doneFiles = 0;\n\n  var accumulatedStream = new Uint8Array(65536);\n  var accumulatedBytes = 0;\n  var responseData = null;\n\n  function accumulateData(partial) {\n    //Add the new bytes to the accumulation buffer\n    if (accumulatedStream.length < partial.length + accumulatedBytes) {\n      var newlen = Math.max(accumulatedStream.length * 2, partial.length + accumulatedBytes);\n      var ns = new Uint8Array(newlen);\n      ns.set(accumulatedStream);\n      accumulatedStream = ns;\n    }\n    accumulatedStream.set(partial, accumulatedBytes);\n    accumulatedBytes += partial.length;\n  }\n\n  function markSucceeded(response) {\n    responseData = response;\n  }\n\n  var dataReceived = accumulateData;\n  var requestSucceeded = markSucceeded;\n\n  // Start the request for the primary graphics\n  // Just accumulate data as it comes in, and remember response\n  // when it succeeds. The dataReceived and requestSucceeded\n  // variables are changed to other functions once the manifest\n  // and metadata are read.\n  ViewingService.getItem(loadContext, loadContext.url, function (responseData) {\n    requestSucceeded(responseData);\n  }, loadContext.onFailureCallback, {\n    ondata: function ondata(partial) {\n      dataReceived(partial);\n    },\n    responseType: \"\" });\n\n\n\n  requestFileF2D(loadContext, \"metadata.json.gz\", function (data) {\n    try {\n      metadata = JSON.parse(utf8ArrayToString(data));\n      doneFiles++;\n    } catch (e) {\n      self.raiseError(\n      ErrorCodes.BAD_DATA,\n      \"\" /* does not matter what strings we put here since the final user facing error message is solely decided\n         by ErrorCodes. Invent another code if we want a specific error message for this error. */);\n\n    }\n\n    if (doneFiles === 2)\n    doStreamF2D_Continued(loadContext, manifest, metadata);\n  });\n  requestFileF2D(loadContext, \"manifest.json.gz\", function (data) {\n    try {\n      if (data)\n      manifest = JSON.parse(utf8ArrayToString(data));\n      //The F2D does not necessarily need a manifest file to load (some old F2Ds don't have that)\n      doneFiles++;\n    } catch (e) {}\n\n    if (doneFiles === 2)\n    doStreamF2D_Continued(loadContext, manifest, metadata);\n  });\n\n  //Loads the F2D stream once the metadata and manifest files are fetched\n  function doStreamF2D_Continued(loadContext, manifest, metadata) {\n\n    var _this = loadContext.worker;\n\n    var url = loadContext.url;\n\n    // Collect asset urls that to be send to main thread for mobile usage.\n    var assets = [];\n\n    var f2dSize = 0;\n    var altSize = 0;\n    if (manifest && manifest.assets) {\n      var a = manifest.assets;\n      for (var i = 0; i < a.length; i++) {\n        if (url.indexOf(a[i].URI) != -1) {\n          f2dSize = a[i].usize || 0;\n          break;\n        } else if (a[i].type == \"Autodesk.CloudPlatform.F2D\")\n        altSize = a[i].usize || 0;\n      }\n    }\n    if (f2dSize == 0 && altSize > 0)\n    f2dSize = altSize;\n\n    var probe = new F2DProbe();\n\n    var first = true;\n    var streamOffset = 0;\n    var sentMetadata = false;\n\n    function onSuccess(responseData) {\n      // Send collected f2d resource urls to main thread.\n      _this.postMessage({ \"type\": \"F2DAssetURL\", \"urls\": assets });\n      assets = null;\n\n      if (ENABLE_F2D_STREAMING_MODE) {\n\n        var msg = {\n          \"type\": \"F2DSTREAM\",\n          \"finalFrame\": true,\n          \"finished\": true,\n          \"progress\": 1 };\n\n\n        if (!sentMetadata) {\n          msg.manifest = manifest;\n          msg.metadata = metadata;\n          msg.basePath = loadContext.basePath;\n          msg.f2dSize = f2dSize;\n          sentMetadata = true;\n        }\n\n        _this.debug(\"Total text bytes count : \" + responseData.length);\n\n        _this.postMessage(msg);\n\n        //Streaming code path ends here -- we have already sent\n        //the data back from the progress callback\n        return;\n      }\n\n      //Non-streaming code path here\n      if (accumulatedStream.length > accumulatedBytes)\n      accumulatedStream = new Uint8Array(accumulatedStream.buffer.slice(0, accumulatedBytes));\n\n      var view;\n      if (accumulatedStream[0] == 31 && accumulatedStream[1] == 139) {\n        try {\n          view = new Uint8Array(accumulatedStream.buffer, 0, accumulatedBytes);\n          view = pako.ungzip(view);\n        } catch (e) {\n          console.error(e);\n        }\n      }\n\n      var msg = { \"type\": \"F2DBLOB\",\n        \"metadata\": metadata,\n        \"manifest\": manifest,\n        \"f2dSize\": f2dSize,\n        \"basePath\": loadContext.basePath, // TODO: we might be able to infer this elsewhere.\n        \"progress\": 1,\n        \"buffer\": view.buffer };\n      var transferList = [];\n      transferList.push(view.buffer);\n      _this.postMessage(msg, transferList);\n    }\n\n    function processData() {\n\n      if (!ENABLE_F2D_STREAMING_MODE)\n      return;\n\n      if (first) {\n        first = false;\n\n        // If the very first two bytes of the entire stream is GZIP magic number,\n        // then we fall back on none streaming mode, because streaming mode only\n        // work with browser decompression, and the presence of such magic number\n        // implies browser decompression fails, for whatever reasons.\n        if (accumulatedStream[0] == 31 && accumulatedStream[1] == 139) {\n          logger.error(\"F2D streaming broken by non-streaming unzip!\", errorCodeString(ErrorCodes.BAD_DATA));\n          ENABLE_F2D_STREAMING_MODE = false;\n          return;\n        }\n      }\n\n      var view = new Uint8Array(accumulatedStream.buffer, streamOffset, accumulatedBytes - streamOffset);\n\n      try {\n        var marker = probe.load(view);\n\n        if (marker.frameEnd > marker.frameStart) {\n          var frames = accumulatedStream.buffer.slice(streamOffset + marker.frameStart, streamOffset + marker.frameEnd);\n          streamOffset += marker.frameEnd;\n\n          var transferList = [];\n          transferList.push(frames);\n\n          var msg = { \"type\": \"F2DSTREAM\",\n            \"frames\": frames,\n            \"finalFrame\": false };\n\n\n          if (f2dSize)\n          msg.progress = streamOffset / f2dSize;\n\n          if (!sentMetadata) {\n            msg.manifest = manifest;\n            msg.metadata = metadata;\n            msg.f2dSize = f2dSize;\n            msg.basePath = loadContext.basePath;\n            sentMetadata = true;\n          }\n\n          _this.postMessage(msg, transferList);\n\n        }\n      } catch (e) {\n        _this.debug(e);\n      }\n    }\n\n    function onData(partial) {\n      accumulateData(partial);\n      processData();\n    }\n\n    requestSucceeded = onSuccess;\n    dataReceived = onData;\n    // check to see if the primary graphics request has received any data\n    if (accumulatedBytes > 0)\n    processData();\n    // check to see if primary graphics request succeeded\n    if (responseData != null)\n    onSuccess(responseData);\n  }\n}\n\nexport function register(workerMain) {\n  workerMain.register(\"STREAM_F2D\", { doOperation: doStreamF2D });\n}","import { PackFileReader } from '../lmvtk/svf/PackReader';\nimport { readGeometry } from '../lmvtk/svf/Geoms';\nimport { ErrorCodes } from '../net/ErrorCodes';\nimport { ViewingService } from '../net/Xhr';\nimport { createWireframe } from \"../../wgs/scene/DeriveTopology\";\n\nfunction guardFunction(loadContext, f) {\n  try {\n    f();\n  }\n  catch (exc) {\n    loadContext.raiseError(\n    ErrorCodes.BAD_DATA, \"Unhandled exception while reading pack file\",\n    { \"url\": loadContext.url, \"exception\": exc.toString(), \"stack\": exc.stack });\n  }\n}\n\nfunction doGeomLoad(loadContext) {\n\n  var _this = loadContext.worker;\n\n  //Make a blocking request -- it's ok, because\n  //we are in a worker thread.\n\n  function onSuccess(arrayBuffer) {\n    _this.postMessage({\n      url: loadContext.url,\n      workerId: loadContext.workerId,\n      progress: 0.5 });\n    //rough progress reporting -- can do better\n\n    guardFunction(loadContext, function () {\n\n      var pfr = new PackFileReader(arrayBuffer);\n\n      var raisedError = false;\n\n      var options = {\n        estimateSizeOnly: true,\n        packNormals: typeof loadContext.packNormals !== \"undefined\" ? loadContext.packNormals : true };\n\n\n      var i,iEnd = pfr.getEntryCounts(),mesh;\n      var skip = loadContext.inMemory || [];\n      var estLength = 0;\n      var shouldReadNext = function shouldReadNext(i) {\n        var v = skip[i >> 5];\n        return !v || !(v & 1 << (i & 31));\n      };\n\n      for (i = 0; i < iEnd; i++)\n      {\n        if (shouldReadNext(i)) {\n          mesh = readGeometry(pfr, i, options);\n          estLength += mesh && mesh.sharedBufferBytes || 0;\n        }\n      }\n\n      var sharedBuffer = estLength ? new ArrayBuffer(estLength) : null;\n      var currentOffset = 0;\n\n      var msg = { \"packId\": loadContext.packId,\n        \"workerId\": loadContext.workerId,\n        \"progress\": 1,\n        \"meshes\": [],\n        \"sharedBuffer\": sharedBuffer };\n\n\n      var transferList = sharedBuffer ? [sharedBuffer] : [];\n\n      options = {\n        dstBuffer: sharedBuffer,\n        startOffset: 0,\n        estimateSizeOnly: false,\n        packNormals: typeof loadContext.packNormals !== \"undefined\" ? loadContext.packNormals : true };\n\n\n      for (i = 0; i < iEnd; i++)\n      {\n        options.startOffset = currentOffset;\n\n        if (shouldReadNext(i)) {\n          mesh = readGeometry(pfr, i, options);\n\n          if (mesh) {\n            currentOffset += mesh.sharedBufferBytes || 0;\n            msg.meshes[i] = mesh;\n\n            if (loadContext.createWireframe) {\n              createWireframe(mesh);\n\n              //TODO: optimize the storage of the lines index buffer to use\n              //a single shared buffer for all meshes in the pack\n              if (mesh.iblines)\n              transferList.push(mesh.iblines.buffer);\n            }\n          } else {\n            // it doesn't make much sense to raise an error for each entry that can't\n            // be read, because chances are they will all be unreadable after the\n            // first bad one.\n            if (!raisedError) {\n              _this.raiseError(\n              ErrorCodes.BAD_DATA, \"Unable to load geometry\",\n              { \"url\": loadContext.url });\n              raisedError = true;\n            }\n\n            // in this case, we still post the full message instead of just null;\n            // the mesh itself will be null, of course.\n            _this.postMessage(msg);\n          }\n        }\n      }\n\n      _this.postMessage(msg, transferList);\n    });\n\n  }\n\n  // With this option to control whether want to record assets request.\n  var options = {\n    skipAssetCallback: loadContext.skipAssetCallback };\n\n  ViewingService.getItem(loadContext, loadContext.url, onSuccess, loadContext.onFailureCallback, options);\n\n}\n\nexport function register(workerMain) {\n  workerMain.register(\"LOAD_GEOMETRY\", { doOperation: doGeomLoad });\n}","\nimport { workerMain } from \"./MainWorker\";\n\n//Web worker dispatcher function -- received a message\n//from the main thread and calls the appropriate handler\nself.addEventListener('message', function (e) {\n\n  var loadContext = e.data;\n  loadContext.worker = self;\n\n  workerMain.dispatch(loadContext);\n\n}, false);\n\n\nself.raiseError = function (code, msg, args) {\n  self.postMessage({ \"error\": { \"code\": code, \"msg\": msg, \"args\": args } });\n};\n\n// Shared by all workers to output debug message on console of main thread.\nfunction debug(msg) {\n  self.postMessage({ debug: 1, message: msg });\n}\n\nself.debug = debug;","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}import { ViewingService } from \"../net/Xhr\";\nimport { endpoint } from \"../net/endpoints\";\n\nexport var WorkerMain = /*#__PURE__*/function () {\n\n  function WorkerMain() {_classCallCheck(this, WorkerMain);\n    this._workers = {};\n  }_createClass(WorkerMain, [{ key: \"dispatch\", value: function dispatch(\n    loadContext) {\n\n      if (!loadContext.hasOwnProperty('operation')) {\n        return;\n      }\n\n      //TODO TS:\n      if (loadContext.endpoint)\n      endpoint.setEndpointAndApi(loadContext.endpoint, loadContext.api);\n\n\n      var target = this._workers[loadContext.operation];\n      if (!target)\n      return;\n\n      //Initialize the path that contains the requested\n      //file. It's the root for other relative paths referenced\n      //by the base file.\n      loadContext.basePath = \"\";\n      if (loadContext.url) {\n        var lastSlash = loadContext.url.lastIndexOf(\"/\");\n        if (lastSlash != -1)\n        loadContext.basePath = loadContext.url.substr(0, lastSlash + 1);\n      }\n\n      // Create the default failure callback.\n      //\n      loadContext.raiseError = function () {\n        loadContext.worker.raiseError.apply(loadContext.worker, arguments);\n      };\n      loadContext.onFailureCallback = ViewingService.defaultFailureCallback.bind(loadContext);\n\n      target.doOperation(loadContext);\n    } }, { key: \"register\", value: function register(\n\n    operation, worker) {\n      this._workers[operation] = worker;\n    } }, { key: \"unregister\", value: function unregister(\n\n    operation) {\n      delete this._workers[operation];\n    } }]);return WorkerMain;}();\n\n\nexport var workerMain = new WorkerMain();\n\n//Add all the worker entry points.\n//Those need to execute in order to register themselves\n//with the web worker operation dispatcher\nrequire(\"./SvfWorker\").register(workerMain);\nrequire(\"./GeomWorker\").register(workerMain);\nrequire(\"./F2dParseWorker\").register(workerMain);\nrequire(\"./F2dStreamWorker\").register(workerMain);\nrequire(\"./OtgBvhWorker\").register(workerMain);\nrequire(\"./OtgLoadWorker\").register(workerMain);\nrequire(\"./PropWorker\").register(workerMain);\nrequire(\"./ConsolidationWorker\").register(workerMain);\n\n// when we request some resource from some kinds of URL\n// This method will give the worker ability to support EMSCRIPTEN File Sytstem\n// Or indexedDB in future\nfunction registerFilePort(event) {\n  if (event && event.protocolPortMap) {\n    for (var p in event.protocolPortMap) {\n      ViewingService.registerProtocolPort(p, event.protocolPortMap[p]);\n    }\n  }\n}\n\nworkerMain.register(\"REGISTER_FILE_PORT\", { doOperation: registerFilePort });\n\nif (BUILD_FLAG__WANT_FUSION_WORKER) {\n  require(\"./DecompressWorker\").register(workerMain);\n}","import { ViewingService } from \"../net/Xhr\";\nimport { BVHBuilder } from \"../../wgs/scene/BVHBuilder\";\nimport { OtgFragInfo } from \"../lmvtk/otg/OtgFragInfo\";\n\nfunction loadAsyncResource(loadContext, resourcePath, responseType, callback) {\n\n  ViewingService.getItem(loadContext, resourcePath,\n  callback,\n  loadContext.onFailureCallback,\n  {\n    responseType: responseType || \"arraybuffer\" });\n\n\n\n}\n\nfunction doLoadOtgBvh(loadContext) {\n\n  //TODO: We could process bboxes progressively (in the OtgFragInfo constructions) instead of doing it once the whole file is in\n  //although it's probably not worth it, given we are reunning in a worker thread\n  if (loadContext.fragments_extra) {\n    loadAsyncResource(loadContext, loadContext.fragments_extra, \"\", function (data) {\n\n      if (!data || !data.length) {\n        return;\n      }\n\n      //Build the R-Tree\n      //var t0 = performance.now();\n\n      var finfo = new OtgFragInfo(data, loadContext);\n\n      if (finfo.count) {\n        var tmpbvh = new BVHBuilder(null, null, finfo);\n        tmpbvh.build(loadContext.bvhOptions);\n\n        var bvh = {\n          nodes: tmpbvh.nodes.getRawData(),\n          primitives: tmpbvh.primitives };\n\n\n        //var t1 = performance.now();\n        //console.log(\"BVH build time:\" + (t1 - t0));\n\n        loadContext.worker.postMessage({ bvh: bvh, boxes: finfo.boxes, boxStride: finfo.boxStride },\n        [bvh.nodes, bvh.primitives.buffer, finfo.boxes.buffer]);\n      }\n\n    });\n  }\n\n\n}\n\nexport function register(workerMain) {\n  workerMain.register(\"LOAD_OTG_BVH\", { doOperation: doLoadOtgBvh });\n}","import { ViewingService } from \"../net/Xhr\";\nimport * as OtgGeomCodec from \"../lmvtk/otg/OtgGeomCodec\";\nimport { LocalDbCache } from \"../lmvtk/otg/LocalDbCache\";\nimport { isNodeJS } from \"../../compat\";\nvar pako = require('pako');\nimport { OtgWs } from \"../lmvtk/otg/OtgWebSocket\";\n\n\n// OtgLoadWorker implements the \"LOAD_CDN_RESOURCE_OTG\" operation.\n\n//Do not store state data directly in \"self\" because in the node.js code path\n//there are no separate worker contexts\nfunction getWorkerContext(loadContext) {\n\n  //Initialize the worker context -- we cannot use module/global vars here,\n  //because in node.js the module variables are shared for all instances of the worker.\n  if (!loadContext.worker.ctx) {\n\n    loadContext.worker.ctx = {\n\n      otgws: new OtgWs(loadContext, onCdnResourceLoaded, retryAllPending),\n      localCache: new LocalDbCache(loadContext.disableIndexedDb, loadContext.isInlineWorker),\n\n      numRequests: 0,\n      inprogress: {}, //all currently pending requests (in case we need to retry them due to connection failure, etc)\n\n      //Keeps batches of messages to be sent back to the main thread\n      _pendingMdata: [],\n      _pendingTransferList: [],\n      _pendingSends: [] };\n\n  }\n\n  return loadContext.worker.ctx;\n}\n\nfunction isGzip(data) {\n  return data[0] === 31 && data[1] === 139;\n}\n\nfunction decodeGeometryOtg(data, hash) {\n\n  //This should not happen in production, but apparently some data made it\n  //that way to staging, and we want to detect and fix those models.\n  if (isGzip(data)) {\n    console.error(\"Double compressed OTG resource.\", hash);\n    data = pako.ungzip(data);\n  }\n\n  // Read Otg package\n  var mdata = OtgGeomCodec.readLmvBufferGeom(data);\n\n  if (!mdata) {\n    console.error(\"Failed to parse geometry\", hash);\n    return;\n  }\n\n  mdata.hash = hash;\n\n  return mdata;\n}\n\n\n// Use custom error handler: It  forwards to the default one, but...\n//  1. adds the geometry hash to the error message. This is needed by the geometry cache.\n//     We use it to determine for which geometry the problem occurred, so that the affected\n//     loaders can be informed (see OtgResourceCache.js).\n//  2. If any other requests were blocked before to limit the number of parallel\n//     requests, we must make sure that these enqueued  requests are processed too.\nfunction getErrorHandler(loadContext, hash, resourceType) {\n\n  // add error handler to override raiseError function\n  var errorHandler = {\n    // add hash and pass on to loadContext.raiseError.\n    raiseError: function raiseError(code, msg, args) {\n      args.hash = hash;\n      args.type = resourceType;\n      loadContext.raiseError(code, msg, args);\n    } };\n\n\n  return function () {\n    // forward to default error handler\n    ViewingService.defaultFailureCallback.apply(errorHandler, arguments);\n\n    // process next requests (if any)\n    var ctx = getWorkerContext(loadContext);\n    delete ctx.inprogress[hash];\n    ctx.numRequests--;\n\n    //If the main thread asked us to end things, but we delayed due to pending requests,\n    //do it now\n    if (ctx.closeRequested && !ctx.numRequests) {\n      ctx.otgws.endSession();\n    }\n  };\n}\n\nfunction retryAllPending(loadContext) {\n\n  var ctx = getWorkerContext(loadContext);\n\n  var old = ctx.inprogress;\n\n  ctx.inprogress = {};\n\n  for (var h in old) {\n    var item = old[h];\n    loadContext.queryParams = item.queryParams;\n    loadCdnResource(item.url, h, loadContext, item.type);\n  }\n}\n\nfunction queueGeometryMessage(loadContext, mdata) {\n\n  if (!Array.isArray(mdata))\n  mdata = [mdata];\n\n  // send message with result\n  var transferList = [];\n\n  //Add all ArrayBuffers to the transferable objects list\n  for (var i = 0; i < mdata.length; i++) {\n    var mesh = mdata[i].mesh;\n    if (mesh) {\n      var b = mesh.vb.buffer;\n      transferList.push(b);\n\n      if (mesh.indices && mesh.indices.buffer !== b)\n      transferList.push(mesh.indices.buffer);\n\n      if (mesh.iblines && mesh.iblines.buffer !== b)\n      transferList.push(mesh.iblines.buffer);\n    }\n  }\n\n  //loadContext.worker.postMessage(mdata, transferList);\n\n  var ctx = getWorkerContext(loadContext);\n  ctx._pendingMdata.push.apply(ctx._pendingMdata, mdata);\n  ctx._pendingTransferList.push.apply(ctx._pendingTransferList, transferList);\n\n}\n\nfunction onCdnResourceLoaded(data, hash, loadContext, skipCache, resourceType) {\n\n  var ctx = getWorkerContext(loadContext);\n\n  if (!skipCache) {\n    ctx.localCache.store(hash, data);\n\n    // Why cloning?:\n    // If IndexedDB is used, data is enqueued by LocalDBCache and stored to IndexedDB later.\n    // Therefore, we must make sure that 'data' keeps valid.\n    //\n    // If it contains uncompressed data, it will be referenced by decoded geometry directly\n    // and will finally be handed over to the main thread via transfer list (which makes unusable).\n    // For this case, we need to copy it. (unless in NodeJS, where transferLists have no effect)\n    var isCompressed = data && isGzip(data);\n    if (data && !isNodeJS() && !loadContext.disableIndexedDb && !isCompressed) {\n      data = data.slice();\n    }\n  }\n\n  if (isGzip(data)) {\n    data = pako.ungzip(data);\n  }\n\n  delete ctx.inprogress[hash];\n  ctx.numRequests--;\n\n  if (resourceType === \"m\") {\n    //Post materials as soon as possible without batching -- those are fewer\n    //and more critical as they are shared across multiple meshes.\n    if (data) {\n      loadContext.worker.postMessage({ material: data, hash: hash }, [data.buffer]);\n    } else {\n      getErrorHandler(loadContext, hash, resourceType)(-1, \"\", {});\n    }\n  } else {\n    var mdata = data && decodeGeometryOtg(data, hash);\n    if (mdata) {\n      queueGeometryMessage(loadContext, mdata);\n    } else {\n      getErrorHandler(loadContext, hash, resourceType)(-1, \"\", {});\n    }\n  }\n\n  //If the main thread asked us to end things, but we delayed due to pending requests,\n  //do it now\n  if (ctx.closeRequested && !ctx.numRequests) {\n    ctx.otgws.endSession();\n  }\n}\n\n// Request raw geometry data (arraybuffer) and call processGeometry with the result\n//  @param {Object}   loadContext - passed through to the receiving callback\n//  @param {function) onSuccess   - function(loadContext, result). result.mesh contains the mesh data.\nfunction loadCdnResource(url, hash, loadContext, resourceType) {\n\n  var ctx = getWorkerContext(loadContext);\n\n  //Make sure the IndexedDb session is started before we ask to get() anything.\n  //This is done by a call to open, which will call us back immediately, or delay until\n  //the database is open.\n  ctx.localCache.open(function () {return ctx.localCache.get(hash, function (error, data) {\n      if (data) {\n        onCdnResourceLoaded(data, hash, loadContext, true, resourceType);\n      } else {\n\n        if (ctx.inprogress[hash]) {\n          console.warn(\"Unexpected repeated request for same OTG resource.\");\n        }\n\n        ctx.inprogress[hash] = { url: url, type: resourceType, queryParams: loadContext.queryParams };\n\n        if (ctx.otgws._wsUsable) {\n\n          //Make sure the WebSocket session is started before we request anything.\n          //The call to startSession() is reentrant and will call the callback once the WebSocket is open.\n          ctx.otgws.startSession(loadContext, function () {return ctx.otgws.requestResources([url], [hash], resourceType);});\n\n        } else {\n          //Fallback to XHR/HTTP2\n          ViewingService.getItem(\n          loadContext,\n          url,\n          function (data) {return onCdnResourceLoaded(data, hash, loadContext, false, resourceType);},\n          getErrorHandler(loadContext, hash),\n          {\n            responseType: \"arraybuffer\",\n            withCredentials: true });\n\n\n        }\n      }\n    });});\n}\n\n// @param {string[]}   loadContext.urls            - request urls\n// @param {string[]}   loadContext.hashes          - content hashes corresponding to each request URL\n// @param {function} loadContext.onFailureCallback - defined in workerMain()\n// @param {Worker}   loadContext.worker            - defined in MainWorker.worker\nfunction doCdnResourceLoad(loadContext) {\n  var ctx = getWorkerContext(loadContext);\n\n  for (var i = 0; i < loadContext.urls.length; i++) {\n    loadCdnResource(loadContext.urls[i], loadContext.hashes[i], loadContext, loadContext.type || \"g\");\n    ctx.numRequests++;\n  }\n}\n\n//Sends recently received (since last flush) resources back to the main thread\nfunction flushMessages(loadContext) {\n\n  var ctx = getWorkerContext(loadContext);\n\n  if (!ctx._pendingMdata.length)\n  return;\n\n  loadContext.worker.postMessage(ctx._pendingMdata, ctx._pendingTransferList);\n  ctx._pendingMdata = [];\n  ctx._pendingTransferList = [];\n}\n\nfunction doInitGeomWorker(loadContext) {\n\n  //console.log(\"Init worker called\");\n  var ctx = getWorkerContext(loadContext);\n\n  //Begin opening the web socket\n  ctx.otgws.startSession(loadContext);\n\n  //Begin opening the IndexedDb database\n  ctx.localCache.open(null);\n\n  if (!ctx.flushMessages) {\n    ctx.flushMessages = setInterval(function () {\n      flushMessages(loadContext);\n    }, 66);\n  }\n}\n\n//Shuts down the load worker\nfunction doPostLoad(loadContext) {\n\n  var ctx = getWorkerContext(loadContext);\n\n  if (ctx.flushMessages) {\n    flushMessages(loadContext);\n  }\n\n  //The worker can be used by multiple loaders, so only close the\n  //web socket if it's not waiting on other requests.\n  if (loadContext.endSession) {\n    if (!ctx.numRequests) {\n      //console.log(\"End web socket session due to idle.\");\n      ctx.otgws.endSession();\n\n      //Clear the timer also, in case nothing is pending and session is ending.\n      clearInterval(ctx.flushMessages);\n      ctx.flushMessages = null;\n    } else {\n      ctx.closeRequested = true;\n    }\n  }\n\n  ctx.localCache && ctx.localCache.open(function () {return ctx.localCache.updatePendingTimestamps();});\n}\n\nexport function register(workerMain) {\n  workerMain.register(\"LOAD_CDN_RESOURCE_OTG\", { doOperation: doCdnResourceLoad });\n  workerMain.register(\"INIT_WORKER_OTG\", { doOperation: doInitGeomWorker });\n  workerMain.register(\"UPDATE_MRU_TIMESTAMPS_OTG\", { doOperation: doPostLoad });\n}","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}import { ViewingService } from '../net/Xhr';\n\nimport { PropertyDatabase } from '../lmvtk/common/Propdb';\n\nimport { InstanceTreeStorage, InstanceTreeAccess } from '../../wgs/scene/InstanceTreeStorage';\n\n\nfunction PdbCacheEntry(dbPath, isShared) {\n  this.pdb = null;\n  this.waitingCallbacks = [];\n  this.error = false;\n  this.dbPath = dbPath;\n  this.dbFiles = null;\n  this.isShared = isShared;\n  this.timestamp = Date.now();\n}\n\nfunction FileCacheEntry(data) {\n  this.data = data;\n  this.refCount = 1;\n}var\n\nPdbCache = /*#__PURE__*/function () {\n\n  function PdbCache() {_classCallCheck(this, PdbCache);\n    this.pdbCache = {};\n    this.fileCache = {};\n  }_createClass(PdbCache, [{ key: \"get\", value: function get(\n\n    dbPath) {\n      var cacheEntry = this.pdbCache[dbPath];\n\n      if (cacheEntry) {\n        cacheEntry.timestamp = Date.now();\n      }\n\n      return cacheEntry;\n    } }, { key: \"set\", value: function set(\n\n    dbPath, isShared) {\n      var cacheEntry = new PdbCacheEntry(dbPath, isShared);\n      this.pdbCache[dbPath] = cacheEntry;\n      return cacheEntry;\n    } }, { key: \"getFile\", value: function getFile(\n\n    path) {\n      var cacheEntry = this.fileCache[path];\n\n      if (cacheEntry) {\n        cacheEntry.timestamp = Date.now();\n      }\n\n      return cacheEntry;\n    } }, { key: \"setFile\", value: function setFile(\n\n    path, data) {\n      this.fileCache[path] = new FileCacheEntry(data);\n    } }, { key: \"delete\", value: function _delete(\n\n    dbPath) {\n      var cacheEntry = this.get(dbPath);\n\n      if (cacheEntry && cacheEntry.pdb)\n      cacheEntry.pdb.refCount--;else\n\n      return;\n\n      if (cacheEntry.pdb.refCount === 0) {\n\n        //TODO: erase the entry even if db is shared once it's no longer used?\n        //The db files are still cached anyway.\n        if (!cacheEntry.isShared) {\n          delete this.pdbCache[dbPath];\n        }\n\n        if (!cacheEntry.isShared) {\n          //Also erase any per-file cache, unless the file is shared across multiple property databases\n          for (var fileName in cacheEntry.dbFiles) {\n            var file = cacheEntry.dbFiles[fileName];\n            this.unrefFileCacheEntry(file.storage);\n          }\n        }\n      }\n    }\n\n    // Releases a fileCache entry reference if a file is not used anymore.\n    //   @param {Object} storage - contains the full file path as (only) key\n  }, { key: \"unrefFileCacheEntry\", value: function unrefFileCacheEntry(storage) {\n\n      // key is the full file path\n      for (var key in storage) {\n        var fileCacheEntry = this.fileCache[key];\n        if (fileCacheEntry) {\n          fileCacheEntry.refCount--;\n          if (fileCacheEntry.refCount === 0)\n          delete this.fileCache[key];\n        }\n      }\n    } }]);return PdbCache;}();\n\n\n\nfunction loadPropertyPacks(loadContext, dbId, onPropertyPackLoadComplete) {\n\n  var _this = loadContext.worker;\n  var pdbCache = _this.pdbCache;\n\n  if (!pdbCache) {\n    _this.pdbCache = pdbCache = new PdbCache();\n  }\n\n  //get the cache entry for the given property database URL\n  var cacheEntry = pdbCache.get(loadContext.dbPath);\n  var repeatedCall = false;\n  if (!cacheEntry) {\n    cacheEntry = pdbCache.set(loadContext.dbPath, !!loadContext.sharedDbPath);\n  } else {\n    repeatedCall = true;\n  }\n\n  if (cacheEntry.pdb) {\n    onPropertyPackLoadComplete(cacheEntry.pdb, cacheEntry.dbidOldToNew);\n    return;\n  } else if (!cacheEntry.error) {\n    //If we are already loading the same property database, queue the callback\n    if (repeatedCall) {\n      cacheEntry.waitingCallbacks.push(onPropertyPackLoadComplete);\n      return;\n    }\n  } else {\n    onPropertyPackLoadComplete(null);\n    return;\n  }\n\n  var dbfiles = loadContext.propertydb;\n  if (!dbfiles) {\n    _this.propdbFailed = true;\n    onPropertyPackLoadComplete(null);\n    return;\n  }\n\n  var loadedDbFiles = {};\n  var filesToRequest = [];\n\n  if (dbfiles.avs.length) {\n\n    for (var tag in dbfiles) {\n      // Skip loading of externalId table if wanted\n      if (loadContext.skipExternalIds && tag == 'ids') {\n        continue;\n      }\n\n      loadedDbFiles[tag] = {};\n      filesToRequest.push({ filename: dbfiles[tag][0].path, isShared: dbfiles[tag][0].isShared, storage: loadedDbFiles[tag] });\n    }\n\n  } else {\n\n    //Hardcoded list of pdb files -- deprecated, still used when loading F2D files locally, without\n    //having loaded a manifest first. And probably in some other cases.\n\n    loadedDbFiles = {\n      ids: {},\n      attrs: {},\n      offsets: {},\n      values: {},\n      avs: {} };\n\n\n    filesToRequest.push({ filename: dbfiles.attrs.length ? dbfiles.attrs[0] : \"objects_attrs.json.gz\", storage: loadedDbFiles.attrs });\n    filesToRequest.push({ filename: dbfiles.values.length ? dbfiles.values[0] : \"objects_vals.json.gz\", storage: loadedDbFiles.values });\n    filesToRequest.push({ filename: dbfiles.avs.length ? dbfiles.avs[0] : \"objects_avs.json.gz\", storage: loadedDbFiles.avs });\n    filesToRequest.push({ filename: dbfiles.offsets.length ? dbfiles.offsets[0] : \"objects_offs.json.gz\", storage: loadedDbFiles.offsets });\n\n    // Loading the externalId table is optional\n    if (!loadContext.skipExternalIds) {\n      filesToRequest.push({ filename: dbfiles.ids.length ? dbfiles.ids[0] : \"objects_ids.json.gz\", storage: loadedDbFiles.ids });\n    }\n  }\n\n  var filesRemaining = filesToRequest.length;\n  var filesFailed = 0;\n\n  function onRequestCompletion(data) {\n\n    filesRemaining--;\n\n    // Rough estimate for progress. Although we just count received files here, \n    // it already helps to signficantly reduce the perceived \"nothing happens\" time periods.\n    //\n    // Tracking the progress of single requests would be more accurate, but:\n    //  - Attaching an onprogress handler to XHR would cause it to consume 2-3x more memory,\n    //    because it has to receive the data as text and then convert to array buffer on the fly.\n    //  - Due to the content encoding, the progress callbacks wouldn't know the file size, but only\n    //    the amount of transferred data, so that they wouldn't help much.\n    _this.postMessage({\n      cbId: loadContext.cbId,\n      progress: {\n        // Having all files loaded doesn't mean we are fully done. Reserve 5 percent for the rest.\n        percent: 95 * (filesToRequest.length - filesRemaining) / filesToRequest.length } });\n\n\n\n    if (!data)\n    filesFailed++;\n\n    // If all of the files we've requested have been retrieved, create the\n    // property database.  Otherwise, request the next required file.\n    //\n    if (!filesRemaining) {\n      if (filesFailed) {\n        cacheEntry.error = true;\n        onPropertyPackLoadComplete(null);\n        while (cacheEntry.waitingCallbacks.length) {\n          cacheEntry.waitingCallbacks.shift()(null);\n        }\n      } else {\n\n        //De-reference the result buffer from this array so that\n        //it can be freed on the fly when the PropertyDatabases parses itself\n        filesToRequest.forEach(function (f) {\n          f.storage = null;\n        });\n\n        //Store the property db instance in its cache entry\n        try {\n          cacheEntry.pdb = new PropertyDatabase(loadedDbFiles);\n          cacheEntry.pdb.refCount = 0; //will be incremented by the success callback\n          cacheEntry.loaded = true;\n          cacheEntry.dbFiles = filesToRequest;\n\n          cacheEntry.timestamp = Date.now();\n\n          //TODO: revise this to use the pdb.byteSize() call once it's merged in.\n          cacheEntry.byteSize = 0;\n          for (var f in loadedDbFiles) {\n            for (var p in loadedDbFiles[f]) {\n              var fdata = loadedDbFiles[f][p];\n              cacheEntry.byteSize += fdata && fdata.byteLength;\n            }\n          }\n\n          for (var p in loadedDbFiles.dbid) {\n            var b = loadedDbFiles.dbid[p];\n            cacheEntry.dbidOldToNew = new Int32Array(b.buffer, b.byteOffset, b.byteLength / 4);\n            break;\n          }\n\n          onPropertyPackLoadComplete(cacheEntry.pdb, cacheEntry.dbidOldToNew);\n\n          while (cacheEntry.waitingCallbacks.length) {\n            cacheEntry.waitingCallbacks.shift()(cacheEntry.pdb);\n          }\n        }\n        catch (err) {\n          onPropertyPackLoadComplete(null, null, err && err.message);\n        }\n      }\n    }\n  }\n  // Request the files.\n  //\n  filesToRequest.forEach(function (f) {\n    requestFile(f.filename, loadContext, onRequestCompletion, f.storage, f.isShared);\n  });\n}\n\n\nfunction requestFile(filename, loadContext, onRequestCompletion, storage, isShared) {\n\n  function onFailure(status, statusText, data) {\n    // We're explicitly ignoring missing property files.\n    if (status !== 404) {\n      loadContext.onFailureCallback(status, statusText, data);\n    }\n    onRequestCompletion(null);\n  }\n\n  var url;\n  if (filename.indexOf(\"://\") !== -1 || filename.indexOf(\"urn:\") === 0) {\n    url = filename;\n  } else {\n    url = (loadContext.dbPath || '') + filename;\n  }\n\n  var fullPath = ViewingService.generateUrl(loadContext.endpoint, \"items\", url);\n\n  var onSuccess = function onSuccess(response)\n  {\n    //Cache for future reuse\n    if (isShared) {\n      loadContext.worker.pdbCache && loadContext.worker.pdbCache.setFile(fullPath, response);\n    }\n\n    storage[fullPath] = response;\n    onRequestCompletion(response);\n  };\n\n  //Fulfill the request from cache if available\n  var cacheEntry = loadContext.worker.pdbCache && loadContext.worker.pdbCache.getFile(fullPath);\n  if (cacheEntry) {\n    cacheEntry.refCount++;\n    onSuccess(cacheEntry.data);\n  } else {\n    ViewingService.getItem(loadContext, url, onSuccess, onFailure);\n  }\n\n}\n\n\nfunction doObjectTreeParse(loadContext) {\n\n  var _this = loadContext.worker;\n\n  function onPropertyPackLoadComplete(propertyDb, dbidOldToNew, errorMessage) {\n    if (!propertyDb) {\n      _this.postMessage({\n        cbId: loadContext.cbId,\n        error: { instanceTree: null, maxTreeDepth: 0, err: errorMessage } });\n\n      return;\n    }\n\n    propertyDb.refCount++;\n\n    //Find the root object:\n    //TODO: internalize this into the pdb object.\n    if (!loadContext.skipInstanceTreeResult && !propertyDb.rootsDone) {\n      propertyDb.idroots = propertyDb.findRootNodes();\n      propertyDb.rootsDone = true;\n    }\n\n    var rootId;\n    var maxDepth = [0];\n\n    var transferList = [];\n    var storage;\n\n    var fragToDbId = loadContext.fragToDbId;\n\n    if (loadContext.needsDbIdRemap) {\n      if (!dbidOldToNew) {\n        console.warn(\"ID remap required, but not loaded.\");\n      } else if (!fragToDbId) {\n        console.warn(\"No frag->dbid mapping!.\");\n      } else {\n\n        //Replace the frag2dbid mapping by a new one using the\n        //correct property db v2 ids.\n        var old2new = dbidOldToNew;\n        var fr2id = [];\n\n        for (var i = 0; i < fragToDbId.length; i++) {\n\n          var d = fragToDbId[i];\n\n          if (!Array.isArray(d)) {\n            fr2id[i] = old2new[d];\n          } else {\n            fr2id[i] = [];\n            for (var j = 0; j < d.length; j++) {\n              fr2id[i][j] = old2new[d[j]];\n            }\n          }\n        }\n\n        fragToDbId = fr2id;\n      }\n    }\n\n    //In the cases of 2D drawings, there is no meaningful\n    //object hierarchy, so we don't build a tree.\n    var idroots = propertyDb.idroots;\n    if (idroots && idroots.length)\n    {\n      storage = new InstanceTreeStorage(propertyDb.getObjectCount(), fragToDbId ? fragToDbId.length : 0);\n\n      if (idroots.length == 1 && propertyDb.nodeHasChild(idroots[0])) {\n        //Case of a single root in the property database,\n        //use that as the document root.\n        rootId = idroots[0];\n        propertyDb.buildObjectTree(rootId, fragToDbId, maxDepth, storage);\n      } else\n      {\n        //Case of multiple nodes at the root level\n        //This happens in DWFs coming from Revit.\n        //Create a dummy root and add all the other roots\n        //as its children.\n        rootId = -1e10; // Big negative number to prevent conflicts with F2D\n        var childrenIds = [];\n\n        for (var i = 0; i < idroots.length; i++) {\n          propertyDb.buildObjectTree(idroots[i], fragToDbId, maxDepth, storage);\n          childrenIds.push(idroots[i]);\n        }\n\n        storage.setNode(rootId, 0, \"\", 0, childrenIds, false);\n      }\n\n      storage.flatten();\n      transferList.push(storage.nodes.buffer);\n      transferList.push(storage.children.buffer);\n      transferList.push(storage.strings.buf.buffer);\n      transferList.push(storage.strings.idx.buffer);\n\n\n      //Now compute the bounding boxes for instance tree nodes\n      if (loadContext.fragBoxes) {\n        var nodeAccess = new InstanceTreeAccess(storage, rootId);\n        nodeAccess.computeBoxes(loadContext.fragBoxes);\n        transferList.push(nodeAccess.nodeBoxes.buffer);\n      }\n    }\n\n    _this.postMessage({ cbId: loadContext.cbId,\n      result: {\n        rootId: rootId,\n        instanceTreeStorage: storage,\n        instanceBoxes: !!nodeAccess ? nodeAccess.nodeBoxes : undefined,\n        dbidOldToNew: loadContext.needsDbIdRemap ? dbidOldToNew : null, //If we have a dbId mapping (from new OTG dbIds to old F2D dbIds send it to the main thread.\n        maxTreeDepth: maxDepth[0],\n        objectCount: propertyDb.getObjectCount() } },\n\n    transferList);\n  }\n\n  loadPropertyPacks(loadContext, null, onPropertyPackLoadComplete);\n}\n\nfunction doPropertySearch(loadContext) {\n\n  var _this = loadContext.worker;\n\n  var cacheEntry = _this.pdbCache && _this.pdbCache.get(loadContext.dbPath);\n\n  if (cacheEntry && cacheEntry.pdb) {\n    var searchText = loadContext.searchText;\n    var result = cacheEntry.pdb.bruteForceSearch(searchText, loadContext.attributeNames, loadContext.searchOptions);\n    _this.postMessage({ cbId: loadContext.cbId, result: result });\n  }\n\n}\n\nfunction doPropertyDiff(loadContext) {\n\n  var _this = loadContext.worker;\n\n  // get property dbs to compare\n  var cacheEntry1 = _this.pdbCache && _this.pdbCache.get(loadContext.dbPath);\n  var cacheEntry2 = _this.pdbCache && _this.pdbCache.get(loadContext.dbPath2);\n  var pdb1 = cacheEntry1 && cacheEntry1.pdb;\n  var pdb2 = cacheEntry2 && cacheEntry2.pdb;\n\n  // send messages for progress events to main thread\n  var onProgress = function onProgress(percent) {\n    loadContext.worker.postMessage({\n      cbId: loadContext.cbId,\n      progress: { percent: percent } });\n\n  };\n\n  if (pdb1 && pdb2) {\n    var result = pdb1.findDifferences(pdb2, loadContext.diffOptions, onProgress);\n    _this.postMessage({ cbId: loadContext.cbId, result: result });\n  }\n}\n\nfunction doPropertyFind(loadContext) {\n\n  var _this = loadContext.worker;\n\n  var cacheEntry = _this.pdbCache && _this.pdbCache.get(loadContext.dbPath);\n\n  if (cacheEntry && cacheEntry.pdb) {\n    var result = cacheEntry.pdb.bruteForceFind(loadContext.propertyName);\n    _this.postMessage({ cbId: loadContext.cbId, result: result });\n  }\n\n}\n\nfunction doLayersFind(loadContext) {\n  var _this = loadContext.worker;\n\n  var cacheEntry = _this.pdbCache && _this.pdbCache.get(loadContext.dbPath);\n\n  if (cacheEntry && cacheEntry.pdb) {\n    var result = cacheEntry.pdb.findLayers();\n    _this.postMessage({ cbId: loadContext.cbId, result: result });\n  }\n}\n\n\nfunction doPropertyGet(loadContext) {\n\n  var _this = loadContext.worker;\n\n  var cacheEntry = _this.pdbCache && _this.pdbCache.get(loadContext.dbPath);\n\n  if (!cacheEntry || !cacheEntry.pdb) {\n    loadContext.worker.postMessage({ cbId: loadContext.cbId, error: { msg: \"Properties are not available.\" } });\n    return;\n  }\n\n  var dbId = loadContext.dbId;\n  var dbIds = loadContext.dbIds;\n  var propFilter = loadContext.propFilter;\n  var ignoreHidden = loadContext.ignoreHidden;\n\n  if (typeof dbIds !== \"undefined\") {\n    var results = [];\n    if (dbIds && dbIds.length) {\n      for (var i = 0; i < dbIds.length; i++) {\n        var result = cacheEntry.pdb.getObjectProperties(dbIds[i], propFilter, ignoreHidden);\n        if (result)\n        results.push(result);\n      }\n    } else {//If dbIds is empty, return results for all objects (i.e. no ID filter)\n      for (var i = 1, last = cacheEntry.pdb.getObjectCount(); i <= last; i++) {\n        var result = cacheEntry.pdb.getObjectProperties(i, propFilter, ignoreHidden);\n        if (result)\n        results.push(result);\n      }\n    }\n    loadContext.worker.postMessage({ cbId: loadContext.cbId, result: results });\n  } else {\n    var result = cacheEntry.pdb.getObjectProperties(dbId, propFilter);\n    loadContext.worker.postMessage({ cbId: loadContext.cbId, result: result });\n  }\n}\n\n\nfunction doBuildExternalIdMapping(loadContext) {\n\n  var _this = loadContext.worker;\n\n  var cacheEntry = _this.pdbCache && _this.pdbCache.get(loadContext.dbPath);\n\n  if (cacheEntry && cacheEntry.pdb) {\n    var mapping = cacheEntry.pdb.getExternalIdMapping(loadContext.extIdFilter);\n    _this.postMessage({ cbId: loadContext.cbId, result: mapping });\n  }\n}\n\nfunction doBuildLayerToNodeIdMapping(loadContext) {\n  var _this = loadContext.worker;\n\n  var cacheEntry = _this.pdbCache && _this.pdbCache.get(loadContext.dbPath);\n\n  if (cacheEntry && cacheEntry.pdb) {\n    var mapping = cacheEntry.pdb.getLayerToNodeIdMapping();\n    _this.postMessage({ cbId: loadContext.cbId, result: mapping });\n  }\n}\n\nfunction doUnloadPropertyDb(loadContext) {\n  var _this = loadContext.worker;\n\n  if (loadContext.clearCaches) {\n    _this.pdbCache = null;\n    return;\n  }\n\n  _this.pdbCache && _this.pdbCache.delete(loadContext.dbPath);\n}\n\n// Required params \n//  @param {string} loadContext.dbPath\n//  @param {string} loadContext.idsFile - filename of the ids-file\n//  @param {string} loadContext.cbId    - worker callback id\n//  @param {Object} loadContext.worker  - global worker context\n//\n// Preconditions:\n//  - PropDbLoader makes sure that this task is not called before propDb finished loading. (see asyncPropertyOperation in PropDblLoader)\nfunction doLoadExternalIds(loadContext) {\n\n  var _this = loadContext.worker;\n\n  // Deprecated case: If pdbFiles are not known use hard-wired one (see comment in loadPropertyPacks)\n  var idsFileEntry = loadContext.idsFile || { path: \"objects_ids.json.gz\" };\n\n  // After loading, storage[fullPath] will contain the response blob.\n  var storage = {};\n\n  // Purpose of doLoadExternalIds is to delay-load the ids for a PropDb.\n  // If this propDb is not loaded and not even requested to load, we cannot add externalIds to it.\n  var cacheEntry = _this.pdbCache.get(loadContext.dbPath);\n  if (!cacheEntry) {\n    console.error('Delay-loading of externalIDs requires to load the propDb first.');\n    return;\n  }\n\n  // Skip here if we have the ids already. Note that this will usually be prevented by propDbLoader already.\n  if (cacheEntry.pdb && cacheEntry.pdb.externalIdsLoaded()) {\n    _this.postMessage({ cbId: loadContext.cbId });\n    return;\n  }\n\n  // Receives ids-file blob (or null on failure)\n  var onDone = function onDone(data) {\n\n    if (!data) {\n      // Loading failed. requestFile() already posted an error message in this case.\n      return;\n    }\n\n    // Find propertyDB in cache that we want to load ids for\n    var pdbCache = _this.pdbCache;\n    cacheEntry = pdbCache.get(loadContext.dbPath);\n    if (!cacheEntry || !cacheEntry.pdb) {\n\n      // PropDBLoader delays id-loading until propertyDB finished loading.\n      // So, if we get here and cannot find the propDb, we can assume that the propertyDb must have been unloaded meanwhile.\n\n      // Make sure that we don't leak the blob in the file-cache (requestFile adds the reference automatically)\n      pdbCache.unrefFileCacheEntry(storage);\n\n      // Send message to inform that waiting makes no sense anymore, because\n      // propDb has been unloaded meanwhile. \n      _this.postMessage({\n        cbId: loadContext.cbId,\n        error: {\n          propDbWasUnloaded: true } });\n\n\n    }\n\n    // Make ids available in pdb\n    cacheEntry.pdb.setIdsBlob(data);\n    cacheEntry.byteSize += data.byteLength;\n\n    // Append entry to cacheEntry.dbFiles. This makes sure that the id file blob is released just like\n    // all other dbFiles when the propDb is unloaded later. (see unloadPropertyDb)\n    var newFile = {\n      filename: idsFileEntry.path,\n      storage: storage };\n\n    cacheEntry.dbFiles.push(newFile);\n\n    // Signal that we are done - main thread is now ready to query externalIds.\n    _this.postMessage({ cbId: loadContext.cbId });\n  };\n\n  requestFile(idsFileEntry.path, loadContext, onDone, storage, idsFileEntry.isShared);\n}\n\nfunction doExecuteCode(loadContext) {\n\n  var _this = loadContext.worker;\n\n  //This is expected to load a function named \"userFunction\"\n  if (loadContext.userFunction) {\n    try {\n      importScripts(loadContext.userFunction);\n    } catch (err) {\n      console.error(err);\n      _this.postMessage({ cbId: loadContext.cbId, error: { msg: \"Error while importing 'userFunction'.\" } });\n      return;\n    }\n  }\n\n  if (!self.userFunction) {\n    _this.postMessage({ cbId: loadContext.cbId, error: { msg: \"function 'userFunction' was not found.\" } });\n    return;\n  }\n\n  var cacheEntry = _this.pdbCache && _this.pdbCache.get(loadContext.dbPath);\n\n  if (cacheEntry && cacheEntry.pdb) {\n    var result;\n    try {\n      result = self.userFunction(cacheEntry.pdb, loadContext.userData);\n    } catch (err) {\n      console.error(err);\n      _this.postMessage({ cbId: loadContext.cbId, error: { msg: \"Error while executing 'userFunction'.\" } });\n      return;\n    } finally {\n      self.userFunction = undefined; // cleanup\n    }\n    _this.postMessage({ cbId: loadContext.cbId, result: result });\n  }\n}\n\nexport function register(workerMain) {\n  workerMain.register(\"BUILD_EXTERNAL_ID_MAPPING\", { doOperation: doBuildExternalIdMapping });\n  workerMain.register(\"BUILD_LAYER_TO_NODE_ID_MAPPING\", { doOperation: doBuildLayerToNodeIdMapping });\n  workerMain.register(\"GET_PROPERTIES\", { doOperation: doPropertyGet });\n  workerMain.register(\"SEARCH_PROPERTIES\", { doOperation: doPropertySearch });\n  workerMain.register(\"DIFF_PROPERTIES\", { doOperation: doPropertyDiff });\n  workerMain.register(\"FIND_PROPERTY\", { doOperation: doPropertyFind });\n  workerMain.register(\"FIND_LAYERS\", { doOperation: doLayersFind });\n  workerMain.register(\"LOAD_PROPERTYDB\", { doOperation: doObjectTreeParse });\n  workerMain.register(\"UNLOAD_PROPERTYDB\", { doOperation: doUnloadPropertyDb });\n  workerMain.register(\"USER_FUNCTION\", { doOperation: doExecuteCode });\n  workerMain.register(\"LOAD_EXTERNAL_IDS\", { doOperation: doLoadExternalIds });\n}","import { GltfPackage } from '../lmvtk/gltf/Gltf';\nimport { Package } from '../lmvtk/svf/Package';\nimport { InputStream } from '../lmvtk/common/InputStream';\nimport { ViewingService } from '../net/Xhr';\nimport { ErrorCodes } from '../net/ErrorCodes';\n\nfunction guardFunction(loadContext, func)\n{\n  try {\n    func();\n  }\n  catch (exc) {\n    loadContext.worker.raiseError(\n    ErrorCodes.BAD_DATA, \"Unhandled exception while loading SVF\",\n    { \"url\": loadContext.url, \"exception\": exc.toString(), \"stack\": exc.stack });\n    loadContext.worker.postMessage(null);\n  }\n}\n\nfunction doLoadSvfContinued(loadContext)\n{\n  var _this = loadContext.worker;\n\n  guardFunction(loadContext, function () {\n    var svf = loadContext.svf;\n    function loadDoneCallback(type, meshMessage) {\n      if (type == \"svf\") {\n\n        var msg, xfer;\n        var frags = svf.fragments;\n        var transferable = [\n        frags.transforms.buffer,\n        frags.packIds.buffer,\n        frags.entityIndexes.buffer,\n        frags.fragId2dbId.buffer,\n        frags.visibilityFlags.buffer];\n\n\n        if (svf.bvh) {\n          // BVH is posted together with svf,\n          // so can add more buffer to transfer.\n          xfer = {\n            nodes: svf.bvh.nodes.getRawData(),\n            primitives: svf.bvh.primitives,\n            useLeanNodes: svf.bvh.nodes.bytes_per_node == 32 };\n\n          transferable.push(xfer.nodes);\n          transferable.push(xfer.primitives.buffer);\n\n          // Then can safely transfer following buffers from fragments.\n          transferable.push(frags.boxes.buffer);\n          transferable.push(frags.polygonCounts.buffer);\n          transferable.push(frags.materials.buffer);\n\n          msg = { \"svf\": svf, \"bvh\": xfer, progress: 1.0 };\n        } else\n        {\n          msg = { \"svf\": svf, progress: 0.8 };\n        }\n\n        _this.postMessage(msg, transferable);\n      } else if (type == \"bvh\") {\n        xfer = {\n          nodes: svf.bvh.nodes.getRawData(),\n          primitives: svf.bvh.primitives,\n          useLeanNodes: svf.bvh.nodes.bytes_per_node == 32 };\n\n\n        _this.postMessage({ \"bvh\": xfer, basePath: svf.basePath, progress: 1.0 },\n        [xfer.nodes, xfer.primitives.buffer]);\n\n      } else if (type == \"mesh\") {\n\n        var transferList = [];\n        if (meshMessage.mesh)\n        transferList.push(meshMessage.mesh.vb.buffer);\n\n        _this.postMessage(meshMessage, transferList);\n\n      } else if (type == \"done\") {\n        _this.postMessage({ progress: 1.0 });\n      } else\n      {\n        _this.raiseError(\n        ErrorCodes.BAD_DATA, \"Failure while loading SVF\",\n        { \"url\": loadContext.url });\n        _this.postMessage(null);\n      }\n    }\n\n    loadContext.loadDoneCB = loadDoneCallback;\n\n    svf.loadRemainingSvf(loadContext);\n  });\n}\n\nfunction doLoadSvf(loadContext) {\n\n  var _this = loadContext.worker;\n\n  _this.postMessage({ progress: 0.01 }); //Tell the main thread we are alive\n\n  var type = \"svf\";\n  var url = loadContext.url.toLocaleLowerCase();\n  if (url.lastIndexOf(\".gltf\") === url.length - 5)\n  type = \"gltf\";\n  if (url.lastIndexOf(\".glb\") === url.length - 4)\n  type = \"glb\";\n\n  function onSuccess(result) {\n\n    _this.postMessage({ progress: 0.5 }); //rough progress reporting -- can do better\n\n    guardFunction(loadContext, function () {\n\n      var svf;\n      if (type === \"gltf\" || type === \"glb\") {\n        // result is json\n        svf = new GltfPackage(result);\n      } else {\n        // result is arraybuffer\n        svf = new Package(new Uint8Array(result));\n      }\n      loadContext.svf = svf;\n      svf.loadManifest(loadContext);\n\n\n      if (loadContext.interceptManifest) {\n        _this.postMessage({ \"manifest\": svf.manifest });\n      } else {\n        loadContext.manifest = svf.manifest;\n        doLoadSvfContinued(loadContext);\n      }\n    });\n  }\n\n  var options = {\n    responseType: type === \"gltf\" ? \"json\" : \"arraybuffer\" };\n\n\n  // Begin download the target SVF file with a GET request.\n  ViewingService.getItem(loadContext, loadContext.url, onSuccess, loadContext.onFailureCallback, options);\n\n  if (type === \"svf\") {\n    // Prefetch the first geometry pack (we assume there is one) to mask \n    // some latency. Note that errors are intentionally ignored here.\n    ViewingService.getItem(loadContext, loadContext.basePath + \"0.pf\", function () {}, function () {}, options);\n  }\n}\n\n\nfunction doFetchTopology(loadContext) {\n\n  var _this = loadContext.worker;\n  ViewingService.getItem(loadContext, loadContext.path, onSuccess, onFailure);\n\n  // on success\n  function onSuccess(data) {\n\n    _this.postMessage({ \"status-topology\": {} }); // download is complete\n\n    // This lines below may take a while...\n    var topology = null;\n    try {\n      var jdr = new InputStream(data);\n      var byteLength = data.byteLength;\n      if (0 < byteLength) {\n        topology = JSON.parse(jdr.getString(byteLength));\n      }\n      if (topology) {\n        _this.postMessage({ \"fetch-topology\": { error: null, topology: topology } }); // parsing is complete\n      } else {\n        onFailure('topology-no-content');\n      }\n    } catch (eee) {\n      onFailure(eee);\n    }\n  }\n\n  // on-failure\n  function onFailure(err) {\n    _this.postMessage({ \"fetch-topology\": { error: err, topology: null } }); // something went wrong\n  }\n}\n\nexport function register(workerMain) {\n  workerMain.register(\"LOAD_SVF\", { doOperation: doLoadSvf });\n  workerMain.register(\"LOAD_SVF_CONTD\", { doOperation: doLoadSvfContinued });\n  workerMain.register(\"FETCH_TOPOLOGY\", { doOperation: doFetchTopology });\n}","\nimport { getGlobal, isNodeJS } from \"./compat\";\n\nvar g = getGlobal();\nvar _window = g;\nvar _document = _window && _window.document;\n\ng.LOCALIZATION_REL_PATH = \"\";\n\n/**\n                               * Contains the Viewer's version.\n                               *\n                               * @type {string}\n                               * @global\n                               */\ng.LMV_VIEWER_VERSION = BUILD_FLAG__BUILD_VERSION;\n\ng.LMV_BUILD_TYPE = BUILD_FLAG__BUILD_TYPE;\ng.LMV_RESOURCE_ROOT = \"\";\n\n/**\n                           * When true, requests to Forge are authenticated with a cookie. \n                           * When false, requests to Forge are authenticated with an Authentication header.\n                           * When undefined, the viewer will first try authentication via cookie, if \n                           * that doesn't work it will fallback to using an Authentication header.\n                           *\n                           * @type {boolean|undefined}\n                           * @global\n                           * @default undefined\n                           */\ng.LMV_THIRD_PARTY_COOKIE = isNodeJS() ? false : undefined;\n\nif (g.LMV_VIEWER_VERSION.charAt(0) === 'v') {\n  // remove prefixed 'v'\n  // Required due to TeamCity build pipeline (LMV-1361)\n  g.LMV_VIEWER_VERSION = g.LMV_VIEWER_VERSION.substr(1);\n}\n\n\n/**\n   * When true, the viewer will favor loading the PDF file over the Leaflet derivative, \n   * ignoring the manifest value for `totalRasterPixels`. A true value will take precedence over {@link LMV_RASTER_PDF}.\n   *\n   * @type {boolean}\n   * @default \n   * @global\n   */\ng.LMV_VECTOR_PDF = false;\n\n/**\n                           * When true, the viewer will favor loading the Leaflet derivative over the PDF file,\n                           * ignoring the manifest value for `totalRasterPixels`. When {@link LMV_RASTER_PDF} is true, this value is ignored. \n                           *\n                           * @type {boolean}\n                           * @default \n                           * @global\n                           */\ng.LMV_RASTER_PDF = true;\n\n/**\n                          * When true, LMV starts using the new modelToSheetTransform from AECModelData.json for the 2D/3D transform (if available).\n                          *\n                          * @type {boolean}\n                          * @default\n                          * @global\n                          */\ng.AEC_MODELTOSHEET_TRANSFORM = false;\n\n\n/**\n                                       * When true, LMV will remove the Forge Logo spinner and the in canvas Forge logo\n                                       * Note: We disable the branding for the fluent build. For the regular build this will be enabled.\n                                       *\n                                       * @private\n                                       */\nexport var DISABLE_FORGE_LOGO = BUILD_FLAG__FLUENT_PROFILE;\n\n\n/**\n                                                             * When true, LMV will remove the in canvas Forge logo. To remove both the in canvas and the spinner logos use DISABLE_FORGE_LOG\n                                                             *\n                                                             * @private\n                                                             */\nexport var DISABLE_FORGE_CANVAS_LOGO = true; // Switch to false to enable the in-canvas logo\n\n\n// TODO:  This is here for now, until we find a better place for it.\n//\n/**\n * Returns the first source url found containing the given script name.\n *\n * @private\n * @param {string} scriptName - Script name.\n * @returns {HTMLScriptElement} The script element whose source location matches the input parameter.\n */\nexport function getScript(scriptName) {\n  scriptName = scriptName.toLowerCase();\n  var scripts = _document.getElementsByTagName('SCRIPT');\n  if (scripts && scripts.length > 0) {\n    for (var i = 0; i < scripts.length; ++i) {\n      if (scripts[i].src && scripts[i].src.toLowerCase().indexOf(scriptName) !== -1) {\n        return scripts[i];\n      }\n    }\n  }\n  return null;\n}\n\n/**\n   * Inject a css file into the page.\n   * There's a callback if you need to know when it gets downloaded (rare).\n   * Accepts both relative and absolute URLs.\n   *\n   * @param cssUrl\n   * @param callback\n   * @param onError\n   * @private\n   */\nexport function injectCSS(cssUrl, callback, onError) {\n  var href = cssUrl.indexOf('://') > 0 ? cssUrl : getResourceUrl(cssUrl);\n\n  // Verify that we haven't downloaded it already\n  var results = _document.getElementsByTagName('link');\n  for (var i = 0, len = results.length; i < len; i++) {\n    if (results[i].href === href) {\n      // Already downloaded\n      callback && callback();\n      return;\n    }\n  }\n\n  // else, download it\n  var s = _document.createElement(\"link\");\n  s.setAttribute('rel', \"stylesheet\");\n  s.setAttribute('type', \"text/css\");\n  s.setAttribute('href', href);\n  if (callback) {\n    s.onload = callback;\n  }\n  if (onError) {\n    s.onerror = onError;\n  }\n  _document.head.appendChild(s);\n}\n\n/**\n   * Download an HTML template.\n   * If successful, will invoke callback(null, templateString)\n   * If failure, will invoke callback(\"some error\", null)\n   *\n   * @param templateUrl\n   * @param callback\n   * @private\n   * @deprecated\n   */\nexport function getHtmlTemplate(templateUrl, callback) {\n  var href = templateUrl.indexOf('://') > 0 ? templateUrl : getResourceUrl(templateUrl);\n  var request = new XMLHttpRequest();\n  request.onload = requestLoad;\n  request.onerror = requestError;\n  request.ontimeout = requestError;\n  request.open('GET', href, true);\n  request.send();\n\n  /**\n                   * @param err\n                   * @private\n                   */\n  function requestError(err) {\n    callback(err, null);\n  }\n  /**\n     * @param event\n     * @private\n     */\n  function requestLoad(event) {\n    var content = event.currentTarget.responseText;\n    callback(null, content);\n  }\n\n}\n\n/**\n   * Checks whether an experimental flag has been set into the viewer's' `config`\n   * object, which happens to be the same as the extension's `options` object.\n   *\n   * @param flagName\n   * @param config3d\n   * @private\n   */\nexport function isExperimentalFlagEnabled(flagName, config3d) {\n  if (!config3d || !Array.isArray(config3d.experimental))\n  return false;\n  return config3d.experimental.indexOf(flagName) !== -1;\n}\n\n\n/**\n   * Returns the full url of a resource with version.\n   * The version will be determined from the LMV_VIEWER_VERSION variable.\n   *\n   * @private\n   * @param {string} resourceRelativePath - The path of the resource relative to LMV_RESOURCE_ROOT.\n   * @returns {string} The full resource path.\n   */\nexport function getResourceUrl(resourceRelativePath) {\n  return g.LMV_RESOURCE_ROOT + resourceRelativePath;\n}\n\n\n/**\n   * Returns the query parameter value from window url\n   * @param {string} name - Parameter name\n   * @returns {string} - Parameter value\n   * @alias Autodesk.Viewing.getParameterByName\n   */\nexport function getParameterByName(name) {\n  if (typeof window === \"undefined\") {\n    return \"\";\n  }\n  return getParameterByNameFromPath(name, _window.location.href);\n}\n\n/**\n   * Parameter from url\n   * @param {string} name - Parameter name\n   * @param {string} url - URL\n   * @returns {string} - Parameter value\n   * @alias Autodesk.Viewing.getParameterByNameFromPath\n   */\nexport function getParameterByNameFromPath(name, url) {\n  name = name.replace(/[\\[]/, \"\\\\\\[\").replace(/[\\]]/, \"\\\\\\]\");\n  var regexS = \"[\\\\?&]\" + name + \"=([^&#]*)\";\n  var regex = new RegExp(regexS);\n  var results = regex.exec(url);\n  if (results == null)\n  return \"\";else\n\n  return decodeURIComponent(results[1].replace(/\\+/g, \" \"));\n}\n\n\n/**\n   * Creae a dom element\n   * @param {string} str - String to generate DOM object\n   * @private\n   */\nexport function stringToDOM(str) {\n  var d = _document.createElement(\"div\");\n  d.innerHTML = str;\n  return d.firstChild;\n}\n\n/**\n   * Convert to url-safe base 64 string\n   * @param {string} str - String to convert\n   * @returns - Url-safe base64 string\n   * @alias Autodesk.Viewing.toUrlSafeBase64\n   */\nexport function toUrlSafeBase64(str) {\n  var base64 = btoa(str).\n  replace(/\\+/g, '-') // Convert '+' to '-' (dash)\n  .replace(/\\//g, '_') // Convert '/' to '_' (underscore)\n  .replace(/=+$/, ''); // Remove trailing '='\n\n  return base64;\n}\n\n/**\n   * Decode base64 string\n   * @param {string} str - String to convert\n   * @returns string after decoding from base64\n   * @alias Autodesk.Viewing.fromUrlSafeBase64\n   */\nexport function fromUrlSafeBase64(str) {\n  str = str.replace(/-/g, '+'); // Convert '-' (dash) to '+'\n  str = str.replace(/_/g, '/'); // Convert '_' (underscore) to '/'\n  while (str.length % 4) {str += '=';} // Add padding '='\n\n  return atob(str);\n}","\nimport { isTouchDevice, getGlobal } from \"../compat\";\nimport { isOffline, getEnv } from \"../file-loaders/net/endpoints\";\n\nvar global = getGlobal();\nvar _window = global;\n\n/**\n                       * Logging levels. Higher number means more verbose logs,\n                       * for example, with level 3, `info`, `warn`, or `error`\n                       * logs will show up in the console but `debug` and `log` won't.\n                       *\n                       * Semantics of specific levels:\n                       *  - debug: low-level debugging logs\n                       *  - log: common, higher-level debugging logs\n                       *  - info: helpful runtime information (even for stag/prod environments)\n                       *  - warn: potentially problematic situations; handled exceptions\n                       *  - error: definitely problematic situations; unhandled exceptions\n                       * @readonly\n                       * @enum {number}\n                       */\nexport var LogLevels = {\n  DEBUG: 5,\n  LOG: 4,\n  INFO: 3,\n  WARNING: 2,\n  ERROR: 1,\n  NONE: 0 };\n\n\n\n/**\n              * Logger class. \n              * Depending on options.logLevel setting in initilize function, corresponding functions would be activated.\n              */\nexport function Logger() {\n  this.runtimeStats = {};\n  this.level = -1;\n  this.setLevel(LogLevels.ERROR);\n  this._reportError = this._reportError.bind(this);\n}\n\n/**\n   * Initialize Logger object with options. \n   * \n   * @param {object}   [options] - Options object to configure the Logger.\n   * @param {function} [options.eventCallback] - An optional callback used for processing the log entry with properties like \"category\", \"timestamp\", etc. \n                                                 It can be used as for analytics tracking by filtering and listening to specific category users are interested. \n                                                 The expected argument is the user supplied entry object instrumented with \"timestamp\" and \"sessionId\" properties. \n   * @param {string}   [options.sessionId] - An optional id for each browser session. Default gets generated based on current time stamp if not specified. \n   * @param {number}   [options.logLevel] - An optional level to define the log level. Default is LogLevels.ERROR if not specified.\n   *\n   */\n\nLogger.prototype.initialize = function (options) {\n\n  if (options.eventCallback)\n  this.callback = options.eventCallback;\n\n  this.sessionId = options.sessionId;\n  if (!this.sessionId) {\n    var now = Date.now() + \"\";\n    this.sessionId = parseFloat((Math.random() * 10000 | 0) + \"\" + now.substring(4));\n  }\n\n  // Initialize log level is passed in\n  if (typeof options.logLevel === 'number') {\n    this.setLevel(options.logLevel);\n  }\n\n  this.environmentInfo = {\n    touch: isTouchDevice(),\n    env: getEnv(),\n    referer: getReferer(),\n    version: global.LMV_VIEWER_VERSION,\n    build_type: global.LMV_BUILD_TYPE };\n\n\n  //Kick off with a viewer start event\n  var startEvent = {\n    category: \"viewer_start\",\n    touch: this.environmentInfo.touch,\n    env: this.environmentInfo.env,\n    referer: this.environmentInfo.referer,\n    version: this.environmentInfo.version,\n    build_type: this.environmentInfo.build_type };\n\n  this.track(startEvent);\n\n  var _this = this;\n  this.interval = setInterval(function () {\n    _this.reportRuntimeStats();\n  }, 60000);\n};\n\n/**\n    * Stop the runtime stats reporting every min.\n    */\nLogger.prototype.shutdown = function () {\n  clearInterval(this.interval);\n  this.interval = undefined;\n};\n\n\n/**\n    * Track the user inputted entry by appending additional info \"timestamp\", \"sessionId\"\n    * @param {object} [entry] - User object to define the track object, \n           e.g. {\n               category : \"load_document\",\n               urn: \"xyz\"\n           }   \n    */\nLogger.prototype.track = function (entry) {\n\n  this.updateRuntimeStats(entry);\n\n  if (isOffline() || !this.sessionId) {\n    return;\n  }\n\n  if (this.callback) {\n\n    entry.timestamp = Date.now();\n    entry.sessionId = this.sessionId;\n\n    this.callback(entry);\n  }\n};\n\nLogger.prototype.updateRuntimeStats = function (entry) {\n  if (entry.hasOwnProperty('aggregate')) {\n    switch (entry.aggregate) {\n      case 'count':\n        if (this.runtimeStats[entry.name] > 0) {\n          this.runtimeStats[entry.name]++;\n        } else {\n          this.runtimeStats[entry.name] = 1;\n        }\n        this.runtimeStats._nonempty = true;\n        break;\n      case 'last':\n        this.runtimeStats[entry.name] = entry.value;\n        this.runtimeStats._nonempty = true;\n        break;\n      default:\n        this.warn('unknown log aggregate type');}\n\n  }\n};\n\nLogger.prototype.reportRuntimeStats = function () {\n  if (this.runtimeStats._nonempty) {\n    delete this.runtimeStats._nonempty;\n\n    this.runtimeStats.category = 'misc_stats';\n    this.track(this.runtimeStats);\n    this.runtimeStats = {};\n  }\n};\n\nLogger.prototype.setLevel = function (level) {\n  if (this.level === level)\n  return;\n\n  this.level = level;\n\n  // Bind to console\n  this.debug = level >= LogLevels.DEBUG ? console.log : consoleNothing;\n  this.log = level >= LogLevels.LOG ? console.log : consoleNothing;\n  this.info = level >= LogLevels.INFO ? console.info : consoleNothing;\n  this.warn = level >= LogLevels.WARNING ? console.warn : consoleNothing;\n  this.error = level >= LogLevels.ERROR ? this._reportError : consoleNothing;\n};\n\n\n/**\n    * Reports an error to the browser console and to the logger's callback.\n    * Invoked by developers when method `logger.error()` is used. \n    * Forwards the arguments directly into `console.error()`. \n    * @private\n    */\nLogger.prototype._reportError = function () {\n  if (this.callback) {\n    var msg = Array.prototype.slice.call(arguments).join(' ');\n    this.callback({ category: 'error', message: msg });\n  }\n  console.error.apply(console, arguments);\n};\n\n/**\n    * @private\n    */\nfunction getReferer() {\n  // Wrapping href retrieval due to Fortify complains\n  if (typeof window !== 'undefined') {\n    return encodeURI(_window.location.href);\n  }\n  return '';\n}\n\n\n\n/**\n   * Swallows log/debug/info/warn/error calls when the logLevel disallows it.\n   * @private\n   */\nfunction consoleNothing() {\n\n}\n\n\nexport var logger = new Logger();\n\nexport function setLogger(l) {\n  logger = l;\n}","/**\n * BVH definitions:\n *\n * BVH Node: if this was C (the only real programming language), it would go something like this,\n * but with better alignment.\n *\n * This is definition for \"fat\" nodes (for rasterization),\n * i.e. when inner nodes also contain primitives.\n * struct Node {                                                            byte/short/int offset\n *      float worldBox[6]; //world box of the node node                         0/0/0\n *      int leftChildIndex; //pointer to left child node (right is left+1)     24/12/6\n *      ushort primCount; //how many fragments are at this node                28/14/7\n *      ushort flags; //bitfield of good stuff                                 30/15/7.5\n *\n *      int primStart; //start of node's own primitives (fragments) list       32/16/8\n * };\n * => sizeof(Node) = 36 bytes\n\n * Definition for lean nodes (for ray casting): when a node is either inner node (just children, no primitives)\n * or leaf (just primitives, no children).\n * struct Node {\n *      float worldBox[6]; //world box of the node\n *      union {\n *          int leftChildIndex; //pointer to left child node (right is left+1)\n *          int primStart; //start of node's own primitives (fragments) list\n *      };\n *      ushort primCount; //how many fragments are at this node\n *      ushort flags; //bitfield of good stuff\n * };\n * => sizeof(Node) = 32 bytes\n *\n * The class below encapsulates an array of such nodes using ArrayBuffer as backing store.\n *\n * @param {ArrayBuffer|number} initialData  Initial content of the NodeArray, or initial allocation of empty nodes\n * @param {boolean} useLeanNode Use minimal node structure size. Currently this parameter must be set to false.\n * @constructor\n */\nexport function NodeArray(initialData, useLeanNode) {\n  'use strict';\n\n  if (useLeanNode) {\n    this.bytes_per_node = 32;\n  } else {\n    this.bytes_per_node = 36;\n  }\n\n  var initialCount;\n  var initialBuffer;\n\n  if (initialData instanceof ArrayBuffer) {\n    initialCount = initialData.byteLength / this.bytes_per_node;\n    initialBuffer = initialData;\n    this.nodeCount = initialCount;\n  } else\n  {\n    initialCount = initialData | 0;\n    initialBuffer = new ArrayBuffer(this.bytes_per_node * initialCount);\n    this.nodeCount = 0;\n  }\n\n  this.nodeCapacity = initialCount;\n  this.nodesRaw = initialBuffer;\n\n  this.is_lean_node = useLeanNode;\n  this.node_stride = this.bytes_per_node / 4;\n  this.node_stride_short = this.bytes_per_node / 2;\n\n  //Allocate memory buffer for all tree nodes\n  this.nodesF = new Float32Array(this.nodesRaw);\n  this.nodesI = new Int32Array(this.nodesRaw);\n  this.nodesS = new Uint16Array(this.nodesRaw);\n}\n\nNodeArray.prototype.setLeftChild = function (nodeidx, childidx) {\n  this.nodesI[nodeidx * this.node_stride + 6] = childidx;\n};\nNodeArray.prototype.getLeftChild = function (nodeidx) {\n  return this.nodesI[nodeidx * this.node_stride + 6];\n};\n\nNodeArray.prototype.setPrimStart = function (nodeidx, start) {\n  if (this.is_lean_node)\n  this.nodesI[nodeidx * this.node_stride + 6] = start;else\n\n  this.nodesI[nodeidx * this.node_stride + 8] = start;\n};\nNodeArray.prototype.getPrimStart = function (nodeidx) {\n  if (this.is_lean_node)\n  return this.nodesI[nodeidx * this.node_stride + 6];else\n\n  return this.nodesI[nodeidx * this.node_stride + 8];\n};\n\nNodeArray.prototype.setPrimCount = function (nodeidx, count) {\n  this.nodesS[nodeidx * this.node_stride_short + 14] = count;\n};\nNodeArray.prototype.getPrimCount = function (nodeidx) {\n  return this.nodesS[nodeidx * this.node_stride_short + 14];\n};\n\nNodeArray.prototype.setFlags = function (nodeidx, axis, isFirst, isTransparent) {\n  this.nodesS[nodeidx * this.node_stride_short + 15] = isTransparent << 3 | isFirst << 2 | axis & 0x3;\n};\nNodeArray.prototype.getFlags = function (nodeidx) {\n  return this.nodesS[nodeidx * this.node_stride_short + 15];\n};\n\nNodeArray.prototype.setBox0 = function (nodeidx, src) {\n  var off = nodeidx * this.node_stride;\n  var dst = this.nodesF;\n  dst[off] = src[0];\n  dst[off + 1] = src[1];\n  dst[off + 2] = src[2];\n  dst[off + 3] = src[3];\n  dst[off + 4] = src[4];\n  dst[off + 5] = src[5];\n};\nNodeArray.prototype.getBoxThree = function (nodeidx, dst) {\n  var off = nodeidx * this.node_stride;\n  var src = this.nodesF;\n  dst.min.x = src[off];\n  dst.min.y = src[off + 1];\n  dst.min.z = src[off + 2];\n  dst.max.x = src[off + 3];\n  dst.max.y = src[off + 4];\n  dst.max.z = src[off + 5];\n};\nNodeArray.prototype.getBoxArray = function (nodeidx, dst, offset) {\n  var off = nodeidx * this.node_stride;\n  var src = this.nodesF;\n  offset = offset || 0;\n  dst[0 + offset] = src[off];\n  dst[1 + offset] = src[off + 1];\n  dst[2 + offset] = src[off + 2];\n  dst[3 + offset] = src[off + 3];\n  dst[4 + offset] = src[off + 4];\n  dst[5 + offset] = src[off + 5];\n};\nNodeArray.prototype.setBoxThree = function (nodeidx, src) {\n  var off = nodeidx * this.node_stride;\n  var dst = this.nodesF;\n  dst[off] = src.min.x;\n  dst[off + 1] = src.min.y;\n  dst[off + 2] = src.min.z;\n  dst[off + 3] = src.max.x;\n  dst[off + 4] = src.max.y;\n  dst[off + 5] = src.max.z;\n};\n\n\n\n\nNodeArray.prototype.makeEmpty = function (nodeidx) {\n\n  var off = nodeidx * this.node_stride;\n  var dst = this.nodesI;\n\n  //No point to makeEmpty here, because the box gets set\n  //directly when the node is initialized in bvh_subdivide.\n  //box_make_empty(this.nodesF, off);\n\n  //_this.setLeftChild(nodeidx,-1);\n  dst[off + 6] = -1;\n\n  //both prim count and flags to 0\n  dst[off + 7] = 0;\n\n  //_this.setPrimStart(nodeidx, -1);\n  if (!this.is_lean_node)\n  dst[off + 8] = -1;\n\n};\n\nNodeArray.prototype.realloc = function (extraSize) {\n  if (this.nodeCount + extraSize > this.nodeCapacity) {\n    var nsz = 0 | this.nodeCapacity * 3 / 2;\n    if (nsz < this.nodeCount + extraSize)\n    nsz = this.nodeCount + extraSize;\n\n    var nnodes = new ArrayBuffer(nsz * this.bytes_per_node);\n    var nnodesI = new Int32Array(nnodes);\n    nnodesI.set(this.nodesI);\n\n    this.nodeCapacity = nsz;\n    this.nodesRaw = nnodes;\n    this.nodesF = new Float32Array(nnodes);\n    this.nodesI = nnodesI;\n    this.nodesS = new Uint16Array(nnodes);\n  }\n};\n\nNodeArray.prototype.nextNodes = function (howMany) {\n\n  this.realloc(howMany);\n\n  var res = this.nodeCount;\n  this.nodeCount += howMany;\n\n  for (var i = 0; i < howMany; i++) {\n    this.makeEmpty(res + i);\n  }\n\n  return res;\n};\n\nNodeArray.prototype.getRawData = function () {\n  return this.nodesRaw.slice(0, this.nodeCount * this.bytes_per_node);\n};\n\nvar POINT_STRIDE = 3;\nvar BOX_EPSILON = 1e-5;\nvar BOX_SCALE_EPSILON = 1e-5;\nvar MAX_DEPTH = 15; /* max tree depth */\nvar MAX_BINS = 16;\n\n/**\n                   * Bounding Volume Hierarchy build algorithm.\n                   * Uses top down binning -- see \"On fast Construction of SAH-based Bounding Volume Hierarchies\" by I.Wald\n                   * Ported from the C version here: https://git.autodesk.com/stanevt/t-ray/blob/master/render3d/t-ray/t-core/t-bvh.c\n                   * Optimized for JavaScript.\n                   */\nvar BVHModule = function () {\n  //There be dragons in this closure.\n\n  \"use strict\";\n\n\n  /**\n                 * Utilities for manipulating bounding boxes stored\n                 * in external array (as sextuplets of float32)\n                 */\n\n\n  function box_get_centroid(dst, dst_off, src, src_off) {\n    dst[dst_off] = 0.5 * (src[src_off] + src[src_off + 3]);\n    dst[dst_off + 1] = 0.5 * (src[src_off + 1] + src[src_off + 4]);\n    dst[dst_off + 2] = 0.5 * (src[src_off + 2] + src[src_off + 5]);\n  }\n\n  function box_add_point_0(dst, src, src_off) {\n\n    if (dst[0] > src[src_off]) dst[0] = src[src_off];\n    if (dst[3] < src[src_off]) dst[3] = src[src_off];\n\n    if (dst[1] > src[src_off + 1]) dst[1] = src[src_off + 1];\n    if (dst[4] < src[src_off + 1]) dst[4] = src[src_off + 1];\n\n    if (dst[2] > src[src_off + 2]) dst[2] = src[src_off + 2];\n    if (dst[5] < src[src_off + 2]) dst[5] = src[src_off + 2];\n\n  }\n\n  function box_add_box_0(dst, src, src_off) {\n\n    if (dst[0] > src[src_off]) dst[0] = src[src_off];\n    if (dst[1] > src[src_off + 1]) dst[1] = src[src_off + 1];\n    if (dst[2] > src[src_off + 2]) dst[2] = src[src_off + 2];\n\n    if (dst[3] < src[src_off + 3]) dst[3] = src[src_off + 3];\n    if (dst[4] < src[src_off + 4]) dst[4] = src[src_off + 4];\n    if (dst[5] < src[src_off + 5]) dst[5] = src[src_off + 5];\n  }\n\n  function box_add_box_00(dst, src) {\n    if (dst[0] > src[0]) dst[0] = src[0];\n    if (dst[1] > src[1]) dst[1] = src[1];\n    if (dst[2] > src[2]) dst[2] = src[2];\n\n    if (dst[3] < src[3]) dst[3] = src[3];\n    if (dst[4] < src[4]) dst[4] = src[4];\n    if (dst[5] < src[5]) dst[5] = src[5];\n  }\n\n  function box_get_size(dst, dst_off, src, src_off) {\n    for (var i = 0; i < 3; i++) {\n      dst[dst_off + i] = src[src_off + 3 + i] - src[src_off + i];\n    }\n  }\n\n  //function box_copy(dst, dst_off, src, src_off) {\n  //    for (var i=0; i<6; i++) {\n  //        dst[dst_off+i] = src[src_off+i];\n  //    }\n  //}\n\n  // unwound version of box_copy\n  function box_copy_00(dst, src) {\n    dst[0] = src[0];\n    dst[1] = src[1];\n    dst[2] = src[2];\n    dst[3] = src[3];\n    dst[4] = src[4];\n    dst[5] = src[5];\n  }\n\n  var dbl_max = Infinity;\n\n  //function box_make_empty(dst, dst_off) {\n  //        dst[dst_off]   =  dbl_max;\n  //        dst[dst_off+1] =  dbl_max;\n  //        dst[dst_off+2] =  dbl_max;\n  //        dst[dst_off+3] = -dbl_max;\n  //        dst[dst_off+4] = -dbl_max;\n  //        dst[dst_off+5] = -dbl_max;\n  //}\n\n  function box_make_empty_0(dst) {\n    dst[0] = dbl_max;\n    dst[1] = dbl_max;\n    dst[2] = dbl_max;\n    dst[3] = -dbl_max;\n    dst[4] = -dbl_max;\n    dst[5] = -dbl_max;\n  }\n\n  function box_area(src, src_off) {\n\n    var dx = src[src_off + 3] - src[src_off];\n    var dy = src[src_off + 4] - src[src_off + 1];\n    var dz = src[src_off + 5] - src[src_off + 2];\n\n    if (dx < 0 || dy < 0 || dz < 0)\n    return 0;\n\n    return 2.0 * (dx * dy + dy * dz + dz * dx);\n  }\n\n  function box_area_0(src) {\n\n    var dx = src[3] - src[0];\n    var dy = src[4] - src[1];\n    var dz = src[5] - src[2];\n\n    if (dx < 0 || dy < 0 || dz < 0)\n    return 0;\n\n    return 2.0 * (dx * dy + dy * dz + dz * dx);\n  }\n\n\n\n\n\n  function bvh_split_info() {\n    this.vb_left = new Float32Array(6);\n    this.vb_right = new Float32Array(6);\n    this.cb_left = new Float32Array(6);\n    this.cb_right = new Float32Array(6);\n    this.num_left = 0;\n    this.best_split = -1;\n    this.best_cost = -1;\n    this.num_bins = -1;\n  }\n\n  bvh_split_info.prototype.reset = function () {\n    this.num_left = 0;\n    this.best_split = -1;\n    this.best_cost = -1;\n    this.num_bins = -1;\n  };\n\n\n  function bvh_bin() {\n    this.box_bbox = new Float32Array(6); // bbox of all primitive bboxes\n    this.box_centroid = new Float32Array(6); // bbox of all primitive centroids\n    this.num_prims = 0; // number of primitives in the bin\n  }\n\n  bvh_bin.prototype.reset = function () {\n    this.num_prims = 0; // number of primitives in the bin\n    box_make_empty_0(this.box_bbox);\n    box_make_empty_0(this.box_centroid);\n  };\n\n  function accum_bin_info() {\n    this.BL = new Float32Array(6);\n    this.CL = new Float32Array(6);\n    this.NL = 0;\n    this.AL = 0;\n  }\n\n  accum_bin_info.prototype.reset = function () {\n    this.NL = 0;\n    this.AL = 0;\n\n    box_make_empty_0(this.BL);\n    box_make_empty_0(this.CL);\n  };\n\n\n  //Scratch variables used by bvh_bin_axis\n  //TODO: can be replaced by a flat ArrayBuffer\n  var bins = [];\n  var i;\n  for (i = 0; i < MAX_BINS; i++) {\n    bins.push(new bvh_bin());\n  }\n\n  //TODO: can be replaced by a flat ArrayBuffer\n  var ai = [];\n  for (i = 0; i < MAX_BINS - 1; i++) {\n    ai.push(new accum_bin_info());}\n\n  var BR = new Float32Array(6);\n  var CR = new Float32Array(6);\n\n\n  function assign_bins(bvh, start, end, axis, cb, cbdiag, num_bins) {\n\n    var centroids = bvh.centroids;\n    var primitives = bvh.primitives;\n    var boxes = bvh.finfo.boxes;\n    var boxStride = bvh.finfo.boxStride;\n\n    /* bin assignment */\n    var k1 = num_bins * (1.0 - BOX_SCALE_EPSILON) / cbdiag[axis];\n    var cbaxis = cb[axis];\n    var sp = bvh.sort_prims;\n\n    for (var j = start; j <= end; j++)\n    {\n      /* map array index to primitive index -- since primitive index array gets reordered by the BVH build*/\n      /* while the primitive info array is not reordered */\n      var iprim = primitives[j] | 0;\n\n      var fpbin = k1 * (centroids[iprim * 3 /*POINT_STRIDE*/ + axis] - cbaxis);\n      var binid = fpbin | 0; //Truncate to int is algorithmic -> not an optimization thing!\n\n      /* possible floating point problems */\n      if (binid < 0)\n      {\n        binid = 0;\n        //debug(\"Bin index out of range \" + fpbin);\n      } else\n      if (binid >= num_bins)\n      {\n        binid = num_bins - 1;\n        //debug(\"Bin index out of range. \" + fpbin);\n      }\n\n      /* Store the bin index for the partitioning step, so we don't recompute it there */\n      sp[j] = binid;\n\n      /* update other bin data with the new primitive */\n      //var bin = bins[binid];\n      bins[binid].num_prims++;\n\n      box_add_box_0(bins[binid].box_bbox, boxes, iprim * boxStride);\n      box_add_point_0(bins[binid].box_centroid, centroids, iprim * 3 /*POINT_STRIDE*/);\n    }\n    /* at this point all primitves are assigned to a bin */\n  }\n\n\n  function bvh_bin_axis(bvh, start, end, axis, cb, cbdiag, split_info) {\n\n    /* if size is near 0 on this axis, cost of split is infinite */\n    if (cbdiag[axis] < bvh.scene_epsilon)\n    {\n      split_info.best_cost = Infinity;\n      return;\n    }\n\n    var num_bins = MAX_BINS;\n    if (num_bins > end - start + 1)\n    num_bins = end - start + 1;\n\n    var i;\n    for (i = 0; i < num_bins; i++) {\n      bins[i].reset();}\n\n    for (i = 0; i < num_bins - 1; i++) {\n      ai[i].reset();}\n\n    split_info.num_bins = num_bins;\n\n    assign_bins(bvh, start, end, axis, cb, cbdiag, num_bins);\n\n\n    /* now do the accumulation sweep from left to right */\n    box_copy_00(ai[0].BL, bins[0].box_bbox);\n    box_copy_00(ai[0].CL, bins[0].box_centroid);\n    ai[0].AL = box_area_0(ai[0].BL);\n    ai[0].NL = bins[0].num_prims;\n    var bin;\n    for (i = 1; i < num_bins - 1; i++)\n    {\n      bin = bins[i];\n      var aii = ai[i];\n      box_copy_00(aii.BL, ai[i - 1].BL);\n      box_add_box_00(aii.BL, bin.box_bbox);\n      aii.AL = box_area_0(aii.BL);\n\n      box_copy_00(aii.CL, ai[i - 1].CL);\n      box_add_box_00(aii.CL, bin.box_centroid);\n\n      aii.NL = ai[i - 1].NL + bin.num_prims;\n    }\n\n    /* sweep from right to left, keeping track of lowest cost and split */\n    i = num_bins - 1;\n    box_copy_00(BR, bins[i].box_bbox);\n    box_copy_00(CR, bins[i].box_centroid);\n    var AR = box_area_0(BR);\n    var NR = bins[i].num_prims;\n\n    var best_split = i;\n    var best_cost = AR * NR + ai[i - 1].AL * ai[i - 1].NL;\n    box_copy_00(split_info.vb_right, BR);\n    box_copy_00(split_info.cb_right, bins[i].box_centroid);\n    box_copy_00(split_info.vb_left, ai[i - 1].BL);\n    box_copy_00(split_info.cb_left, ai[i - 1].CL);\n    split_info.num_left = ai[i - 1].NL;\n\n    for (i = i - 1; i >= 1; i--)\n    {\n      bin = bins[i];\n      box_add_box_00(BR, bin.box_bbox);\n      box_add_box_00(CR, bin.box_centroid);\n      AR = box_area_0(BR);\n      NR += bin.num_prims;\n\n      var cur_cost = AR * NR + ai[i - 1].AL * ai[i - 1].NL;\n\n      if (cur_cost <= best_cost)\n      {\n        best_cost = cur_cost;\n        best_split = i;\n\n        box_copy_00(split_info.vb_right, BR);\n        box_copy_00(split_info.cb_right, CR);\n        box_copy_00(split_info.vb_left, ai[i - 1].BL);\n        box_copy_00(split_info.cb_left, ai[i - 1].CL);\n        split_info.num_left = ai[i - 1].NL;\n      }\n    }\n\n    split_info.best_split = best_split;\n    split_info.best_cost = best_cost;\n  }\n\n  function bvh_partition(bvh, start, end, axis, cb, cbdiag, split_info) {\n\n    //At this point, the original algorithm does an in-place NON-STABLE partition\n    //to move primitives to the left and right sides of the split plane\n    //into contiguous location of the primitives list for use by\n    //the child nodes. But, we want to preserve the ordering by size\n    //without having to do another sort, so we have to use\n    //a temporary storage location to copy into. We place right-side primitives\n    //in temporary storage, then copy back into the original storage in the right order.\n    //Left-side primitives are still put directly into the destination location.\n    var primitives = bvh.primitives;\n    //var centroids = bvh.centroids;\n    var i, j;\n\n    //sort_prims contains bin indices computed during the split step.\n    //Here we read those and also use sort_prims as temporary holding\n    //of primitive indices. Hopefully the read happens before the write. :)\n    //In C it was cheap enough to compute this again...\n    //var k1 = split_info.num_bins * (1.0 - BOX_SCALE_EPSILON) / cbdiag[axis];\n    //var cbaxis = cb[axis];\n    var sp = bvh.sort_prims;\n\n    var right = 0;\n    var left = start | 0;\n    var best_split = split_info.best_split | 0;\n\n    for (i = start; i <= end; i++) {\n      var iprim = primitives[i] | 0;\n      //var fpbin = (k1 * (centroids[3/*POINT_STRIDE*/ * iprim + axis] - cbaxis));\n      var binid = sp[i]; /* fpbin|0; */\n\n      if (binid < best_split) {\n        primitives[left++] = iprim;\n      } else {\n        sp[right++] = iprim;\n      }\n    }\n\n    //if ((left-start) != split_info.num_left)\n    //    debug(\"Mismatch between binning and partitioning.\");\n\n    //Copy back the right-side primitives into main primitives array, while\n    //maintaining order\n    for (j = 0; j < right; j++) {\n      primitives[left + j] = sp[j];\n    }\n    /* at this point the binning is complete and we have computed a split */\n  }\n\n\n  function bvh_fatten_inner_node(bvh, nodes, nodeidx, start, end, cb, cbdiag, poly_cut_off) {\n\n    var primitives = bvh.primitives;\n    var centroids = bvh.centroids;\n\n    //Take the first few items to place into the inner node,\n    //but do not go over the max item or polygon count.\n    var prim_count = end - start + 1;\n\n    if (prim_count > bvh.frags_per_inner_node)\n    prim_count = bvh.frags_per_inner_node;\n\n    if (prim_count > poly_cut_off)\n    prim_count = poly_cut_off;\n\n\n    nodes.setPrimStart(nodeidx, start);\n    nodes.setPrimCount(nodeidx, prim_count);\n    start += prim_count;\n\n    //Because we take some primitives off the input, we have to recompute\n    //the bounding box used for computing the node split.\n    box_make_empty_0(cb);\n    for (var i = start; i <= end; i++) {\n      box_add_point_0(cb, centroids, 3 /*POINT_STRIDE*/ * primitives[i]);\n    }\n\n    //Also update the split axis -- it could possibly change too.\n    box_get_size(cbdiag, 0, cb, 0);\n    //Decide which axis to split on. Done purely by longest.\n    var axis = 0;\n    if (cbdiag[1] > cbdiag[0])\n    axis = 1;\n    if (cbdiag[2] > cbdiag[axis])\n    axis = 2;\n\n    return axis;\n  }\n\n\n  var cbdiag = new Float32Array(3); //scratch variable used in bvh_subdivide\n\n  function bvh_subdivide(bvh,\n  nodeidx, /* current parent node to consider splitting */\n  start, end, /* primitive sub-range to be considered at this recursion step */\n  vb, /* bounding volume of the primitives' bounds in the sub-range */\n  cb, /* bounding box of primitive centroids in this range */\n  transparent, /* does the node contain opaque or transparent objects */\n  depth /* recursion depth */)\n\n  {\n    box_get_size(cbdiag, 0, cb, 0);\n    var nodes = bvh.nodes;\n    var frags_per_leaf = transparent ? bvh.frags_per_leaf_node_transparent : bvh.frags_per_leaf_node;\n    var frags_per_inner = transparent ? bvh.frags_per_inner_node_transparent : bvh.frags_per_inner_node;\n    var polys_per_node = bvh.max_polys_per_node;\n\n    //Decide which axis to split on.\n    var axis = 0;\n    if (cbdiag[1] > cbdiag[0])\n    axis = 1;\n    if (cbdiag[2] > cbdiag[axis])\n    axis = 2;\n\n    //Whether the node gets split or not, it gets\n    //the same overall bounding box.\n    nodes.setBox0(nodeidx, vb);\n\n    //Check the expected polygon count of the node. This figures out the maximum number of fragments\n    // we can put at the node as determined by polys_per_node\n    var poly_count = 0;\n    var poly_cut_off = 0;\n    var prim_count = end - start + 1;\n\n    // If we have the number of triangles in each mesh, limit the number of primitives in an inner node.\n    if (bvh.finfo.hasPolygonCounts && bvh.frags_per_inner_node) {\n      // Walk through primitives, add up the counts until we reach polys_per_node (10000), or run through\n      // frags_per_inner_node (usually 32).\n      // We know that later on we'll limit the number to frags_per_inner_node, so also do it here.\n      var shorten_end = prim_count <= bvh.frags_per_inner_node ? end : start + bvh.frags_per_inner_node - 1;\n      for (var i = start; i <= shorten_end; i++) {\n        poly_count += bvh.finfo.getPolygonCount(bvh.primitives[i]);\n        poly_cut_off++;\n        if (poly_count > polys_per_node)\n        break;\n      }\n    }\n\n    var isSmall = prim_count <= frags_per_leaf && poly_count < polys_per_node ||\n    prim_count === 1;\n\n    //Decide whether to terminate recursion\n    if (isSmall ||\n    depth > MAX_DEPTH || //max recursion depth\n    cbdiag[axis] < bvh.scene_epsilon) //node would be way too tiny for math to make sense (a point)\n      {\n        nodes.setLeftChild(nodeidx, -1);\n        nodes.setPrimStart(nodeidx, start);\n        nodes.setPrimCount(nodeidx, end - start + 1);\n        nodes.setFlags(nodeidx, 0, 0, transparent ? 1 : 0);\n        return;\n      }\n\n    //Pick the largest (first) primitives to live in this node\n    //NOTE: this assumes primitives are sorted by size.\n    //NOTE: This step is an optional departure from the original, and we also do a check for it above\n    // to compute poly_cut_off.\n    if (frags_per_inner) {\n      axis = bvh_fatten_inner_node(bvh, nodes, nodeidx, start, end, cb, cbdiag, poly_cut_off);\n      start = start + nodes.getPrimCount(nodeidx);\n    }\n\n    var split_info = new bvh_split_info();\n\n    //Do the binning of the remaining primitives to go into child nodes\n    bvh_bin_axis(bvh, start, end, axis, cb, cbdiag, split_info);\n\n    if (split_info.num_bins < 0) {\n      //Split was too costly, so add all objects to the current node and bail\n      nodes.setPrimCount(nodeidx, nodes.getPrimCount(nodeidx) + end - start + 1);\n      return;\n    }\n\n    bvh_partition(bvh, start, end, axis, cb, cbdiag, split_info);\n\n    var child_idx = nodes.nextNodes(2);\n\n    /* set info about split into the node */\n    var cleft = (split_info.vb_left[3 + axis] + split_info.vb_left[axis]) * 0.5;\n    var cright = (split_info.vb_right[3 + axis] + split_info.vb_right[axis]) * 0.5;\n\n    nodes.setFlags(nodeidx, axis, cleft < cright ? 0 : 1, transparent ? 1 : 0);\n    nodes.setLeftChild(nodeidx, child_idx);\n\n\n    /* validate split */\n    /*\n                         if (true) {\n                             for (var i=start; i< start+num_left; i++)\n                             {\n                                 //int binid = (int)(k1 * (info->prim_info[info->bvh->iprims[i]].centroid.v[axis] - cb->min.v[axis]));\n                                 var cen = primitives[i] * POINT_STRIDE;\n                                 if (   centroids[cen] < split_info.cb_left[0]\n                                     || centroids[cen] > split_info.cb_left[3]\n                                     || centroids[cen+1] < split_info.cb_left[1]\n                                     || centroids[cen+1] > split_info.cb_left[4]\n                                     || centroids[cen+2] < split_info.cb_left[2]\n                                     || centroids[cen+2] > split_info.cb_left[5])\n                                 {\n                                     debug (\"wrong centroid box\");\n                                 }\n                             }\n                              for (i=start+num_left; i<=end; i++)\n                             {\n                                 //int binid = (int)(k1 * (info->prim_info[info->bvh->iprims[i]].centroid.v[axis] - cb->min.v[axis]));\n                                 var cen = primitives[i] * POINT_STRIDE;\n                                 if (   centroids[cen] < split_info.cb_right[0]\n                                     || centroids[cen] > split_info.cb_right[3]\n                                     || centroids[cen+1] < split_info.cb_right[1]\n                                     || centroids[cen+1] > split_info.cb_right[4]\n                                     || centroids[cen+2] < split_info.cb_right[2]\n                                     || centroids[cen+2] > split_info.cb_right[5])\n                                 {\n                                     debug (\"wrong centroid box\");\n                                 }\n                             }\n                         }\n                         */\n\n\n    /* recurse */\n    //bvh_subdivide(bvh, child_idx, start, start + split_info.num_left - 1, split_info.vb_left, split_info.cb_left, transparent, depth+1);\n    //bvh_subdivide(bvh, child_idx + 1, start + split_info.num_left, end, split_info.vb_right, split_info.cb_right, transparent, depth+1);\n\n    //Iterative stack-based recursion for easier profiling\n    bvh.recursion_stack.push([bvh, child_idx + 1, start + split_info.num_left, end, split_info.vb_right, split_info.cb_right, transparent, depth + 1]);\n    bvh.recursion_stack.push([bvh, child_idx, start, start + split_info.num_left - 1, split_info.vb_left, split_info.cb_left, transparent, depth + 1]);\n\n  }\n\n\n  function compute_boxes(bvh) {\n\n    var boxv_o = bvh.boxv_o;\n    var boxc_o = bvh.boxc_o;\n    var boxv_t = bvh.boxv_t;\n    var boxc_t = bvh.boxc_t;\n\n    box_make_empty_0(boxv_o);\n    box_make_empty_0(boxc_o);\n    box_make_empty_0(boxv_t);\n    box_make_empty_0(boxc_t);\n\n    var c = bvh.centroids;\n    var b = bvh.finfo.boxes;\n    var boxStride = bvh.finfo.boxStride;\n\n    for (var i = 0, iEnd = bvh.prim_count; i < iEnd; i++) {\n\n      // find which primitive in the sorted list to use next\n      var p = bvh.primitives[i];\n      box_get_centroid(c, 3 /*POINT_STRIDE*/ * p, b, boxStride * p);\n\n      if (i >= bvh.first_transparent) {\n\n        box_add_point_0(boxc_t, c, 3 /*POINT_STRIDE*/ * p);\n        box_add_box_0(boxv_t, b, boxStride * p);\n\n      } else {\n\n        box_add_point_0(boxc_o, c, 3 /*POINT_STRIDE*/ * p);\n        box_add_box_0(boxv_o, b, boxStride * p);\n\n      }\n    }\n\n    box_get_size(cbdiag, 0, bvh.boxv_o, 0);\n    var maxsz = Math.max(cbdiag[0], cbdiag[1], cbdiag[2]);\n    bvh.scene_epsilon = BOX_EPSILON * maxsz;\n  }\n\n\n\n\n  //Module exports\n  return {\n    bvh_subdivide: bvh_subdivide,\n    compute_boxes: compute_boxes,\n    box_area: box_area };\n\n\n}();\n\n\nfunction FragInfo(fragments, materialDefs) {\n  //Invariants\n  this.boxes = fragments.boxes; //Array of Float32, each bbox is a sextuplet\n  this.polygonCounts = fragments.polygonCounts;\n  this.hasPolygonCounts = !!this.polygonCounts;\n  this.materials = fragments.materials; //material indices (we need to know which fragments are transparent)\n  this.materialDefs = materialDefs;\n  this.count = fragments.length;\n  this.boxStride = 6;\n  this.wantSort = true;\n}\n\nFragInfo.prototype.getCount = function () {\n  return this.count;\n};\n\nFragInfo.prototype.isTransparent = function (i) {\n  return this.materialDefs && this.materialDefs[this.materials[i]] ? this.materialDefs[this.materials[i]].transparent : false;\n};\n\nFragInfo.prototype.getPolygonCount = function (i) {\n  return this.polygonCounts[i];\n};\n\n/**\n    * Given a list of LMV fragments, builds a spatial index for view-dependent traversal and hit testing.\n    * @constructor\n    */\nexport function BVHBuilder(fragments, materialDefs, finfo) {\n\n  //Initialize the inputs (bboxes, transparent flags, polygon counts)\n  this.finfo = finfo || new FragInfo(fragments, materialDefs);\n\n  this.prim_count = this.finfo.getCount();\n\n  //To be initialized by build() function based on build options\n  this.frags_per_leaf_node = -1;\n  this.frags_per_inner_node = -1;\n  this.nodes = null;\n\n  this.work_buf = new ArrayBuffer(this.prim_count * 4);\n  this.sort_prims = new Int32Array(this.work_buf);\n\n  //Allocate memory buffer for re-ordered fragment primitive indices,\n  //which will be sorted by node ownership and point to the index\n  //of the fragment data.\n  this.primitives = new Int32Array(this.prim_count);\n\n  //The BVH split algorithm works based on centroids of the bboxes.\n  this.centroids = new Float32Array(POINT_STRIDE * this.prim_count);\n\n  //BBoxes and centroid bboxes for opaque and transparent primitive sets\n  this.boxv_o = new Float32Array(6);\n  this.boxc_o = new Float32Array(6);\n  this.boxv_t = new Float32Array(6);\n  this.boxc_t = new Float32Array(6);\n\n\n  this.recursion_stack = [];\n}\n\nBVHBuilder.prototype.sortPrimitives = function (wantSort) {\n\n  var prim_sizes = new Float32Array(this.work_buf);\n  var primitives = this.primitives;\n  var numTransparent = 0;\n\n  //Sort the input objects by size\n  //We assume all LMV SVF files come\n  //sorted by draw priority already, so in theory we can skip this step.\n  //This turns out to not be the case - some fragments are badly sorted.\n  //Part of the reason may be that the surface area of the geometry itself,\n  //not its bounding box, is used to sort by physical size in LMVTK.\n  //In any case, the transparent objects do not always come last (bug in LMVTK?),\n  //so we still have to pull them out to the end of the list, so some sorting\n  //takes place no matter how this value is set.\n  // Turning this option on will mean that the BVH building process as a whole\n  // will be 45% to 75% longer, for large models - full sorting takes awhile.\n  // In absolute terms this is an increase of a maximum of 1.15 seconds for a\n  // very large model (one with over 1 million fragments, i.e., mesh instances).\n  // This cost may be acceptable. For smaller models - \"only\" 70K instances -\n  // the cost is 0.05 seconds. For 130k instances, 0.1 seconds. The rise is\n  // slightly more than linear, but not excessively slow. I think it's acceptable,\n  // given that the cost is still much less than loading even a small part of the\n  // model.\n  var doSort = wantSort;\n\n  // console.log(\"BVH sort is \" + WANT_SORT);\n\n  var i, iEnd;\n  for (i = 0, iEnd = this.prim_count; i < iEnd; i++) {\n\n    //Start with trivial 1:1 order of the indices array\n    primitives[i] = i;\n\n    var transparent = this.finfo.isTransparent(i);\n\n    if (transparent)\n    numTransparent++;\n\n    if (doSort) {\n      prim_sizes[i] = BVHModule.box_area(this.finfo.boxes, this.finfo.boxStride * i);\n\n      //In order to make transparent objects appear last,\n      //we give them a negative size, so that they are naturally\n      //sorted last in the sort by size.\n      if (transparent)\n      prim_sizes[i] = -prim_sizes[i];\n    } else {\n      //We still need the transparency flag for the loop below\n      //where we find the last opaque item, but we can\n      //short-cut the size computation.\n      prim_sizes[i] = transparent ? -1 : 1;\n    }\n  }\n\n\n  if (doSort) {\n    Array.prototype.sort.call(this.primitives, function (a, b) {\n      return prim_sizes[b] - prim_sizes[a];\n    });\n  } else {\n    if (numTransparent && numTransparent < this.prim_count) {\n\n      var tmpTransparent = new Int32Array(numTransparent);\n      var oidx = 0,tidx = 0;\n\n      for (i = 0, iEnd = this.prim_count; i < iEnd; i++) {\n        if (prim_sizes[i] >= 0)\n        primitives[oidx++] = primitives[i];else\n\n        tmpTransparent[tidx++] = primitives[i];\n      }\n\n      primitives.set(tmpTransparent, this.prim_count - numTransparent);\n    }\n  }\n\n  this.first_transparent = this.prim_count - numTransparent;\n};\n\n\nBVHBuilder.prototype.build = function (options) {\n  //Kick off the BVH build.\n\n  var useSlimNodes = options && !!options.useSlimNodes;\n\n  var self = this;\n  function assign_option(name, defaultVal) {\n    if (options.hasOwnProperty(name))\n    self[name] = options[name];else\n\n    self[name] = defaultVal;\n  }\n\n  // note: frags_per_leaf_node does *not* make an upper limit for the number of frags per node.\n\n  //options for build optimized for rasterization renderer scenes\n  if (useSlimNodes) {\n    assign_option(\"frags_per_leaf_node\", 1);\n    assign_option(\"frags_per_inner_node\", 0);\n    assign_option(\"frags_per_leaf_node_transparent\", 1);\n    assign_option(\"frags_per_inner_node_transparent\", 0);\n    assign_option(\"max_polys_per_node\", Infinity);\n  } else {\n    var multiplier = options.isWeakDevice ? 0.5 : 1.0;\n\n    //TODO: tune these constants\n    assign_option(\"frags_per_leaf_node\", 0 | 256 * multiplier);\n    //Placing fragments at inner nodes places more emphasis on bigger objects during tree traversal\n    //but it can only be done for opaque objects. Transparent objects have to be strictly back to front\n    //traversal regardless of size, unless a unified traversal\n    assign_option(\"frags_per_inner_node\", 0 | this.frags_per_leaf_node);\n    assign_option(\"frags_per_leaf_node_transparent\", this.frags_per_leaf_node);\n    assign_option(\"frags_per_inner_node_transparent\", 0);\n    assign_option(\"max_polys_per_node\", 0 | 20000 * multiplier);\n  }\n\n  //Reuse existing node array if there\n  if (this.nodes && this.nodes.is_lean_node == useSlimNodes)\n  this.nodes.nodeCount = 0;else\n  {\n    var est_nodes = this.prim_count / this.frags_per_leaf_node;\n    var num_nodes = 1;\n    while (num_nodes < est_nodes) {\n      num_nodes *= 2;}\n\n    this.nodes = new NodeArray(num_nodes, options ? options.useSlimNodes : false);\n  }\n\n  this.sortPrimitives(this.finfo.wantSort);\n\n  BVHModule.compute_boxes(this);\n\n  //Init the root nodes at 0 for opaque\n  //and 1 for transparent objects\n  var root = this.nodes.nextNodes(2);\n\n  //Now kick off the recursive tree build\n\n  //Opaque\n  BVHModule.bvh_subdivide(this, root, 0, this.first_transparent - 1, this.boxv_o, this.boxc_o, false, 0);\n\n  var a;\n  while (this.recursion_stack.length) {\n    a = this.recursion_stack.pop();\n    BVHModule.bvh_subdivide(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]);\n  }\n\n  //Transparent\n  BVHModule.bvh_subdivide(this, root + 1, this.first_transparent, this.prim_count - 1, this.boxv_t, this.boxc_t, true, 0);\n\n  while (this.recursion_stack.length) {\n    a = this.recursion_stack.pop();\n    BVHModule.bvh_subdivide(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7]);\n  }\n};","import { getVertexCount, enumMeshTriangles, enumMeshVertices } from './VertexEnumerator';\nimport { LmvVector3 } from './LmvVector3';\nimport { LmvBox3 } from './LmvBox3';\n\n\n//It's important for this function to remain outside the closure of remapVertices.\n//Otherwise V8 will try to JIT optimize it for every mesh, which make things very slow.\nfunction getVertexIndex(v, i, uniqueV, SCALE, remap) {\n  var x = 0 | v.x * SCALE;\n  var y = 0 | v.y * SCALE;\n  var z = 0 | v.z * SCALE;\n\n  var mx = uniqueV[x];\n  if (!mx) {\n    uniqueV[x] = mx = {};\n  }\n\n  var my = mx[y];\n  if (!my) {\n    mx[y] = my = {};\n  }\n\n  var mz = my[z];\n  if (mz === undefined) {\n    my[z] = mz = i;\n  }\n\n  remap[i] = mz;\n}\n\n\nfunction remapVertices(geom, boundingBox) {\n  //de-duplicate vertices based on position only (ignoring normals)\n\n  var remap = [];\n  var uniqueV = {};\n\n  var boxScale = 1.0;\n  if (geom.boundingBox || boundingBox) {\n    var bbox = new LmvBox3().copy(geom.boundingBox || boundingBox);\n    var sz = bbox.size();\n    boxScale = Math.max(sz.x, Math.max(sz.y, sz.z));\n  }\n\n  var SCALE = (1 << 16) / boxScale; //snap scale, assuming unit mesh\n\n  function remapcb(v, n, uv, i) {\n    getVertexIndex(v, i, uniqueV, SCALE, remap);\n  }\n\n  enumMeshVertices(geom, remapcb);\n\n  return remap;\n}\n\n\nfunction transformVertices(geom, toWorld) {\n\n  var vbuf = new Float32Array(3 * getVertexCount(geom));\n\n  function cb(v, n, uv, i) {\n    vbuf[3 * i] = v.x;\n    vbuf[3 * i + 1] = v.y;\n    vbuf[3 * i + 2] = v.z;\n  }\n\n  enumMeshVertices(geom, cb, toWorld);\n\n  return vbuf;\n}\n\nexport function createWireframe(geom, toWorld, boundingBox, wantAllTriangleEdges) {\n\n  if (geom.isLines)\n  return;\n\n  if (geom.iblines)\n  return;\n\n  //find unique vertices\n  var remap = remapVertices(geom, boundingBox);\n\n  //get vertices in world space -- we need this for\n  //correct angle calculations\n  var worldVerts = transformVertices(geom, toWorld);\n\n  //loop over all triangles, keeping track of\n  //edges that seem important\n  var seenEdges = {};\n\n  var edgeIB = [];\n\n  var _v1 = new LmvVector3();\n  var _v2 = new LmvVector3();\n  var _v3 = new LmvVector3();\n  var _n1 = new LmvVector3();\n  var _n2 = new LmvVector3();\n\n  function getV(i, v) {\n    v.x = worldVerts[3 * i];\n    v.y = worldVerts[3 * i + 1];\n    v.z = worldVerts[3 * i + 2];\n  }\n\n  function getNormal(i1, i2, i3, n) {\n    getV(i1, _v1);\n    getV(i2, _v2);\n    getV(i3, _v3);\n\n    _v2.sub(_v1);\n    _v3.sub(_v1);\n    _v2.cross(_v3);\n\n    n.copy(_v2).normalize();\n  }\n\n  function doOneEdge(i1orig, i2orig, opp1orig) {\n\n    var i1 = remap[i1orig];\n    var i2 = remap[i2orig];\n    var opp1 = remap[opp1orig];\n\n    //Ignore degenerates\n    if (i1 === i2 || i1 === opp1 || i2 === opp1)\n    return;\n\n    var reversed = false;\n    if (i1 > i2) {\n      var tmp = i1;\n      i1 = i2;\n      i2 = tmp;\n      reversed = true;\n    }\n\n    var e1 = seenEdges[i1];\n    if (e1) {\n      var opp2orig = e1[i2];\n      if (opp2orig === undefined) {\n        e1[i2] = reversed ? -opp1orig - 1 : opp1orig;\n      } else {\n        //We now know two triangles that share this edge,\n        //we can check if it's important\n\n        if (!wantAllTriangleEdges) {\n          //Use original indices, so that we\n          //can do the math with the correct winding order\n          getNormal(i1orig, i2orig, opp1orig, _n1);\n\n          if (opp2orig < 0) {\n            getNormal(i2, i1, remap[-opp2orig - 1], _n2);\n          } else {\n            getNormal(i1, i2, remap[opp2orig], _n2);\n          }\n\n          var dot = _n1.dot(_n2);\n\n          if (Math.abs(dot) < 0.25) {\n            edgeIB.push(i1orig);\n            edgeIB.push(i2orig);\n          }\n        } else {\n          edgeIB.push(i1orig);\n          edgeIB.push(i2orig);\n        }\n\n        delete e1[i2];\n      }\n    } else {\n      seenEdges[i1] = {};\n      seenEdges[i1][i2] = opp1orig;\n    }\n  }\n\n  function tricb(vA, vB, vC, iA, iB, iC) {\n    doOneEdge(iA, iB, iC);\n    doOneEdge(iB, iC, iA);\n    doOneEdge(iC, iA, iB);\n  }\n\n  //find edges that have neighboring triangles at sharp angle\n  enumMeshTriangles(geom, tricb);\n\n  //process remaining edges (outer edges that only have one triangle)\n\n  for (var i1 in seenEdges) {\n    for (var i2 in seenEdges[i1]) {\n      edgeIB.push(parseInt(i1));\n      edgeIB.push(parseInt(i2));\n    }\n  }\n\n\n  if (edgeIB.length > 1) {\n    geom.iblines = new Uint16Array(edgeIB.length);\n    geom.iblines.set(edgeIB);\n  }\n\n  /*\n        for (var i=0; i<geom.ib.length; i++) {\n            geom.ib[i] = remap[geom.ib[i]];\n        }\n        */\n}","function _classCallCheck(instance, Constructor) {if (!(instance instanceof Constructor)) {throw new TypeError(\"Cannot call a class as a function\");}}function _defineProperties(target, props) {for (var i = 0; i < props.length; i++) {var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if (\"value\" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);}}function _createClass(Constructor, protoProps, staticProps) {if (protoProps) _defineProperties(Constructor.prototype, protoProps);if (staticProps) _defineProperties(Constructor, staticProps);return Constructor;}\nimport { utf16to8, utf8BlobToStr } from \"../../file-loaders/lmvtk/common/StringUtils\";\n\n\nexport var FlatStringStorage = /*#__PURE__*/function () {\n\n  function FlatStringStorage(initial) {_classCallCheck(this, FlatStringStorage);\n    if (initial) {\n      this.buf = initial.buf;\n      this.idx = initial.idx;\n      this.next = initial.next;\n    } else {\n      this.buf = new Uint8Array(256);\n      this.next = 0;\n      this.idx = [0];\n    }\n  }_createClass(FlatStringStorage, [{ key: \"allocate\", value: function allocate(\n\n    len) {\n      if (this.buf.length - this.next < len) {\n        var nsz = Math.max(this.buf.length * 3 / 2, this.buf.length + len);\n        var nb = new Uint8Array(nsz);\n        nb.set(this.buf);\n        this.buf = nb;\n      }\n    } }, { key: \"add\", value: function add(\n\n    s) {\n      if (s === null || typeof s === \"undefined\") {\n        return 0;\n      }\n\n      if (!s.length) {\n        this.idx.push(this.next);\n        return this.idx.length - 1;\n      }\n\n      var len = utf16to8(s, null);\n      this.allocate(len);\n      this.next += utf16to8(s, this.buf, this.next);\n      this.idx.push(this.next);\n      return this.idx.length - 1;\n    } }, { key: \"get\", value: function get(\n\n    i) {\n      if (!i) {\n        return undefined;\n      }\n\n      var start = this.idx[i - 1];\n      var end = this.idx[i];\n      if (start === end)\n      return \"\";\n      return utf8BlobToStr(this.buf, start, end - start);\n    } }, { key: \"flatten\", value: function flatten()\n\n    {\n      this.idx = arrayToBuffer(this.idx);\n      //TODO: we could also clip this.buf to the actually used size, but that requires reallocation\n    } }]);return FlatStringStorage;}();\n\n\n\n\n//\n// struct Node {\n//     int dbId;\n//     int parentDbId;\n//     int firstChild; //if negative it's a fragment list\n//     int numChildren;\n//     int flags;   \n// };\n// sizeof(Node) == 20\nvar SIZEOF_NODE = 5, //integers\nOFFSET_DBID = 0,\nOFFSET_PARENT = 1,\nOFFSET_FIRST_CHILD = 2,\nOFFSET_NUM_CHILD = 3,\nOFFSET_FLAGS = 4;\n\n// note: objectCount and fragmentCount are not used\nexport function InstanceTreeStorage(objectCount, fragmentCount) {\n\n  this.nodes = [];\n  this.nextNode = 0;\n\n  this.children = [];\n  this.nextChild = 0;\n\n  this.dbIdToIndex = {};\n\n  this.names = [];\n  this.s2i = {}; //duplicate string pool\n  this.strings = new FlatStringStorage();\n  this.nameSuffixes = []; //integers\n\n  //Occupy index zero so that we can use index 0 as undefined\n  this.getIndex(0);\n}\n\nInstanceTreeStorage.prototype.getIndex = function (dbId) {\n\n  var index = this.dbIdToIndex[dbId];\n\n  if (index)\n  return index;\n\n  index = this.nextNode++;\n\n  //Allocate space for new node\n  this.nodes.push(dbId); //store the dbId as first integer in the Node structure\n  //Add four blank integers to be filled by setNode\n  for (var i = 1; i < SIZEOF_NODE; i++) {\n    this.nodes.push(0);}\n\n  this.dbIdToIndex[dbId] = index;\n\n  return index;\n};\n\nInstanceTreeStorage.prototype.setNode = function (dbId, parentDbId, name, flags, childrenIds, fragIds) {\n\n  var index = this.getIndex(dbId);\n\n  var baseOffset = index * SIZEOF_NODE;\n\n  var numChildren = childrenIds.length;\n  var hasFragments = fragIds && fragIds.length;\n  if (hasFragments) {\n    numChildren += fragIds.length;\n  }\n\n  this.nodes[baseOffset + OFFSET_PARENT] = parentDbId;\n  this.nodes[baseOffset + OFFSET_FIRST_CHILD] = this.nextChild;\n  this.nodes[baseOffset + OFFSET_NUM_CHILD] = hasFragments ? -numChildren : numChildren;\n  this.nodes[baseOffset + OFFSET_FLAGS] = flags;\n\n  var i;\n  for (i = 0; i < childrenIds.length; i++) {\n    this.children[this.nextChild++] = this.getIndex(childrenIds[i]);}\n\n  //Store fragIds as negative numbers so we can differentiate them when looking through\n  //the array later.\n  if (hasFragments) {\n    for (i = 0; i < fragIds.length; i++) {\n      this.children[this.nextChild++] = -fragIds[i] - 1;} //index 0 stored as -1, etc., since 0 is not negative\n  }\n\n  if (this.nextChild > this.children.length) {\n    // TODO: this code may run in a worker, replace console with something else\n    console.error(\"Child index out of bounds -- should not happen\");\n  }\n\n  this.processName(index, name);\n};\n\nInstanceTreeStorage.prototype.processName = function (index, name) {\n\n  //Attempt to decompose the name into a base string + integer,\n  //like for example \"Base Wall [12345678]\" or \"Crank Shaft:1\"\n  //We will try to reduce memory usage by storing \"Base Wall\" just once.\n  var base;\n  var suffix;\n\n  //Try Revit style [1234] first\n  var iStart = -1;\n  var iEnd = -1;\n\n  if (name) {//name should not be empty, but hey, it happens.\n    iEnd = name.lastIndexOf(\"]\");\n    iStart = name.lastIndexOf(\"[\");\n\n    //Try Inventor style :1234\n    if (iStart === -1 || iEnd === -1) {\n      iStart = name.lastIndexOf(\":\");\n      iEnd = name.length;\n    }\n  }\n\n  //TODO: Any other separators? What does AutoCAD use?\n\n  if (iStart >= 0 && iEnd > iStart) {\n    base = name.slice(0, iStart + 1);\n    var ssuffix = name.slice(iStart + 1, iEnd);\n    suffix = parseInt(ssuffix, 10);\n\n    //make sure we get the same thing back when\n    //converting back to string, otherwise don't \n    //decompose it.\n    if (!suffix || suffix + \"\" !== ssuffix) {\n      base = name;\n      suffix = 0;\n    }\n  } else {\n    base = name;\n    suffix = 0;\n  }\n\n\n  var idx = this.s2i[base];\n  if (idx === undefined) {\n    idx = this.strings.add(base);\n    this.s2i[base] = idx;\n  }\n\n  this.names[index] = idx;\n  this.nameSuffixes[index] = suffix;\n};\n\n\nfunction arrayToBuffer(a) {\n  var b = new Int32Array(a.length);\n  b.set(a);\n  return b;\n}\n\n// note none of these arguments are used\nInstanceTreeStorage.prototype.flatten = function (dbId, parentDbId, name, flags, childrenIds, isLeaf) {\n  this.nodes = arrayToBuffer(this.nodes);\n  this.children = arrayToBuffer(this.children);\n  this.names = arrayToBuffer(this.names);\n  this.nameSuffixes = arrayToBuffer(this.nameSuffixes);\n  this.strings.flatten();\n  this.s2i = null; //we don't need this temporary map once we've built the strings list\n};\n\n\n\nexport function InstanceTreeAccess(nodeArray, rootId, nodeBoxes) {\n  this.nodes = nodeArray.nodes;\n  this.children = nodeArray.children;\n  this.dbIdToIndex = nodeArray.dbIdToIndex;\n  this.names = nodeArray.names;\n  this.nameSuffixes = nodeArray.nameSuffixes;\n  this.strings = new FlatStringStorage(nodeArray.strings);\n  this.rootId = rootId;\n  this.numNodes = this.nodes.length / SIZEOF_NODE;\n  this.visibleIds = null;\n\n  // only used if bboxes are precomputed\n  this.nodeBoxes = nodeBoxes;\n}\n\nInstanceTreeAccess.prototype.getNumNodes = function () {\n  return this.numNodes;\n};\n\nInstanceTreeAccess.prototype.getIndex = function (dbId) {\n  return this.dbIdToIndex[dbId];\n};\n\nInstanceTreeAccess.prototype.name = function (dbId, includeCount) {\n  var idx = this.dbIdToIndex[dbId];\n  var base = this.strings.get(this.names[idx]);\n  var suffix = this.nameSuffixes[idx];\n  var name;\n  if (suffix) {\n    //NOTE: update this logic if more separators are supported in processName above\n    var lastChar = base.charAt(base.length - 1);\n    if (lastChar === \"[\")\n    name = base + suffix + \"]\";else\n\n    name = base + suffix;\n  } else {\n    name = base;\n  }\n\n  if (includeCount) {\n    if (!this.childCounts) {\n      this.computeChildCounts();\n    }\n    if (this.childCounts[dbId] > 0) {\n      name += \" (\" + this.childCounts[dbId] + \")\";\n    }\n  }\n\n  return name;\n};\n\nInstanceTreeAccess.prototype.getParentId = function (dbId) {\n  var idx = this.dbIdToIndex[dbId];\n  return this.nodes[idx * SIZEOF_NODE + OFFSET_PARENT];\n};\n\nInstanceTreeAccess.prototype.getNodeFlags = function (dbId) {\n  var idx = this.dbIdToIndex[dbId];\n  return this.nodes[idx * SIZEOF_NODE + OFFSET_FLAGS];\n};\n\nInstanceTreeAccess.prototype.setNodeFlags = function (dbId, flags) {\n  var idx = this.dbIdToIndex[dbId];\n  if (idx) {\n    this.nodes[idx * SIZEOF_NODE + OFFSET_FLAGS] = flags;\n  }\n};\n\nInstanceTreeAccess.prototype.getNumChildren = function (dbId) {\n\n  var idx = this.dbIdToIndex[dbId];\n  var numChildren = this.nodes[idx * SIZEOF_NODE + OFFSET_NUM_CHILD];\n\n  //If numChildren is non-negative, then all children are nodes (not fragments)\n  if (numChildren >= 0)\n  return numChildren;\n\n  //Node has mixed fragments and child nodes, so we have to loop and collect just the node children\n  var firstChild = this.nodes[idx * SIZEOF_NODE + OFFSET_FIRST_CHILD];\n\n  numChildren = Math.abs(numChildren);\n\n  var numNodeChildren = 0;\n\n  for (var i = 0; i < numChildren; i++) {\n    var childIdx = this.children[firstChild + i];\n\n    //did we reach the fragment ids sub-list?\n    if (childIdx < 0)\n    break;\n\n    numNodeChildren++;\n  }\n\n  return numNodeChildren;\n};\n\nInstanceTreeAccess.prototype.getNumFragments = function (dbId) {\n  var idx = this.dbIdToIndex[dbId];\n\n  var numChildren = this.nodes[idx * SIZEOF_NODE + OFFSET_NUM_CHILD];\n\n  //If numChildren is non-negative, there aren't any fragments belonging to this node\n  if (numChildren >= 0)\n  return 0;\n\n  //Node has mixed fragments and child nodes, so we have to loop and collect just the node children\n  var firstChild = this.nodes[idx * SIZEOF_NODE + OFFSET_FIRST_CHILD];\n\n  numChildren = Math.abs(numChildren);\n\n  var numFragChildren = 0;\n\n  //Iterate backwards, because fragment children are at the back of the children list\n  for (var i = numChildren - 1; i >= 0; i--) {\n    var childIdx = this.children[firstChild + i];\n\n    //did we reach the inner node children ids sub-list?\n    if (childIdx >= 0)\n    break;\n\n    numFragChildren++;\n  }\n\n  return numFragChildren;\n};\n\n// NOTE: This can only be used if precomputed bboxes are available.\nInstanceTreeAccess.prototype.getNodeBox = function (dbId, dst) {\n  var idx = this.getIndex(dbId);\n  var off = idx * 6;\n  for (var i = 0; i < 6; i++) {\n    dst[i] = this.nodeBoxes[off + i];}\n};\n\n//Returns an array containing the dbIds of all objects\n//that are physically represented in the scene. Not all\n//objects in the property database occur physically in each graphics viewable.\nInstanceTreeAccess.prototype.getVisibleIds = function () {\n  if (!this.visibleIds) {\n    this.visibleIds = Object.keys(this.dbIdToIndex).map(function (k) {return parseInt(k);});\n  }\n\n  return this.visibleIds;\n};\n\n\nInstanceTreeAccess.prototype.enumNodeChildren = function (dbId, callback) {\n  var idx = this.dbIdToIndex[dbId];\n  var firstChild = this.nodes[idx * SIZEOF_NODE + OFFSET_FIRST_CHILD];\n  var numChildren = this.nodes[idx * SIZEOF_NODE + OFFSET_NUM_CHILD];\n\n  numChildren = Math.abs(numChildren);\n\n  for (var i = 0; i < numChildren; i++) {\n    var childIdx = this.children[firstChild + i];\n\n    //did we reach the fragment ids sub-list?\n    if (childIdx < 0)\n    break;\n\n    var childDbId = this.nodes[childIdx * SIZEOF_NODE + OFFSET_DBID];\n    if (callback(childDbId, dbId, idx)) {\n      return dbId;\n    }\n  }\n};\n\nInstanceTreeAccess.prototype.enumNodeFragments = function (dbId, callback) {\n  var idx = this.dbIdToIndex[dbId];\n  var firstChild = this.nodes[idx * SIZEOF_NODE + OFFSET_FIRST_CHILD];\n  var numChildren = this.nodes[idx * SIZEOF_NODE + OFFSET_NUM_CHILD];\n\n  //If numChildren is negative, it means there are fragments in the node\n  if (numChildren < 0) {\n    numChildren = -numChildren;\n    for (var i = 0; i < numChildren; i++) {\n      var childIdx = this.children[firstChild + i];\n\n      //skip past children that are inner nodes (not fragments)\n      if (childIdx > 0)\n      continue;\n\n      //Convert fragId from -1 based negative back to the actual fragId\n      if (callback(-childIdx - 1, dbId, idx)) {\n        return dbId;\n      }\n    }\n  }\n};\n\nInstanceTreeAccess.prototype.computeBoxes = function (fragBoxes) {\n\n  if (!this.nodeBoxes) {\n    this.nodeBoxes = new Float32Array(6 * this.numNodes);\n  }\n\n  var nodeAccess = this;\n  var idx = nodeAccess.getIndex(nodeAccess.rootId);\n  var nodeBoxes = nodeAccess.nodeBoxes;\n\n  function traverseChildren(child_dbId, parentDbID, parentIdx) {\n\n    var childIdx = nodeAccess.getIndex(child_dbId);\n\n    //Recurse, then add all child boxes to make this node's box\n    computeTreeBBoxesRec(child_dbId, childIdx);\n\n    var box_offset = parentIdx * 6;\n    var child_box_offset = childIdx * 6;\n    for (var k = 0; k < 3; k++) {\n      if (nodeBoxes[box_offset + k] > nodeBoxes[child_box_offset + k])\n      nodeBoxes[box_offset + k] = nodeBoxes[child_box_offset + k];\n      if (nodeBoxes[box_offset + k + 3] < nodeBoxes[child_box_offset + k + 3])\n      nodeBoxes[box_offset + k + 3] = nodeBoxes[child_box_offset + k + 3];\n    }\n  }\n\n  function traverseFragments(fragId, dbId, idx) {\n    var frag_box_offset = fragId * 6;\n    var box_offset = idx * 6;\n\n    for (var k = 0; k < 3; k++) {\n      if (nodeBoxes[box_offset + k] > fragBoxes[frag_box_offset + k])\n      nodeBoxes[box_offset + k] = fragBoxes[frag_box_offset + k];\n      if (nodeBoxes[box_offset + k + 3] < fragBoxes[frag_box_offset + k + 3])\n      nodeBoxes[box_offset + k + 3] = fragBoxes[frag_box_offset + k + 3];\n    }\n  }\n\n  function computeTreeBBoxesRec(dbId, idx) {\n\n    var box_offset = idx * 6;\n    nodeBoxes[box_offset] = nodeBoxes[box_offset + 1] = nodeBoxes[box_offset + 2] = Infinity;\n    nodeBoxes[box_offset + 3] = nodeBoxes[box_offset + 4] = nodeBoxes[box_offset + 5] = -Infinity;\n\n    if (nodeAccess.getNumChildren(dbId)) {\n      nodeAccess.enumNodeChildren(dbId, traverseChildren, true);\n    }\n\n    //Leaf node -- don't think it's possible for a node to have\n    //both children and leaf fragments, but we do handle that here.\n    if (nodeAccess.getNumFragments(dbId)) {\n      nodeAccess.enumNodeFragments(dbId, traverseFragments);\n    }\n\n  }\n\n  computeTreeBBoxesRec(nodeAccess.rootId, idx);\n};\n\nInstanceTreeAccess.prototype.computeChildCounts = function () {\n  if (!this.childCounts) {\n    this.childCounts = new Uint32Array(this.numNodes);\n  }\n\n  var nodeAccess = this;\n  var idx = nodeAccess.getIndex(nodeAccess.rootId);\n  var childCounts = nodeAccess.childCounts;\n\n  function traverseChildren(child_dbId, parentDbID, parentIdx) {\n\n    var childIdx = nodeAccess.getIndex(child_dbId);\n\n    //Recurse, then add all child boxes to make this node's box\n    var count = computeChildCountsRec(child_dbId, childIdx);\n\n    childCounts[parentDbID] += count;\n  }\n\n\n  function computeChildCountsRec(dbId, idx) {\n\n    var flags = nodeAccess.getNodeFlags(dbId);\n    var myCount = 0;\n\n    if (flags === 0x4 /*NODE_TYPE_COMPOSITE*/) {\n        //If it's a composite node, treat it as a single\n        //opaque object whose contents don't matter to the user\n        //for counting purposes.\n        myCount = 1;\n      } else {\n\n      if (nodeAccess.getNumChildren(dbId)) {\n        nodeAccess.enumNodeChildren(dbId, traverseChildren, true);\n      }\n\n      //Leaf node\n      if (nodeAccess.getNumFragments(dbId)) {\n        myCount = 1;\n      }\n    }\n\n    return myCount + childCounts[dbId];\n  }\n\n  computeChildCountsRec(nodeAccess.rootId, idx);\n};","/**\n * @author bhouston / http://exocortex.com\n * @author WestLangley / http://github.com/WestLangley\n */\n/* Pruned version of THREE.Box3, for use in the LMV web worker */\n\nimport { LmvVector3 } from './LmvVector3';\n\nexport var LmvBox3 = function LmvBox3(min, max) {\n\n  this.min = min !== undefined ? min : new LmvVector3(Infinity, Infinity, Infinity);\n  this.max = max !== undefined ? max : new LmvVector3(-Infinity, -Infinity, -Infinity);\n\n};\n\nLmvBox3.prototype = {\n\n  constructor: LmvBox3,\n\n  set: function set(min, max) {\n\n    this.min.copy(min);\n    this.max.copy(max);\n\n    return this;\n\n  },\n\n  setFromPoints: function setFromPoints(points) {\n\n    this.makeEmpty();\n\n    for (var i = 0, il = points.length; i < il; i++) {\n\n      this.expandByPoint(points[i]);\n\n    }\n\n    return this;\n\n  },\n\n  setFromArray: function setFromArray(array, offset) {\n\n    this.min.x = array[offset];\n    this.min.y = array[offset + 1];\n    this.min.z = array[offset + 2];\n\n    this.max.x = array[offset + 3];\n    this.max.y = array[offset + 4];\n    this.max.z = array[offset + 5];\n\n    return this;\n\n  },\n\n  copyToArray: function copyToArray(array, offset) {\n\n    array[offset] = this.min.x;\n    array[offset + 1] = this.min.y;\n    array[offset + 2] = this.min.z;\n\n    array[offset + 3] = this.max.x;\n    array[offset + 4] = this.max.y;\n    array[offset + 5] = this.max.z;\n\n  },\n\n  setFromCenterAndSize: function () {\n\n    var v1 = new LmvVector3();\n\n    return function (center, size) {\n\n      var halfSize = v1.copy(size).multiplyScalar(0.5);\n\n      this.min.copy(center).sub(halfSize);\n      this.max.copy(center).add(halfSize);\n\n      return this;\n\n    };\n\n  }(),\n\n  clone: function clone() {\n\n    return new this.constructor().copy(this);\n\n  },\n\n  copy: function copy(box) {\n\n    this.min.copy(box.min);\n    this.max.copy(box.max);\n\n    return this;\n\n  },\n\n  makeEmpty: function makeEmpty() {\n\n    this.min.x = this.min.y = this.min.z = Infinity;\n    this.max.x = this.max.y = this.max.z = -Infinity;\n\n    return this;\n\n  },\n\n  empty: function empty() {\n\n    // this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes\n\n    return this.max.x < this.min.x || this.max.y < this.min.y || this.max.z < this.min.z;\n\n  },\n\n  center: function center(optionalTarget) {\n\n    var result = optionalTarget || new LmvVector3();\n    return result.addVectors(this.min, this.max).multiplyScalar(0.5);\n\n  },\n\n  size: function size(optionalTarget) {\n\n    var result = optionalTarget || new LmvVector3();\n    return result.subVectors(this.max, this.min);\n\n  },\n\n  expandByPoint: function expandByPoint(point) {\n\n    this.min.min(point);\n    this.max.max(point);\n\n    return this;\n\n  },\n\n  expandByVector: function expandByVector(vector) {\n\n    this.min.sub(vector);\n    this.max.add(vector);\n\n    return this;\n\n  },\n\n  expandByScalar: function expandByScalar(scalar) {\n\n    this.min.addScalar(-scalar);\n    this.max.addScalar(scalar);\n\n    return this;\n\n  },\n\n  containsPoint: function containsPoint(point) {\n\n    if (point.x < this.min.x || point.x > this.max.x ||\n    point.y < this.min.y || point.y > this.max.y ||\n    point.z < this.min.z || point.z > this.max.z) {\n\n      return false;\n\n    }\n\n    return true;\n\n  },\n\n  containsBox: function containsBox(box) {\n\n    if (this.min.x <= box.min.x && box.max.x <= this.max.x &&\n    this.min.y <= box.min.y && box.max.y <= this.max.y &&\n    this.min.z <= box.min.z && box.max.z <= this.max.z) {\n\n      return true;\n\n    }\n\n    return false;\n\n  },\n\n  getParameter: function getParameter(point, optionalTarget) {\n\n    // This can potentially have a divide by zero if the box\n    // has a size dimension of 0.\n\n    var result = optionalTarget || new LmvVector3();\n\n    return result.set(\n    (point.x - this.min.x) / (this.max.x - this.min.x),\n    (point.y - this.min.y) / (this.max.y - this.min.y),\n    (point.z - this.min.z) / (this.max.z - this.min.z));\n\n\n  },\n\n  isIntersectionBox: function isIntersectionBox(box) {\n\n    // using 6 splitting planes to rule out intersections.\n\n    if (box.max.x < this.min.x || box.min.x > this.max.x ||\n    box.max.y < this.min.y || box.min.y > this.max.y ||\n    box.max.z < this.min.z || box.min.z > this.max.z) {\n\n      return false;\n\n    }\n\n    return true;\n\n  },\n\n  clampPoint: function clampPoint(point, optionalTarget) {\n\n    var result = optionalTarget || new LmvVector3();\n    return result.copy(point).clamp(this.min, this.max);\n\n  },\n\n  distanceToPoint: function () {\n\n    var v1 = new LmvVector3();\n\n    return function (point) {\n\n      var clampedPoint = v1.copy(point).clamp(this.min, this.max);\n      return clampedPoint.sub(point).length();\n\n    };\n\n  }(),\n\n  intersect: function intersect(box) {\n\n    this.min.max(box.min);\n    this.max.min(box.max);\n\n    return this;\n\n  },\n\n  union: function union(box) {\n\n    this.min.min(box.min);\n    this.max.max(box.max);\n\n    return this;\n\n  },\n\n  applyMatrix4: function () {\n\n    var points = [\n    new LmvVector3(),\n    new LmvVector3(),\n    new LmvVector3(),\n    new LmvVector3(),\n    new LmvVector3(),\n    new LmvVector3(),\n    new LmvVector3(),\n    new LmvVector3()];\n\n\n    return function (matrix) {\n\n      // NOTE: I am using a binary pattern to specify all 2^3 combinations below\n      points[0].set(this.min.x, this.min.y, this.min.z).applyMatrix4(matrix); // 000\n      points[1].set(this.min.x, this.min.y, this.max.z).applyMatrix4(matrix); // 001\n      points[2].set(this.min.x, this.max.y, this.min.z).applyMatrix4(matrix); // 010\n      points[3].set(this.min.x, this.max.y, this.max.z).applyMatrix4(matrix); // 011\n      points[4].set(this.max.x, this.min.y, this.min.z).applyMatrix4(matrix); // 100\n      points[5].set(this.max.x, this.min.y, this.max.z).applyMatrix4(matrix); // 101\n      points[6].set(this.max.x, this.max.y, this.min.z).applyMatrix4(matrix); // 110\n      points[7].set(this.max.x, this.max.y, this.max.z).applyMatrix4(matrix); // 111\n\n      this.makeEmpty();\n      this.setFromPoints(points);\n\n      return this;\n\n    };\n\n  }(),\n\n  translate: function translate(offset) {\n\n    this.min.add(offset);\n    this.max.add(offset);\n\n    return this;\n\n  },\n\n  equals: function equals(box) {\n\n    return box.min.equals(this.min) && box.max.equals(this.max);\n\n  } };","/**\n * @author mrdoob / http://mrdoob.com/\n * @author supereggbert / http://www.paulbrunt.co.uk/\n * @author philogb / http://blog.thejit.org/\n * @author jordi_ros / http://plattsoft.com\n * @author D1plo1d / http://github.com/D1plo1d\n * @author alteredq / http://alteredqualia.com/\n * @author mikael emtinger / http://gomo.se/\n * @author timknip / http://www.floorplanner.com/\n * @author bhouston / http://exocortex.com\n * @author WestLangley / http://github.com/WestLangley\n */\n/* Pruned version of THREE.Matrix4, for use in the LMV web worker */\n\nimport { LmvVector3 } from './LmvVector3';\n\nexport var LmvMatrix4 = function LmvMatrix4(useDoublePrecision) {\n\n  if (useDoublePrecision) {\n\n    this.elements = new Float64Array([\n\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1]);\n\n\n\n  } else {\n\n    this.elements = new Float32Array([\n\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1]);\n\n\n\n  }\n\n  this.isDoublePrecision = !!useDoublePrecision;\n\n};\n\nLmvMatrix4.prototype = {\n\n  constructor: LmvMatrix4,\n\n  set: function set(n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44) {\n\n    var te = this.elements;\n\n    te[0] = n11;te[4] = n12;te[8] = n13;te[12] = n14;\n    te[1] = n21;te[5] = n22;te[9] = n23;te[13] = n24;\n    te[2] = n31;te[6] = n32;te[10] = n33;te[14] = n34;\n    te[3] = n41;te[7] = n42;te[11] = n43;te[15] = n44;\n\n    return this;\n\n  },\n\n  identity: function identity() {\n\n    this.set(\n\n    1, 0, 0, 0,\n    0, 1, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n\n\n\n    return this;\n\n  },\n\n  copy: function copy(m) {\n\n    this.elements.set(m.elements);\n\n    return this;\n\n  },\n\n  makeRotationFromQuaternion: function makeRotationFromQuaternion(q) {\n\n    var te = this.elements;\n\n    var x = q.x,y = q.y,z = q.z,w = q.w;\n    var x2 = x + x,y2 = y + y,z2 = z + z;\n    var xx = x * x2,xy = x * y2,xz = x * z2;\n    var yy = y * y2,yz = y * z2,zz = z * z2;\n    var wx = w * x2,wy = w * y2,wz = w * z2;\n\n    te[0] = 1 - (yy + zz);\n    te[4] = xy - wz;\n    te[8] = xz + wy;\n\n    te[1] = xy + wz;\n    te[5] = 1 - (xx + zz);\n    te[9] = yz - wx;\n\n    te[2] = xz - wy;\n    te[6] = yz + wx;\n    te[10] = 1 - (xx + yy);\n\n    // last column\n    te[3] = 0;\n    te[7] = 0;\n    te[11] = 0;\n\n    // bottom row\n    te[12] = 0;\n    te[13] = 0;\n    te[14] = 0;\n    te[15] = 1;\n\n    return this;\n\n  },\n\n  multiply: function multiply(n) {\n\n    return this.multiplyMatrices(this, n);\n\n  },\n\n  multiplyMatrices: function multiplyMatrices(a, b) {\n\n    var ae = a.elements;\n    var be = b.elements;\n    var te = this.elements;\n\n    var a11 = ae[0],a12 = ae[4],a13 = ae[8],a14 = ae[12];\n    var a21 = ae[1],a22 = ae[5],a23 = ae[9],a24 = ae[13];\n    var a31 = ae[2],a32 = ae[6],a33 = ae[10],a34 = ae[14];\n    var a41 = ae[3],a42 = ae[7],a43 = ae[11],a44 = ae[15];\n\n    var b11 = be[0],b12 = be[4],b13 = be[8],b14 = be[12];\n    var b21 = be[1],b22 = be[5],b23 = be[9],b24 = be[13];\n    var b31 = be[2],b32 = be[6],b33 = be[10],b34 = be[14];\n    var b41 = be[3],b42 = be[7],b43 = be[11],b44 = be[15];\n\n    te[0] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;\n    te[4] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;\n    te[8] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;\n    te[12] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;\n\n    te[1] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;\n    te[5] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;\n    te[9] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;\n    te[13] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;\n\n    te[2] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;\n    te[6] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;\n    te[10] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;\n    te[14] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;\n\n    te[3] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;\n    te[7] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;\n    te[11] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;\n    te[15] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;\n\n    return this;\n\n  },\n\n  multiplyToArray: function multiplyToArray(a, b, r) {\n\n    var te = this.elements;\n\n    this.multiplyMatrices(a, b);\n\n    r[0] = te[0];r[1] = te[1];r[2] = te[2];r[3] = te[3];\n    r[4] = te[4];r[5] = te[5];r[6] = te[6];r[7] = te[7];\n    r[8] = te[8];r[9] = te[9];r[10] = te[10];r[11] = te[11];\n    r[12] = te[12];r[13] = te[13];r[14] = te[14];r[15] = te[15];\n\n    return this;\n\n  },\n\n  multiplyScalar: function multiplyScalar(s) {\n\n    var te = this.elements;\n\n    te[0] *= s;te[4] *= s;te[8] *= s;te[12] *= s;\n    te[1] *= s;te[5] *= s;te[9] *= s;te[13] *= s;\n    te[2] *= s;te[6] *= s;te[10] *= s;te[14] *= s;\n    te[3] *= s;te[7] *= s;te[11] *= s;te[15] *= s;\n\n    return this;\n\n  },\n\n  determinant: function determinant() {\n\n    var te = this.elements;\n\n    var n11 = te[0],n12 = te[4],n13 = te[8],n14 = te[12];\n    var n21 = te[1],n22 = te[5],n23 = te[9],n24 = te[13];\n    var n31 = te[2],n32 = te[6],n33 = te[10],n34 = te[14];\n    var n41 = te[3],n42 = te[7],n43 = te[11],n44 = te[15];\n\n    //TODO: make this more efficient\n    //( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )\n\n    return (\n      n41 * (\n      +n14 * n23 * n32 -\n      n13 * n24 * n32 -\n      n14 * n22 * n33 +\n      n12 * n24 * n33 +\n      n13 * n22 * n34 -\n      n12 * n23 * n34) +\n\n      n42 * (\n      +n11 * n23 * n34 -\n      n11 * n24 * n33 +\n      n14 * n21 * n33 -\n      n13 * n21 * n34 +\n      n13 * n24 * n31 -\n      n14 * n23 * n31) +\n\n      n43 * (\n      +n11 * n24 * n32 -\n      n11 * n22 * n34 -\n      n14 * n21 * n32 +\n      n12 * n21 * n34 +\n      n14 * n22 * n31 -\n      n12 * n24 * n31) +\n\n      n44 * (\n      -n13 * n22 * n31 -\n      n11 * n23 * n32 +\n      n11 * n22 * n33 +\n      n13 * n21 * n32 -\n      n12 * n21 * n33 +\n      n12 * n23 * n31));\n\n\n\n\n  },\n\n  transpose: function transpose() {\n\n    var te = this.elements;\n    var tmp;\n\n    tmp = te[1];te[1] = te[4];te[4] = tmp;\n    tmp = te[2];te[2] = te[8];te[8] = tmp;\n    tmp = te[6];te[6] = te[9];te[9] = tmp;\n\n    tmp = te[3];te[3] = te[12];te[12] = tmp;\n    tmp = te[7];te[7] = te[13];te[13] = tmp;\n    tmp = te[11];te[11] = te[14];te[14] = tmp;\n\n    return this;\n\n  },\n\n  flattenToArrayOffset: function flattenToArrayOffset(array, offset) {\n\n    var te = this.elements;\n\n    array[offset] = te[0];\n    array[offset + 1] = te[1];\n    array[offset + 2] = te[2];\n    array[offset + 3] = te[3];\n\n    array[offset + 4] = te[4];\n    array[offset + 5] = te[5];\n    array[offset + 6] = te[6];\n    array[offset + 7] = te[7];\n\n    array[offset + 8] = te[8];\n    array[offset + 9] = te[9];\n    array[offset + 10] = te[10];\n    array[offset + 11] = te[11];\n\n    array[offset + 12] = te[12];\n    array[offset + 13] = te[13];\n    array[offset + 14] = te[14];\n    array[offset + 15] = te[15];\n\n    return array;\n\n  },\n\n  setPosition: function setPosition(v) {\n\n    var te = this.elements;\n\n    te[12] = v.x;\n    te[13] = v.y;\n    te[14] = v.z;\n\n    return this;\n\n  },\n\n  getInverse: function getInverse(m, throwOnInvertible) {\n\n    // based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm\n    var te = this.elements;\n    var me = m.elements;\n\n    var n11 = me[0],n12 = me[4],n13 = me[8],n14 = me[12];\n    var n21 = me[1],n22 = me[5],n23 = me[9],n24 = me[13];\n    var n31 = me[2],n32 = me[6],n33 = me[10],n34 = me[14];\n    var n41 = me[3],n42 = me[7],n43 = me[11],n44 = me[15];\n\n    te[0] = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44;\n    te[4] = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44;\n    te[8] = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44;\n    te[12] = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;\n    te[1] = n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44;\n    te[5] = n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44;\n    te[9] = n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44;\n    te[13] = n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34;\n    te[2] = n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44;\n    te[6] = n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44;\n    te[10] = n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44;\n    te[14] = n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34;\n    te[3] = n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43;\n    te[7] = n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43;\n    te[11] = n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43;\n    te[15] = n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33;\n\n    var det = n11 * te[0] + n21 * te[4] + n31 * te[8] + n41 * te[12];\n\n    if (det == 0) {\n\n      var msg = \"Matrix4.getInverse(): can't invert matrix, determinant is 0\";\n\n      if (throwOnInvertible || false) {\n\n        throw new Error(msg);\n\n      } else {\n\n        console.warn(msg);\n\n      }\n\n      this.identity();\n\n      return this;\n    }\n\n    this.multiplyScalar(1 / det);\n\n    return this;\n\n  },\n\n  scale: function scale(v) {\n\n    var te = this.elements;\n    var x = v.x,y = v.y,z = v.z;\n\n    te[0] *= x;te[4] *= y;te[8] *= z;\n    te[1] *= x;te[5] *= y;te[9] *= z;\n    te[2] *= x;te[6] *= y;te[10] *= z;\n    te[3] *= x;te[7] *= y;te[11] *= z;\n\n    return this;\n\n  },\n\n  getMaxScaleOnAxis: function getMaxScaleOnAxis() {\n\n    var te = this.elements;\n\n    var scaleXSq = te[0] * te[0] + te[1] * te[1] + te[2] * te[2];\n    var scaleYSq = te[4] * te[4] + te[5] * te[5] + te[6] * te[6];\n    var scaleZSq = te[8] * te[8] + te[9] * te[9] + te[10] * te[10];\n\n    return Math.sqrt(Math.max(scaleXSq, Math.max(scaleYSq, scaleZSq)));\n\n  },\n\n  makeTranslation: function makeTranslation(x, y, z) {\n\n    this.set(\n\n    1, 0, 0, x,\n    0, 1, 0, y,\n    0, 0, 1, z,\n    0, 0, 0, 1);\n\n\n\n    return this;\n\n  },\n\n  makeRotationX: function makeRotationX(theta) {\n\n    var c = Math.cos(theta),s = Math.sin(theta);\n\n    this.set(\n\n    1, 0, 0, 0,\n    0, c, -s, 0,\n    0, s, c, 0,\n    0, 0, 0, 1);\n\n\n\n    return this;\n\n  },\n\n  makeRotationY: function makeRotationY(theta) {\n\n    var c = Math.cos(theta),s = Math.sin(theta);\n\n    this.set(\n\n    c, 0, s, 0,\n    0, 1, 0, 0,\n    -s, 0, c, 0,\n    0, 0, 0, 1);\n\n\n\n    return this;\n\n  },\n\n  makeRotationZ: function makeRotationZ(theta) {\n\n    var c = Math.cos(theta),s = Math.sin(theta);\n\n    this.set(\n\n    c, -s, 0, 0,\n    s, c, 0, 0,\n    0, 0, 1, 0,\n    0, 0, 0, 1);\n\n\n\n    return this;\n\n  },\n\n  makeRotationAxis: function makeRotationAxis(axis, angle) {\n\n    // Based on http://www.gamedev.net/reference/articles/article1199.asp\n\n    var c = Math.cos(angle);\n    var s = Math.sin(angle);\n    var t = 1 - c;\n    var x = axis.x,y = axis.y,z = axis.z;\n    var tx = t * x,ty = t * y;\n\n    this.set(\n\n    tx * x + c, tx * y - s * z, tx * z + s * y, 0,\n    tx * y + s * z, ty * y + c, ty * z - s * x, 0,\n    tx * z - s * y, ty * z + s * x, t * z * z + c, 0,\n    0, 0, 0, 1);\n\n\n\n    return this;\n\n  },\n\n  makeScale: function makeScale(x, y, z) {\n\n    this.set(\n\n    x, 0, 0, 0,\n    0, y, 0, 0,\n    0, 0, z, 0,\n    0, 0, 0, 1);\n\n\n\n    return this;\n\n  },\n\n  compose: function compose(position, quaternion, scale) {\n\n    this.makeRotationFromQuaternion(quaternion);\n    this.scale(scale);\n    this.setPosition(position);\n\n    return this;\n\n  },\n\n  decompose: function () {\n\n    var vector = new LmvVector3();\n    var matrix = new LmvMatrix4(true);\n\n    return function (position, quaternion, scale) {\n\n      var te = this.elements;\n\n      var sx = vector.set(te[0], te[1], te[2]).length();\n      var sy = vector.set(te[4], te[5], te[6]).length();\n      var sz = vector.set(te[8], te[9], te[10]).length();\n\n      // if determine is negative, we need to invert one scale\n      var det = this.determinant();\n      if (det < 0) {\n        sx = -sx;\n      }\n\n      position.x = te[12];\n      position.y = te[13];\n      position.z = te[14];\n\n      // scale the rotation part\n\n      matrix.elements.set(this.elements); // at this point matrix is incomplete so we can't use .copy()\n\n      var invSX = 1 / sx;\n      var invSY = 1 / sy;\n      var invSZ = 1 / sz;\n\n      matrix.elements[0] *= invSX;\n      matrix.elements[1] *= invSX;\n      matrix.elements[2] *= invSX;\n\n      matrix.elements[4] *= invSY;\n      matrix.elements[5] *= invSY;\n      matrix.elements[6] *= invSY;\n\n      matrix.elements[8] *= invSZ;\n      matrix.elements[9] *= invSZ;\n      matrix.elements[10] *= invSZ;\n\n      quaternion.setFromRotationMatrix(matrix);\n\n      scale.x = sx;\n      scale.y = sy;\n      scale.z = sz;\n\n      return this;\n\n    };\n\n  }(),\n\n  //Added for LMV\n  transformPoint: function transformPoint(pt) {\n\n    // input: THREE.Matrix4 affine matrix\n\n    var x = pt.x,y = pt.y,z = pt.z;\n\n    var e = this.elements;\n\n    pt.x = e[0] * x + e[4] * y + e[8] * z + e[12];\n    pt.y = e[1] * x + e[5] * y + e[9] * z + e[13];\n    pt.z = e[2] * x + e[6] * y + e[10] * z + e[14];\n\n    return pt;\n  },\n\n  //Added for LMV\n  transformDirection: function transformDirection(v) {\n\n    // input: THREE.Matrix4 affine matrix\n    // vector interpreted as a direction\n\n    var x = v.x,y = v.y,z = v.z;\n\n    var e = this.elements;\n\n    v.x = e[0] * x + e[4] * y + e[8] * z;\n    v.y = e[1] * x + e[5] * y + e[9] * z;\n    v.z = e[2] * x + e[6] * y + e[10] * z;\n\n    var len = Math.sqrt(v.x * v.x + v.y * v.y + v.z * v.z);\n    if (len > 0) {\n      var ilen = 1.0 / len;\n      v.x *= ilen;\n      v.y *= ilen;\n      v.z *= ilen;\n    }\n\n    return v;\n  },\n\n  equals: function equals(matrix) {\n\n    var te = this.elements;\n    var me = matrix.elements;\n\n    for (var i = 0; i < 16; i++) {\n\n      if (te[i] !== me[i]) return false;\n\n    }\n\n    return true;\n\n  },\n\n  fromArray: function fromArray(array) {\n\n    this.elements.set(array);\n\n    return this;\n\n  },\n\n  toArray: function toArray() {\n\n    var te = this.elements;\n\n    return [\n    te[0], te[1], te[2], te[3],\n    te[4], te[5], te[6], te[7],\n    te[8], te[9], te[10], te[11],\n    te[12], te[13], te[14], te[15]];\n\n\n  },\n\n  clone: function clone() {\n\n    return new LmvMatrix4(this.isDoublePrecision).fromArray(this.elements);\n\n  } };","/**\n * @author mrdoob / http://mrdoob.com/\n * @author *kile / http://kile.stravaganza.org/\n * @author philogb / http://blog.thejit.org/\n * @author mikael emtinger / http://gomo.se/\n * @author egraether / http://egraether.com/\n * @author WestLangley / http://github.com/WestLangley\n */\n/* Pruned version of THREE.Vector3, for use in the LMV web worker */\n\nexport var LmvVector3 = function LmvVector3(x, y, z) {\n\n  this.x = x || 0;\n  this.y = y || 0;\n  this.z = z || 0;\n\n};\n\nLmvVector3.prototype = {\n\n  constructor: LmvVector3,\n\n  set: function set(x, y, z) {\n\n    this.x = x;\n    this.y = y;\n    this.z = z;\n\n    return this;\n\n  },\n\n  setX: function setX(x) {\n\n    this.x = x;\n\n    return this;\n\n  },\n\n  setY: function setY(y) {\n\n    this.y = y;\n\n    return this;\n\n  },\n\n  setZ: function setZ(z) {\n\n    this.z = z;\n\n    return this;\n\n  },\n\n  setComponent: function setComponent(index, value) {\n\n    switch (index) {\n\n      case 0:this.x = value;break;\n      case 1:this.y = value;break;\n      case 2:this.z = value;break;\n      default:throw new Error('index is out of range: ' + index);}\n\n\n\n  },\n\n  getComponent: function getComponent(index) {\n\n    switch (index) {\n\n      case 0:return this.x;\n      case 1:return this.y;\n      case 2:return this.z;\n      default:throw new Error('index is out of range: ' + index);}\n\n\n\n  },\n\n  clone: function clone() {\n\n    return new this.constructor(this.x, this.y, this.z);\n\n  },\n\n  copy: function copy(v) {\n\n    this.x = v.x;\n    this.y = v.y;\n    this.z = v.z;\n\n    return this;\n\n  },\n\n  add: function add(v, w) {\n\n    if (w !== undefined) {\n\n      console.warn('THREE.Vector3: .add() now only accepts one argument. Use .addVectors( a, b ) instead.');\n      return this.addVectors(v, w);\n\n    }\n\n    this.x += v.x;\n    this.y += v.y;\n    this.z += v.z;\n\n    return this;\n\n  },\n\n  addScalar: function addScalar(s) {\n\n    this.x += s;\n    this.y += s;\n    this.z += s;\n\n    return this;\n\n  },\n\n  addVectors: function addVectors(a, b) {\n\n    this.x = a.x + b.x;\n    this.y = a.y + b.y;\n    this.z = a.z + b.z;\n\n    return this;\n\n  },\n\n  addScaledVector: function addScaledVector(v, s) {\n\n    this.x += v.x * s;\n    this.y += v.y * s;\n    this.z += v.z * s;\n\n    return this;\n\n  },\n\n  sub: function sub(v, w) {\n\n    if (w !== undefined) {\n\n      console.warn('THREE.Vector3: .sub() now only accepts one argument. Use .subVectors( a, b ) instead.');\n      return this.subVectors(v, w);\n\n    }\n\n    this.x -= v.x;\n    this.y -= v.y;\n    this.z -= v.z;\n\n    return this;\n\n  },\n\n  subScalar: function subScalar(s) {\n\n    this.x -= s;\n    this.y -= s;\n    this.z -= s;\n\n    return this;\n\n  },\n\n  subVectors: function subVectors(a, b) {\n\n    this.x = a.x - b.x;\n    this.y = a.y - b.y;\n    this.z = a.z - b.z;\n\n    return this;\n\n  },\n\n  multiply: function multiply(v, w) {\n\n    if (w !== undefined) {\n\n      console.warn('THREE.Vector3: .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead.');\n      return this.multiplyVectors(v, w);\n\n    }\n\n    this.x *= v.x;\n    this.y *= v.y;\n    this.z *= v.z;\n\n    return this;\n\n  },\n\n  multiplyScalar: function multiplyScalar(scalar) {\n\n    this.x *= scalar;\n    this.y *= scalar;\n    this.z *= scalar;\n\n    return this;\n\n  },\n\n  multiplyVectors: function multiplyVectors(a, b) {\n\n    this.x = a.x * b.x;\n    this.y = a.y * b.y;\n    this.z = a.z * b.z;\n\n    return this;\n\n  },\n\n  applyMatrix3: function applyMatrix3(m) {\n\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n\n    var e = m.elements;\n\n    this.x = e[0] * x + e[3] * y + e[6] * z;\n    this.y = e[1] * x + e[4] * y + e[7] * z;\n    this.z = e[2] * x + e[5] * y + e[8] * z;\n\n    return this;\n\n  },\n\n  applyMatrix4: function applyMatrix4(m) {\n\n    // input: THREE.Matrix4 affine matrix\n\n    var x = this.x,y = this.y,z = this.z;\n\n    var e = m.elements;\n\n    this.x = e[0] * x + e[4] * y + e[8] * z + e[12];\n    this.y = e[1] * x + e[5] * y + e[9] * z + e[13];\n    this.z = e[2] * x + e[6] * y + e[10] * z + e[14];\n\n    return this;\n\n  },\n\n  applyProjection: function applyProjection(m) {\n\n    // input: THREE.Matrix4 projection matrix\n\n    var x = this.x,y = this.y,z = this.z;\n\n    var e = m.elements;\n    var d = 1 / (e[3] * x + e[7] * y + e[11] * z + e[15]); // perspective divide\n\n    this.x = (e[0] * x + e[4] * y + e[8] * z + e[12]) * d;\n    this.y = (e[1] * x + e[5] * y + e[9] * z + e[13]) * d;\n    this.z = (e[2] * x + e[6] * y + e[10] * z + e[14]) * d;\n\n    return this;\n\n  },\n\n  applyQuaternion: function applyQuaternion(q) {\n\n    var x = this.x;\n    var y = this.y;\n    var z = this.z;\n\n    var qx = q.x;\n    var qy = q.y;\n    var qz = q.z;\n    var qw = q.w;\n\n    // calculate quat * vector\n\n    var ix = qw * x + qy * z - qz * y;\n    var iy = qw * y + qz * x - qx * z;\n    var iz = qw * z + qx * y - qy * x;\n    var iw = -qx * x - qy * y - qz * z;\n\n    // calculate result * inverse quat\n\n    this.x = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n    this.y = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n    this.z = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n\n    return this;\n\n  },\n\n  transformDirection: function transformDirection(m) {\n\n    // input: THREE.Matrix4 affine matrix\n    // vector interpreted as a direction\n\n    var x = this.x,y = this.y,z = this.z;\n\n    var e = m.elements;\n\n    this.x = e[0] * x + e[4] * y + e[8] * z;\n    this.y = e[1] * x + e[5] * y + e[9] * z;\n    this.z = e[2] * x + e[6] * y + e[10] * z;\n\n    this.normalize();\n\n    return this;\n\n  },\n\n  divide: function divide(v) {\n\n    this.x /= v.x;\n    this.y /= v.y;\n    this.z /= v.z;\n\n    return this;\n\n  },\n\n  divideScalar: function divideScalar(scalar) {\n\n    if (scalar !== 0) {\n\n      var invScalar = 1 / scalar;\n\n      this.x *= invScalar;\n      this.y *= invScalar;\n      this.z *= invScalar;\n\n    } else {\n\n      this.x = 0;\n      this.y = 0;\n      this.z = 0;\n\n    }\n\n    return this;\n\n  },\n\n  min: function min(v) {\n\n    if (this.x > v.x) {\n\n      this.x = v.x;\n\n    }\n\n    if (this.y > v.y) {\n\n      this.y = v.y;\n\n    }\n\n    if (this.z > v.z) {\n\n      this.z = v.z;\n\n    }\n\n    return this;\n\n  },\n\n  max: function max(v) {\n\n    if (this.x < v.x) {\n\n      this.x = v.x;\n\n    }\n\n    if (this.y < v.y) {\n\n      this.y = v.y;\n\n    }\n\n    if (this.z < v.z) {\n\n      this.z = v.z;\n\n    }\n\n    return this;\n\n  },\n\n  clamp: function clamp(min, max) {\n\n    // This function assumes min < max, if this assumption isn't true it will not operate correctly\n\n    if (this.x < min.x) {\n\n      this.x = min.x;\n\n    } else if (this.x > max.x) {\n\n      this.x = max.x;\n\n    }\n\n    if (this.y < min.y) {\n\n      this.y = min.y;\n\n    } else if (this.y > max.y) {\n\n      this.y = max.y;\n\n    }\n\n    if (this.z < min.z) {\n\n      this.z = min.z;\n\n    } else if (this.z > max.z) {\n\n      this.z = max.z;\n\n    }\n\n    return this;\n\n  },\n\n  clampScalar: function () {\n\n    var min, max;\n\n    return function clampScalar(minVal, maxVal) {\n\n      if (min === undefined) {\n\n        min = new LmvVector3();\n        max = new LmvVector3();\n\n      }\n\n      min.set(minVal, minVal, minVal);\n      max.set(maxVal, maxVal, maxVal);\n\n      return this.clamp(min, max);\n\n    };\n\n  }(),\n\n  floor: function floor() {\n\n    this.x = Math.floor(this.x);\n    this.y = Math.floor(this.y);\n    this.z = Math.floor(this.z);\n\n    return this;\n\n  },\n\n  ceil: function ceil() {\n\n    this.x = Math.ceil(this.x);\n    this.y = Math.ceil(this.y);\n    this.z = Math.ceil(this.z);\n\n    return this;\n\n  },\n\n  round: function round() {\n\n    this.x = Math.round(this.x);\n    this.y = Math.round(this.y);\n    this.z = Math.round(this.z);\n\n    return this;\n\n  },\n\n  roundToZero: function roundToZero() {\n\n    this.x = this.x < 0 ? Math.ceil(this.x) : Math.floor(this.x);\n    this.y = this.y < 0 ? Math.ceil(this.y) : Math.floor(this.y);\n    this.z = this.z < 0 ? Math.ceil(this.z) : Math.floor(this.z);\n\n    return this;\n\n  },\n\n  negate: function negate() {\n\n    this.x = -this.x;\n    this.y = -this.y;\n    this.z = -this.z;\n\n    return this;\n\n  },\n\n  dot: function dot(v) {\n\n    return this.x * v.x + this.y * v.y + this.z * v.z;\n\n  },\n\n  lengthSq: function lengthSq() {\n\n    return this.x * this.x + this.y * this.y + this.z * this.z;\n\n  },\n\n  length: function length() {\n\n    return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);\n\n  },\n\n  lengthManhattan: function lengthManhattan() {\n\n    return Math.abs(this.x) + Math.abs(this.y) + Math.abs(this.z);\n\n  },\n\n  normalize: function normalize() {\n\n    return this.divideScalar(this.length());\n\n  },\n\n  setLength: function setLength(l) {\n\n    var oldLength = this.length();\n\n    if (oldLength !== 0 && l !== oldLength) {\n\n      this.multiplyScalar(l / oldLength);\n\n    }\n\n    return this;\n\n  },\n\n  lerp: function lerp(v, alpha) {\n\n    this.x += (v.x - this.x) * alpha;\n    this.y += (v.y - this.y) * alpha;\n    this.z += (v.z - this.z) * alpha;\n\n    return this;\n\n  },\n\n  lerpVectors: function lerpVectors(v1, v2, alpha) {\n\n    this.subVectors(v2, v1).multiplyScalar(alpha).add(v1);\n\n    return this;\n\n  },\n\n  cross: function cross(v, w) {\n\n    if (w !== undefined) {\n\n      console.warn('THREE.Vector3: .cross() now only accepts one argument. Use .crossVectors( a, b ) instead.');\n      return this.crossVectors(v, w);\n\n    }\n\n    var x = this.x,y = this.y,z = this.z;\n\n    this.x = y * v.z - z * v.y;\n    this.y = z * v.x - x * v.z;\n    this.z = x * v.y - y * v.x;\n\n    return this;\n\n  },\n\n  crossVectors: function crossVectors(a, b) {\n\n    var ax = a.x,ay = a.y,az = a.z;\n    var bx = b.x,by = b.y,bz = b.z;\n\n    this.x = ay * bz - az * by;\n    this.y = az * bx - ax * bz;\n    this.z = ax * by - ay * bx;\n\n    return this;\n\n  },\n\n  projectOnVector: function () {\n\n    var v1, dot;\n\n    return function projectOnVector(vector) {\n\n      if (v1 === undefined) v1 = new LmvVector3();\n\n      v1.copy(vector).normalize();\n\n      dot = this.dot(v1);\n\n      return this.copy(v1).multiplyScalar(dot);\n\n    };\n\n  }(),\n\n  projectOnPlane: function () {\n\n    var v1;\n\n    return function projectOnPlane(planeNormal) {\n\n      if (v1 === undefined) v1 = new LmvVector3();\n\n      v1.copy(this).projectOnVector(planeNormal);\n\n      return this.sub(v1);\n\n    };\n\n  }(),\n\n  reflect: function () {\n\n    // reflect incident vector off plane orthogonal to normal\n    // normal is assumed to have unit length\n\n    var v1;\n\n    return function reflect(normal) {\n\n      if (v1 === undefined) v1 = new LmvVector3();\n\n      return this.sub(v1.copy(normal).multiplyScalar(2 * this.dot(normal)));\n\n    };\n\n  }(),\n\n  distanceTo: function distanceTo(v) {\n\n    return Math.sqrt(this.distanceToSquared(v));\n\n  },\n\n  distanceToSquared: function distanceToSquared(v) {\n\n    var dx = this.x - v.x;\n    var dy = this.y - v.y;\n    var dz = this.z - v.z;\n\n    return dx * dx + dy * dy + dz * dz;\n\n  },\n\n  setEulerFromRotationMatrix: function setEulerFromRotationMatrix(m, order) {\n\n    console.error('THREE.Vector3: .setEulerFromRotationMatrix() has been removed. Use Euler.setFromRotationMatrix() instead.');\n\n  },\n\n  setEulerFromQuaternion: function setEulerFromQuaternion(q, order) {\n\n    console.error('THREE.Vector3: .setEulerFromQuaternion() has been removed. Use Euler.setFromQuaternion() instead.');\n\n  },\n\n  getPositionFromMatrix: function getPositionFromMatrix(m) {\n\n    console.warn('THREE.Vector3: .getPositionFromMatrix() has been renamed to .setFromMatrixPosition().');\n\n    return this.setFromMatrixPosition(m);\n\n  },\n\n  getScaleFromMatrix: function getScaleFromMatrix(m) {\n\n    console.warn('THREE.Vector3: .getScaleFromMatrix() has been renamed to .setFromMatrixScale().');\n\n    return this.setFromMatrixScale(m);\n\n  },\n\n  getColumnFromMatrix: function getColumnFromMatrix(index, matrix) {\n\n    console.warn('THREE.Vector3: .getColumnFromMatrix() has been renamed to .setFromMatrixColumn().');\n\n    return this.setFromMatrixColumn(index, matrix);\n\n  },\n\n  setFromMatrixPosition: function setFromMatrixPosition(m) {\n\n    this.x = m.elements[12];\n    this.y = m.elements[13];\n    this.z = m.elements[14];\n\n    return this;\n\n  },\n\n  setFromMatrixScale: function setFromMatrixScale(m) {\n\n    var sx = this.set(m.elements[0], m.elements[1], m.elements[2]).length();\n    var sy = this.set(m.elements[4], m.elements[5], m.elements[6]).length();\n    var sz = this.set(m.elements[8], m.elements[9], m.elements[10]).length();\n\n    this.x = sx;\n    this.y = sy;\n    this.z = sz;\n\n    return this;\n\n  },\n\n  setFromMatrixColumn: function setFromMatrixColumn(index, matrix) {\n\n    var offset = index * 4;\n\n    var me = matrix.elements;\n\n    this.x = me[offset];\n    this.y = me[offset + 1];\n    this.z = me[offset + 2];\n\n    return this;\n\n  },\n\n  equals: function equals(v) {\n\n    return v.x === this.x && v.y === this.y && v.z === this.z;\n\n  },\n\n  fromArray: function fromArray(array, offset) {\n\n    if (offset === undefined) offset = 0;\n\n    this.x = array[offset];\n    this.y = array[offset + 1];\n    this.z = array[offset + 2];\n\n    return this;\n\n  },\n\n  toArray: function toArray(array, offset) {\n\n    if (array === undefined) array = [];\n    if (offset === undefined) offset = 0;\n\n    array[offset] = this.x;\n    array[offset + 1] = this.y;\n    array[offset + 2] = this.z;\n\n    return array;\n\n  },\n\n  fromAttribute: function fromAttribute(attribute, index, offset) {\n\n    if (offset === undefined) offset = 0;\n\n    index = index * attribute.itemSize + offset;\n\n    this.x = attribute.array[index];\n    this.y = attribute.array[index + 1];\n    this.z = attribute.array[index + 2];\n\n    return this;\n\n  } };","export var MeshFlags = {\n  // FragmentList flags\n  //visibility/highlight bitmask flags\n\n  //Byte 0\n\n  //NOTE: This is confusing and it should be fixed, but when the MESH_VISIBLE bit is off, the mesh\n  //will draw in ghosted mode. To completely skip drawing a mesh, set the HIDE flag.\n  MESH_VISIBLE: 1,\n  MESH_HIGHLIGHTED: 2,\n  MESH_HIDE: 4,\n  MESH_ISLINE: 8,\n  MESH_MOVED: 0x10, // indicates if an animation matrix is set\n  MESH_RENDERFLAG: 0x20,\n  MESH_NOTLOADED: 0x40, // the mesh has not yet loaded or has been unloaded\n  MESH_ISPOINT: 0x80, // indicates that the mesh is vertex-only\n\n  //Byte 1\n  //TODO: Two bits are enough to hold ISLINE, ISWIDELINE and ISPOINT, we don't need to waste three,\n  //but there is no point to optimizing this as long as the required flags go over one byte.\n  MESH_ISWIDELINE: 0x100, // indicates that the mesh is wide line\n  MESH_TRAVERSED: 0x200, // only used for paging: drawn fragments are tagged and then skipped by forEach() until the flag is being reset (e.g. on scene/camera changes)\n  MESH_DRAWN: 0x400 // only used for paging: drawn fragments are tagged. At the end of all render passes flag is copied to MESH_TRAVERSED.\n  // The Memory Limited Extension uses the high order three bits of this byte\n};","\n\n//Utility logic for listing vertex data from LmvBufferGeometry interleaved buffers\n\nimport { LmvVector3 } from './LmvVector3';\n\n//These functions work for both workers side interleaved buffer structures\n//and main thread side LmvBufferGeometry instances. The difference in naming\n//if the index attribute on both sides is super annoying and should be cleaned up.\n\n\n/** Works for BufferGeometry as well as THREE.BufferGeometry. Supports interleaved and non-interleaved buffers.\n *   @param {BufferGeometry|THREE.BufferGeometry} geom\n *   @returns {number}\n */\nexport function getVertexCount(geom) {\n  if (geom.vb) {\n    // interleaved\n    return geom.vb.length / geom.vbstride;\n  }\n  // no interleaved buffer. Return count from position attribute or 0\n  return geom.attributes.position ? geom.attributes.position.length : 0;\n}\n\n\nvar _p, _n, _uv;\nvar _normalsMatrix;\n\nexport function enumMeshVertices(geometry, callback, matrix) {\n\n  var attributes = geometry.attributes;\n\n  if (!_p) {\n    _p = new LmvVector3();\n    _n = new LmvVector3();\n    _uv = new LmvVector3();\n  }\n\n  if (matrix) {\n    if (!_normalsMatrix)\n    _normalsMatrix = new THREE.Matrix3();\n\n    _normalsMatrix.getNormalMatrix(matrix);\n  }\n\n  var positions = geometry.vb || attributes.position.array;\n  var normals = geometry.vb || attributes.normal && attributes.normal.array;\n  var stride = geometry.vb ? geometry.vbstride : 3;\n  // Get the offset to positions in the buffer. Be careful, 2D buffers\n  // don't use the 'position' attribute for positions. Reject those.\n  var poffset;\n  if (geometry.vblayout) {\n    if (!geometry.vblayout.position)\n    return; // No positions, what to do??\n    poffset = geometry.vblayout.position.offset;\n  } else if (!attributes.position)\n  return; // No positions, what to do??\n  else\n    poffset = attributes.position.itemOffset || 0;\n\n  var noffset = 0;\n  var nattr = geometry.vblayout ? geometry.vblayout.normal : attributes.normal || null;\n  if (nattr) {\n    noffset = nattr.offset || nattr.itemOffset || 0;\n  } else {\n    normals = null;\n  }\n\n  //TODO: UV channel\n\n  if (nattr && (nattr.itemSize !== 3 || nattr.bytesPerItem !== 4)) {\n    //console.log(\"Normals are packed, will be skipped from enumMeshTriangles. Use packNormals=false load option.\");\n    normals = null;\n  }\n\n  var vcount = geometry.vb ? geometry.vb.length / geometry.vbstride : positions.length / stride;\n\n  var pi = poffset;\n  var ni = noffset;\n  for (var i = 0; i < vcount; i++, pi += stride, ni += stride) {\n\n    _p.set(positions[pi], positions[pi + 1], positions[pi + 2]);\n\n    if (matrix)\n    _p.applyMatrix4(matrix);\n\n    if (normals) {\n      _n.set(normals[ni], normals[ni + 1], normals[ni + 2]);\n\n      if (matrix) {\n        _n.applyMatrix3(_normalsMatrix);\n      }\n    }\n\n    //TODO: UV channel\n\n    callback(_p, normals ? _n : null, null /*, _uv*/, i);\n  }\n}\n\nexport function enumMeshIndices(geometry, callback) {\n\n  var indices = geometry.ib || geometry.indices || (attributes.index ? attributes.index.array : null);\n\n  if (indices) {\n\n    var offsets = geometry.offsets;\n\n    if (!offsets || offsets.length === 0) {\n      offsets = [{ start: 0, count: indices.length, index: 0 }];\n    }\n\n    for (var oi = 0, ol = offsets.length; oi < ol; ++oi) {\n\n      var start = offsets[oi].start;\n      var count = offsets[oi].count;\n      var index = offsets[oi].index;\n\n      for (var i = start, il = start + count; i < il; i += 3) {\n\n        var a = index + indices[i];\n        var b = index + indices[i + 1];\n        var c = index + indices[i + 2];\n\n        callback(a, b, c);\n      }\n    }\n  } else {\n\n    var positions = geometry.vb || attributes.position.array;\n    var vcount = geometry.vb ? geometry.vb.length / geometry.vbstride : positions.length / 3;\n\n    for (var _i = 0; _i < vcount; _i++) {\n\n      var _a = 3 * _i;\n      var _b = 3 * _i + 1;\n      var _c = 3 * _i + 2;\n\n      callback(_a, _b, _c);\n    }\n  }\n}\n\n\nvar vA, vB, vC, nA, nB, nC;\n\nexport function enumMeshTriangles(geometry, callback) {\n\n  var attributes = geometry.attributes;\n\n  var a, b, c;\n\n  if (!vA) {\n    vA = new LmvVector3();\n    vB = new LmvVector3();\n    vC = new LmvVector3();\n\n    nA = new LmvVector3();\n    nB = new LmvVector3();\n    nC = new LmvVector3();\n  }\n\n  var positions = geometry.vb || attributes.position.array;\n  var normals = geometry.vb || attributes.normal && attributes.normal.array;\n  var stride = geometry.vb ? geometry.vbstride : 3;\n  // Get the offset to positions in the buffer. Be careful, 2D buffers\n  // don't use the 'position' attribute for positions. Reject those.\n  var poffset;\n  if (geometry.vblayout) {\n    if (!geometry.vblayout.position)\n    return; // No positions, what to do??\n    poffset = geometry.vblayout.position.offset;\n  } else if (!attributes.position)\n  return; // No positions, what to do??\n  else\n    poffset = attributes.position.itemOffset || 0;\n\n  var noffset = 0;\n  var nattr = geometry.vblayout ? geometry.vblayout.normal : attributes.normal || null;\n  if (nattr) {\n    noffset = nattr.offset || nattr.itemOffset || 0;\n  } else {\n    normals = null;\n  }\n\n  if (nattr && (nattr.itemSize !== 3 || nattr.bytesPerItem !== 4)) {\n    //console.log(\"Normals are packed, will be skipped from enumMeshTriangles. Use packNormals=false load option.\");\n    normals = null;\n  }\n\n  var indices = geometry.ib || geometry.indices || (attributes.index ? attributes.index.array : null);\n\n  if (indices) {\n\n    var offsets = geometry.offsets;\n\n    if (!offsets || offsets.length === 0) {\n      offsets = [{ start: 0, count: indices.length, index: 0 }];\n    }\n\n    for (var oi = 0, ol = offsets.length; oi < ol; ++oi) {\n\n      var start = offsets[oi].start;\n      var count = offsets[oi].count;\n      var index = offsets[oi].index;\n\n      for (var i = start, il = start + count; i < il; i += 3) {\n\n        a = index + indices[i];\n        b = index + indices[i + 1];\n        c = index + indices[i + 2];\n\n        var pa = a * stride + poffset;\n        var pb = b * stride + poffset;\n        var pc = c * stride + poffset;\n\n        vA.x = positions[pa];vA.y = positions[pa + 1];vA.z = positions[pa + 2];\n        vB.x = positions[pb];vB.y = positions[pb + 1];vB.z = positions[pb + 2];\n        vC.x = positions[pc];vC.y = positions[pc + 1];vC.z = positions[pc + 2];\n\n        if (normals) {\n          var na = a * stride + noffset;\n          var nb = b * stride + noffset;\n          var nc = c * stride + noffset;\n\n          nA.x = normals[na];nA.y = normals[na + 1];nA.z = normals[na + 2];\n          nB.x = normals[nb];nB.y = normals[nb + 1];nB.z = normals[nb + 2];\n          nC.x = normals[nc];nC.y = normals[nc + 1];nC.z = normals[nc + 2];\n\n          callback(vA, vB, vC, a, b, c, nA, nB, nC, i / 3);\n        } else {\n          callback(vA, vB, vC, a, b, c, null, null, null, i / 3);\n        }\n\n\n      }\n\n    }\n\n  } else {\n\n    var vcount = geometry.vb ? geometry.vb.length / geometry.vbstride : positions.length / 3;\n\n    for (var i = 0; i < vcount; i += 3) {\n\n      a = i;\n      b = i + 1;\n      c = i + 2;\n\n      var pa = a * stride + poffset;\n      var pb = b * stride + poffset;\n      var pc = c * stride + poffset;\n\n      vA.x = positions[pa];vA.y = positions[pa + 1];vA.z = positions[pa + 2];\n      vB.x = positions[pb];vB.y = positions[pb + 1];vB.z = positions[pb + 2];\n      vC.x = positions[pc];vC.y = positions[pc + 1];vC.z = positions[pc + 2];\n\n      if (normals) {\n        var na = a * stride + noffset;\n        var nb = b * stride + noffset;\n        var nc = c * stride + noffset;\n\n        nA.x = normals[na];nA.y = normals[na + 1];nA.z = normals[na + 2];\n        nB.x = normals[nb];nB.y = normals[nb + 1];nB.z = normals[nb + 2];\n        nC.x = normals[nc];nC.y = normals[nc + 1];nC.z = normals[nc + 2];\n\n        callback(vA, vB, vC, a, b, c, nA, nB, nC, i / 3);\n      } else {\n        callback(vA, vB, vC, a, b, c, null, null, null, i / 3);\n      }\n    }\n\n  }\n}\n\n\nvar vP, vQ;\n\nexport function enumMeshLines(geometry, callback) {\n\n  var attributes = geometry.attributes;\n\n  var a, b;\n\n  if (!vP) {\n    vP = new LmvVector3();\n    vQ = new LmvVector3();\n  }\n\n  var istep = 2;\n  if (geometry.lineWidth) {\n    istep = 6;\n  }\n\n\n  var indices = geometry.ib || geometry.indices || (attributes.index ? attributes.index.array : null);\n\n  if (indices) {\n\n    var positions = geometry.vb ? geometry.vb : attributes.position.array;\n    var stride = geometry.vb ? geometry.vbstride : 3;\n    var offsets = geometry.offsets;\n\n    if (!offsets || offsets.length === 0) {\n\n      offsets = [{ start: 0, count: indices.length, index: 0 }];\n\n    }\n\n    for (var oi = 0, ol = offsets.length; oi < ol; ++oi) {\n\n      var start = offsets[oi].start;\n      var count = offsets[oi].count;\n      var index = offsets[oi].index;\n\n      for (var i = start, il = start + count, lineIdx = start / istep; i < il; i += istep, lineIdx++) {\n\n        a = index + indices[i];\n        b = index + indices[i + 1];\n\n        vP.x = positions[a * stride];vP.y = positions[a * stride + 1];vP.z = positions[a * stride + 2];\n        vQ.x = positions[b * stride];vQ.y = positions[b * stride + 1];vQ.z = positions[b * stride + 2];\n\n        callback(vP, vQ, a, b, lineIdx);\n      }\n\n    }\n\n  } else {\n\n    var positions = geometry.vb ? geometry.vb : attributes.position.array;\n    var stride = geometry.vb ? geometry.vbstride : 3;\n\n    for (var i = 0, il = positions.length / stride, lineIdx = 0; i < il; i += istep, lineIdx++) {\n\n      a = i;\n      b = i + 1;\n\n      vP.x = positions[a * stride];vP.y = positions[a * stride + 1];vP.z = positions[a * stride + 2];\n      vQ.x = positions[b * stride];vQ.y = positions[b * stride + 1];vQ.z = positions[b * stride + 2];\n\n      callback(vP, vQ, a, b, lineIdx);\n    }\n\n  }\n}\n\n\nexport function enumMeshEdges(geometry, callback) {\n  var attributes = geometry.attributes;\n\n  var a, b;\n\n  if (!vP) {\n    vP = new LmvVector3();\n    vQ = new LmvVector3();\n  }\n\n  var istep = 2;\n\n  var indices = geometry.iblines;\n\n  if (!indices) {\n    return;\n  }\n\n  var positions = geometry.vb ? geometry.vb : attributes.position.array;\n  var stride = geometry.vb ? geometry.vbstride : 3;\n  var offsets = geometry.offsets;\n\n  if (!offsets || offsets.length === 0) {\n\n    offsets = [{ start: 0, count: indices.length, index: 0 }];\n\n  }\n\n  for (var oi = 0, ol = offsets.length; oi < ol; ++oi) {\n\n    var start = offsets[oi].start;\n    var count = offsets[oi].count;\n    var index = offsets[oi].index;\n\n    for (var i = start, il = start + count; i < il; i += istep) {\n\n      a = index + indices[i];\n      b = index + indices[i + 1];\n\n      vP.x = positions[a * stride];vP.y = positions[a * stride + 1];vP.z = positions[a * stride + 2];\n      vQ.x = positions[b * stride];vQ.y = positions[b * stride + 1];vQ.z = positions[b * stride + 2];\n\n      callback(vP, vQ, a, b);\n    }\n\n  }\n}\n\nexport var VertexEnumerator = {\n  getVertexCount: getVertexCount,\n  enumMeshVertices: enumMeshVertices,\n  enumMeshIndices: enumMeshIndices,\n  enumMeshTriangles: enumMeshTriangles,\n  enumMeshLines: enumMeshLines,\n  enumMeshEdges: enumMeshEdges };","/**\n * A GeomMergeTask is used for mesh consolidation. It fills vertex buffer and id buffer of a consolidated mesh\n * based on a set of compatible input meshes.\n *\n * GeomMergeTask is shared by main wgs script and worker script, so that the same code can be used for single-threaded\n * and multi-threaded consolidation.\n */\n\n// unique task ids\nvar _nextTaskId = 1;\nfunction createTaskId() {return _nextTaskId++;}\n\nexport function GeomMergeTask() {\n\n  // Interleaved vertex buffers as Float32Array.\n  this.vb = null;\n\n  // floats per vertex\n  this.vbstride = 0;\n\n  // offsets in floats where to find position/normal in vertex buffer\n  this.posOffset = 0;\n  this.normalOffset = 0;\n\n  // matrices per src-geom (Float32Array with 16 floats per matrix)\n  this.matrices = null;\n  this.ranges = null;\n\n  // must be an Uint32Array that we can efficiently hand-over to the worker\n  this.dbIds = null;\n\n  // unique task-id used to find BufferGeometry when a merged vb is returned from worker\n  this.id = createTaskId();\n}\n\n/**\n   *  Packs a Vector3 normal vector into 2 components. This is a CPU-side implementation of PackNormalsShaderChunk\n   *  (see ShaderChunks.js)\n   *\n   *   @param {THREE.Vector3|LmvVector3} normal - InOut normal vector.\n   *\n   *  Note that 'normal' must be normalized!\n   */\nfunction encodeNormal(normal) {\n  normal.x = 0.5 * (1.0 + Math.atan2(normal.y, normal.x) / Math.PI);\n  normal.y = 0.5 * (1.0 + normal.z);\n  normal.z = 0.0; // not used for result\n}\n\n/**\n   * @param {THREE.Vector3|LmvVector3} normal - InOut normal vector. Input z is ignored.\n   */\nfunction decodeNormal(normal) {\n  var angX = 2.0 * normal.x - 1.0;\n  var angY = 2.0 * normal.y - 1.0;\n  var scthX = Math.sin(angX * Math.PI);\n  var scthY = Math.cos(angX * Math.PI);\n  var scphiX = Math.sqrt(1.0 - angY * angY);\n  var scphiY = angY;\n  normal.x = scthY * scphiX;\n  normal.y = scthX * scphiX;\n  normal.z = scphiY;\n}\n\n/**\n   *  Writes a dbId into 4 subsequent bytes of an Uint8Array. (4th is only for alignment and always 0)\n   *   @param {Number}     dbId\n   *   @param {Uint8Array} bufferUint8 - view into the vertex buffer that we write to.\n   *   @param {Number}     writeIndex  - Index into the uint8 array where we write the first byte.\n   */\nexport function writeIdToBuffer(dbId, bufferUint8, writeIndex) {\n  bufferUint8[writeIndex++] = dbId & 0xff;\n  bufferUint8[writeIndex++] = dbId >> 8 & 0xff;\n  bufferUint8[writeIndex++] = dbId >> 16 & 0xff;\n  bufferUint8[writeIndex] = 0; // dbIds are only vec3 in the shader\n}\n\n// We don't have THREE.Matrix3 in a worker, so that we cannot use getNormalTransform()\nfunction getNormalMatrix(matrix, dstMatrix) {\n\n  // eliminate translation part\n  dstMatrix.copy(matrix);\n  dstMatrix[12] = 0;\n  dstMatrix[13] = 0;\n  dstMatrix[14] = 0;\n\n  // tranpose of inverse\n  return dstMatrix.getInverse(dstMatrix).transpose();\n}\n\n/**\n   *  Transforms positions and normals of a vertex buffer range.\n   *\n   *  NOTE: Only interleaved buffers with packed normals are supported.\n   *\n   *   @param {GeomInfo}      geom\n   *   @param {Uint16Array}   vbUint16     - additional uint16-view to interleaved vertex-buffer\n   *   @param {LmvMatrix4}    matrix\n   *   @param {Number}        [rangeStart] - First vertex to transform. (default: 0)\n   *   @param {Number}        [rangeEnd]   - End of vertex range.       (default: #vertices)\n   *   @param {LmvMatrix4}    tmpMatrix    - reused tmp matrix\n   *   @param {LmvVector3}    tmpVec       - reused tmp vector\n   */\nvar transformVertexRange = function transformVertexRange(geom, vbUint16, matrix, rangeStart, rangeEnd, tmpMatrix, tmpVec) {\n\n  // transform positions\n  var posOffset = geom.posOffset;\n  for (var i = rangeStart; i < rangeEnd; i++) {\n\n    // read vertex position i\n    var offset = i * geom.vbstride + posOffset;\n    tmpVec.set(geom.vb[offset], geom.vb[offset + 1], geom.vb[offset + 2]);\n\n    tmpVec.applyMatrix4(matrix);\n\n    // write vertex position i\n    geom.vb[offset] = tmpVec.x;\n    geom.vb[offset + 1] = tmpVec.y;\n    geom.vb[offset + 2] = tmpVec.z;\n  }\n\n  // transform normals (if available)\n  if (geom.normalOffset !== -1) {\n\n    // To transform normals, we need an Uint16-view to the data.\n    // Packed normals are 2-component Uint16-vectors.\n    var uint16PerVertex = geom.vbstride * 2; // Multiply by 2, because vbstride and itemOffset\n    var uint16NormalOffset = geom.normalOffset * 2; // are counting 32Bit floats.\n    var maxUint16 = 0xFFFF;\n\n    // compute normal transform\n    var normalMatrix = getNormalMatrix(matrix, tmpMatrix);\n\n    // transform normal vectors\n    for (i = rangeStart; i < rangeEnd; i++) {\n      // read byte-normal of vertex i\n      var normalIndex = i * uint16PerVertex + uint16NormalOffset;\n      tmpVec.set(vbUint16[normalIndex], vbUint16[normalIndex + 1], 0.0);\n\n      // decode to vec3 with components in [0,1]\n      tmpVec.divideScalar(maxUint16);\n      decodeNormal(tmpVec);\n\n      // Note that normalMatrix is a LmvMatrix4 (although we only use 3x3 matrix)\n      tmpVec.applyMatrix4(normalMatrix);\n\n      // Note that encodeNormal requires normalized values. Although a decodedNormal is\n      // always normalized, the normalMatrix may involve a scaling.\n      tmpVec.normalize();\n\n      // encode back to 2-component uint16\n      encodeNormal(tmpVec);\n      tmpVec.multiplyScalar(maxUint16);\n\n      // write back to vertex buffer\n      vbUint16[normalIndex] = tmpVec.x;\n      vbUint16[normalIndex + 1] = tmpVec.y;\n    }\n  }\n};\n\n// read matrix i from Float32 array to target LmvMatrix4\nfunction getMatrix(index, array, target) {\n  // TypedArray.set does not support a srcOffset parameter. So we have to use manual copy here.\n  var offset = 16 * index;\n  for (var i = 0; i < 16; i++) {\n    target.elements[i] = array[i + offset];\n  }\n}\n\n/**\n   *  Run merge task. This can be done using Vector/Matrix types from THREE (in main) or LmvVector/LmvMatrix (worker).\n   *  To define which types to use while keeping the code independent, a preallocated matrix/vector must be provided.\n   *\n   *  @param {LmvMatrix4|THREE.Matrix4} matrix\n   *  @param {LmvVector3|THREE.Vector3} vector\n   *  @returns {Object} - merge result r, containing\n   *                        {number}       r.id:        task id\n   *                        {Float32Array} r.vb:        merged interleaved vertex buffer\n   *                        {Uint8Array}   r.vertexIds: buffer for separate per-vertex id attribute\n   */\nGeomMergeTask.prototype.run = function (matrix, vec) {\n\n  var vb = this.vb;\n  var vertexCount = vb.length / this.vbstride;\n\n  var tmpMatrix = matrix.clone();\n\n  // create buffer for per-vertex ids of consolidated mesh\n  var IDBytesPerVertex = 3;\n  var dstIds = new Uint8Array(IDBytesPerVertex * vertexCount);\n\n  // to transform normals, we need an Uint16-view to the interleaved vertex buffer.\n  // packed normals are 2-component Uin16-vectors.\n  var hasNormals = this.normalOffset !== -1;\n  var vbUint16 = hasNormals ? new Uint16Array(vb.buffer, vb.byteOffset, vb.length * 2) : null;\n\n  // transform vertex-range and write ids. Each range corresponds to a source fragment geometry\n  var ranges = this.ranges;\n  var matrices = this.matrices;\n  var numRanges = ranges.length - 1; // note that ranges contains an extra element for the last range end\n  for (var j = 0; j < numRanges; j++) {\n\n    // get vertex range corresponding to src geom i\n    var rangeBegin = ranges[j];\n    var rangeEnd = ranges[j + 1];\n\n    // get matrix for src geom i\n    getMatrix(j, matrices, matrix);\n\n    // transform vertex positions and normals in this range\n    transformVertexRange(this, vbUint16, matrix, rangeBegin, rangeEnd, tmpMatrix, vec);\n\n    // assign dbId to all vertices of this range\n    var dstIdsByteOffset = rangeBegin * IDBytesPerVertex;\n    var rangeLength = rangeEnd - rangeBegin;\n    var dbId = this.dbIds[j];\n    for (var k = 0; k < rangeLength; k++) {\n      writeIdToBuffer(dbId, dstIds, dstIdsByteOffset);\n      dstIdsByteOffset += IDBytesPerVertex;\n    }\n  }\n\n  // return result object. It contains everything we need to finish a single consolidated mesh.\n  return {\n    taskId: this.id,\n    vb: this.vb, // note that we have to pass back the byte-view\n    vertexIds: dstIds };\n\n};","/** @license zlib.js 2012 - imaya [ https://github.com/imaya/zlib.js ] The MIT License */(function() {'use strict';function m(a){throw a;}var p=void 0,t,aa=this;function v(a,b){var c=a.split(\".\"),d=aa;!(c[0]in d)&&d.execScript&&d.execScript(\"var \"+c[0]);for(var g;c.length&&(g=c.shift());)!c.length&&b!==p?d[g]=b:d=d[g]?d[g]:d[g]={}};var w=\"undefined\"!==typeof Uint8Array&&\"undefined\"!==typeof Uint16Array&&\"undefined\"!==typeof Uint32Array;new (w?Uint8Array:Array)(256);var x;for(x=0;256>x;++x)for(var y=x,ba=7,y=y>>>1;y;y>>>=1)--ba;var z=[0,1996959894,3993919788,2567524794,124634137,1886057615,3915621685,2657392035,249268274,2044508324,3772115230,2547177864,162941995,2125561021,3887607047,2428444049,498536548,1789927666,4089016648,2227061214,450548861,1843258603,4107580753,2211677639,325883990,1684777152,4251122042,2321926636,335633487,1661365465,4195302755,2366115317,997073096,1281953886,3579855332,2724688242,1006888145,1258607687,3524101629,2768942443,901097722,1119000684,3686517206,2898065728,853044451,1172266101,3705015759,\n2882616665,651767980,1373503546,3369554304,3218104598,565507253,1454621731,3485111705,3099436303,671266974,1594198024,3322730930,2970347812,795835527,1483230225,3244367275,3060149565,1994146192,31158534,2563907772,4023717930,1907459465,112637215,2680153253,3904427059,2013776290,251722036,2517215374,3775830040,2137656763,141376813,2439277719,3865271297,1802195444,476864866,2238001368,4066508878,1812370925,453092731,2181625025,4111451223,1706088902,314042704,2344532202,4240017532,1658658271,366619977,\n2362670323,4224994405,1303535960,984961486,2747007092,3569037538,1256170817,1037604311,2765210733,3554079995,1131014506,879679996,2909243462,3663771856,1141124467,855842277,2852801631,3708648649,1342533948,654459306,3188396048,3373015174,1466479909,544179635,3110523913,3462522015,1591671054,702138776,2966460450,3352799412,1504918807,783551873,3082640443,3233442989,3988292384,2596254646,62317068,1957810842,3939845945,2647816111,81470997,1943803523,3814918930,2489596804,225274430,2053790376,3826175755,\n2466906013,167816743,2097651377,4027552580,2265490386,503444072,1762050814,4150417245,2154129355,426522225,1852507879,4275313526,2312317920,282753626,1742555852,4189708143,2394877945,397917763,1622183637,3604390888,2714866558,953729732,1340076626,3518719985,2797360999,1068828381,1219638859,3624741850,2936675148,906185462,1090812512,3747672003,2825379669,829329135,1181335161,3412177804,3160834842,628085408,1382605366,3423369109,3138078467,570562233,1426400815,3317316542,2998733608,733239954,1555261956,\n3268935591,3050360625,752459403,1541320221,2607071920,3965973030,1969922972,40735498,2617837225,3943577151,1913087877,83908371,2512341634,3803740692,2075208622,213261112,2463272603,3855990285,2094854071,198958881,2262029012,4057260610,1759359992,534414190,2176718541,4139329115,1873836001,414664567,2282248934,4279200368,1711684554,285281116,2405801727,4167216745,1634467795,376229701,2685067896,3608007406,1308918612,956543938,2808555105,3495958263,1231636301,1047427035,2932959818,3654703836,1088359270,\n936918E3,2847714899,3736837829,1202900863,817233897,3183342108,3401237130,1404277552,615818150,3134207493,3453421203,1423857449,601450431,3009837614,3294710456,1567103746,711928724,3020668471,3272380065,1510334235,755167117],A=w?new Uint32Array(z):z;function B(a){var b=a.length,c=0,d=Number.POSITIVE_INFINITY,g,f,h,e,k,l,q,s,r;for(s=0;s<b;++s)a[s]>c&&(c=a[s]),a[s]<d&&(d=a[s]);g=1<<c;f=new (w?Uint32Array:Array)(g);h=1;e=0;for(k=2;h<=c;){for(s=0;s<b;++s)if(a[s]===h){l=0;q=e;for(r=0;r<h;++r)l=l<<1|q&1,q>>=1;for(r=l;r<g;r+=k)f[r]=h<<16|s;++e}++h;e<<=1;k<<=1}return[f,c,d]};var C=[],D;for(D=0;288>D;D++)switch(!0){case 143>=D:C.push([D+48,8]);break;case 255>=D:C.push([D-144+400,9]);break;case 279>=D:C.push([D-256+0,7]);break;case 287>=D:C.push([D-280+192,8]);break;default:m(\"invalid literal: \"+D)}\nvar ca=function(){function a(a){switch(!0){case 3===a:return[257,a-3,0];case 4===a:return[258,a-4,0];case 5===a:return[259,a-5,0];case 6===a:return[260,a-6,0];case 7===a:return[261,a-7,0];case 8===a:return[262,a-8,0];case 9===a:return[263,a-9,0];case 10===a:return[264,a-10,0];case 12>=a:return[265,a-11,1];case 14>=a:return[266,a-13,1];case 16>=a:return[267,a-15,1];case 18>=a:return[268,a-17,1];case 22>=a:return[269,a-19,2];case 26>=a:return[270,a-23,2];case 30>=a:return[271,a-27,2];case 34>=a:return[272,\na-31,2];case 42>=a:return[273,a-35,3];case 50>=a:return[274,a-43,3];case 58>=a:return[275,a-51,3];case 66>=a:return[276,a-59,3];case 82>=a:return[277,a-67,4];case 98>=a:return[278,a-83,4];case 114>=a:return[279,a-99,4];case 130>=a:return[280,a-115,4];case 162>=a:return[281,a-131,5];case 194>=a:return[282,a-163,5];case 226>=a:return[283,a-195,5];case 257>=a:return[284,a-227,5];case 258===a:return[285,a-258,0];default:m(\"invalid length: \"+a)}}var b=[],c,d;for(c=3;258>=c;c++)d=a(c),b[c]=d[2]<<24|d[1]<<\n16|d[0];return b}();w&&new Uint32Array(ca);function E(a,b){this.l=[];this.m=32768;this.d=this.f=this.c=this.t=0;this.input=w?new Uint8Array(a):a;this.u=!1;this.n=F;this.K=!1;if(b||!(b={}))b.index&&(this.c=b.index),b.bufferSize&&(this.m=b.bufferSize),b.bufferType&&(this.n=b.bufferType),b.resize&&(this.K=b.resize);switch(this.n){case G:this.a=32768;this.b=new (w?Uint8Array:Array)(32768+this.m+258);break;case F:this.a=0;this.b=new (w?Uint8Array:Array)(this.m);this.e=this.W;this.B=this.R;this.q=this.V;break;default:m(Error(\"invalid inflate mode\"))}}\nvar G=0,F=1;\nE.prototype.r=function(){for(;!this.u;){var a=H(this,3);a&1&&(this.u=!0);a>>>=1;switch(a){case 0:var b=this.input,c=this.c,d=this.b,g=this.a,f=p,h=p,e=p,k=d.length,l=p;this.d=this.f=0;f=b[c++];f===p&&m(Error(\"invalid uncompressed block header: LEN (first byte)\"));h=f;f=b[c++];f===p&&m(Error(\"invalid uncompressed block header: LEN (second byte)\"));h|=f<<8;f=b[c++];f===p&&m(Error(\"invalid uncompressed block header: NLEN (first byte)\"));e=f;f=b[c++];f===p&&m(Error(\"invalid uncompressed block header: NLEN (second byte)\"));e|=\nf<<8;h===~e&&m(Error(\"invalid uncompressed block header: length verify\"));c+h>b.length&&m(Error(\"input buffer is broken\"));switch(this.n){case G:for(;g+h>d.length;){l=k-g;h-=l;if(w)d.set(b.subarray(c,c+l),g),g+=l,c+=l;else for(;l--;)d[g++]=b[c++];this.a=g;d=this.e();g=this.a}break;case F:for(;g+h>d.length;)d=this.e({H:2});break;default:m(Error(\"invalid inflate mode\"))}if(w)d.set(b.subarray(c,c+h),g),g+=h,c+=h;else for(;h--;)d[g++]=b[c++];this.c=c;this.a=g;this.b=d;break;case 1:this.q(da,ea);break;\ncase 2:fa(this);break;default:m(Error(\"unknown BTYPE: \"+a))}}return this.B()};\nvar I=[16,17,18,0,8,7,9,6,10,5,11,4,12,3,13,2,14,1,15],J=w?new Uint16Array(I):I,K=[3,4,5,6,7,8,9,10,11,13,15,17,19,23,27,31,35,43,51,59,67,83,99,115,131,163,195,227,258,258,258],L=w?new Uint16Array(K):K,ga=[0,0,0,0,0,0,0,0,1,1,1,1,2,2,2,2,3,3,3,3,4,4,4,4,5,5,5,5,0,0,0],O=w?new Uint8Array(ga):ga,ha=[1,2,3,4,5,7,9,13,17,25,33,49,65,97,129,193,257,385,513,769,1025,1537,2049,3073,4097,6145,8193,12289,16385,24577],ia=w?new Uint16Array(ha):ha,ja=[0,0,0,0,1,1,2,2,3,3,4,4,5,5,6,6,7,7,8,8,9,9,10,10,11,11,\n12,12,13,13],P=w?new Uint8Array(ja):ja,Q=new (w?Uint8Array:Array)(288),R,la;R=0;for(la=Q.length;R<la;++R)Q[R]=143>=R?8:255>=R?9:279>=R?7:8;var da=B(Q),S=new (w?Uint8Array:Array)(30),T,ma;T=0;for(ma=S.length;T<ma;++T)S[T]=5;var ea=B(S);function H(a,b){for(var c=a.f,d=a.d,g=a.input,f=a.c,h;d<b;)h=g[f++],h===p&&m(Error(\"input buffer is broken\")),c|=h<<d,d+=8;h=c&(1<<b)-1;a.f=c>>>b;a.d=d-b;a.c=f;return h}\nfunction U(a,b){for(var c=a.f,d=a.d,g=a.input,f=a.c,h=b[0],e=b[1],k,l,q;d<e;){k=g[f++];if(k===p)break;c|=k<<d;d+=8}l=h[c&(1<<e)-1];q=l>>>16;a.f=c>>q;a.d=d-q;a.c=f;return l&65535}\nfunction fa(a){function b(a,b,c){var d,e,f,g;for(g=0;g<a;)switch(d=U(this,b),d){case 16:for(f=3+H(this,2);f--;)c[g++]=e;break;case 17:for(f=3+H(this,3);f--;)c[g++]=0;e=0;break;case 18:for(f=11+H(this,7);f--;)c[g++]=0;e=0;break;default:e=c[g++]=d}return c}var c=H(a,5)+257,d=H(a,5)+1,g=H(a,4)+4,f=new (w?Uint8Array:Array)(J.length),h,e,k,l;for(l=0;l<g;++l)f[J[l]]=H(a,3);h=B(f);e=new (w?Uint8Array:Array)(c);k=new (w?Uint8Array:Array)(d);a.q(B(b.call(a,c,h,e)),B(b.call(a,d,h,k)))}t=E.prototype;\nt.q=function(a,b){var c=this.b,d=this.a;this.C=a;for(var g=c.length-258,f,h,e,k;256!==(f=U(this,a));)if(256>f)d>=g&&(this.a=d,c=this.e(),d=this.a),c[d++]=f;else{h=f-257;k=L[h];0<O[h]&&(k+=H(this,O[h]));f=U(this,b);e=ia[f];0<P[f]&&(e+=H(this,P[f]));d>=g&&(this.a=d,c=this.e(),d=this.a);for(;k--;)c[d]=c[d++-e]}for(;8<=this.d;)this.d-=8,this.c--;this.a=d};\nt.V=function(a,b){var c=this.b,d=this.a;this.C=a;for(var g=c.length,f,h,e,k;256!==(f=U(this,a));)if(256>f)d>=g&&(c=this.e(),g=c.length),c[d++]=f;else{h=f-257;k=L[h];0<O[h]&&(k+=H(this,O[h]));f=U(this,b);e=ia[f];0<P[f]&&(e+=H(this,P[f]));d+k>g&&(c=this.e(),g=c.length);for(;k--;)c[d]=c[d++-e]}for(;8<=this.d;)this.d-=8,this.c--;this.a=d};\nt.e=function(){var a=new (w?Uint8Array:Array)(this.a-32768),b=this.a-32768,c,d,g=this.b;if(w)a.set(g.subarray(32768,a.length));else{c=0;for(d=a.length;c<d;++c)a[c]=g[c+32768]}this.l.push(a);this.t+=a.length;if(w)g.set(g.subarray(b,b+32768));else for(c=0;32768>c;++c)g[c]=g[b+c];this.a=32768;return g};\nt.W=function(a){var b,c=this.input.length/this.c+1|0,d,g,f,h=this.input,e=this.b;a&&(\"number\"===typeof a.H&&(c=a.H),\"number\"===typeof a.P&&(c+=a.P));2>c?(d=(h.length-this.c)/this.C[2],f=258*(d/2)|0,g=f<e.length?e.length+f:e.length<<1):g=e.length*c;w?(b=new Uint8Array(g),b.set(e)):b=e;return this.b=b};\nt.B=function(){var a=0,b=this.b,c=this.l,d,g=new (w?Uint8Array:Array)(this.t+(this.a-32768)),f,h,e,k;if(0===c.length)return w?this.b.subarray(32768,this.a):this.b.slice(32768,this.a);f=0;for(h=c.length;f<h;++f){d=c[f];e=0;for(k=d.length;e<k;++e)g[a++]=d[e]}f=32768;for(h=this.a;f<h;++f)g[a++]=b[f];this.l=[];return this.buffer=g};\nt.R=function(){var a,b=this.a;w?this.K?(a=new Uint8Array(b),a.set(this.b.subarray(0,b))):a=this.b.subarray(0,b):(this.b.length>b&&(this.b.length=b),a=this.b);return this.buffer=a};function V(a){a=a||{};this.files=[];this.v=a.comment}V.prototype.L=function(a){this.j=a};V.prototype.s=function(a){var b=a[2]&65535|2;return b*(b^1)>>8&255};V.prototype.k=function(a,b){a[0]=(A[(a[0]^b)&255]^a[0]>>>8)>>>0;a[1]=(6681*(20173*(a[1]+(a[0]&255))>>>0)>>>0)+1>>>0;a[2]=(A[(a[2]^a[1]>>>24)&255]^a[2]>>>8)>>>0};V.prototype.T=function(a){var b=[305419896,591751049,878082192],c,d;w&&(b=new Uint32Array(b));c=0;for(d=a.length;c<d;++c)this.k(b,a[c]&255);return b};function W(a,b){b=b||{};this.input=w&&a instanceof Array?new Uint8Array(a):a;this.c=0;this.ba=b.verify||!1;this.j=b.password}var na={O:0,M:8},X=[80,75,1,2],Y=[80,75,3,4],Z=[80,75,5,6];function oa(a,b){this.input=a;this.offset=b}\noa.prototype.parse=function(){var a=this.input,b=this.offset;(a[b++]!==X[0]||a[b++]!==X[1]||a[b++]!==X[2]||a[b++]!==X[3])&&m(Error(\"invalid file header signature\"));this.version=a[b++];this.ia=a[b++];this.Z=a[b++]|a[b++]<<8;this.I=a[b++]|a[b++]<<8;this.A=a[b++]|a[b++]<<8;this.time=a[b++]|a[b++]<<8;this.U=a[b++]|a[b++]<<8;this.p=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.z=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.J=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.h=a[b++]|a[b++]<<\n8;this.g=a[b++]|a[b++]<<8;this.F=a[b++]|a[b++]<<8;this.ea=a[b++]|a[b++]<<8;this.ga=a[b++]|a[b++]<<8;this.fa=a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24;this.$=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.filename=String.fromCharCode.apply(null,w?a.subarray(b,b+=this.h):a.slice(b,b+=this.h));this.X=w?a.subarray(b,b+=this.g):a.slice(b,b+=this.g);this.v=w?a.subarray(b,b+this.F):a.slice(b,b+this.F);this.length=b-this.offset};function pa(a,b){this.input=a;this.offset=b}var qa={N:1,ca:8,da:2048};\npa.prototype.parse=function(){var a=this.input,b=this.offset;(a[b++]!==Y[0]||a[b++]!==Y[1]||a[b++]!==Y[2]||a[b++]!==Y[3])&&m(Error(\"invalid local file header signature\"));this.Z=a[b++]|a[b++]<<8;this.I=a[b++]|a[b++]<<8;this.A=a[b++]|a[b++]<<8;this.time=a[b++]|a[b++]<<8;this.U=a[b++]|a[b++]<<8;this.p=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.z=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.J=(a[b++]|a[b++]<<8|a[b++]<<16|a[b++]<<24)>>>0;this.h=a[b++]|a[b++]<<8;this.g=a[b++]|a[b++]<<8;this.filename=\nString.fromCharCode.apply(null,w?a.subarray(b,b+=this.h):a.slice(b,b+=this.h));this.X=w?a.subarray(b,b+=this.g):a.slice(b,b+=this.g);this.length=b-this.offset};\nfunction $(a){var b=[],c={},d,g,f,h;if(!a.i){if(a.o===p){var e=a.input,k;if(!a.D)a:{var l=a.input,q;for(q=l.length-12;0<q;--q)if(l[q]===Z[0]&&l[q+1]===Z[1]&&l[q+2]===Z[2]&&l[q+3]===Z[3]){a.D=q;break a}m(Error(\"End of Central Directory Record not found\"))}k=a.D;(e[k++]!==Z[0]||e[k++]!==Z[1]||e[k++]!==Z[2]||e[k++]!==Z[3])&&m(Error(\"invalid signature\"));a.ha=e[k++]|e[k++]<<8;a.ja=e[k++]|e[k++]<<8;a.ka=e[k++]|e[k++]<<8;a.aa=e[k++]|e[k++]<<8;a.Q=(e[k++]|e[k++]<<8|e[k++]<<16|e[k++]<<24)>>>0;a.o=(e[k++]|\ne[k++]<<8|e[k++]<<16|e[k++]<<24)>>>0;a.w=e[k++]|e[k++]<<8;a.v=w?e.subarray(k,k+a.w):e.slice(k,k+a.w)}d=a.o;f=0;for(h=a.aa;f<h;++f)g=new oa(a.input,d),g.parse(),d+=g.length,b[f]=g,c[g.filename]=f;a.Q<d-a.o&&m(Error(\"invalid file header size\"));a.i=b;a.G=c}}t=W.prototype;t.Y=function(){var a=[],b,c,d;this.i||$(this);d=this.i;b=0;for(c=d.length;b<c;++b)a[b]=d[b].filename;return a};\nt.r=function(a,b){var c;this.G||$(this);c=this.G[a];c===p&&m(Error(a+\" not found\"));var d;d=b||{};var g=this.input,f=this.i,h,e,k,l,q,s,r,M;f||$(this);f[c]===p&&m(Error(\"wrong index\"));e=f[c].$;h=new pa(this.input,e);h.parse();e+=h.length;k=h.z;if(0!==(h.I&qa.N)){!d.password&&!this.j&&m(Error(\"please set password\"));s=this.S(d.password||this.j);r=e;for(M=e+12;r<M;++r)ra(this,s,g[r]);e+=12;k-=12;r=e;for(M=e+k;r<M;++r)g[r]=ra(this,s,g[r])}switch(h.A){case na.O:l=w?this.input.subarray(e,e+k):this.input.slice(e,\ne+k);break;case na.M:l=(new E(this.input,{index:e,bufferSize:h.J})).r();break;default:m(Error(\"unknown compression type\"))}if(this.ba){var u=p,n,N=\"number\"===typeof u?u:u=0,ka=l.length;n=-1;for(N=ka&7;N--;++u)n=n>>>8^A[(n^l[u])&255];for(N=ka>>3;N--;u+=8)n=n>>>8^A[(n^l[u])&255],n=n>>>8^A[(n^l[u+1])&255],n=n>>>8^A[(n^l[u+2])&255],n=n>>>8^A[(n^l[u+3])&255],n=n>>>8^A[(n^l[u+4])&255],n=n>>>8^A[(n^l[u+5])&255],n=n>>>8^A[(n^l[u+6])&255],n=n>>>8^A[(n^l[u+7])&255];q=(n^4294967295)>>>0;h.p!==q&&m(Error(\"wrong crc: file=0x\"+\nh.p.toString(16)+\", data=0x\"+q.toString(16)))}return l};t.L=function(a){this.j=a};function ra(a,b,c){c^=a.s(b);a.k(b,c);return c}t.k=V.prototype.k;t.S=V.prototype.T;t.s=V.prototype.s;v(\"Zlib.Unzip\",W);v(\"Zlib.Unzip.prototype.decompress\",W.prototype.r);v(\"Zlib.Unzip.prototype.getFilenames\",W.prototype.Y);v(\"Zlib.Unzip.prototype.setPassword\",W.prototype.L);}).call(this);\n"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACbtaxlDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnj1DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzxnhDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrstDA;AACA;;;;;;;;;;;;;ACDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrdznjDA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACztjtayxjcvpzvcttehmtIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACzzRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACppBA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACnlpWA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjtjIA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxtrxvjhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC1MA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7gnwBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxlrOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}